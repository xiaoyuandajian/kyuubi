// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/expressions.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * Protobuf type {@code spark.connect.PythonUDF}
 */
public final class PythonUDF extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.PythonUDF)
    PythonUDFOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PythonUDF.newBuilder() to construct.
  private PythonUDF(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PythonUDF() {
    command_ = com.google.protobuf.ByteString.EMPTY;
    pythonVer_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new PythonUDF();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Expressions.internal_static_spark_connect_PythonUDF_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Expressions.internal_static_spark_connect_PythonUDF_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.PythonUDF.class, org.apache.spark.connect.proto.PythonUDF.Builder.class);
  }

  public static final int OUTPUT_TYPE_FIELD_NUMBER = 1;
  private org.apache.spark.connect.proto.DataType outputType_;
  /**
   * <pre>
   * (Required) Output type of the Python UDF
   * </pre>
   *
   * <code>.spark.connect.DataType output_type = 1;</code>
   * @return Whether the outputType field is set.
   */
  @Override
  public boolean hasOutputType() {
    return outputType_ != null;
  }
  /**
   * <pre>
   * (Required) Output type of the Python UDF
   * </pre>
   *
   * <code>.spark.connect.DataType output_type = 1;</code>
   * @return The outputType.
   */
  @Override
  public org.apache.spark.connect.proto.DataType getOutputType() {
    return outputType_ == null ? org.apache.spark.connect.proto.DataType.getDefaultInstance() : outputType_;
  }
  /**
   * <pre>
   * (Required) Output type of the Python UDF
   * </pre>
   *
   * <code>.spark.connect.DataType output_type = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.DataTypeOrBuilder getOutputTypeOrBuilder() {
    return outputType_ == null ? org.apache.spark.connect.proto.DataType.getDefaultInstance() : outputType_;
  }

  public static final int EVAL_TYPE_FIELD_NUMBER = 2;
  private int evalType_ = 0;
  /**
   * <pre>
   * (Required) EvalType of the Python UDF
   * </pre>
   *
   * <code>int32 eval_type = 2;</code>
   * @return The evalType.
   */
  @Override
  public int getEvalType() {
    return evalType_;
  }

  public static final int COMMAND_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString command_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * (Required) The encoded commands of the Python UDF
   * </pre>
   *
   * <code>bytes command = 3;</code>
   * @return The command.
   */
  @Override
  public com.google.protobuf.ByteString getCommand() {
    return command_;
  }

  public static final int PYTHON_VER_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private volatile Object pythonVer_ = "";
  /**
   * <pre>
   * (Required) Python version being used in the client.
   * </pre>
   *
   * <code>string python_ver = 4;</code>
   * @return The pythonVer.
   */
  @Override
  public String getPythonVer() {
    Object ref = pythonVer_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      pythonVer_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Required) Python version being used in the client.
   * </pre>
   *
   * <code>string python_ver = 4;</code>
   * @return The bytes for pythonVer.
   */
  @Override
  public com.google.protobuf.ByteString
      getPythonVerBytes() {
    Object ref = pythonVer_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      pythonVer_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (outputType_ != null) {
      output.writeMessage(1, getOutputType());
    }
    if (evalType_ != 0) {
      output.writeInt32(2, evalType_);
    }
    if (!command_.isEmpty()) {
      output.writeBytes(3, command_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(pythonVer_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, pythonVer_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (outputType_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getOutputType());
    }
    if (evalType_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, evalType_);
    }
    if (!command_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, command_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(pythonVer_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, pythonVer_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.PythonUDF)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.PythonUDF other = (org.apache.spark.connect.proto.PythonUDF) obj;

    if (hasOutputType() != other.hasOutputType()) return false;
    if (hasOutputType()) {
      if (!getOutputType()
          .equals(other.getOutputType())) return false;
    }
    if (getEvalType()
        != other.getEvalType()) return false;
    if (!getCommand()
        .equals(other.getCommand())) return false;
    if (!getPythonVer()
        .equals(other.getPythonVer())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasOutputType()) {
      hash = (37 * hash) + OUTPUT_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getOutputType().hashCode();
    }
    hash = (37 * hash) + EVAL_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + getEvalType();
    hash = (37 * hash) + COMMAND_FIELD_NUMBER;
    hash = (53 * hash) + getCommand().hashCode();
    hash = (37 * hash) + PYTHON_VER_FIELD_NUMBER;
    hash = (53 * hash) + getPythonVer().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.PythonUDF parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.PythonUDF parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.PythonUDF parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.PythonUDF parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.PythonUDF parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.PythonUDF parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.PythonUDF parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.PythonUDF parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.PythonUDF parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.PythonUDF parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.PythonUDF parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.PythonUDF parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.PythonUDF prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code spark.connect.PythonUDF}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.PythonUDF)
      org.apache.spark.connect.proto.PythonUDFOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Expressions.internal_static_spark_connect_PythonUDF_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Expressions.internal_static_spark_connect_PythonUDF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.PythonUDF.class, org.apache.spark.connect.proto.PythonUDF.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.PythonUDF.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      outputType_ = null;
      if (outputTypeBuilder_ != null) {
        outputTypeBuilder_.dispose();
        outputTypeBuilder_ = null;
      }
      evalType_ = 0;
      command_ = com.google.protobuf.ByteString.EMPTY;
      pythonVer_ = "";
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Expressions.internal_static_spark_connect_PythonUDF_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.PythonUDF getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.PythonUDF.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.PythonUDF build() {
      org.apache.spark.connect.proto.PythonUDF result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.PythonUDF buildPartial() {
      org.apache.spark.connect.proto.PythonUDF result = new org.apache.spark.connect.proto.PythonUDF(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.spark.connect.proto.PythonUDF result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.outputType_ = outputTypeBuilder_ == null
            ? outputType_
            : outputTypeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.evalType_ = evalType_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.command_ = command_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.pythonVer_ = pythonVer_;
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.PythonUDF) {
        return mergeFrom((org.apache.spark.connect.proto.PythonUDF)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.PythonUDF other) {
      if (other == org.apache.spark.connect.proto.PythonUDF.getDefaultInstance()) return this;
      if (other.hasOutputType()) {
        mergeOutputType(other.getOutputType());
      }
      if (other.getEvalType() != 0) {
        setEvalType(other.getEvalType());
      }
      if (other.getCommand() != com.google.protobuf.ByteString.EMPTY) {
        setCommand(other.getCommand());
      }
      if (!other.getPythonVer().isEmpty()) {
        pythonVer_ = other.pythonVer_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getOutputTypeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              evalType_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              command_ = input.readBytes();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              pythonVer_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.apache.spark.connect.proto.DataType outputType_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.DataType, org.apache.spark.connect.proto.DataType.Builder, org.apache.spark.connect.proto.DataTypeOrBuilder> outputTypeBuilder_;
    /**
     * <pre>
     * (Required) Output type of the Python UDF
     * </pre>
     *
     * <code>.spark.connect.DataType output_type = 1;</code>
     * @return Whether the outputType field is set.
     */
    public boolean hasOutputType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Required) Output type of the Python UDF
     * </pre>
     *
     * <code>.spark.connect.DataType output_type = 1;</code>
     * @return The outputType.
     */
    public org.apache.spark.connect.proto.DataType getOutputType() {
      if (outputTypeBuilder_ == null) {
        return outputType_ == null ? org.apache.spark.connect.proto.DataType.getDefaultInstance() : outputType_;
      } else {
        return outputTypeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Output type of the Python UDF
     * </pre>
     *
     * <code>.spark.connect.DataType output_type = 1;</code>
     */
    public Builder setOutputType(org.apache.spark.connect.proto.DataType value) {
      if (outputTypeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outputType_ = value;
      } else {
        outputTypeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Output type of the Python UDF
     * </pre>
     *
     * <code>.spark.connect.DataType output_type = 1;</code>
     */
    public Builder setOutputType(
        org.apache.spark.connect.proto.DataType.Builder builderForValue) {
      if (outputTypeBuilder_ == null) {
        outputType_ = builderForValue.build();
      } else {
        outputTypeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Output type of the Python UDF
     * </pre>
     *
     * <code>.spark.connect.DataType output_type = 1;</code>
     */
    public Builder mergeOutputType(org.apache.spark.connect.proto.DataType value) {
      if (outputTypeBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          outputType_ != null &&
          outputType_ != org.apache.spark.connect.proto.DataType.getDefaultInstance()) {
          getOutputTypeBuilder().mergeFrom(value);
        } else {
          outputType_ = value;
        }
      } else {
        outputTypeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Output type of the Python UDF
     * </pre>
     *
     * <code>.spark.connect.DataType output_type = 1;</code>
     */
    public Builder clearOutputType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      outputType_ = null;
      if (outputTypeBuilder_ != null) {
        outputTypeBuilder_.dispose();
        outputTypeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Output type of the Python UDF
     * </pre>
     *
     * <code>.spark.connect.DataType output_type = 1;</code>
     */
    public org.apache.spark.connect.proto.DataType.Builder getOutputTypeBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getOutputTypeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Output type of the Python UDF
     * </pre>
     *
     * <code>.spark.connect.DataType output_type = 1;</code>
     */
    public org.apache.spark.connect.proto.DataTypeOrBuilder getOutputTypeOrBuilder() {
      if (outputTypeBuilder_ != null) {
        return outputTypeBuilder_.getMessageOrBuilder();
      } else {
        return outputType_ == null ?
            org.apache.spark.connect.proto.DataType.getDefaultInstance() : outputType_;
      }
    }
    /**
     * <pre>
     * (Required) Output type of the Python UDF
     * </pre>
     *
     * <code>.spark.connect.DataType output_type = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.DataType, org.apache.spark.connect.proto.DataType.Builder, org.apache.spark.connect.proto.DataTypeOrBuilder> 
        getOutputTypeFieldBuilder() {
      if (outputTypeBuilder_ == null) {
        outputTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.DataType, org.apache.spark.connect.proto.DataType.Builder, org.apache.spark.connect.proto.DataTypeOrBuilder>(
                getOutputType(),
                getParentForChildren(),
                isClean());
        outputType_ = null;
      }
      return outputTypeBuilder_;
    }

    private int evalType_ ;
    /**
     * <pre>
     * (Required) EvalType of the Python UDF
     * </pre>
     *
     * <code>int32 eval_type = 2;</code>
     * @return The evalType.
     */
    @Override
    public int getEvalType() {
      return evalType_;
    }
    /**
     * <pre>
     * (Required) EvalType of the Python UDF
     * </pre>
     *
     * <code>int32 eval_type = 2;</code>
     * @param value The evalType to set.
     * @return This builder for chaining.
     */
    public Builder setEvalType(int value) {

      evalType_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) EvalType of the Python UDF
     * </pre>
     *
     * <code>int32 eval_type = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearEvalType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      evalType_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString command_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * (Required) The encoded commands of the Python UDF
     * </pre>
     *
     * <code>bytes command = 3;</code>
     * @return The command.
     */
    @Override
    public com.google.protobuf.ByteString getCommand() {
      return command_;
    }
    /**
     * <pre>
     * (Required) The encoded commands of the Python UDF
     * </pre>
     *
     * <code>bytes command = 3;</code>
     * @param value The command to set.
     * @return This builder for chaining.
     */
    public Builder setCommand(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      command_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The encoded commands of the Python UDF
     * </pre>
     *
     * <code>bytes command = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearCommand() {
      bitField0_ = (bitField0_ & ~0x00000004);
      command_ = getDefaultInstance().getCommand();
      onChanged();
      return this;
    }

    private Object pythonVer_ = "";
    /**
     * <pre>
     * (Required) Python version being used in the client.
     * </pre>
     *
     * <code>string python_ver = 4;</code>
     * @return The pythonVer.
     */
    public String getPythonVer() {
      Object ref = pythonVer_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        pythonVer_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * (Required) Python version being used in the client.
     * </pre>
     *
     * <code>string python_ver = 4;</code>
     * @return The bytes for pythonVer.
     */
    public com.google.protobuf.ByteString
        getPythonVerBytes() {
      Object ref = pythonVer_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        pythonVer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Required) Python version being used in the client.
     * </pre>
     *
     * <code>string python_ver = 4;</code>
     * @param value The pythonVer to set.
     * @return This builder for chaining.
     */
    public Builder setPythonVer(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      pythonVer_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Python version being used in the client.
     * </pre>
     *
     * <code>string python_ver = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPythonVer() {
      pythonVer_ = getDefaultInstance().getPythonVer();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Python version being used in the client.
     * </pre>
     *
     * <code>string python_ver = 4;</code>
     * @param value The bytes for pythonVer to set.
     * @return This builder for chaining.
     */
    public Builder setPythonVerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      pythonVer_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.PythonUDF)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.PythonUDF)
  private static final org.apache.spark.connect.proto.PythonUDF DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.PythonUDF();
  }

  public static org.apache.spark.connect.proto.PythonUDF getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PythonUDF>
      PARSER = new com.google.protobuf.AbstractParser<PythonUDF>() {
    @Override
    public PythonUDF parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<PythonUDF> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<PythonUDF> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.PythonUDF getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

