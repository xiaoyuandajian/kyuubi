// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Response to checking artifact statuses.
 * </pre>
 *
 * Protobuf type {@code spark.connect.ArtifactStatusesResponse}
 */
public final class ArtifactStatusesResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.ArtifactStatusesResponse)
    ArtifactStatusesResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ArtifactStatusesResponse.newBuilder() to construct.
  private ArtifactStatusesResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ArtifactStatusesResponse() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new ArtifactStatusesResponse();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 1:
        return internalGetStatuses();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.ArtifactStatusesResponse.class, org.apache.spark.connect.proto.ArtifactStatusesResponse.Builder.class);
  }

  public interface ArtifactStatusOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.ArtifactStatusesResponse.ArtifactStatus)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Exists or not particular artifact at the server.
     * </pre>
     *
     * <code>bool exists = 1;</code>
     * @return The exists.
     */
    boolean getExists();
  }
  /**
   * Protobuf type {@code spark.connect.ArtifactStatusesResponse.ArtifactStatus}
   */
  public static final class ArtifactStatus extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.ArtifactStatusesResponse.ArtifactStatus)
      ArtifactStatusOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ArtifactStatus.newBuilder() to construct.
    private ArtifactStatus(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ArtifactStatus() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new ArtifactStatus();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_ArtifactStatus_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_ArtifactStatus_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus.class, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus.Builder.class);
    }

    public static final int EXISTS_FIELD_NUMBER = 1;
    private boolean exists_ = false;
    /**
     * <pre>
     * Exists or not particular artifact at the server.
     * </pre>
     *
     * <code>bool exists = 1;</code>
     * @return The exists.
     */
    @Override
    public boolean getExists() {
      return exists_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (exists_ != false) {
        output.writeBool(1, exists_);
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (exists_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, exists_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus other = (org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus) obj;

      if (getExists()
          != other.getExists()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EXISTS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getExists());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.ArtifactStatusesResponse.ArtifactStatus}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.ArtifactStatusesResponse.ArtifactStatus)
        org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatusOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_ArtifactStatus_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_ArtifactStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus.class, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        exists_ = false;
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_ArtifactStatus_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus build() {
        org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus buildPartial() {
        org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus result = new org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.exists_ = exists_;
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus) {
          return mergeFrom((org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus other) {
        if (other == org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus.getDefaultInstance()) return this;
        if (other.getExists() != false) {
          setExists(other.getExists());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                exists_ = input.readBool();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private boolean exists_ ;
      /**
       * <pre>
       * Exists or not particular artifact at the server.
       * </pre>
       *
       * <code>bool exists = 1;</code>
       * @return The exists.
       */
      @Override
      public boolean getExists() {
        return exists_;
      }
      /**
       * <pre>
       * Exists or not particular artifact at the server.
       * </pre>
       *
       * <code>bool exists = 1;</code>
       * @param value The exists to set.
       * @return This builder for chaining.
       */
      public Builder setExists(boolean value) {

        exists_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Exists or not particular artifact at the server.
       * </pre>
       *
       * <code>bool exists = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearExists() {
        bitField0_ = (bitField0_ & ~0x00000001);
        exists_ = false;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.ArtifactStatusesResponse.ArtifactStatus)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.ArtifactStatusesResponse.ArtifactStatus)
    private static final org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus();
    }

    public static org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ArtifactStatus>
        PARSER = new com.google.protobuf.AbstractParser<ArtifactStatus>() {
      @Override
      public ArtifactStatus parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ArtifactStatus> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<ArtifactStatus> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int STATUSES_FIELD_NUMBER = 1;
  private static final class StatusesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> defaultEntry =
            com.google.protobuf.MapEntry
            .<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus>newDefaultInstance(
                org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_StatusesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> statuses_;
  private com.google.protobuf.MapField<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus>
  internalGetStatuses() {
    if (statuses_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          StatusesDefaultEntryHolder.defaultEntry);
    }
    return statuses_;
  }
  public int getStatusesCount() {
    return internalGetStatuses().getMap().size();
  }
  /**
   * <pre>
   * A map of artifact names to their statuses.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
   */
  @Override
  public boolean containsStatuses(
      String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetStatuses().getMap().containsKey(key);
  }
  /**
   * Use {@link #getStatusesMap()} instead.
   */
  @Override
  @Deprecated
  public java.util.Map<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> getStatuses() {
    return getStatusesMap();
  }
  /**
   * <pre>
   * A map of artifact names to their statuses.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
   */
  @Override
  public java.util.Map<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> getStatusesMap() {
    return internalGetStatuses().getMap();
  }
  /**
   * <pre>
   * A map of artifact names to their statuses.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
   */
  @Override
  public /* nullable */
org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus getStatusesOrDefault(
      String key,
      /* nullable */
org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> map =
        internalGetStatuses().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * A map of artifact names to their statuses.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus getStatusesOrThrow(
      String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> map =
        internalGetStatuses().getMap();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetStatuses(),
        StatusesDefaultEntryHolder.defaultEntry,
        1);
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> entry
         : internalGetStatuses().getMap().entrySet()) {
      com.google.protobuf.MapEntry<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus>
      statuses__ = StatusesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, statuses__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.ArtifactStatusesResponse)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.ArtifactStatusesResponse other = (org.apache.spark.connect.proto.ArtifactStatusesResponse) obj;

    if (!internalGetStatuses().equals(
        other.internalGetStatuses())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetStatuses().getMap().isEmpty()) {
      hash = (37 * hash) + STATUSES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetStatuses().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.ArtifactStatusesResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.ArtifactStatusesResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Response to checking artifact statuses.
   * </pre>
   *
   * Protobuf type {@code spark.connect.ArtifactStatusesResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.ArtifactStatusesResponse)
      org.apache.spark.connect.proto.ArtifactStatusesResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetStatuses();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableStatuses();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.ArtifactStatusesResponse.class, org.apache.spark.connect.proto.ArtifactStatusesResponse.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.ArtifactStatusesResponse.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      internalGetMutableStatuses().clear();
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ArtifactStatusesResponse_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.ArtifactStatusesResponse getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.ArtifactStatusesResponse.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.ArtifactStatusesResponse build() {
      org.apache.spark.connect.proto.ArtifactStatusesResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.ArtifactStatusesResponse buildPartial() {
      org.apache.spark.connect.proto.ArtifactStatusesResponse result = new org.apache.spark.connect.proto.ArtifactStatusesResponse(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.spark.connect.proto.ArtifactStatusesResponse result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.statuses_ = internalGetStatuses();
        result.statuses_.makeImmutable();
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.ArtifactStatusesResponse) {
        return mergeFrom((org.apache.spark.connect.proto.ArtifactStatusesResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.ArtifactStatusesResponse other) {
      if (other == org.apache.spark.connect.proto.ArtifactStatusesResponse.getDefaultInstance()) return this;
      internalGetMutableStatuses().mergeFrom(
          other.internalGetStatuses());
      bitField0_ |= 0x00000001;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.MapEntry<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus>
              statuses__ = input.readMessage(
                  StatusesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableStatuses().getMutableMap().put(
                  statuses__.getKey(), statuses__.getValue());
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> statuses_;
    private com.google.protobuf.MapField<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus>
        internalGetStatuses() {
      if (statuses_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StatusesDefaultEntryHolder.defaultEntry);
      }
      return statuses_;
    }
    private com.google.protobuf.MapField<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus>
        internalGetMutableStatuses() {
      if (statuses_ == null) {
        statuses_ = com.google.protobuf.MapField.newMapField(
            StatusesDefaultEntryHolder.defaultEntry);
      }
      if (!statuses_.isMutable()) {
        statuses_ = statuses_.copy();
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return statuses_;
    }
    public int getStatusesCount() {
      return internalGetStatuses().getMap().size();
    }
    /**
     * <pre>
     * A map of artifact names to their statuses.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
     */
    @Override
    public boolean containsStatuses(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetStatuses().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStatusesMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> getStatuses() {
      return getStatusesMap();
    }
    /**
     * <pre>
     * A map of artifact names to their statuses.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
     */
    @Override
    public java.util.Map<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> getStatusesMap() {
      return internalGetStatuses().getMap();
    }
    /**
     * <pre>
     * A map of artifact names to their statuses.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
     */
    @Override
    public /* nullable */
org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus getStatusesOrDefault(
        String key,
        /* nullable */
org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> map =
          internalGetStatuses().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map of artifact names to their statuses.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
     */
    @Override
    public org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus getStatusesOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> map =
          internalGetStatuses().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearStatuses() {
      bitField0_ = (bitField0_ & ~0x00000001);
      internalGetMutableStatuses().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * A map of artifact names to their statuses.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
     */
    public Builder removeStatuses(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableStatuses().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @Deprecated
    public java.util.Map<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus>
        getMutableStatuses() {
      bitField0_ |= 0x00000001;
      return internalGetMutableStatuses().getMutableMap();
    }
    /**
     * <pre>
     * A map of artifact names to their statuses.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
     */
    public Builder putStatuses(
        String key,
        org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableStatuses().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * A map of artifact names to their statuses.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;</code>
     */
    public Builder putAllStatuses(
        java.util.Map<String, org.apache.spark.connect.proto.ArtifactStatusesResponse.ArtifactStatus> values) {
      internalGetMutableStatuses().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000001;
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.ArtifactStatusesResponse)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.ArtifactStatusesResponse)
  private static final org.apache.spark.connect.proto.ArtifactStatusesResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.ArtifactStatusesResponse();
  }

  public static org.apache.spark.connect.proto.ArtifactStatusesResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ArtifactStatusesResponse>
      PARSER = new com.google.protobuf.AbstractParser<ArtifactStatusesResponse>() {
    @Override
    public ArtifactStatusesResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ArtifactStatusesResponse> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<ArtifactStatusesResponse> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.ArtifactStatusesResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

