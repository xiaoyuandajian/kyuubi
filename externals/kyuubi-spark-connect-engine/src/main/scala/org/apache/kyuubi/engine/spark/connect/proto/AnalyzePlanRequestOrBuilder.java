// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface AnalyzePlanRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.AnalyzePlanRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Required)
   *
   * The session_id specifies a spark session for a user id (which is specified
   * by user_context.user_id). The session_id is set by the client to be able to
   * collate streaming responses from different queries within the dedicated session.
   * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
   * </pre>
   *
   * <code>string session_id = 1;</code>
   * @return The sessionId.
   */
  String getSessionId();
  /**
   * <pre>
   * (Required)
   *
   * The session_id specifies a spark session for a user id (which is specified
   * by user_context.user_id). The session_id is set by the client to be able to
   * collate streaming responses from different queries within the dedicated session.
   * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
   * </pre>
   *
   * <code>string session_id = 1;</code>
   * @return The bytes for sessionId.
   */
  com.google.protobuf.ByteString
      getSessionIdBytes();

  /**
   * <pre>
   * (Required) User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   * @return Whether the userContext field is set.
   */
  boolean hasUserContext();
  /**
   * <pre>
   * (Required) User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   * @return The userContext.
   */
  org.apache.spark.connect.proto.UserContext getUserContext();
  /**
   * <pre>
   * (Required) User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   */
  org.apache.spark.connect.proto.UserContextOrBuilder getUserContextOrBuilder();

  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 3;</code>
   * @return Whether the clientType field is set.
   */
  boolean hasClientType();
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 3;</code>
   * @return The clientType.
   */
  String getClientType();
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 3;</code>
   * @return The bytes for clientType.
   */
  com.google.protobuf.ByteString
      getClientTypeBytes();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.Schema schema = 4;</code>
   * @return Whether the schema field is set.
   */
  boolean hasSchema();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.Schema schema = 4;</code>
   * @return The schema.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.Schema getSchema();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.Schema schema = 4;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.SchemaOrBuilder getSchemaOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.Explain explain = 5;</code>
   * @return Whether the explain field is set.
   */
  boolean hasExplain();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.Explain explain = 5;</code>
   * @return The explain.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.Explain getExplain();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.Explain explain = 5;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.ExplainOrBuilder getExplainOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.TreeString tree_string = 6;</code>
   * @return Whether the treeString field is set.
   */
  boolean hasTreeString();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.TreeString tree_string = 6;</code>
   * @return The treeString.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.TreeString getTreeString();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.TreeString tree_string = 6;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.TreeStringOrBuilder getTreeStringOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.IsLocal is_local = 7;</code>
   * @return Whether the isLocal field is set.
   */
  boolean hasIsLocal();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.IsLocal is_local = 7;</code>
   * @return The isLocal.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.IsLocal getIsLocal();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.IsLocal is_local = 7;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.IsLocalOrBuilder getIsLocalOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.IsStreaming is_streaming = 8;</code>
   * @return Whether the isStreaming field is set.
   */
  boolean hasIsStreaming();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.IsStreaming is_streaming = 8;</code>
   * @return The isStreaming.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.IsStreaming getIsStreaming();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.IsStreaming is_streaming = 8;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.IsStreamingOrBuilder getIsStreamingOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.InputFiles input_files = 9;</code>
   * @return Whether the inputFiles field is set.
   */
  boolean hasInputFiles();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.InputFiles input_files = 9;</code>
   * @return The inputFiles.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.InputFiles getInputFiles();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.InputFiles input_files = 9;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.InputFilesOrBuilder getInputFilesOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.SparkVersion spark_version = 10;</code>
   * @return Whether the sparkVersion field is set.
   */
  boolean hasSparkVersion();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.SparkVersion spark_version = 10;</code>
   * @return The sparkVersion.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.SparkVersion getSparkVersion();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.SparkVersion spark_version = 10;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.SparkVersionOrBuilder getSparkVersionOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.DDLParse ddl_parse = 11;</code>
   * @return Whether the ddlParse field is set.
   */
  boolean hasDdlParse();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.DDLParse ddl_parse = 11;</code>
   * @return The ddlParse.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.DDLParse getDdlParse();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.DDLParse ddl_parse = 11;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.DDLParseOrBuilder getDdlParseOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.SameSemantics same_semantics = 12;</code>
   * @return Whether the sameSemantics field is set.
   */
  boolean hasSameSemantics();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.SameSemantics same_semantics = 12;</code>
   * @return The sameSemantics.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.SameSemantics getSameSemantics();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.SameSemantics same_semantics = 12;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.SameSemanticsOrBuilder getSameSemanticsOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.SemanticHash semantic_hash = 13;</code>
   * @return Whether the semanticHash field is set.
   */
  boolean hasSemanticHash();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.SemanticHash semantic_hash = 13;</code>
   * @return The semanticHash.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.SemanticHash getSemanticHash();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.SemanticHash semantic_hash = 13;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.SemanticHashOrBuilder getSemanticHashOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.Persist persist = 14;</code>
   * @return Whether the persist field is set.
   */
  boolean hasPersist();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.Persist persist = 14;</code>
   * @return The persist.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.Persist getPersist();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.Persist persist = 14;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.PersistOrBuilder getPersistOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.Unpersist unpersist = 15;</code>
   * @return Whether the unpersist field is set.
   */
  boolean hasUnpersist();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.Unpersist unpersist = 15;</code>
   * @return The unpersist.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.Unpersist getUnpersist();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.Unpersist unpersist = 15;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.UnpersistOrBuilder getUnpersistOrBuilder();

  /**
   * <code>.spark.connect.AnalyzePlanRequest.GetStorageLevel get_storage_level = 16;</code>
   * @return Whether the getStorageLevel field is set.
   */
  boolean hasGetStorageLevel();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.GetStorageLevel get_storage_level = 16;</code>
   * @return The getStorageLevel.
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.GetStorageLevel getGetStorageLevel();
  /**
   * <code>.spark.connect.AnalyzePlanRequest.GetStorageLevel get_storage_level = 16;</code>
   */
  org.apache.spark.connect.proto.AnalyzePlanRequest.GetStorageLevelOrBuilder getGetStorageLevelOrBuilder();

  org.apache.spark.connect.proto.AnalyzePlanRequest.AnalyzeCase getAnalyzeCase();
}
