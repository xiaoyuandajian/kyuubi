// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * Protobuf type {@code spark.connect.ReattachOptions}
 */
public final class ReattachOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.ReattachOptions)
    ReattachOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ReattachOptions.newBuilder() to construct.
  private ReattachOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ReattachOptions() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new ReattachOptions();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ReattachOptions_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ReattachOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.ReattachOptions.class, org.apache.spark.connect.proto.ReattachOptions.Builder.class);
  }

  public static final int REATTACHABLE_FIELD_NUMBER = 1;
  private boolean reattachable_ = false;
  /**
   * <pre>
   * If true, the request can be reattached to using ReattachExecute.
   * ReattachExecute can be used either if the stream broke with a GRPC network error,
   * or if the server closed the stream without sending a response with StreamStatus.complete=true.
   * The server will keep a buffer of responses in case a response is lost, and
   * ReattachExecute needs to back-track.
   *
   * If false, the execution response stream will will not be reattachable, and all responses are
   * immediately released by the server after being sent.
   * </pre>
   *
   * <code>bool reattachable = 1;</code>
   * @return The reattachable.
   */
  @Override
  public boolean getReattachable() {
    return reattachable_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (reattachable_ != false) {
      output.writeBool(1, reattachable_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (reattachable_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, reattachable_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.ReattachOptions)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.ReattachOptions other = (org.apache.spark.connect.proto.ReattachOptions) obj;

    if (getReattachable()
        != other.getReattachable()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + REATTACHABLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getReattachable());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.ReattachOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ReattachOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ReattachOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ReattachOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ReattachOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ReattachOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ReattachOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.ReattachOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.ReattachOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.ReattachOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ReattachOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.ReattachOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.ReattachOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code spark.connect.ReattachOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.ReattachOptions)
      org.apache.spark.connect.proto.ReattachOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ReattachOptions_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ReattachOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.ReattachOptions.class, org.apache.spark.connect.proto.ReattachOptions.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.ReattachOptions.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      reattachable_ = false;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ReattachOptions_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.ReattachOptions getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.ReattachOptions.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.ReattachOptions build() {
      org.apache.spark.connect.proto.ReattachOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.ReattachOptions buildPartial() {
      org.apache.spark.connect.proto.ReattachOptions result = new org.apache.spark.connect.proto.ReattachOptions(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.spark.connect.proto.ReattachOptions result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.reattachable_ = reattachable_;
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.ReattachOptions) {
        return mergeFrom((org.apache.spark.connect.proto.ReattachOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.ReattachOptions other) {
      if (other == org.apache.spark.connect.proto.ReattachOptions.getDefaultInstance()) return this;
      if (other.getReattachable() != false) {
        setReattachable(other.getReattachable());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              reattachable_ = input.readBool();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private boolean reattachable_ ;
    /**
     * <pre>
     * If true, the request can be reattached to using ReattachExecute.
     * ReattachExecute can be used either if the stream broke with a GRPC network error,
     * or if the server closed the stream without sending a response with StreamStatus.complete=true.
     * The server will keep a buffer of responses in case a response is lost, and
     * ReattachExecute needs to back-track.
     *
     * If false, the execution response stream will will not be reattachable, and all responses are
     * immediately released by the server after being sent.
     * </pre>
     *
     * <code>bool reattachable = 1;</code>
     * @return The reattachable.
     */
    @Override
    public boolean getReattachable() {
      return reattachable_;
    }
    /**
     * <pre>
     * If true, the request can be reattached to using ReattachExecute.
     * ReattachExecute can be used either if the stream broke with a GRPC network error,
     * or if the server closed the stream without sending a response with StreamStatus.complete=true.
     * The server will keep a buffer of responses in case a response is lost, and
     * ReattachExecute needs to back-track.
     *
     * If false, the execution response stream will will not be reattachable, and all responses are
     * immediately released by the server after being sent.
     * </pre>
     *
     * <code>bool reattachable = 1;</code>
     * @param value The reattachable to set.
     * @return This builder for chaining.
     */
    public Builder setReattachable(boolean value) {

      reattachable_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true, the request can be reattached to using ReattachExecute.
     * ReattachExecute can be used either if the stream broke with a GRPC network error,
     * or if the server closed the stream without sending a response with StreamStatus.complete=true.
     * The server will keep a buffer of responses in case a response is lost, and
     * ReattachExecute needs to back-track.
     *
     * If false, the execution response stream will will not be reattachable, and all responses are
     * immediately released by the server after being sent.
     * </pre>
     *
     * <code>bool reattachable = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearReattachable() {
      bitField0_ = (bitField0_ & ~0x00000001);
      reattachable_ = false;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.ReattachOptions)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.ReattachOptions)
  private static final org.apache.spark.connect.proto.ReattachOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.ReattachOptions();
  }

  public static org.apache.spark.connect.proto.ReattachOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ReattachOptions>
      PARSER = new com.google.protobuf.AbstractParser<ReattachOptions>() {
    @Override
    public ReattachOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ReattachOptions> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<ReattachOptions> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.ReattachOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

