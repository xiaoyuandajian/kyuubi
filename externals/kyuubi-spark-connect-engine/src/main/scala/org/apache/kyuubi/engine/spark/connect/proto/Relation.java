// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * The main [[Relation]] type. Fundamentally, a relation is a typed container
 * that has exactly one explicit relation type set.
 *
 * When adding new relation types, they have to be registered here.
 * </pre>
 *
 * Protobuf type {@code spark.connect.Relation}
 */
public final class Relation extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.Relation)
    RelationOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Relation.newBuilder() to construct.
  private Relation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Relation() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new Relation();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Relation_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Relation_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.Relation.class, org.apache.spark.connect.proto.Relation.Builder.class);
  }

  private int relTypeCase_ = 0;
  @SuppressWarnings("serial")
  private Object relType_;
  public enum RelTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          InternalOneOfEnum {
    READ(2),
    PROJECT(3),
    FILTER(4),
    JOIN(5),
    SET_OP(6),
    SORT(7),
    LIMIT(8),
    AGGREGATE(9),
    SQL(10),
    LOCAL_RELATION(11),
    SAMPLE(12),
    OFFSET(13),
    DEDUPLICATE(14),
    RANGE(15),
    SUBQUERY_ALIAS(16),
    REPARTITION(17),
    TO_DF(18),
    WITH_COLUMNS_RENAMED(19),
    SHOW_STRING(20),
    DROP(21),
    TAIL(22),
    WITH_COLUMNS(23),
    HINT(24),
    UNPIVOT(25),
    TO_SCHEMA(26),
    REPARTITION_BY_EXPRESSION(27),
    MAP_PARTITIONS(28),
    COLLECT_METRICS(29),
    PARSE(30),
    GROUP_MAP(31),
    CO_GROUP_MAP(32),
    WITH_WATERMARK(33),
    APPLY_IN_PANDAS_WITH_STATE(34),
    HTML_STRING(35),
    CACHED_LOCAL_RELATION(36),
    CACHED_REMOTE_RELATION(37),
    COMMON_INLINE_USER_DEFINED_TABLE_FUNCTION(38),
    AS_OF_JOIN(39),
    FILL_NA(90),
    DROP_NA(91),
    REPLACE(92),
    SUMMARY(100),
    CROSSTAB(101),
    DESCRIBE(102),
    COV(103),
    CORR(104),
    APPROX_QUANTILE(105),
    FREQ_ITEMS(106),
    SAMPLE_BY(107),
    CATALOG(200),
    EXTENSION(998),
    UNKNOWN(999),
    RELTYPE_NOT_SET(0);
    private final int value;
    private RelTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static RelTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static RelTypeCase forNumber(int value) {
      switch (value) {
        case 2: return READ;
        case 3: return PROJECT;
        case 4: return FILTER;
        case 5: return JOIN;
        case 6: return SET_OP;
        case 7: return SORT;
        case 8: return LIMIT;
        case 9: return AGGREGATE;
        case 10: return SQL;
        case 11: return LOCAL_RELATION;
        case 12: return SAMPLE;
        case 13: return OFFSET;
        case 14: return DEDUPLICATE;
        case 15: return RANGE;
        case 16: return SUBQUERY_ALIAS;
        case 17: return REPARTITION;
        case 18: return TO_DF;
        case 19: return WITH_COLUMNS_RENAMED;
        case 20: return SHOW_STRING;
        case 21: return DROP;
        case 22: return TAIL;
        case 23: return WITH_COLUMNS;
        case 24: return HINT;
        case 25: return UNPIVOT;
        case 26: return TO_SCHEMA;
        case 27: return REPARTITION_BY_EXPRESSION;
        case 28: return MAP_PARTITIONS;
        case 29: return COLLECT_METRICS;
        case 30: return PARSE;
        case 31: return GROUP_MAP;
        case 32: return CO_GROUP_MAP;
        case 33: return WITH_WATERMARK;
        case 34: return APPLY_IN_PANDAS_WITH_STATE;
        case 35: return HTML_STRING;
        case 36: return CACHED_LOCAL_RELATION;
        case 37: return CACHED_REMOTE_RELATION;
        case 38: return COMMON_INLINE_USER_DEFINED_TABLE_FUNCTION;
        case 39: return AS_OF_JOIN;
        case 90: return FILL_NA;
        case 91: return DROP_NA;
        case 92: return REPLACE;
        case 100: return SUMMARY;
        case 101: return CROSSTAB;
        case 102: return DESCRIBE;
        case 103: return COV;
        case 104: return CORR;
        case 105: return APPROX_QUANTILE;
        case 106: return FREQ_ITEMS;
        case 107: return SAMPLE_BY;
        case 200: return CATALOG;
        case 998: return EXTENSION;
        case 999: return UNKNOWN;
        case 0: return RELTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public RelTypeCase
  getRelTypeCase() {
    return RelTypeCase.forNumber(
        relTypeCase_);
  }

  public static final int COMMON_FIELD_NUMBER = 1;
  private org.apache.spark.connect.proto.RelationCommon common_;
  /**
   * <code>.spark.connect.RelationCommon common = 1;</code>
   * @return Whether the common field is set.
   */
  @Override
  public boolean hasCommon() {
    return common_ != null;
  }
  /**
   * <code>.spark.connect.RelationCommon common = 1;</code>
   * @return The common.
   */
  @Override
  public org.apache.spark.connect.proto.RelationCommon getCommon() {
    return common_ == null ? org.apache.spark.connect.proto.RelationCommon.getDefaultInstance() : common_;
  }
  /**
   * <code>.spark.connect.RelationCommon common = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationCommonOrBuilder getCommonOrBuilder() {
    return common_ == null ? org.apache.spark.connect.proto.RelationCommon.getDefaultInstance() : common_;
  }

  public static final int READ_FIELD_NUMBER = 2;
  /**
   * <code>.spark.connect.Read read = 2;</code>
   * @return Whether the read field is set.
   */
  @Override
  public boolean hasRead() {
    return relTypeCase_ == 2;
  }
  /**
   * <code>.spark.connect.Read read = 2;</code>
   * @return The read.
   */
  @Override
  public org.apache.spark.connect.proto.Read getRead() {
    if (relTypeCase_ == 2) {
       return (org.apache.spark.connect.proto.Read) relType_;
    }
    return org.apache.spark.connect.proto.Read.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Read read = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ReadOrBuilder getReadOrBuilder() {
    if (relTypeCase_ == 2) {
       return (org.apache.spark.connect.proto.Read) relType_;
    }
    return org.apache.spark.connect.proto.Read.getDefaultInstance();
  }

  public static final int PROJECT_FIELD_NUMBER = 3;
  /**
   * <code>.spark.connect.Project project = 3;</code>
   * @return Whether the project field is set.
   */
  @Override
  public boolean hasProject() {
    return relTypeCase_ == 3;
  }
  /**
   * <code>.spark.connect.Project project = 3;</code>
   * @return The project.
   */
  @Override
  public org.apache.spark.connect.proto.Project getProject() {
    if (relTypeCase_ == 3) {
       return (org.apache.spark.connect.proto.Project) relType_;
    }
    return org.apache.spark.connect.proto.Project.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Project project = 3;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ProjectOrBuilder getProjectOrBuilder() {
    if (relTypeCase_ == 3) {
       return (org.apache.spark.connect.proto.Project) relType_;
    }
    return org.apache.spark.connect.proto.Project.getDefaultInstance();
  }

  public static final int FILTER_FIELD_NUMBER = 4;
  /**
   * <code>.spark.connect.Filter filter = 4;</code>
   * @return Whether the filter field is set.
   */
  @Override
  public boolean hasFilter() {
    return relTypeCase_ == 4;
  }
  /**
   * <code>.spark.connect.Filter filter = 4;</code>
   * @return The filter.
   */
  @Override
  public org.apache.spark.connect.proto.Filter getFilter() {
    if (relTypeCase_ == 4) {
       return (org.apache.spark.connect.proto.Filter) relType_;
    }
    return org.apache.spark.connect.proto.Filter.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Filter filter = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.FilterOrBuilder getFilterOrBuilder() {
    if (relTypeCase_ == 4) {
       return (org.apache.spark.connect.proto.Filter) relType_;
    }
    return org.apache.spark.connect.proto.Filter.getDefaultInstance();
  }

  public static final int JOIN_FIELD_NUMBER = 5;
  /**
   * <code>.spark.connect.Join join = 5;</code>
   * @return Whether the join field is set.
   */
  @Override
  public boolean hasJoin() {
    return relTypeCase_ == 5;
  }
  /**
   * <code>.spark.connect.Join join = 5;</code>
   * @return The join.
   */
  @Override
  public org.apache.spark.connect.proto.Join getJoin() {
    if (relTypeCase_ == 5) {
       return (org.apache.spark.connect.proto.Join) relType_;
    }
    return org.apache.spark.connect.proto.Join.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Join join = 5;</code>
   */
  @Override
  public org.apache.spark.connect.proto.JoinOrBuilder getJoinOrBuilder() {
    if (relTypeCase_ == 5) {
       return (org.apache.spark.connect.proto.Join) relType_;
    }
    return org.apache.spark.connect.proto.Join.getDefaultInstance();
  }

  public static final int SET_OP_FIELD_NUMBER = 6;
  /**
   * <code>.spark.connect.SetOperation set_op = 6;</code>
   * @return Whether the setOp field is set.
   */
  @Override
  public boolean hasSetOp() {
    return relTypeCase_ == 6;
  }
  /**
   * <code>.spark.connect.SetOperation set_op = 6;</code>
   * @return The setOp.
   */
  @Override
  public org.apache.spark.connect.proto.SetOperation getSetOp() {
    if (relTypeCase_ == 6) {
       return (org.apache.spark.connect.proto.SetOperation) relType_;
    }
    return org.apache.spark.connect.proto.SetOperation.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.SetOperation set_op = 6;</code>
   */
  @Override
  public org.apache.spark.connect.proto.SetOperationOrBuilder getSetOpOrBuilder() {
    if (relTypeCase_ == 6) {
       return (org.apache.spark.connect.proto.SetOperation) relType_;
    }
    return org.apache.spark.connect.proto.SetOperation.getDefaultInstance();
  }

  public static final int SORT_FIELD_NUMBER = 7;
  /**
   * <code>.spark.connect.Sort sort = 7;</code>
   * @return Whether the sort field is set.
   */
  @Override
  public boolean hasSort() {
    return relTypeCase_ == 7;
  }
  /**
   * <code>.spark.connect.Sort sort = 7;</code>
   * @return The sort.
   */
  @Override
  public org.apache.spark.connect.proto.Sort getSort() {
    if (relTypeCase_ == 7) {
       return (org.apache.spark.connect.proto.Sort) relType_;
    }
    return org.apache.spark.connect.proto.Sort.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Sort sort = 7;</code>
   */
  @Override
  public org.apache.spark.connect.proto.SortOrBuilder getSortOrBuilder() {
    if (relTypeCase_ == 7) {
       return (org.apache.spark.connect.proto.Sort) relType_;
    }
    return org.apache.spark.connect.proto.Sort.getDefaultInstance();
  }

  public static final int LIMIT_FIELD_NUMBER = 8;
  /**
   * <code>.spark.connect.Limit limit = 8;</code>
   * @return Whether the limit field is set.
   */
  @Override
  public boolean hasLimit() {
    return relTypeCase_ == 8;
  }
  /**
   * <code>.spark.connect.Limit limit = 8;</code>
   * @return The limit.
   */
  @Override
  public org.apache.spark.connect.proto.Limit getLimit() {
    if (relTypeCase_ == 8) {
       return (org.apache.spark.connect.proto.Limit) relType_;
    }
    return org.apache.spark.connect.proto.Limit.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Limit limit = 8;</code>
   */
  @Override
  public org.apache.spark.connect.proto.LimitOrBuilder getLimitOrBuilder() {
    if (relTypeCase_ == 8) {
       return (org.apache.spark.connect.proto.Limit) relType_;
    }
    return org.apache.spark.connect.proto.Limit.getDefaultInstance();
  }

  public static final int AGGREGATE_FIELD_NUMBER = 9;
  /**
   * <code>.spark.connect.Aggregate aggregate = 9;</code>
   * @return Whether the aggregate field is set.
   */
  @Override
  public boolean hasAggregate() {
    return relTypeCase_ == 9;
  }
  /**
   * <code>.spark.connect.Aggregate aggregate = 9;</code>
   * @return The aggregate.
   */
  @Override
  public org.apache.spark.connect.proto.Aggregate getAggregate() {
    if (relTypeCase_ == 9) {
       return (org.apache.spark.connect.proto.Aggregate) relType_;
    }
    return org.apache.spark.connect.proto.Aggregate.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Aggregate aggregate = 9;</code>
   */
  @Override
  public org.apache.spark.connect.proto.AggregateOrBuilder getAggregateOrBuilder() {
    if (relTypeCase_ == 9) {
       return (org.apache.spark.connect.proto.Aggregate) relType_;
    }
    return org.apache.spark.connect.proto.Aggregate.getDefaultInstance();
  }

  public static final int SQL_FIELD_NUMBER = 10;
  /**
   * <code>.spark.connect.SQL sql = 10;</code>
   * @return Whether the sql field is set.
   */
  @Override
  public boolean hasSql() {
    return relTypeCase_ == 10;
  }
  /**
   * <code>.spark.connect.SQL sql = 10;</code>
   * @return The sql.
   */
  @Override
  public org.apache.spark.connect.proto.SQL getSql() {
    if (relTypeCase_ == 10) {
       return (org.apache.spark.connect.proto.SQL) relType_;
    }
    return org.apache.spark.connect.proto.SQL.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.SQL sql = 10;</code>
   */
  @Override
  public org.apache.spark.connect.proto.SQLOrBuilder getSqlOrBuilder() {
    if (relTypeCase_ == 10) {
       return (org.apache.spark.connect.proto.SQL) relType_;
    }
    return org.apache.spark.connect.proto.SQL.getDefaultInstance();
  }

  public static final int LOCAL_RELATION_FIELD_NUMBER = 11;
  /**
   * <code>.spark.connect.LocalRelation local_relation = 11;</code>
   * @return Whether the localRelation field is set.
   */
  @Override
  public boolean hasLocalRelation() {
    return relTypeCase_ == 11;
  }
  /**
   * <code>.spark.connect.LocalRelation local_relation = 11;</code>
   * @return The localRelation.
   */
  @Override
  public org.apache.spark.connect.proto.LocalRelation getLocalRelation() {
    if (relTypeCase_ == 11) {
       return (org.apache.spark.connect.proto.LocalRelation) relType_;
    }
    return org.apache.spark.connect.proto.LocalRelation.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.LocalRelation local_relation = 11;</code>
   */
  @Override
  public org.apache.spark.connect.proto.LocalRelationOrBuilder getLocalRelationOrBuilder() {
    if (relTypeCase_ == 11) {
       return (org.apache.spark.connect.proto.LocalRelation) relType_;
    }
    return org.apache.spark.connect.proto.LocalRelation.getDefaultInstance();
  }

  public static final int SAMPLE_FIELD_NUMBER = 12;
  /**
   * <code>.spark.connect.Sample sample = 12;</code>
   * @return Whether the sample field is set.
   */
  @Override
  public boolean hasSample() {
    return relTypeCase_ == 12;
  }
  /**
   * <code>.spark.connect.Sample sample = 12;</code>
   * @return The sample.
   */
  @Override
  public org.apache.spark.connect.proto.Sample getSample() {
    if (relTypeCase_ == 12) {
       return (org.apache.spark.connect.proto.Sample) relType_;
    }
    return org.apache.spark.connect.proto.Sample.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Sample sample = 12;</code>
   */
  @Override
  public org.apache.spark.connect.proto.SampleOrBuilder getSampleOrBuilder() {
    if (relTypeCase_ == 12) {
       return (org.apache.spark.connect.proto.Sample) relType_;
    }
    return org.apache.spark.connect.proto.Sample.getDefaultInstance();
  }

  public static final int OFFSET_FIELD_NUMBER = 13;
  /**
   * <code>.spark.connect.Offset offset = 13;</code>
   * @return Whether the offset field is set.
   */
  @Override
  public boolean hasOffset() {
    return relTypeCase_ == 13;
  }
  /**
   * <code>.spark.connect.Offset offset = 13;</code>
   * @return The offset.
   */
  @Override
  public org.apache.spark.connect.proto.Offset getOffset() {
    if (relTypeCase_ == 13) {
       return (org.apache.spark.connect.proto.Offset) relType_;
    }
    return org.apache.spark.connect.proto.Offset.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Offset offset = 13;</code>
   */
  @Override
  public org.apache.spark.connect.proto.OffsetOrBuilder getOffsetOrBuilder() {
    if (relTypeCase_ == 13) {
       return (org.apache.spark.connect.proto.Offset) relType_;
    }
    return org.apache.spark.connect.proto.Offset.getDefaultInstance();
  }

  public static final int DEDUPLICATE_FIELD_NUMBER = 14;
  /**
   * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
   * @return Whether the deduplicate field is set.
   */
  @Override
  public boolean hasDeduplicate() {
    return relTypeCase_ == 14;
  }
  /**
   * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
   * @return The deduplicate.
   */
  @Override
  public org.apache.spark.connect.proto.Deduplicate getDeduplicate() {
    if (relTypeCase_ == 14) {
       return (org.apache.spark.connect.proto.Deduplicate) relType_;
    }
    return org.apache.spark.connect.proto.Deduplicate.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
   */
  @Override
  public org.apache.spark.connect.proto.DeduplicateOrBuilder getDeduplicateOrBuilder() {
    if (relTypeCase_ == 14) {
       return (org.apache.spark.connect.proto.Deduplicate) relType_;
    }
    return org.apache.spark.connect.proto.Deduplicate.getDefaultInstance();
  }

  public static final int RANGE_FIELD_NUMBER = 15;
  /**
   * <code>.spark.connect.Range range = 15;</code>
   * @return Whether the range field is set.
   */
  @Override
  public boolean hasRange() {
    return relTypeCase_ == 15;
  }
  /**
   * <code>.spark.connect.Range range = 15;</code>
   * @return The range.
   */
  @Override
  public org.apache.spark.connect.proto.Range getRange() {
    if (relTypeCase_ == 15) {
       return (org.apache.spark.connect.proto.Range) relType_;
    }
    return org.apache.spark.connect.proto.Range.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Range range = 15;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RangeOrBuilder getRangeOrBuilder() {
    if (relTypeCase_ == 15) {
       return (org.apache.spark.connect.proto.Range) relType_;
    }
    return org.apache.spark.connect.proto.Range.getDefaultInstance();
  }

  public static final int SUBQUERY_ALIAS_FIELD_NUMBER = 16;
  /**
   * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
   * @return Whether the subqueryAlias field is set.
   */
  @Override
  public boolean hasSubqueryAlias() {
    return relTypeCase_ == 16;
  }
  /**
   * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
   * @return The subqueryAlias.
   */
  @Override
  public org.apache.spark.connect.proto.SubqueryAlias getSubqueryAlias() {
    if (relTypeCase_ == 16) {
       return (org.apache.spark.connect.proto.SubqueryAlias) relType_;
    }
    return org.apache.spark.connect.proto.SubqueryAlias.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
   */
  @Override
  public org.apache.spark.connect.proto.SubqueryAliasOrBuilder getSubqueryAliasOrBuilder() {
    if (relTypeCase_ == 16) {
       return (org.apache.spark.connect.proto.SubqueryAlias) relType_;
    }
    return org.apache.spark.connect.proto.SubqueryAlias.getDefaultInstance();
  }

  public static final int REPARTITION_FIELD_NUMBER = 17;
  /**
   * <code>.spark.connect.Repartition repartition = 17;</code>
   * @return Whether the repartition field is set.
   */
  @Override
  public boolean hasRepartition() {
    return relTypeCase_ == 17;
  }
  /**
   * <code>.spark.connect.Repartition repartition = 17;</code>
   * @return The repartition.
   */
  @Override
  public org.apache.spark.connect.proto.Repartition getRepartition() {
    if (relTypeCase_ == 17) {
       return (org.apache.spark.connect.proto.Repartition) relType_;
    }
    return org.apache.spark.connect.proto.Repartition.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Repartition repartition = 17;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RepartitionOrBuilder getRepartitionOrBuilder() {
    if (relTypeCase_ == 17) {
       return (org.apache.spark.connect.proto.Repartition) relType_;
    }
    return org.apache.spark.connect.proto.Repartition.getDefaultInstance();
  }

  public static final int TO_DF_FIELD_NUMBER = 18;
  /**
   * <code>.spark.connect.ToDF to_df = 18;</code>
   * @return Whether the toDf field is set.
   */
  @Override
  public boolean hasToDf() {
    return relTypeCase_ == 18;
  }
  /**
   * <code>.spark.connect.ToDF to_df = 18;</code>
   * @return The toDf.
   */
  @Override
  public org.apache.spark.connect.proto.ToDF getToDf() {
    if (relTypeCase_ == 18) {
       return (org.apache.spark.connect.proto.ToDF) relType_;
    }
    return org.apache.spark.connect.proto.ToDF.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.ToDF to_df = 18;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ToDFOrBuilder getToDfOrBuilder() {
    if (relTypeCase_ == 18) {
       return (org.apache.spark.connect.proto.ToDF) relType_;
    }
    return org.apache.spark.connect.proto.ToDF.getDefaultInstance();
  }

  public static final int WITH_COLUMNS_RENAMED_FIELD_NUMBER = 19;
  /**
   * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
   * @return Whether the withColumnsRenamed field is set.
   */
  @Override
  public boolean hasWithColumnsRenamed() {
    return relTypeCase_ == 19;
  }
  /**
   * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
   * @return The withColumnsRenamed.
   */
  @Override
  public org.apache.spark.connect.proto.WithColumnsRenamed getWithColumnsRenamed() {
    if (relTypeCase_ == 19) {
       return (org.apache.spark.connect.proto.WithColumnsRenamed) relType_;
    }
    return org.apache.spark.connect.proto.WithColumnsRenamed.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
   */
  @Override
  public org.apache.spark.connect.proto.WithColumnsRenamedOrBuilder getWithColumnsRenamedOrBuilder() {
    if (relTypeCase_ == 19) {
       return (org.apache.spark.connect.proto.WithColumnsRenamed) relType_;
    }
    return org.apache.spark.connect.proto.WithColumnsRenamed.getDefaultInstance();
  }

  public static final int SHOW_STRING_FIELD_NUMBER = 20;
  /**
   * <code>.spark.connect.ShowString show_string = 20;</code>
   * @return Whether the showString field is set.
   */
  @Override
  public boolean hasShowString() {
    return relTypeCase_ == 20;
  }
  /**
   * <code>.spark.connect.ShowString show_string = 20;</code>
   * @return The showString.
   */
  @Override
  public org.apache.spark.connect.proto.ShowString getShowString() {
    if (relTypeCase_ == 20) {
       return (org.apache.spark.connect.proto.ShowString) relType_;
    }
    return org.apache.spark.connect.proto.ShowString.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.ShowString show_string = 20;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ShowStringOrBuilder getShowStringOrBuilder() {
    if (relTypeCase_ == 20) {
       return (org.apache.spark.connect.proto.ShowString) relType_;
    }
    return org.apache.spark.connect.proto.ShowString.getDefaultInstance();
  }

  public static final int DROP_FIELD_NUMBER = 21;
  /**
   * <code>.spark.connect.Drop drop = 21;</code>
   * @return Whether the drop field is set.
   */
  @Override
  public boolean hasDrop() {
    return relTypeCase_ == 21;
  }
  /**
   * <code>.spark.connect.Drop drop = 21;</code>
   * @return The drop.
   */
  @Override
  public org.apache.spark.connect.proto.Drop getDrop() {
    if (relTypeCase_ == 21) {
       return (org.apache.spark.connect.proto.Drop) relType_;
    }
    return org.apache.spark.connect.proto.Drop.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Drop drop = 21;</code>
   */
  @Override
  public org.apache.spark.connect.proto.DropOrBuilder getDropOrBuilder() {
    if (relTypeCase_ == 21) {
       return (org.apache.spark.connect.proto.Drop) relType_;
    }
    return org.apache.spark.connect.proto.Drop.getDefaultInstance();
  }

  public static final int TAIL_FIELD_NUMBER = 22;
  /**
   * <code>.spark.connect.Tail tail = 22;</code>
   * @return Whether the tail field is set.
   */
  @Override
  public boolean hasTail() {
    return relTypeCase_ == 22;
  }
  /**
   * <code>.spark.connect.Tail tail = 22;</code>
   * @return The tail.
   */
  @Override
  public org.apache.spark.connect.proto.Tail getTail() {
    if (relTypeCase_ == 22) {
       return (org.apache.spark.connect.proto.Tail) relType_;
    }
    return org.apache.spark.connect.proto.Tail.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Tail tail = 22;</code>
   */
  @Override
  public org.apache.spark.connect.proto.TailOrBuilder getTailOrBuilder() {
    if (relTypeCase_ == 22) {
       return (org.apache.spark.connect.proto.Tail) relType_;
    }
    return org.apache.spark.connect.proto.Tail.getDefaultInstance();
  }

  public static final int WITH_COLUMNS_FIELD_NUMBER = 23;
  /**
   * <code>.spark.connect.WithColumns with_columns = 23;</code>
   * @return Whether the withColumns field is set.
   */
  @Override
  public boolean hasWithColumns() {
    return relTypeCase_ == 23;
  }
  /**
   * <code>.spark.connect.WithColumns with_columns = 23;</code>
   * @return The withColumns.
   */
  @Override
  public org.apache.spark.connect.proto.WithColumns getWithColumns() {
    if (relTypeCase_ == 23) {
       return (org.apache.spark.connect.proto.WithColumns) relType_;
    }
    return org.apache.spark.connect.proto.WithColumns.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.WithColumns with_columns = 23;</code>
   */
  @Override
  public org.apache.spark.connect.proto.WithColumnsOrBuilder getWithColumnsOrBuilder() {
    if (relTypeCase_ == 23) {
       return (org.apache.spark.connect.proto.WithColumns) relType_;
    }
    return org.apache.spark.connect.proto.WithColumns.getDefaultInstance();
  }

  public static final int HINT_FIELD_NUMBER = 24;
  /**
   * <code>.spark.connect.Hint hint = 24;</code>
   * @return Whether the hint field is set.
   */
  @Override
  public boolean hasHint() {
    return relTypeCase_ == 24;
  }
  /**
   * <code>.spark.connect.Hint hint = 24;</code>
   * @return The hint.
   */
  @Override
  public org.apache.spark.connect.proto.Hint getHint() {
    if (relTypeCase_ == 24) {
       return (org.apache.spark.connect.proto.Hint) relType_;
    }
    return org.apache.spark.connect.proto.Hint.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Hint hint = 24;</code>
   */
  @Override
  public org.apache.spark.connect.proto.HintOrBuilder getHintOrBuilder() {
    if (relTypeCase_ == 24) {
       return (org.apache.spark.connect.proto.Hint) relType_;
    }
    return org.apache.spark.connect.proto.Hint.getDefaultInstance();
  }

  public static final int UNPIVOT_FIELD_NUMBER = 25;
  /**
   * <code>.spark.connect.Unpivot unpivot = 25;</code>
   * @return Whether the unpivot field is set.
   */
  @Override
  public boolean hasUnpivot() {
    return relTypeCase_ == 25;
  }
  /**
   * <code>.spark.connect.Unpivot unpivot = 25;</code>
   * @return The unpivot.
   */
  @Override
  public org.apache.spark.connect.proto.Unpivot getUnpivot() {
    if (relTypeCase_ == 25) {
       return (org.apache.spark.connect.proto.Unpivot) relType_;
    }
    return org.apache.spark.connect.proto.Unpivot.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Unpivot unpivot = 25;</code>
   */
  @Override
  public org.apache.spark.connect.proto.UnpivotOrBuilder getUnpivotOrBuilder() {
    if (relTypeCase_ == 25) {
       return (org.apache.spark.connect.proto.Unpivot) relType_;
    }
    return org.apache.spark.connect.proto.Unpivot.getDefaultInstance();
  }

  public static final int TO_SCHEMA_FIELD_NUMBER = 26;
  /**
   * <code>.spark.connect.ToSchema to_schema = 26;</code>
   * @return Whether the toSchema field is set.
   */
  @Override
  public boolean hasToSchema() {
    return relTypeCase_ == 26;
  }
  /**
   * <code>.spark.connect.ToSchema to_schema = 26;</code>
   * @return The toSchema.
   */
  @Override
  public org.apache.spark.connect.proto.ToSchema getToSchema() {
    if (relTypeCase_ == 26) {
       return (org.apache.spark.connect.proto.ToSchema) relType_;
    }
    return org.apache.spark.connect.proto.ToSchema.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.ToSchema to_schema = 26;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ToSchemaOrBuilder getToSchemaOrBuilder() {
    if (relTypeCase_ == 26) {
       return (org.apache.spark.connect.proto.ToSchema) relType_;
    }
    return org.apache.spark.connect.proto.ToSchema.getDefaultInstance();
  }

  public static final int REPARTITION_BY_EXPRESSION_FIELD_NUMBER = 27;
  /**
   * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
   * @return Whether the repartitionByExpression field is set.
   */
  @Override
  public boolean hasRepartitionByExpression() {
    return relTypeCase_ == 27;
  }
  /**
   * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
   * @return The repartitionByExpression.
   */
  @Override
  public org.apache.spark.connect.proto.RepartitionByExpression getRepartitionByExpression() {
    if (relTypeCase_ == 27) {
       return (org.apache.spark.connect.proto.RepartitionByExpression) relType_;
    }
    return org.apache.spark.connect.proto.RepartitionByExpression.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RepartitionByExpressionOrBuilder getRepartitionByExpressionOrBuilder() {
    if (relTypeCase_ == 27) {
       return (org.apache.spark.connect.proto.RepartitionByExpression) relType_;
    }
    return org.apache.spark.connect.proto.RepartitionByExpression.getDefaultInstance();
  }

  public static final int MAP_PARTITIONS_FIELD_NUMBER = 28;
  /**
   * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
   * @return Whether the mapPartitions field is set.
   */
  @Override
  public boolean hasMapPartitions() {
    return relTypeCase_ == 28;
  }
  /**
   * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
   * @return The mapPartitions.
   */
  @Override
  public org.apache.spark.connect.proto.MapPartitions getMapPartitions() {
    if (relTypeCase_ == 28) {
       return (org.apache.spark.connect.proto.MapPartitions) relType_;
    }
    return org.apache.spark.connect.proto.MapPartitions.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
   */
  @Override
  public org.apache.spark.connect.proto.MapPartitionsOrBuilder getMapPartitionsOrBuilder() {
    if (relTypeCase_ == 28) {
       return (org.apache.spark.connect.proto.MapPartitions) relType_;
    }
    return org.apache.spark.connect.proto.MapPartitions.getDefaultInstance();
  }

  public static final int COLLECT_METRICS_FIELD_NUMBER = 29;
  /**
   * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
   * @return Whether the collectMetrics field is set.
   */
  @Override
  public boolean hasCollectMetrics() {
    return relTypeCase_ == 29;
  }
  /**
   * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
   * @return The collectMetrics.
   */
  @Override
  public org.apache.spark.connect.proto.CollectMetrics getCollectMetrics() {
    if (relTypeCase_ == 29) {
       return (org.apache.spark.connect.proto.CollectMetrics) relType_;
    }
    return org.apache.spark.connect.proto.CollectMetrics.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
   */
  @Override
  public org.apache.spark.connect.proto.CollectMetricsOrBuilder getCollectMetricsOrBuilder() {
    if (relTypeCase_ == 29) {
       return (org.apache.spark.connect.proto.CollectMetrics) relType_;
    }
    return org.apache.spark.connect.proto.CollectMetrics.getDefaultInstance();
  }

  public static final int PARSE_FIELD_NUMBER = 30;
  /**
   * <code>.spark.connect.Parse parse = 30;</code>
   * @return Whether the parse field is set.
   */
  @Override
  public boolean hasParse() {
    return relTypeCase_ == 30;
  }
  /**
   * <code>.spark.connect.Parse parse = 30;</code>
   * @return The parse.
   */
  @Override
  public org.apache.spark.connect.proto.Parse getParse() {
    if (relTypeCase_ == 30) {
       return (org.apache.spark.connect.proto.Parse) relType_;
    }
    return org.apache.spark.connect.proto.Parse.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Parse parse = 30;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ParseOrBuilder getParseOrBuilder() {
    if (relTypeCase_ == 30) {
       return (org.apache.spark.connect.proto.Parse) relType_;
    }
    return org.apache.spark.connect.proto.Parse.getDefaultInstance();
  }

  public static final int GROUP_MAP_FIELD_NUMBER = 31;
  /**
   * <code>.spark.connect.GroupMap group_map = 31;</code>
   * @return Whether the groupMap field is set.
   */
  @Override
  public boolean hasGroupMap() {
    return relTypeCase_ == 31;
  }
  /**
   * <code>.spark.connect.GroupMap group_map = 31;</code>
   * @return The groupMap.
   */
  @Override
  public org.apache.spark.connect.proto.GroupMap getGroupMap() {
    if (relTypeCase_ == 31) {
       return (org.apache.spark.connect.proto.GroupMap) relType_;
    }
    return org.apache.spark.connect.proto.GroupMap.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.GroupMap group_map = 31;</code>
   */
  @Override
  public org.apache.spark.connect.proto.GroupMapOrBuilder getGroupMapOrBuilder() {
    if (relTypeCase_ == 31) {
       return (org.apache.spark.connect.proto.GroupMap) relType_;
    }
    return org.apache.spark.connect.proto.GroupMap.getDefaultInstance();
  }

  public static final int CO_GROUP_MAP_FIELD_NUMBER = 32;
  /**
   * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
   * @return Whether the coGroupMap field is set.
   */
  @Override
  public boolean hasCoGroupMap() {
    return relTypeCase_ == 32;
  }
  /**
   * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
   * @return The coGroupMap.
   */
  @Override
  public org.apache.spark.connect.proto.CoGroupMap getCoGroupMap() {
    if (relTypeCase_ == 32) {
       return (org.apache.spark.connect.proto.CoGroupMap) relType_;
    }
    return org.apache.spark.connect.proto.CoGroupMap.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
   */
  @Override
  public org.apache.spark.connect.proto.CoGroupMapOrBuilder getCoGroupMapOrBuilder() {
    if (relTypeCase_ == 32) {
       return (org.apache.spark.connect.proto.CoGroupMap) relType_;
    }
    return org.apache.spark.connect.proto.CoGroupMap.getDefaultInstance();
  }

  public static final int WITH_WATERMARK_FIELD_NUMBER = 33;
  /**
   * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
   * @return Whether the withWatermark field is set.
   */
  @Override
  public boolean hasWithWatermark() {
    return relTypeCase_ == 33;
  }
  /**
   * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
   * @return The withWatermark.
   */
  @Override
  public org.apache.spark.connect.proto.WithWatermark getWithWatermark() {
    if (relTypeCase_ == 33) {
       return (org.apache.spark.connect.proto.WithWatermark) relType_;
    }
    return org.apache.spark.connect.proto.WithWatermark.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
   */
  @Override
  public org.apache.spark.connect.proto.WithWatermarkOrBuilder getWithWatermarkOrBuilder() {
    if (relTypeCase_ == 33) {
       return (org.apache.spark.connect.proto.WithWatermark) relType_;
    }
    return org.apache.spark.connect.proto.WithWatermark.getDefaultInstance();
  }

  public static final int APPLY_IN_PANDAS_WITH_STATE_FIELD_NUMBER = 34;
  /**
   * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
   * @return Whether the applyInPandasWithState field is set.
   */
  @Override
  public boolean hasApplyInPandasWithState() {
    return relTypeCase_ == 34;
  }
  /**
   * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
   * @return The applyInPandasWithState.
   */
  @Override
  public org.apache.spark.connect.proto.ApplyInPandasWithState getApplyInPandasWithState() {
    if (relTypeCase_ == 34) {
       return (org.apache.spark.connect.proto.ApplyInPandasWithState) relType_;
    }
    return org.apache.spark.connect.proto.ApplyInPandasWithState.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ApplyInPandasWithStateOrBuilder getApplyInPandasWithStateOrBuilder() {
    if (relTypeCase_ == 34) {
       return (org.apache.spark.connect.proto.ApplyInPandasWithState) relType_;
    }
    return org.apache.spark.connect.proto.ApplyInPandasWithState.getDefaultInstance();
  }

  public static final int HTML_STRING_FIELD_NUMBER = 35;
  /**
   * <code>.spark.connect.HtmlString html_string = 35;</code>
   * @return Whether the htmlString field is set.
   */
  @Override
  public boolean hasHtmlString() {
    return relTypeCase_ == 35;
  }
  /**
   * <code>.spark.connect.HtmlString html_string = 35;</code>
   * @return The htmlString.
   */
  @Override
  public org.apache.spark.connect.proto.HtmlString getHtmlString() {
    if (relTypeCase_ == 35) {
       return (org.apache.spark.connect.proto.HtmlString) relType_;
    }
    return org.apache.spark.connect.proto.HtmlString.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.HtmlString html_string = 35;</code>
   */
  @Override
  public org.apache.spark.connect.proto.HtmlStringOrBuilder getHtmlStringOrBuilder() {
    if (relTypeCase_ == 35) {
       return (org.apache.spark.connect.proto.HtmlString) relType_;
    }
    return org.apache.spark.connect.proto.HtmlString.getDefaultInstance();
  }

  public static final int CACHED_LOCAL_RELATION_FIELD_NUMBER = 36;
  /**
   * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
   * @return Whether the cachedLocalRelation field is set.
   */
  @Override
  public boolean hasCachedLocalRelation() {
    return relTypeCase_ == 36;
  }
  /**
   * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
   * @return The cachedLocalRelation.
   */
  @Override
  public org.apache.spark.connect.proto.CachedLocalRelation getCachedLocalRelation() {
    if (relTypeCase_ == 36) {
       return (org.apache.spark.connect.proto.CachedLocalRelation) relType_;
    }
    return org.apache.spark.connect.proto.CachedLocalRelation.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
   */
  @Override
  public org.apache.spark.connect.proto.CachedLocalRelationOrBuilder getCachedLocalRelationOrBuilder() {
    if (relTypeCase_ == 36) {
       return (org.apache.spark.connect.proto.CachedLocalRelation) relType_;
    }
    return org.apache.spark.connect.proto.CachedLocalRelation.getDefaultInstance();
  }

  public static final int CACHED_REMOTE_RELATION_FIELD_NUMBER = 37;
  /**
   * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
   * @return Whether the cachedRemoteRelation field is set.
   */
  @Override
  public boolean hasCachedRemoteRelation() {
    return relTypeCase_ == 37;
  }
  /**
   * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
   * @return The cachedRemoteRelation.
   */
  @Override
  public org.apache.spark.connect.proto.CachedRemoteRelation getCachedRemoteRelation() {
    if (relTypeCase_ == 37) {
       return (org.apache.spark.connect.proto.CachedRemoteRelation) relType_;
    }
    return org.apache.spark.connect.proto.CachedRemoteRelation.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
   */
  @Override
  public org.apache.spark.connect.proto.CachedRemoteRelationOrBuilder getCachedRemoteRelationOrBuilder() {
    if (relTypeCase_ == 37) {
       return (org.apache.spark.connect.proto.CachedRemoteRelation) relType_;
    }
    return org.apache.spark.connect.proto.CachedRemoteRelation.getDefaultInstance();
  }

  public static final int COMMON_INLINE_USER_DEFINED_TABLE_FUNCTION_FIELD_NUMBER = 38;
  /**
   * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
   * @return Whether the commonInlineUserDefinedTableFunction field is set.
   */
  @Override
  public boolean hasCommonInlineUserDefinedTableFunction() {
    return relTypeCase_ == 38;
  }
  /**
   * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
   * @return The commonInlineUserDefinedTableFunction.
   */
  @Override
  public org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction getCommonInlineUserDefinedTableFunction() {
    if (relTypeCase_ == 38) {
       return (org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction) relType_;
    }
    return org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
   */
  @Override
  public org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunctionOrBuilder getCommonInlineUserDefinedTableFunctionOrBuilder() {
    if (relTypeCase_ == 38) {
       return (org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction) relType_;
    }
    return org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
  }

  public static final int AS_OF_JOIN_FIELD_NUMBER = 39;
  /**
   * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
   * @return Whether the asOfJoin field is set.
   */
  @Override
  public boolean hasAsOfJoin() {
    return relTypeCase_ == 39;
  }
  /**
   * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
   * @return The asOfJoin.
   */
  @Override
  public org.apache.spark.connect.proto.AsOfJoin getAsOfJoin() {
    if (relTypeCase_ == 39) {
       return (org.apache.spark.connect.proto.AsOfJoin) relType_;
    }
    return org.apache.spark.connect.proto.AsOfJoin.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
   */
  @Override
  public org.apache.spark.connect.proto.AsOfJoinOrBuilder getAsOfJoinOrBuilder() {
    if (relTypeCase_ == 39) {
       return (org.apache.spark.connect.proto.AsOfJoin) relType_;
    }
    return org.apache.spark.connect.proto.AsOfJoin.getDefaultInstance();
  }

  public static final int FILL_NA_FIELD_NUMBER = 90;
  /**
   * <pre>
   * NA functions
   * </pre>
   *
   * <code>.spark.connect.NAFill fill_na = 90;</code>
   * @return Whether the fillNa field is set.
   */
  @Override
  public boolean hasFillNa() {
    return relTypeCase_ == 90;
  }
  /**
   * <pre>
   * NA functions
   * </pre>
   *
   * <code>.spark.connect.NAFill fill_na = 90;</code>
   * @return The fillNa.
   */
  @Override
  public org.apache.spark.connect.proto.NAFill getFillNa() {
    if (relTypeCase_ == 90) {
       return (org.apache.spark.connect.proto.NAFill) relType_;
    }
    return org.apache.spark.connect.proto.NAFill.getDefaultInstance();
  }
  /**
   * <pre>
   * NA functions
   * </pre>
   *
   * <code>.spark.connect.NAFill fill_na = 90;</code>
   */
  @Override
  public org.apache.spark.connect.proto.NAFillOrBuilder getFillNaOrBuilder() {
    if (relTypeCase_ == 90) {
       return (org.apache.spark.connect.proto.NAFill) relType_;
    }
    return org.apache.spark.connect.proto.NAFill.getDefaultInstance();
  }

  public static final int DROP_NA_FIELD_NUMBER = 91;
  /**
   * <code>.spark.connect.NADrop drop_na = 91;</code>
   * @return Whether the dropNa field is set.
   */
  @Override
  public boolean hasDropNa() {
    return relTypeCase_ == 91;
  }
  /**
   * <code>.spark.connect.NADrop drop_na = 91;</code>
   * @return The dropNa.
   */
  @Override
  public org.apache.spark.connect.proto.NADrop getDropNa() {
    if (relTypeCase_ == 91) {
       return (org.apache.spark.connect.proto.NADrop) relType_;
    }
    return org.apache.spark.connect.proto.NADrop.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.NADrop drop_na = 91;</code>
   */
  @Override
  public org.apache.spark.connect.proto.NADropOrBuilder getDropNaOrBuilder() {
    if (relTypeCase_ == 91) {
       return (org.apache.spark.connect.proto.NADrop) relType_;
    }
    return org.apache.spark.connect.proto.NADrop.getDefaultInstance();
  }

  public static final int REPLACE_FIELD_NUMBER = 92;
  /**
   * <code>.spark.connect.NAReplace replace = 92;</code>
   * @return Whether the replace field is set.
   */
  @Override
  public boolean hasReplace() {
    return relTypeCase_ == 92;
  }
  /**
   * <code>.spark.connect.NAReplace replace = 92;</code>
   * @return The replace.
   */
  @Override
  public org.apache.spark.connect.proto.NAReplace getReplace() {
    if (relTypeCase_ == 92) {
       return (org.apache.spark.connect.proto.NAReplace) relType_;
    }
    return org.apache.spark.connect.proto.NAReplace.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.NAReplace replace = 92;</code>
   */
  @Override
  public org.apache.spark.connect.proto.NAReplaceOrBuilder getReplaceOrBuilder() {
    if (relTypeCase_ == 92) {
       return (org.apache.spark.connect.proto.NAReplace) relType_;
    }
    return org.apache.spark.connect.proto.NAReplace.getDefaultInstance();
  }

  public static final int SUMMARY_FIELD_NUMBER = 100;
  /**
   * <pre>
   * stat functions
   * </pre>
   *
   * <code>.spark.connect.StatSummary summary = 100;</code>
   * @return Whether the summary field is set.
   */
  @Override
  public boolean hasSummary() {
    return relTypeCase_ == 100;
  }
  /**
   * <pre>
   * stat functions
   * </pre>
   *
   * <code>.spark.connect.StatSummary summary = 100;</code>
   * @return The summary.
   */
  @Override
  public org.apache.spark.connect.proto.StatSummary getSummary() {
    if (relTypeCase_ == 100) {
       return (org.apache.spark.connect.proto.StatSummary) relType_;
    }
    return org.apache.spark.connect.proto.StatSummary.getDefaultInstance();
  }
  /**
   * <pre>
   * stat functions
   * </pre>
   *
   * <code>.spark.connect.StatSummary summary = 100;</code>
   */
  @Override
  public org.apache.spark.connect.proto.StatSummaryOrBuilder getSummaryOrBuilder() {
    if (relTypeCase_ == 100) {
       return (org.apache.spark.connect.proto.StatSummary) relType_;
    }
    return org.apache.spark.connect.proto.StatSummary.getDefaultInstance();
  }

  public static final int CROSSTAB_FIELD_NUMBER = 101;
  /**
   * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
   * @return Whether the crosstab field is set.
   */
  @Override
  public boolean hasCrosstab() {
    return relTypeCase_ == 101;
  }
  /**
   * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
   * @return The crosstab.
   */
  @Override
  public org.apache.spark.connect.proto.StatCrosstab getCrosstab() {
    if (relTypeCase_ == 101) {
       return (org.apache.spark.connect.proto.StatCrosstab) relType_;
    }
    return org.apache.spark.connect.proto.StatCrosstab.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
   */
  @Override
  public org.apache.spark.connect.proto.StatCrosstabOrBuilder getCrosstabOrBuilder() {
    if (relTypeCase_ == 101) {
       return (org.apache.spark.connect.proto.StatCrosstab) relType_;
    }
    return org.apache.spark.connect.proto.StatCrosstab.getDefaultInstance();
  }

  public static final int DESCRIBE_FIELD_NUMBER = 102;
  /**
   * <code>.spark.connect.StatDescribe describe = 102;</code>
   * @return Whether the describe field is set.
   */
  @Override
  public boolean hasDescribe() {
    return relTypeCase_ == 102;
  }
  /**
   * <code>.spark.connect.StatDescribe describe = 102;</code>
   * @return The describe.
   */
  @Override
  public org.apache.spark.connect.proto.StatDescribe getDescribe() {
    if (relTypeCase_ == 102) {
       return (org.apache.spark.connect.proto.StatDescribe) relType_;
    }
    return org.apache.spark.connect.proto.StatDescribe.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.StatDescribe describe = 102;</code>
   */
  @Override
  public org.apache.spark.connect.proto.StatDescribeOrBuilder getDescribeOrBuilder() {
    if (relTypeCase_ == 102) {
       return (org.apache.spark.connect.proto.StatDescribe) relType_;
    }
    return org.apache.spark.connect.proto.StatDescribe.getDefaultInstance();
  }

  public static final int COV_FIELD_NUMBER = 103;
  /**
   * <code>.spark.connect.StatCov cov = 103;</code>
   * @return Whether the cov field is set.
   */
  @Override
  public boolean hasCov() {
    return relTypeCase_ == 103;
  }
  /**
   * <code>.spark.connect.StatCov cov = 103;</code>
   * @return The cov.
   */
  @Override
  public org.apache.spark.connect.proto.StatCov getCov() {
    if (relTypeCase_ == 103) {
       return (org.apache.spark.connect.proto.StatCov) relType_;
    }
    return org.apache.spark.connect.proto.StatCov.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.StatCov cov = 103;</code>
   */
  @Override
  public org.apache.spark.connect.proto.StatCovOrBuilder getCovOrBuilder() {
    if (relTypeCase_ == 103) {
       return (org.apache.spark.connect.proto.StatCov) relType_;
    }
    return org.apache.spark.connect.proto.StatCov.getDefaultInstance();
  }

  public static final int CORR_FIELD_NUMBER = 104;
  /**
   * <code>.spark.connect.StatCorr corr = 104;</code>
   * @return Whether the corr field is set.
   */
  @Override
  public boolean hasCorr() {
    return relTypeCase_ == 104;
  }
  /**
   * <code>.spark.connect.StatCorr corr = 104;</code>
   * @return The corr.
   */
  @Override
  public org.apache.spark.connect.proto.StatCorr getCorr() {
    if (relTypeCase_ == 104) {
       return (org.apache.spark.connect.proto.StatCorr) relType_;
    }
    return org.apache.spark.connect.proto.StatCorr.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.StatCorr corr = 104;</code>
   */
  @Override
  public org.apache.spark.connect.proto.StatCorrOrBuilder getCorrOrBuilder() {
    if (relTypeCase_ == 104) {
       return (org.apache.spark.connect.proto.StatCorr) relType_;
    }
    return org.apache.spark.connect.proto.StatCorr.getDefaultInstance();
  }

  public static final int APPROX_QUANTILE_FIELD_NUMBER = 105;
  /**
   * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
   * @return Whether the approxQuantile field is set.
   */
  @Override
  public boolean hasApproxQuantile() {
    return relTypeCase_ == 105;
  }
  /**
   * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
   * @return The approxQuantile.
   */
  @Override
  public org.apache.spark.connect.proto.StatApproxQuantile getApproxQuantile() {
    if (relTypeCase_ == 105) {
       return (org.apache.spark.connect.proto.StatApproxQuantile) relType_;
    }
    return org.apache.spark.connect.proto.StatApproxQuantile.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
   */
  @Override
  public org.apache.spark.connect.proto.StatApproxQuantileOrBuilder getApproxQuantileOrBuilder() {
    if (relTypeCase_ == 105) {
       return (org.apache.spark.connect.proto.StatApproxQuantile) relType_;
    }
    return org.apache.spark.connect.proto.StatApproxQuantile.getDefaultInstance();
  }

  public static final int FREQ_ITEMS_FIELD_NUMBER = 106;
  /**
   * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
   * @return Whether the freqItems field is set.
   */
  @Override
  public boolean hasFreqItems() {
    return relTypeCase_ == 106;
  }
  /**
   * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
   * @return The freqItems.
   */
  @Override
  public org.apache.spark.connect.proto.StatFreqItems getFreqItems() {
    if (relTypeCase_ == 106) {
       return (org.apache.spark.connect.proto.StatFreqItems) relType_;
    }
    return org.apache.spark.connect.proto.StatFreqItems.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
   */
  @Override
  public org.apache.spark.connect.proto.StatFreqItemsOrBuilder getFreqItemsOrBuilder() {
    if (relTypeCase_ == 106) {
       return (org.apache.spark.connect.proto.StatFreqItems) relType_;
    }
    return org.apache.spark.connect.proto.StatFreqItems.getDefaultInstance();
  }

  public static final int SAMPLE_BY_FIELD_NUMBER = 107;
  /**
   * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
   * @return Whether the sampleBy field is set.
   */
  @Override
  public boolean hasSampleBy() {
    return relTypeCase_ == 107;
  }
  /**
   * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
   * @return The sampleBy.
   */
  @Override
  public org.apache.spark.connect.proto.StatSampleBy getSampleBy() {
    if (relTypeCase_ == 107) {
       return (org.apache.spark.connect.proto.StatSampleBy) relType_;
    }
    return org.apache.spark.connect.proto.StatSampleBy.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
   */
  @Override
  public org.apache.spark.connect.proto.StatSampleByOrBuilder getSampleByOrBuilder() {
    if (relTypeCase_ == 107) {
       return (org.apache.spark.connect.proto.StatSampleBy) relType_;
    }
    return org.apache.spark.connect.proto.StatSampleBy.getDefaultInstance();
  }

  public static final int CATALOG_FIELD_NUMBER = 200;
  /**
   * <pre>
   * Catalog API (experimental / unstable)
   * </pre>
   *
   * <code>.spark.connect.Catalog catalog = 200;</code>
   * @return Whether the catalog field is set.
   */
  @Override
  public boolean hasCatalog() {
    return relTypeCase_ == 200;
  }
  /**
   * <pre>
   * Catalog API (experimental / unstable)
   * </pre>
   *
   * <code>.spark.connect.Catalog catalog = 200;</code>
   * @return The catalog.
   */
  @Override
  public org.apache.spark.connect.proto.Catalog getCatalog() {
    if (relTypeCase_ == 200) {
       return (org.apache.spark.connect.proto.Catalog) relType_;
    }
    return org.apache.spark.connect.proto.Catalog.getDefaultInstance();
  }
  /**
   * <pre>
   * Catalog API (experimental / unstable)
   * </pre>
   *
   * <code>.spark.connect.Catalog catalog = 200;</code>
   */
  @Override
  public org.apache.spark.connect.proto.CatalogOrBuilder getCatalogOrBuilder() {
    if (relTypeCase_ == 200) {
       return (org.apache.spark.connect.proto.Catalog) relType_;
    }
    return org.apache.spark.connect.proto.Catalog.getDefaultInstance();
  }

  public static final int EXTENSION_FIELD_NUMBER = 998;
  /**
   * <pre>
   * This field is used to mark extensions to the protocol. When plugins generate arbitrary
   * relations they can add them here. During the planning the correct resolution is done.
   * </pre>
   *
   * <code>.google.protobuf.Any extension = 998;</code>
   * @return Whether the extension field is set.
   */
  @Override
  public boolean hasExtension() {
    return relTypeCase_ == 998;
  }
  /**
   * <pre>
   * This field is used to mark extensions to the protocol. When plugins generate arbitrary
   * relations they can add them here. During the planning the correct resolution is done.
   * </pre>
   *
   * <code>.google.protobuf.Any extension = 998;</code>
   * @return The extension.
   */
  @Override
  public com.google.protobuf.Any getExtension() {
    if (relTypeCase_ == 998) {
       return (com.google.protobuf.Any) relType_;
    }
    return com.google.protobuf.Any.getDefaultInstance();
  }
  /**
   * <pre>
   * This field is used to mark extensions to the protocol. When plugins generate arbitrary
   * relations they can add them here. During the planning the correct resolution is done.
   * </pre>
   *
   * <code>.google.protobuf.Any extension = 998;</code>
   */
  @Override
  public com.google.protobuf.AnyOrBuilder getExtensionOrBuilder() {
    if (relTypeCase_ == 998) {
       return (com.google.protobuf.Any) relType_;
    }
    return com.google.protobuf.Any.getDefaultInstance();
  }

  public static final int UNKNOWN_FIELD_NUMBER = 999;
  /**
   * <code>.spark.connect.Unknown unknown = 999;</code>
   * @return Whether the unknown field is set.
   */
  @Override
  public boolean hasUnknown() {
    return relTypeCase_ == 999;
  }
  /**
   * <code>.spark.connect.Unknown unknown = 999;</code>
   * @return The unknown.
   */
  @Override
  public org.apache.spark.connect.proto.Unknown getUnknown() {
    if (relTypeCase_ == 999) {
       return (org.apache.spark.connect.proto.Unknown) relType_;
    }
    return org.apache.spark.connect.proto.Unknown.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Unknown unknown = 999;</code>
   */
  @Override
  public org.apache.spark.connect.proto.UnknownOrBuilder getUnknownOrBuilder() {
    if (relTypeCase_ == 999) {
       return (org.apache.spark.connect.proto.Unknown) relType_;
    }
    return org.apache.spark.connect.proto.Unknown.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (common_ != null) {
      output.writeMessage(1, getCommon());
    }
    if (relTypeCase_ == 2) {
      output.writeMessage(2, (org.apache.spark.connect.proto.Read) relType_);
    }
    if (relTypeCase_ == 3) {
      output.writeMessage(3, (org.apache.spark.connect.proto.Project) relType_);
    }
    if (relTypeCase_ == 4) {
      output.writeMessage(4, (org.apache.spark.connect.proto.Filter) relType_);
    }
    if (relTypeCase_ == 5) {
      output.writeMessage(5, (org.apache.spark.connect.proto.Join) relType_);
    }
    if (relTypeCase_ == 6) {
      output.writeMessage(6, (org.apache.spark.connect.proto.SetOperation) relType_);
    }
    if (relTypeCase_ == 7) {
      output.writeMessage(7, (org.apache.spark.connect.proto.Sort) relType_);
    }
    if (relTypeCase_ == 8) {
      output.writeMessage(8, (org.apache.spark.connect.proto.Limit) relType_);
    }
    if (relTypeCase_ == 9) {
      output.writeMessage(9, (org.apache.spark.connect.proto.Aggregate) relType_);
    }
    if (relTypeCase_ == 10) {
      output.writeMessage(10, (org.apache.spark.connect.proto.SQL) relType_);
    }
    if (relTypeCase_ == 11) {
      output.writeMessage(11, (org.apache.spark.connect.proto.LocalRelation) relType_);
    }
    if (relTypeCase_ == 12) {
      output.writeMessage(12, (org.apache.spark.connect.proto.Sample) relType_);
    }
    if (relTypeCase_ == 13) {
      output.writeMessage(13, (org.apache.spark.connect.proto.Offset) relType_);
    }
    if (relTypeCase_ == 14) {
      output.writeMessage(14, (org.apache.spark.connect.proto.Deduplicate) relType_);
    }
    if (relTypeCase_ == 15) {
      output.writeMessage(15, (org.apache.spark.connect.proto.Range) relType_);
    }
    if (relTypeCase_ == 16) {
      output.writeMessage(16, (org.apache.spark.connect.proto.SubqueryAlias) relType_);
    }
    if (relTypeCase_ == 17) {
      output.writeMessage(17, (org.apache.spark.connect.proto.Repartition) relType_);
    }
    if (relTypeCase_ == 18) {
      output.writeMessage(18, (org.apache.spark.connect.proto.ToDF) relType_);
    }
    if (relTypeCase_ == 19) {
      output.writeMessage(19, (org.apache.spark.connect.proto.WithColumnsRenamed) relType_);
    }
    if (relTypeCase_ == 20) {
      output.writeMessage(20, (org.apache.spark.connect.proto.ShowString) relType_);
    }
    if (relTypeCase_ == 21) {
      output.writeMessage(21, (org.apache.spark.connect.proto.Drop) relType_);
    }
    if (relTypeCase_ == 22) {
      output.writeMessage(22, (org.apache.spark.connect.proto.Tail) relType_);
    }
    if (relTypeCase_ == 23) {
      output.writeMessage(23, (org.apache.spark.connect.proto.WithColumns) relType_);
    }
    if (relTypeCase_ == 24) {
      output.writeMessage(24, (org.apache.spark.connect.proto.Hint) relType_);
    }
    if (relTypeCase_ == 25) {
      output.writeMessage(25, (org.apache.spark.connect.proto.Unpivot) relType_);
    }
    if (relTypeCase_ == 26) {
      output.writeMessage(26, (org.apache.spark.connect.proto.ToSchema) relType_);
    }
    if (relTypeCase_ == 27) {
      output.writeMessage(27, (org.apache.spark.connect.proto.RepartitionByExpression) relType_);
    }
    if (relTypeCase_ == 28) {
      output.writeMessage(28, (org.apache.spark.connect.proto.MapPartitions) relType_);
    }
    if (relTypeCase_ == 29) {
      output.writeMessage(29, (org.apache.spark.connect.proto.CollectMetrics) relType_);
    }
    if (relTypeCase_ == 30) {
      output.writeMessage(30, (org.apache.spark.connect.proto.Parse) relType_);
    }
    if (relTypeCase_ == 31) {
      output.writeMessage(31, (org.apache.spark.connect.proto.GroupMap) relType_);
    }
    if (relTypeCase_ == 32) {
      output.writeMessage(32, (org.apache.spark.connect.proto.CoGroupMap) relType_);
    }
    if (relTypeCase_ == 33) {
      output.writeMessage(33, (org.apache.spark.connect.proto.WithWatermark) relType_);
    }
    if (relTypeCase_ == 34) {
      output.writeMessage(34, (org.apache.spark.connect.proto.ApplyInPandasWithState) relType_);
    }
    if (relTypeCase_ == 35) {
      output.writeMessage(35, (org.apache.spark.connect.proto.HtmlString) relType_);
    }
    if (relTypeCase_ == 36) {
      output.writeMessage(36, (org.apache.spark.connect.proto.CachedLocalRelation) relType_);
    }
    if (relTypeCase_ == 37) {
      output.writeMessage(37, (org.apache.spark.connect.proto.CachedRemoteRelation) relType_);
    }
    if (relTypeCase_ == 38) {
      output.writeMessage(38, (org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction) relType_);
    }
    if (relTypeCase_ == 39) {
      output.writeMessage(39, (org.apache.spark.connect.proto.AsOfJoin) relType_);
    }
    if (relTypeCase_ == 90) {
      output.writeMessage(90, (org.apache.spark.connect.proto.NAFill) relType_);
    }
    if (relTypeCase_ == 91) {
      output.writeMessage(91, (org.apache.spark.connect.proto.NADrop) relType_);
    }
    if (relTypeCase_ == 92) {
      output.writeMessage(92, (org.apache.spark.connect.proto.NAReplace) relType_);
    }
    if (relTypeCase_ == 100) {
      output.writeMessage(100, (org.apache.spark.connect.proto.StatSummary) relType_);
    }
    if (relTypeCase_ == 101) {
      output.writeMessage(101, (org.apache.spark.connect.proto.StatCrosstab) relType_);
    }
    if (relTypeCase_ == 102) {
      output.writeMessage(102, (org.apache.spark.connect.proto.StatDescribe) relType_);
    }
    if (relTypeCase_ == 103) {
      output.writeMessage(103, (org.apache.spark.connect.proto.StatCov) relType_);
    }
    if (relTypeCase_ == 104) {
      output.writeMessage(104, (org.apache.spark.connect.proto.StatCorr) relType_);
    }
    if (relTypeCase_ == 105) {
      output.writeMessage(105, (org.apache.spark.connect.proto.StatApproxQuantile) relType_);
    }
    if (relTypeCase_ == 106) {
      output.writeMessage(106, (org.apache.spark.connect.proto.StatFreqItems) relType_);
    }
    if (relTypeCase_ == 107) {
      output.writeMessage(107, (org.apache.spark.connect.proto.StatSampleBy) relType_);
    }
    if (relTypeCase_ == 200) {
      output.writeMessage(200, (org.apache.spark.connect.proto.Catalog) relType_);
    }
    if (relTypeCase_ == 998) {
      output.writeMessage(998, (com.google.protobuf.Any) relType_);
    }
    if (relTypeCase_ == 999) {
      output.writeMessage(999, (org.apache.spark.connect.proto.Unknown) relType_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (common_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCommon());
    }
    if (relTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.apache.spark.connect.proto.Read) relType_);
    }
    if (relTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.apache.spark.connect.proto.Project) relType_);
    }
    if (relTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.apache.spark.connect.proto.Filter) relType_);
    }
    if (relTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.apache.spark.connect.proto.Join) relType_);
    }
    if (relTypeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.apache.spark.connect.proto.SetOperation) relType_);
    }
    if (relTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.apache.spark.connect.proto.Sort) relType_);
    }
    if (relTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (org.apache.spark.connect.proto.Limit) relType_);
    }
    if (relTypeCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (org.apache.spark.connect.proto.Aggregate) relType_);
    }
    if (relTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (org.apache.spark.connect.proto.SQL) relType_);
    }
    if (relTypeCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (org.apache.spark.connect.proto.LocalRelation) relType_);
    }
    if (relTypeCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (org.apache.spark.connect.proto.Sample) relType_);
    }
    if (relTypeCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (org.apache.spark.connect.proto.Offset) relType_);
    }
    if (relTypeCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (org.apache.spark.connect.proto.Deduplicate) relType_);
    }
    if (relTypeCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (org.apache.spark.connect.proto.Range) relType_);
    }
    if (relTypeCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (org.apache.spark.connect.proto.SubqueryAlias) relType_);
    }
    if (relTypeCase_ == 17) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, (org.apache.spark.connect.proto.Repartition) relType_);
    }
    if (relTypeCase_ == 18) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, (org.apache.spark.connect.proto.ToDF) relType_);
    }
    if (relTypeCase_ == 19) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, (org.apache.spark.connect.proto.WithColumnsRenamed) relType_);
    }
    if (relTypeCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (org.apache.spark.connect.proto.ShowString) relType_);
    }
    if (relTypeCase_ == 21) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, (org.apache.spark.connect.proto.Drop) relType_);
    }
    if (relTypeCase_ == 22) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, (org.apache.spark.connect.proto.Tail) relType_);
    }
    if (relTypeCase_ == 23) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, (org.apache.spark.connect.proto.WithColumns) relType_);
    }
    if (relTypeCase_ == 24) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(24, (org.apache.spark.connect.proto.Hint) relType_);
    }
    if (relTypeCase_ == 25) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(25, (org.apache.spark.connect.proto.Unpivot) relType_);
    }
    if (relTypeCase_ == 26) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(26, (org.apache.spark.connect.proto.ToSchema) relType_);
    }
    if (relTypeCase_ == 27) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(27, (org.apache.spark.connect.proto.RepartitionByExpression) relType_);
    }
    if (relTypeCase_ == 28) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(28, (org.apache.spark.connect.proto.MapPartitions) relType_);
    }
    if (relTypeCase_ == 29) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(29, (org.apache.spark.connect.proto.CollectMetrics) relType_);
    }
    if (relTypeCase_ == 30) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(30, (org.apache.spark.connect.proto.Parse) relType_);
    }
    if (relTypeCase_ == 31) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(31, (org.apache.spark.connect.proto.GroupMap) relType_);
    }
    if (relTypeCase_ == 32) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(32, (org.apache.spark.connect.proto.CoGroupMap) relType_);
    }
    if (relTypeCase_ == 33) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(33, (org.apache.spark.connect.proto.WithWatermark) relType_);
    }
    if (relTypeCase_ == 34) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(34, (org.apache.spark.connect.proto.ApplyInPandasWithState) relType_);
    }
    if (relTypeCase_ == 35) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(35, (org.apache.spark.connect.proto.HtmlString) relType_);
    }
    if (relTypeCase_ == 36) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(36, (org.apache.spark.connect.proto.CachedLocalRelation) relType_);
    }
    if (relTypeCase_ == 37) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(37, (org.apache.spark.connect.proto.CachedRemoteRelation) relType_);
    }
    if (relTypeCase_ == 38) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(38, (org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction) relType_);
    }
    if (relTypeCase_ == 39) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(39, (org.apache.spark.connect.proto.AsOfJoin) relType_);
    }
    if (relTypeCase_ == 90) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(90, (org.apache.spark.connect.proto.NAFill) relType_);
    }
    if (relTypeCase_ == 91) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(91, (org.apache.spark.connect.proto.NADrop) relType_);
    }
    if (relTypeCase_ == 92) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(92, (org.apache.spark.connect.proto.NAReplace) relType_);
    }
    if (relTypeCase_ == 100) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(100, (org.apache.spark.connect.proto.StatSummary) relType_);
    }
    if (relTypeCase_ == 101) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(101, (org.apache.spark.connect.proto.StatCrosstab) relType_);
    }
    if (relTypeCase_ == 102) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(102, (org.apache.spark.connect.proto.StatDescribe) relType_);
    }
    if (relTypeCase_ == 103) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(103, (org.apache.spark.connect.proto.StatCov) relType_);
    }
    if (relTypeCase_ == 104) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(104, (org.apache.spark.connect.proto.StatCorr) relType_);
    }
    if (relTypeCase_ == 105) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(105, (org.apache.spark.connect.proto.StatApproxQuantile) relType_);
    }
    if (relTypeCase_ == 106) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(106, (org.apache.spark.connect.proto.StatFreqItems) relType_);
    }
    if (relTypeCase_ == 107) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(107, (org.apache.spark.connect.proto.StatSampleBy) relType_);
    }
    if (relTypeCase_ == 200) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(200, (org.apache.spark.connect.proto.Catalog) relType_);
    }
    if (relTypeCase_ == 998) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(998, (com.google.protobuf.Any) relType_);
    }
    if (relTypeCase_ == 999) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(999, (org.apache.spark.connect.proto.Unknown) relType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.Relation)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.Relation other = (org.apache.spark.connect.proto.Relation) obj;

    if (hasCommon() != other.hasCommon()) return false;
    if (hasCommon()) {
      if (!getCommon()
          .equals(other.getCommon())) return false;
    }
    if (!getRelTypeCase().equals(other.getRelTypeCase())) return false;
    switch (relTypeCase_) {
      case 2:
        if (!getRead()
            .equals(other.getRead())) return false;
        break;
      case 3:
        if (!getProject()
            .equals(other.getProject())) return false;
        break;
      case 4:
        if (!getFilter()
            .equals(other.getFilter())) return false;
        break;
      case 5:
        if (!getJoin()
            .equals(other.getJoin())) return false;
        break;
      case 6:
        if (!getSetOp()
            .equals(other.getSetOp())) return false;
        break;
      case 7:
        if (!getSort()
            .equals(other.getSort())) return false;
        break;
      case 8:
        if (!getLimit()
            .equals(other.getLimit())) return false;
        break;
      case 9:
        if (!getAggregate()
            .equals(other.getAggregate())) return false;
        break;
      case 10:
        if (!getSql()
            .equals(other.getSql())) return false;
        break;
      case 11:
        if (!getLocalRelation()
            .equals(other.getLocalRelation())) return false;
        break;
      case 12:
        if (!getSample()
            .equals(other.getSample())) return false;
        break;
      case 13:
        if (!getOffset()
            .equals(other.getOffset())) return false;
        break;
      case 14:
        if (!getDeduplicate()
            .equals(other.getDeduplicate())) return false;
        break;
      case 15:
        if (!getRange()
            .equals(other.getRange())) return false;
        break;
      case 16:
        if (!getSubqueryAlias()
            .equals(other.getSubqueryAlias())) return false;
        break;
      case 17:
        if (!getRepartition()
            .equals(other.getRepartition())) return false;
        break;
      case 18:
        if (!getToDf()
            .equals(other.getToDf())) return false;
        break;
      case 19:
        if (!getWithColumnsRenamed()
            .equals(other.getWithColumnsRenamed())) return false;
        break;
      case 20:
        if (!getShowString()
            .equals(other.getShowString())) return false;
        break;
      case 21:
        if (!getDrop()
            .equals(other.getDrop())) return false;
        break;
      case 22:
        if (!getTail()
            .equals(other.getTail())) return false;
        break;
      case 23:
        if (!getWithColumns()
            .equals(other.getWithColumns())) return false;
        break;
      case 24:
        if (!getHint()
            .equals(other.getHint())) return false;
        break;
      case 25:
        if (!getUnpivot()
            .equals(other.getUnpivot())) return false;
        break;
      case 26:
        if (!getToSchema()
            .equals(other.getToSchema())) return false;
        break;
      case 27:
        if (!getRepartitionByExpression()
            .equals(other.getRepartitionByExpression())) return false;
        break;
      case 28:
        if (!getMapPartitions()
            .equals(other.getMapPartitions())) return false;
        break;
      case 29:
        if (!getCollectMetrics()
            .equals(other.getCollectMetrics())) return false;
        break;
      case 30:
        if (!getParse()
            .equals(other.getParse())) return false;
        break;
      case 31:
        if (!getGroupMap()
            .equals(other.getGroupMap())) return false;
        break;
      case 32:
        if (!getCoGroupMap()
            .equals(other.getCoGroupMap())) return false;
        break;
      case 33:
        if (!getWithWatermark()
            .equals(other.getWithWatermark())) return false;
        break;
      case 34:
        if (!getApplyInPandasWithState()
            .equals(other.getApplyInPandasWithState())) return false;
        break;
      case 35:
        if (!getHtmlString()
            .equals(other.getHtmlString())) return false;
        break;
      case 36:
        if (!getCachedLocalRelation()
            .equals(other.getCachedLocalRelation())) return false;
        break;
      case 37:
        if (!getCachedRemoteRelation()
            .equals(other.getCachedRemoteRelation())) return false;
        break;
      case 38:
        if (!getCommonInlineUserDefinedTableFunction()
            .equals(other.getCommonInlineUserDefinedTableFunction())) return false;
        break;
      case 39:
        if (!getAsOfJoin()
            .equals(other.getAsOfJoin())) return false;
        break;
      case 90:
        if (!getFillNa()
            .equals(other.getFillNa())) return false;
        break;
      case 91:
        if (!getDropNa()
            .equals(other.getDropNa())) return false;
        break;
      case 92:
        if (!getReplace()
            .equals(other.getReplace())) return false;
        break;
      case 100:
        if (!getSummary()
            .equals(other.getSummary())) return false;
        break;
      case 101:
        if (!getCrosstab()
            .equals(other.getCrosstab())) return false;
        break;
      case 102:
        if (!getDescribe()
            .equals(other.getDescribe())) return false;
        break;
      case 103:
        if (!getCov()
            .equals(other.getCov())) return false;
        break;
      case 104:
        if (!getCorr()
            .equals(other.getCorr())) return false;
        break;
      case 105:
        if (!getApproxQuantile()
            .equals(other.getApproxQuantile())) return false;
        break;
      case 106:
        if (!getFreqItems()
            .equals(other.getFreqItems())) return false;
        break;
      case 107:
        if (!getSampleBy()
            .equals(other.getSampleBy())) return false;
        break;
      case 200:
        if (!getCatalog()
            .equals(other.getCatalog())) return false;
        break;
      case 998:
        if (!getExtension()
            .equals(other.getExtension())) return false;
        break;
      case 999:
        if (!getUnknown()
            .equals(other.getUnknown())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCommon()) {
      hash = (37 * hash) + COMMON_FIELD_NUMBER;
      hash = (53 * hash) + getCommon().hashCode();
    }
    switch (relTypeCase_) {
      case 2:
        hash = (37 * hash) + READ_FIELD_NUMBER;
        hash = (53 * hash) + getRead().hashCode();
        break;
      case 3:
        hash = (37 * hash) + PROJECT_FIELD_NUMBER;
        hash = (53 * hash) + getProject().hashCode();
        break;
      case 4:
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
        break;
      case 5:
        hash = (37 * hash) + JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getJoin().hashCode();
        break;
      case 6:
        hash = (37 * hash) + SET_OP_FIELD_NUMBER;
        hash = (53 * hash) + getSetOp().hashCode();
        break;
      case 7:
        hash = (37 * hash) + SORT_FIELD_NUMBER;
        hash = (53 * hash) + getSort().hashCode();
        break;
      case 8:
        hash = (37 * hash) + LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getLimit().hashCode();
        break;
      case 9:
        hash = (37 * hash) + AGGREGATE_FIELD_NUMBER;
        hash = (53 * hash) + getAggregate().hashCode();
        break;
      case 10:
        hash = (37 * hash) + SQL_FIELD_NUMBER;
        hash = (53 * hash) + getSql().hashCode();
        break;
      case 11:
        hash = (37 * hash) + LOCAL_RELATION_FIELD_NUMBER;
        hash = (53 * hash) + getLocalRelation().hashCode();
        break;
      case 12:
        hash = (37 * hash) + SAMPLE_FIELD_NUMBER;
        hash = (53 * hash) + getSample().hashCode();
        break;
      case 13:
        hash = (37 * hash) + OFFSET_FIELD_NUMBER;
        hash = (53 * hash) + getOffset().hashCode();
        break;
      case 14:
        hash = (37 * hash) + DEDUPLICATE_FIELD_NUMBER;
        hash = (53 * hash) + getDeduplicate().hashCode();
        break;
      case 15:
        hash = (37 * hash) + RANGE_FIELD_NUMBER;
        hash = (53 * hash) + getRange().hashCode();
        break;
      case 16:
        hash = (37 * hash) + SUBQUERY_ALIAS_FIELD_NUMBER;
        hash = (53 * hash) + getSubqueryAlias().hashCode();
        break;
      case 17:
        hash = (37 * hash) + REPARTITION_FIELD_NUMBER;
        hash = (53 * hash) + getRepartition().hashCode();
        break;
      case 18:
        hash = (37 * hash) + TO_DF_FIELD_NUMBER;
        hash = (53 * hash) + getToDf().hashCode();
        break;
      case 19:
        hash = (37 * hash) + WITH_COLUMNS_RENAMED_FIELD_NUMBER;
        hash = (53 * hash) + getWithColumnsRenamed().hashCode();
        break;
      case 20:
        hash = (37 * hash) + SHOW_STRING_FIELD_NUMBER;
        hash = (53 * hash) + getShowString().hashCode();
        break;
      case 21:
        hash = (37 * hash) + DROP_FIELD_NUMBER;
        hash = (53 * hash) + getDrop().hashCode();
        break;
      case 22:
        hash = (37 * hash) + TAIL_FIELD_NUMBER;
        hash = (53 * hash) + getTail().hashCode();
        break;
      case 23:
        hash = (37 * hash) + WITH_COLUMNS_FIELD_NUMBER;
        hash = (53 * hash) + getWithColumns().hashCode();
        break;
      case 24:
        hash = (37 * hash) + HINT_FIELD_NUMBER;
        hash = (53 * hash) + getHint().hashCode();
        break;
      case 25:
        hash = (37 * hash) + UNPIVOT_FIELD_NUMBER;
        hash = (53 * hash) + getUnpivot().hashCode();
        break;
      case 26:
        hash = (37 * hash) + TO_SCHEMA_FIELD_NUMBER;
        hash = (53 * hash) + getToSchema().hashCode();
        break;
      case 27:
        hash = (37 * hash) + REPARTITION_BY_EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getRepartitionByExpression().hashCode();
        break;
      case 28:
        hash = (37 * hash) + MAP_PARTITIONS_FIELD_NUMBER;
        hash = (53 * hash) + getMapPartitions().hashCode();
        break;
      case 29:
        hash = (37 * hash) + COLLECT_METRICS_FIELD_NUMBER;
        hash = (53 * hash) + getCollectMetrics().hashCode();
        break;
      case 30:
        hash = (37 * hash) + PARSE_FIELD_NUMBER;
        hash = (53 * hash) + getParse().hashCode();
        break;
      case 31:
        hash = (37 * hash) + GROUP_MAP_FIELD_NUMBER;
        hash = (53 * hash) + getGroupMap().hashCode();
        break;
      case 32:
        hash = (37 * hash) + CO_GROUP_MAP_FIELD_NUMBER;
        hash = (53 * hash) + getCoGroupMap().hashCode();
        break;
      case 33:
        hash = (37 * hash) + WITH_WATERMARK_FIELD_NUMBER;
        hash = (53 * hash) + getWithWatermark().hashCode();
        break;
      case 34:
        hash = (37 * hash) + APPLY_IN_PANDAS_WITH_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getApplyInPandasWithState().hashCode();
        break;
      case 35:
        hash = (37 * hash) + HTML_STRING_FIELD_NUMBER;
        hash = (53 * hash) + getHtmlString().hashCode();
        break;
      case 36:
        hash = (37 * hash) + CACHED_LOCAL_RELATION_FIELD_NUMBER;
        hash = (53 * hash) + getCachedLocalRelation().hashCode();
        break;
      case 37:
        hash = (37 * hash) + CACHED_REMOTE_RELATION_FIELD_NUMBER;
        hash = (53 * hash) + getCachedRemoteRelation().hashCode();
        break;
      case 38:
        hash = (37 * hash) + COMMON_INLINE_USER_DEFINED_TABLE_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getCommonInlineUserDefinedTableFunction().hashCode();
        break;
      case 39:
        hash = (37 * hash) + AS_OF_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getAsOfJoin().hashCode();
        break;
      case 90:
        hash = (37 * hash) + FILL_NA_FIELD_NUMBER;
        hash = (53 * hash) + getFillNa().hashCode();
        break;
      case 91:
        hash = (37 * hash) + DROP_NA_FIELD_NUMBER;
        hash = (53 * hash) + getDropNa().hashCode();
        break;
      case 92:
        hash = (37 * hash) + REPLACE_FIELD_NUMBER;
        hash = (53 * hash) + getReplace().hashCode();
        break;
      case 100:
        hash = (37 * hash) + SUMMARY_FIELD_NUMBER;
        hash = (53 * hash) + getSummary().hashCode();
        break;
      case 101:
        hash = (37 * hash) + CROSSTAB_FIELD_NUMBER;
        hash = (53 * hash) + getCrosstab().hashCode();
        break;
      case 102:
        hash = (37 * hash) + DESCRIBE_FIELD_NUMBER;
        hash = (53 * hash) + getDescribe().hashCode();
        break;
      case 103:
        hash = (37 * hash) + COV_FIELD_NUMBER;
        hash = (53 * hash) + getCov().hashCode();
        break;
      case 104:
        hash = (37 * hash) + CORR_FIELD_NUMBER;
        hash = (53 * hash) + getCorr().hashCode();
        break;
      case 105:
        hash = (37 * hash) + APPROX_QUANTILE_FIELD_NUMBER;
        hash = (53 * hash) + getApproxQuantile().hashCode();
        break;
      case 106:
        hash = (37 * hash) + FREQ_ITEMS_FIELD_NUMBER;
        hash = (53 * hash) + getFreqItems().hashCode();
        break;
      case 107:
        hash = (37 * hash) + SAMPLE_BY_FIELD_NUMBER;
        hash = (53 * hash) + getSampleBy().hashCode();
        break;
      case 200:
        hash = (37 * hash) + CATALOG_FIELD_NUMBER;
        hash = (53 * hash) + getCatalog().hashCode();
        break;
      case 998:
        hash = (37 * hash) + EXTENSION_FIELD_NUMBER;
        hash = (53 * hash) + getExtension().hashCode();
        break;
      case 999:
        hash = (37 * hash) + UNKNOWN_FIELD_NUMBER;
        hash = (53 * hash) + getUnknown().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.Relation parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.Relation parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Relation parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.Relation parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Relation parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.Relation parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Relation parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.Relation parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.Relation parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.Relation parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Relation parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.Relation parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.Relation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The main [[Relation]] type. Fundamentally, a relation is a typed container
   * that has exactly one explicit relation type set.
   *
   * When adding new relation types, they have to be registered here.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Relation}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.Relation)
      org.apache.spark.connect.proto.RelationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Relation_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Relation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.Relation.class, org.apache.spark.connect.proto.Relation.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.Relation.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      bitField1_ = 0;
      common_ = null;
      if (commonBuilder_ != null) {
        commonBuilder_.dispose();
        commonBuilder_ = null;
      }
      if (readBuilder_ != null) {
        readBuilder_.clear();
      }
      if (projectBuilder_ != null) {
        projectBuilder_.clear();
      }
      if (filterBuilder_ != null) {
        filterBuilder_.clear();
      }
      if (joinBuilder_ != null) {
        joinBuilder_.clear();
      }
      if (setOpBuilder_ != null) {
        setOpBuilder_.clear();
      }
      if (sortBuilder_ != null) {
        sortBuilder_.clear();
      }
      if (limitBuilder_ != null) {
        limitBuilder_.clear();
      }
      if (aggregateBuilder_ != null) {
        aggregateBuilder_.clear();
      }
      if (sqlBuilder_ != null) {
        sqlBuilder_.clear();
      }
      if (localRelationBuilder_ != null) {
        localRelationBuilder_.clear();
      }
      if (sampleBuilder_ != null) {
        sampleBuilder_.clear();
      }
      if (offsetBuilder_ != null) {
        offsetBuilder_.clear();
      }
      if (deduplicateBuilder_ != null) {
        deduplicateBuilder_.clear();
      }
      if (rangeBuilder_ != null) {
        rangeBuilder_.clear();
      }
      if (subqueryAliasBuilder_ != null) {
        subqueryAliasBuilder_.clear();
      }
      if (repartitionBuilder_ != null) {
        repartitionBuilder_.clear();
      }
      if (toDfBuilder_ != null) {
        toDfBuilder_.clear();
      }
      if (withColumnsRenamedBuilder_ != null) {
        withColumnsRenamedBuilder_.clear();
      }
      if (showStringBuilder_ != null) {
        showStringBuilder_.clear();
      }
      if (dropBuilder_ != null) {
        dropBuilder_.clear();
      }
      if (tailBuilder_ != null) {
        tailBuilder_.clear();
      }
      if (withColumnsBuilder_ != null) {
        withColumnsBuilder_.clear();
      }
      if (hintBuilder_ != null) {
        hintBuilder_.clear();
      }
      if (unpivotBuilder_ != null) {
        unpivotBuilder_.clear();
      }
      if (toSchemaBuilder_ != null) {
        toSchemaBuilder_.clear();
      }
      if (repartitionByExpressionBuilder_ != null) {
        repartitionByExpressionBuilder_.clear();
      }
      if (mapPartitionsBuilder_ != null) {
        mapPartitionsBuilder_.clear();
      }
      if (collectMetricsBuilder_ != null) {
        collectMetricsBuilder_.clear();
      }
      if (parseBuilder_ != null) {
        parseBuilder_.clear();
      }
      if (groupMapBuilder_ != null) {
        groupMapBuilder_.clear();
      }
      if (coGroupMapBuilder_ != null) {
        coGroupMapBuilder_.clear();
      }
      if (withWatermarkBuilder_ != null) {
        withWatermarkBuilder_.clear();
      }
      if (applyInPandasWithStateBuilder_ != null) {
        applyInPandasWithStateBuilder_.clear();
      }
      if (htmlStringBuilder_ != null) {
        htmlStringBuilder_.clear();
      }
      if (cachedLocalRelationBuilder_ != null) {
        cachedLocalRelationBuilder_.clear();
      }
      if (cachedRemoteRelationBuilder_ != null) {
        cachedRemoteRelationBuilder_.clear();
      }
      if (commonInlineUserDefinedTableFunctionBuilder_ != null) {
        commonInlineUserDefinedTableFunctionBuilder_.clear();
      }
      if (asOfJoinBuilder_ != null) {
        asOfJoinBuilder_.clear();
      }
      if (fillNaBuilder_ != null) {
        fillNaBuilder_.clear();
      }
      if (dropNaBuilder_ != null) {
        dropNaBuilder_.clear();
      }
      if (replaceBuilder_ != null) {
        replaceBuilder_.clear();
      }
      if (summaryBuilder_ != null) {
        summaryBuilder_.clear();
      }
      if (crosstabBuilder_ != null) {
        crosstabBuilder_.clear();
      }
      if (describeBuilder_ != null) {
        describeBuilder_.clear();
      }
      if (covBuilder_ != null) {
        covBuilder_.clear();
      }
      if (corrBuilder_ != null) {
        corrBuilder_.clear();
      }
      if (approxQuantileBuilder_ != null) {
        approxQuantileBuilder_.clear();
      }
      if (freqItemsBuilder_ != null) {
        freqItemsBuilder_.clear();
      }
      if (sampleByBuilder_ != null) {
        sampleByBuilder_.clear();
      }
      if (catalogBuilder_ != null) {
        catalogBuilder_.clear();
      }
      if (extensionBuilder_ != null) {
        extensionBuilder_.clear();
      }
      if (unknownBuilder_ != null) {
        unknownBuilder_.clear();
      }
      relTypeCase_ = 0;
      relType_ = null;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Relation_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.Relation getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.Relation.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.Relation build() {
      org.apache.spark.connect.proto.Relation result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.Relation buildPartial() {
      org.apache.spark.connect.proto.Relation result = new org.apache.spark.connect.proto.Relation(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      if (bitField1_ != 0) { buildPartial1(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.spark.connect.proto.Relation result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.common_ = commonBuilder_ == null
            ? common_
            : commonBuilder_.build();
      }
    }

    private void buildPartial1(org.apache.spark.connect.proto.Relation result) {
      int from_bitField1_ = bitField1_;
    }

    private void buildPartialOneofs(org.apache.spark.connect.proto.Relation result) {
      result.relTypeCase_ = relTypeCase_;
      result.relType_ = this.relType_;
      if (relTypeCase_ == 2 &&
          readBuilder_ != null) {
        result.relType_ = readBuilder_.build();
      }
      if (relTypeCase_ == 3 &&
          projectBuilder_ != null) {
        result.relType_ = projectBuilder_.build();
      }
      if (relTypeCase_ == 4 &&
          filterBuilder_ != null) {
        result.relType_ = filterBuilder_.build();
      }
      if (relTypeCase_ == 5 &&
          joinBuilder_ != null) {
        result.relType_ = joinBuilder_.build();
      }
      if (relTypeCase_ == 6 &&
          setOpBuilder_ != null) {
        result.relType_ = setOpBuilder_.build();
      }
      if (relTypeCase_ == 7 &&
          sortBuilder_ != null) {
        result.relType_ = sortBuilder_.build();
      }
      if (relTypeCase_ == 8 &&
          limitBuilder_ != null) {
        result.relType_ = limitBuilder_.build();
      }
      if (relTypeCase_ == 9 &&
          aggregateBuilder_ != null) {
        result.relType_ = aggregateBuilder_.build();
      }
      if (relTypeCase_ == 10 &&
          sqlBuilder_ != null) {
        result.relType_ = sqlBuilder_.build();
      }
      if (relTypeCase_ == 11 &&
          localRelationBuilder_ != null) {
        result.relType_ = localRelationBuilder_.build();
      }
      if (relTypeCase_ == 12 &&
          sampleBuilder_ != null) {
        result.relType_ = sampleBuilder_.build();
      }
      if (relTypeCase_ == 13 &&
          offsetBuilder_ != null) {
        result.relType_ = offsetBuilder_.build();
      }
      if (relTypeCase_ == 14 &&
          deduplicateBuilder_ != null) {
        result.relType_ = deduplicateBuilder_.build();
      }
      if (relTypeCase_ == 15 &&
          rangeBuilder_ != null) {
        result.relType_ = rangeBuilder_.build();
      }
      if (relTypeCase_ == 16 &&
          subqueryAliasBuilder_ != null) {
        result.relType_ = subqueryAliasBuilder_.build();
      }
      if (relTypeCase_ == 17 &&
          repartitionBuilder_ != null) {
        result.relType_ = repartitionBuilder_.build();
      }
      if (relTypeCase_ == 18 &&
          toDfBuilder_ != null) {
        result.relType_ = toDfBuilder_.build();
      }
      if (relTypeCase_ == 19 &&
          withColumnsRenamedBuilder_ != null) {
        result.relType_ = withColumnsRenamedBuilder_.build();
      }
      if (relTypeCase_ == 20 &&
          showStringBuilder_ != null) {
        result.relType_ = showStringBuilder_.build();
      }
      if (relTypeCase_ == 21 &&
          dropBuilder_ != null) {
        result.relType_ = dropBuilder_.build();
      }
      if (relTypeCase_ == 22 &&
          tailBuilder_ != null) {
        result.relType_ = tailBuilder_.build();
      }
      if (relTypeCase_ == 23 &&
          withColumnsBuilder_ != null) {
        result.relType_ = withColumnsBuilder_.build();
      }
      if (relTypeCase_ == 24 &&
          hintBuilder_ != null) {
        result.relType_ = hintBuilder_.build();
      }
      if (relTypeCase_ == 25 &&
          unpivotBuilder_ != null) {
        result.relType_ = unpivotBuilder_.build();
      }
      if (relTypeCase_ == 26 &&
          toSchemaBuilder_ != null) {
        result.relType_ = toSchemaBuilder_.build();
      }
      if (relTypeCase_ == 27 &&
          repartitionByExpressionBuilder_ != null) {
        result.relType_ = repartitionByExpressionBuilder_.build();
      }
      if (relTypeCase_ == 28 &&
          mapPartitionsBuilder_ != null) {
        result.relType_ = mapPartitionsBuilder_.build();
      }
      if (relTypeCase_ == 29 &&
          collectMetricsBuilder_ != null) {
        result.relType_ = collectMetricsBuilder_.build();
      }
      if (relTypeCase_ == 30 &&
          parseBuilder_ != null) {
        result.relType_ = parseBuilder_.build();
      }
      if (relTypeCase_ == 31 &&
          groupMapBuilder_ != null) {
        result.relType_ = groupMapBuilder_.build();
      }
      if (relTypeCase_ == 32 &&
          coGroupMapBuilder_ != null) {
        result.relType_ = coGroupMapBuilder_.build();
      }
      if (relTypeCase_ == 33 &&
          withWatermarkBuilder_ != null) {
        result.relType_ = withWatermarkBuilder_.build();
      }
      if (relTypeCase_ == 34 &&
          applyInPandasWithStateBuilder_ != null) {
        result.relType_ = applyInPandasWithStateBuilder_.build();
      }
      if (relTypeCase_ == 35 &&
          htmlStringBuilder_ != null) {
        result.relType_ = htmlStringBuilder_.build();
      }
      if (relTypeCase_ == 36 &&
          cachedLocalRelationBuilder_ != null) {
        result.relType_ = cachedLocalRelationBuilder_.build();
      }
      if (relTypeCase_ == 37 &&
          cachedRemoteRelationBuilder_ != null) {
        result.relType_ = cachedRemoteRelationBuilder_.build();
      }
      if (relTypeCase_ == 38 &&
          commonInlineUserDefinedTableFunctionBuilder_ != null) {
        result.relType_ = commonInlineUserDefinedTableFunctionBuilder_.build();
      }
      if (relTypeCase_ == 39 &&
          asOfJoinBuilder_ != null) {
        result.relType_ = asOfJoinBuilder_.build();
      }
      if (relTypeCase_ == 90 &&
          fillNaBuilder_ != null) {
        result.relType_ = fillNaBuilder_.build();
      }
      if (relTypeCase_ == 91 &&
          dropNaBuilder_ != null) {
        result.relType_ = dropNaBuilder_.build();
      }
      if (relTypeCase_ == 92 &&
          replaceBuilder_ != null) {
        result.relType_ = replaceBuilder_.build();
      }
      if (relTypeCase_ == 100 &&
          summaryBuilder_ != null) {
        result.relType_ = summaryBuilder_.build();
      }
      if (relTypeCase_ == 101 &&
          crosstabBuilder_ != null) {
        result.relType_ = crosstabBuilder_.build();
      }
      if (relTypeCase_ == 102 &&
          describeBuilder_ != null) {
        result.relType_ = describeBuilder_.build();
      }
      if (relTypeCase_ == 103 &&
          covBuilder_ != null) {
        result.relType_ = covBuilder_.build();
      }
      if (relTypeCase_ == 104 &&
          corrBuilder_ != null) {
        result.relType_ = corrBuilder_.build();
      }
      if (relTypeCase_ == 105 &&
          approxQuantileBuilder_ != null) {
        result.relType_ = approxQuantileBuilder_.build();
      }
      if (relTypeCase_ == 106 &&
          freqItemsBuilder_ != null) {
        result.relType_ = freqItemsBuilder_.build();
      }
      if (relTypeCase_ == 107 &&
          sampleByBuilder_ != null) {
        result.relType_ = sampleByBuilder_.build();
      }
      if (relTypeCase_ == 200 &&
          catalogBuilder_ != null) {
        result.relType_ = catalogBuilder_.build();
      }
      if (relTypeCase_ == 998 &&
          extensionBuilder_ != null) {
        result.relType_ = extensionBuilder_.build();
      }
      if (relTypeCase_ == 999 &&
          unknownBuilder_ != null) {
        result.relType_ = unknownBuilder_.build();
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.Relation) {
        return mergeFrom((org.apache.spark.connect.proto.Relation)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.Relation other) {
      if (other == org.apache.spark.connect.proto.Relation.getDefaultInstance()) return this;
      if (other.hasCommon()) {
        mergeCommon(other.getCommon());
      }
      switch (other.getRelTypeCase()) {
        case READ: {
          mergeRead(other.getRead());
          break;
        }
        case PROJECT: {
          mergeProject(other.getProject());
          break;
        }
        case FILTER: {
          mergeFilter(other.getFilter());
          break;
        }
        case JOIN: {
          mergeJoin(other.getJoin());
          break;
        }
        case SET_OP: {
          mergeSetOp(other.getSetOp());
          break;
        }
        case SORT: {
          mergeSort(other.getSort());
          break;
        }
        case LIMIT: {
          mergeLimit(other.getLimit());
          break;
        }
        case AGGREGATE: {
          mergeAggregate(other.getAggregate());
          break;
        }
        case SQL: {
          mergeSql(other.getSql());
          break;
        }
        case LOCAL_RELATION: {
          mergeLocalRelation(other.getLocalRelation());
          break;
        }
        case SAMPLE: {
          mergeSample(other.getSample());
          break;
        }
        case OFFSET: {
          mergeOffset(other.getOffset());
          break;
        }
        case DEDUPLICATE: {
          mergeDeduplicate(other.getDeduplicate());
          break;
        }
        case RANGE: {
          mergeRange(other.getRange());
          break;
        }
        case SUBQUERY_ALIAS: {
          mergeSubqueryAlias(other.getSubqueryAlias());
          break;
        }
        case REPARTITION: {
          mergeRepartition(other.getRepartition());
          break;
        }
        case TO_DF: {
          mergeToDf(other.getToDf());
          break;
        }
        case WITH_COLUMNS_RENAMED: {
          mergeWithColumnsRenamed(other.getWithColumnsRenamed());
          break;
        }
        case SHOW_STRING: {
          mergeShowString(other.getShowString());
          break;
        }
        case DROP: {
          mergeDrop(other.getDrop());
          break;
        }
        case TAIL: {
          mergeTail(other.getTail());
          break;
        }
        case WITH_COLUMNS: {
          mergeWithColumns(other.getWithColumns());
          break;
        }
        case HINT: {
          mergeHint(other.getHint());
          break;
        }
        case UNPIVOT: {
          mergeUnpivot(other.getUnpivot());
          break;
        }
        case TO_SCHEMA: {
          mergeToSchema(other.getToSchema());
          break;
        }
        case REPARTITION_BY_EXPRESSION: {
          mergeRepartitionByExpression(other.getRepartitionByExpression());
          break;
        }
        case MAP_PARTITIONS: {
          mergeMapPartitions(other.getMapPartitions());
          break;
        }
        case COLLECT_METRICS: {
          mergeCollectMetrics(other.getCollectMetrics());
          break;
        }
        case PARSE: {
          mergeParse(other.getParse());
          break;
        }
        case GROUP_MAP: {
          mergeGroupMap(other.getGroupMap());
          break;
        }
        case CO_GROUP_MAP: {
          mergeCoGroupMap(other.getCoGroupMap());
          break;
        }
        case WITH_WATERMARK: {
          mergeWithWatermark(other.getWithWatermark());
          break;
        }
        case APPLY_IN_PANDAS_WITH_STATE: {
          mergeApplyInPandasWithState(other.getApplyInPandasWithState());
          break;
        }
        case HTML_STRING: {
          mergeHtmlString(other.getHtmlString());
          break;
        }
        case CACHED_LOCAL_RELATION: {
          mergeCachedLocalRelation(other.getCachedLocalRelation());
          break;
        }
        case CACHED_REMOTE_RELATION: {
          mergeCachedRemoteRelation(other.getCachedRemoteRelation());
          break;
        }
        case COMMON_INLINE_USER_DEFINED_TABLE_FUNCTION: {
          mergeCommonInlineUserDefinedTableFunction(other.getCommonInlineUserDefinedTableFunction());
          break;
        }
        case AS_OF_JOIN: {
          mergeAsOfJoin(other.getAsOfJoin());
          break;
        }
        case FILL_NA: {
          mergeFillNa(other.getFillNa());
          break;
        }
        case DROP_NA: {
          mergeDropNa(other.getDropNa());
          break;
        }
        case REPLACE: {
          mergeReplace(other.getReplace());
          break;
        }
        case SUMMARY: {
          mergeSummary(other.getSummary());
          break;
        }
        case CROSSTAB: {
          mergeCrosstab(other.getCrosstab());
          break;
        }
        case DESCRIBE: {
          mergeDescribe(other.getDescribe());
          break;
        }
        case COV: {
          mergeCov(other.getCov());
          break;
        }
        case CORR: {
          mergeCorr(other.getCorr());
          break;
        }
        case APPROX_QUANTILE: {
          mergeApproxQuantile(other.getApproxQuantile());
          break;
        }
        case FREQ_ITEMS: {
          mergeFreqItems(other.getFreqItems());
          break;
        }
        case SAMPLE_BY: {
          mergeSampleBy(other.getSampleBy());
          break;
        }
        case CATALOG: {
          mergeCatalog(other.getCatalog());
          break;
        }
        case EXTENSION: {
          mergeExtension(other.getExtension());
          break;
        }
        case UNKNOWN: {
          mergeUnknown(other.getUnknown());
          break;
        }
        case RELTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getCommonFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getReadFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getProjectFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getFilterFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getJoinFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getSetOpFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getSortFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 7;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getLimitFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 8;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getAggregateFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 9;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getSqlFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 10;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getLocalRelationFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 11;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getSampleFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 12;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getOffsetFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 13;
              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getDeduplicateFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 14;
              break;
            } // case 114
            case 122: {
              input.readMessage(
                  getRangeFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 15;
              break;
            } // case 122
            case 130: {
              input.readMessage(
                  getSubqueryAliasFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 16;
              break;
            } // case 130
            case 138: {
              input.readMessage(
                  getRepartitionFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 17;
              break;
            } // case 138
            case 146: {
              input.readMessage(
                  getToDfFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 18;
              break;
            } // case 146
            case 154: {
              input.readMessage(
                  getWithColumnsRenamedFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 19;
              break;
            } // case 154
            case 162: {
              input.readMessage(
                  getShowStringFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 20;
              break;
            } // case 162
            case 170: {
              input.readMessage(
                  getDropFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 21;
              break;
            } // case 170
            case 178: {
              input.readMessage(
                  getTailFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 22;
              break;
            } // case 178
            case 186: {
              input.readMessage(
                  getWithColumnsFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 23;
              break;
            } // case 186
            case 194: {
              input.readMessage(
                  getHintFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 24;
              break;
            } // case 194
            case 202: {
              input.readMessage(
                  getUnpivotFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 25;
              break;
            } // case 202
            case 210: {
              input.readMessage(
                  getToSchemaFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 26;
              break;
            } // case 210
            case 218: {
              input.readMessage(
                  getRepartitionByExpressionFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 27;
              break;
            } // case 218
            case 226: {
              input.readMessage(
                  getMapPartitionsFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 28;
              break;
            } // case 226
            case 234: {
              input.readMessage(
                  getCollectMetricsFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 29;
              break;
            } // case 234
            case 242: {
              input.readMessage(
                  getParseFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 30;
              break;
            } // case 242
            case 250: {
              input.readMessage(
                  getGroupMapFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 31;
              break;
            } // case 250
            case 258: {
              input.readMessage(
                  getCoGroupMapFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 32;
              break;
            } // case 258
            case 266: {
              input.readMessage(
                  getWithWatermarkFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 33;
              break;
            } // case 266
            case 274: {
              input.readMessage(
                  getApplyInPandasWithStateFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 34;
              break;
            } // case 274
            case 282: {
              input.readMessage(
                  getHtmlStringFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 35;
              break;
            } // case 282
            case 290: {
              input.readMessage(
                  getCachedLocalRelationFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 36;
              break;
            } // case 290
            case 298: {
              input.readMessage(
                  getCachedRemoteRelationFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 37;
              break;
            } // case 298
            case 306: {
              input.readMessage(
                  getCommonInlineUserDefinedTableFunctionFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 38;
              break;
            } // case 306
            case 314: {
              input.readMessage(
                  getAsOfJoinFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 39;
              break;
            } // case 314
            case 722: {
              input.readMessage(
                  getFillNaFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 90;
              break;
            } // case 722
            case 730: {
              input.readMessage(
                  getDropNaFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 91;
              break;
            } // case 730
            case 738: {
              input.readMessage(
                  getReplaceFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 92;
              break;
            } // case 738
            case 802: {
              input.readMessage(
                  getSummaryFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 100;
              break;
            } // case 802
            case 810: {
              input.readMessage(
                  getCrosstabFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 101;
              break;
            } // case 810
            case 818: {
              input.readMessage(
                  getDescribeFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 102;
              break;
            } // case 818
            case 826: {
              input.readMessage(
                  getCovFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 103;
              break;
            } // case 826
            case 834: {
              input.readMessage(
                  getCorrFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 104;
              break;
            } // case 834
            case 842: {
              input.readMessage(
                  getApproxQuantileFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 105;
              break;
            } // case 842
            case 850: {
              input.readMessage(
                  getFreqItemsFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 106;
              break;
            } // case 850
            case 858: {
              input.readMessage(
                  getSampleByFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 107;
              break;
            } // case 858
            case 1602: {
              input.readMessage(
                  getCatalogFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 200;
              break;
            } // case 1602
            case 7986: {
              input.readMessage(
                  getExtensionFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 998;
              break;
            } // case 7986
            case 7994: {
              input.readMessage(
                  getUnknownFieldBuilder().getBuilder(),
                  extensionRegistry);
              relTypeCase_ = 999;
              break;
            } // case 7994
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int relTypeCase_ = 0;
    private Object relType_;
    public RelTypeCase
        getRelTypeCase() {
      return RelTypeCase.forNumber(
          relTypeCase_);
    }

    public Builder clearRelType() {
      relTypeCase_ = 0;
      relType_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;
    private int bitField1_;

    private org.apache.spark.connect.proto.RelationCommon common_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.RelationCommon, org.apache.spark.connect.proto.RelationCommon.Builder, org.apache.spark.connect.proto.RelationCommonOrBuilder> commonBuilder_;
    /**
     * <code>.spark.connect.RelationCommon common = 1;</code>
     * @return Whether the common field is set.
     */
    public boolean hasCommon() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.spark.connect.RelationCommon common = 1;</code>
     * @return The common.
     */
    public org.apache.spark.connect.proto.RelationCommon getCommon() {
      if (commonBuilder_ == null) {
        return common_ == null ? org.apache.spark.connect.proto.RelationCommon.getDefaultInstance() : common_;
      } else {
        return commonBuilder_.getMessage();
      }
    }
    /**
     * <code>.spark.connect.RelationCommon common = 1;</code>
     */
    public Builder setCommon(org.apache.spark.connect.proto.RelationCommon value) {
      if (commonBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        common_ = value;
      } else {
        commonBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.spark.connect.RelationCommon common = 1;</code>
     */
    public Builder setCommon(
        org.apache.spark.connect.proto.RelationCommon.Builder builderForValue) {
      if (commonBuilder_ == null) {
        common_ = builderForValue.build();
      } else {
        commonBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.spark.connect.RelationCommon common = 1;</code>
     */
    public Builder mergeCommon(org.apache.spark.connect.proto.RelationCommon value) {
      if (commonBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          common_ != null &&
          common_ != org.apache.spark.connect.proto.RelationCommon.getDefaultInstance()) {
          getCommonBuilder().mergeFrom(value);
        } else {
          common_ = value;
        }
      } else {
        commonBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.spark.connect.RelationCommon common = 1;</code>
     */
    public Builder clearCommon() {
      bitField0_ = (bitField0_ & ~0x00000001);
      common_ = null;
      if (commonBuilder_ != null) {
        commonBuilder_.dispose();
        commonBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.spark.connect.RelationCommon common = 1;</code>
     */
    public org.apache.spark.connect.proto.RelationCommon.Builder getCommonBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getCommonFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.RelationCommon common = 1;</code>
     */
    public org.apache.spark.connect.proto.RelationCommonOrBuilder getCommonOrBuilder() {
      if (commonBuilder_ != null) {
        return commonBuilder_.getMessageOrBuilder();
      } else {
        return common_ == null ?
            org.apache.spark.connect.proto.RelationCommon.getDefaultInstance() : common_;
      }
    }
    /**
     * <code>.spark.connect.RelationCommon common = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.RelationCommon, org.apache.spark.connect.proto.RelationCommon.Builder, org.apache.spark.connect.proto.RelationCommonOrBuilder> 
        getCommonFieldBuilder() {
      if (commonBuilder_ == null) {
        commonBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.RelationCommon, org.apache.spark.connect.proto.RelationCommon.Builder, org.apache.spark.connect.proto.RelationCommonOrBuilder>(
                getCommon(),
                getParentForChildren(),
                isClean());
        common_ = null;
      }
      return commonBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Read, org.apache.spark.connect.proto.Read.Builder, org.apache.spark.connect.proto.ReadOrBuilder> readBuilder_;
    /**
     * <code>.spark.connect.Read read = 2;</code>
     * @return Whether the read field is set.
     */
    @Override
    public boolean hasRead() {
      return relTypeCase_ == 2;
    }
    /**
     * <code>.spark.connect.Read read = 2;</code>
     * @return The read.
     */
    @Override
    public org.apache.spark.connect.proto.Read getRead() {
      if (readBuilder_ == null) {
        if (relTypeCase_ == 2) {
          return (org.apache.spark.connect.proto.Read) relType_;
        }
        return org.apache.spark.connect.proto.Read.getDefaultInstance();
      } else {
        if (relTypeCase_ == 2) {
          return readBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Read.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Read read = 2;</code>
     */
    public Builder setRead(org.apache.spark.connect.proto.Read value) {
      if (readBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        readBuilder_.setMessage(value);
      }
      relTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.Read read = 2;</code>
     */
    public Builder setRead(
        org.apache.spark.connect.proto.Read.Builder builderForValue) {
      if (readBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        readBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.Read read = 2;</code>
     */
    public Builder mergeRead(org.apache.spark.connect.proto.Read value) {
      if (readBuilder_ == null) {
        if (relTypeCase_ == 2 &&
            relType_ != org.apache.spark.connect.proto.Read.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Read.newBuilder((org.apache.spark.connect.proto.Read) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 2) {
          readBuilder_.mergeFrom(value);
        } else {
          readBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.Read read = 2;</code>
     */
    public Builder clearRead() {
      if (readBuilder_ == null) {
        if (relTypeCase_ == 2) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 2) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        readBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Read read = 2;</code>
     */
    public org.apache.spark.connect.proto.Read.Builder getReadBuilder() {
      return getReadFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Read read = 2;</code>
     */
    @Override
    public org.apache.spark.connect.proto.ReadOrBuilder getReadOrBuilder() {
      if ((relTypeCase_ == 2) && (readBuilder_ != null)) {
        return readBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 2) {
          return (org.apache.spark.connect.proto.Read) relType_;
        }
        return org.apache.spark.connect.proto.Read.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Read read = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Read, org.apache.spark.connect.proto.Read.Builder, org.apache.spark.connect.proto.ReadOrBuilder> 
        getReadFieldBuilder() {
      if (readBuilder_ == null) {
        if (!(relTypeCase_ == 2)) {
          relType_ = org.apache.spark.connect.proto.Read.getDefaultInstance();
        }
        readBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Read, org.apache.spark.connect.proto.Read.Builder, org.apache.spark.connect.proto.ReadOrBuilder>(
                (org.apache.spark.connect.proto.Read) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 2;
      onChanged();
      return readBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Project, org.apache.spark.connect.proto.Project.Builder, org.apache.spark.connect.proto.ProjectOrBuilder> projectBuilder_;
    /**
     * <code>.spark.connect.Project project = 3;</code>
     * @return Whether the project field is set.
     */
    @Override
    public boolean hasProject() {
      return relTypeCase_ == 3;
    }
    /**
     * <code>.spark.connect.Project project = 3;</code>
     * @return The project.
     */
    @Override
    public org.apache.spark.connect.proto.Project getProject() {
      if (projectBuilder_ == null) {
        if (relTypeCase_ == 3) {
          return (org.apache.spark.connect.proto.Project) relType_;
        }
        return org.apache.spark.connect.proto.Project.getDefaultInstance();
      } else {
        if (relTypeCase_ == 3) {
          return projectBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Project.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Project project = 3;</code>
     */
    public Builder setProject(org.apache.spark.connect.proto.Project value) {
      if (projectBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        projectBuilder_.setMessage(value);
      }
      relTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.Project project = 3;</code>
     */
    public Builder setProject(
        org.apache.spark.connect.proto.Project.Builder builderForValue) {
      if (projectBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        projectBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.Project project = 3;</code>
     */
    public Builder mergeProject(org.apache.spark.connect.proto.Project value) {
      if (projectBuilder_ == null) {
        if (relTypeCase_ == 3 &&
            relType_ != org.apache.spark.connect.proto.Project.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Project.newBuilder((org.apache.spark.connect.proto.Project) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 3) {
          projectBuilder_.mergeFrom(value);
        } else {
          projectBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.Project project = 3;</code>
     */
    public Builder clearProject() {
      if (projectBuilder_ == null) {
        if (relTypeCase_ == 3) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 3) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        projectBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Project project = 3;</code>
     */
    public org.apache.spark.connect.proto.Project.Builder getProjectBuilder() {
      return getProjectFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Project project = 3;</code>
     */
    @Override
    public org.apache.spark.connect.proto.ProjectOrBuilder getProjectOrBuilder() {
      if ((relTypeCase_ == 3) && (projectBuilder_ != null)) {
        return projectBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 3) {
          return (org.apache.spark.connect.proto.Project) relType_;
        }
        return org.apache.spark.connect.proto.Project.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Project project = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Project, org.apache.spark.connect.proto.Project.Builder, org.apache.spark.connect.proto.ProjectOrBuilder> 
        getProjectFieldBuilder() {
      if (projectBuilder_ == null) {
        if (!(relTypeCase_ == 3)) {
          relType_ = org.apache.spark.connect.proto.Project.getDefaultInstance();
        }
        projectBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Project, org.apache.spark.connect.proto.Project.Builder, org.apache.spark.connect.proto.ProjectOrBuilder>(
                (org.apache.spark.connect.proto.Project) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 3;
      onChanged();
      return projectBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Filter, org.apache.spark.connect.proto.Filter.Builder, org.apache.spark.connect.proto.FilterOrBuilder> filterBuilder_;
    /**
     * <code>.spark.connect.Filter filter = 4;</code>
     * @return Whether the filter field is set.
     */
    @Override
    public boolean hasFilter() {
      return relTypeCase_ == 4;
    }
    /**
     * <code>.spark.connect.Filter filter = 4;</code>
     * @return The filter.
     */
    @Override
    public org.apache.spark.connect.proto.Filter getFilter() {
      if (filterBuilder_ == null) {
        if (relTypeCase_ == 4) {
          return (org.apache.spark.connect.proto.Filter) relType_;
        }
        return org.apache.spark.connect.proto.Filter.getDefaultInstance();
      } else {
        if (relTypeCase_ == 4) {
          return filterBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Filter.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Filter filter = 4;</code>
     */
    public Builder setFilter(org.apache.spark.connect.proto.Filter value) {
      if (filterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        filterBuilder_.setMessage(value);
      }
      relTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.Filter filter = 4;</code>
     */
    public Builder setFilter(
        org.apache.spark.connect.proto.Filter.Builder builderForValue) {
      if (filterBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        filterBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.Filter filter = 4;</code>
     */
    public Builder mergeFilter(org.apache.spark.connect.proto.Filter value) {
      if (filterBuilder_ == null) {
        if (relTypeCase_ == 4 &&
            relType_ != org.apache.spark.connect.proto.Filter.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Filter.newBuilder((org.apache.spark.connect.proto.Filter) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 4) {
          filterBuilder_.mergeFrom(value);
        } else {
          filterBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.Filter filter = 4;</code>
     */
    public Builder clearFilter() {
      if (filterBuilder_ == null) {
        if (relTypeCase_ == 4) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 4) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        filterBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Filter filter = 4;</code>
     */
    public org.apache.spark.connect.proto.Filter.Builder getFilterBuilder() {
      return getFilterFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Filter filter = 4;</code>
     */
    @Override
    public org.apache.spark.connect.proto.FilterOrBuilder getFilterOrBuilder() {
      if ((relTypeCase_ == 4) && (filterBuilder_ != null)) {
        return filterBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 4) {
          return (org.apache.spark.connect.proto.Filter) relType_;
        }
        return org.apache.spark.connect.proto.Filter.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Filter filter = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Filter, org.apache.spark.connect.proto.Filter.Builder, org.apache.spark.connect.proto.FilterOrBuilder> 
        getFilterFieldBuilder() {
      if (filterBuilder_ == null) {
        if (!(relTypeCase_ == 4)) {
          relType_ = org.apache.spark.connect.proto.Filter.getDefaultInstance();
        }
        filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Filter, org.apache.spark.connect.proto.Filter.Builder, org.apache.spark.connect.proto.FilterOrBuilder>(
                (org.apache.spark.connect.proto.Filter) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 4;
      onChanged();
      return filterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Join, org.apache.spark.connect.proto.Join.Builder, org.apache.spark.connect.proto.JoinOrBuilder> joinBuilder_;
    /**
     * <code>.spark.connect.Join join = 5;</code>
     * @return Whether the join field is set.
     */
    @Override
    public boolean hasJoin() {
      return relTypeCase_ == 5;
    }
    /**
     * <code>.spark.connect.Join join = 5;</code>
     * @return The join.
     */
    @Override
    public org.apache.spark.connect.proto.Join getJoin() {
      if (joinBuilder_ == null) {
        if (relTypeCase_ == 5) {
          return (org.apache.spark.connect.proto.Join) relType_;
        }
        return org.apache.spark.connect.proto.Join.getDefaultInstance();
      } else {
        if (relTypeCase_ == 5) {
          return joinBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Join.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Join join = 5;</code>
     */
    public Builder setJoin(org.apache.spark.connect.proto.Join value) {
      if (joinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        joinBuilder_.setMessage(value);
      }
      relTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.Join join = 5;</code>
     */
    public Builder setJoin(
        org.apache.spark.connect.proto.Join.Builder builderForValue) {
      if (joinBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        joinBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.Join join = 5;</code>
     */
    public Builder mergeJoin(org.apache.spark.connect.proto.Join value) {
      if (joinBuilder_ == null) {
        if (relTypeCase_ == 5 &&
            relType_ != org.apache.spark.connect.proto.Join.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Join.newBuilder((org.apache.spark.connect.proto.Join) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 5) {
          joinBuilder_.mergeFrom(value);
        } else {
          joinBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.Join join = 5;</code>
     */
    public Builder clearJoin() {
      if (joinBuilder_ == null) {
        if (relTypeCase_ == 5) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 5) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        joinBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Join join = 5;</code>
     */
    public org.apache.spark.connect.proto.Join.Builder getJoinBuilder() {
      return getJoinFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Join join = 5;</code>
     */
    @Override
    public org.apache.spark.connect.proto.JoinOrBuilder getJoinOrBuilder() {
      if ((relTypeCase_ == 5) && (joinBuilder_ != null)) {
        return joinBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 5) {
          return (org.apache.spark.connect.proto.Join) relType_;
        }
        return org.apache.spark.connect.proto.Join.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Join join = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Join, org.apache.spark.connect.proto.Join.Builder, org.apache.spark.connect.proto.JoinOrBuilder> 
        getJoinFieldBuilder() {
      if (joinBuilder_ == null) {
        if (!(relTypeCase_ == 5)) {
          relType_ = org.apache.spark.connect.proto.Join.getDefaultInstance();
        }
        joinBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Join, org.apache.spark.connect.proto.Join.Builder, org.apache.spark.connect.proto.JoinOrBuilder>(
                (org.apache.spark.connect.proto.Join) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 5;
      onChanged();
      return joinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.SetOperation, org.apache.spark.connect.proto.SetOperation.Builder, org.apache.spark.connect.proto.SetOperationOrBuilder> setOpBuilder_;
    /**
     * <code>.spark.connect.SetOperation set_op = 6;</code>
     * @return Whether the setOp field is set.
     */
    @Override
    public boolean hasSetOp() {
      return relTypeCase_ == 6;
    }
    /**
     * <code>.spark.connect.SetOperation set_op = 6;</code>
     * @return The setOp.
     */
    @Override
    public org.apache.spark.connect.proto.SetOperation getSetOp() {
      if (setOpBuilder_ == null) {
        if (relTypeCase_ == 6) {
          return (org.apache.spark.connect.proto.SetOperation) relType_;
        }
        return org.apache.spark.connect.proto.SetOperation.getDefaultInstance();
      } else {
        if (relTypeCase_ == 6) {
          return setOpBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.SetOperation.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SetOperation set_op = 6;</code>
     */
    public Builder setSetOp(org.apache.spark.connect.proto.SetOperation value) {
      if (setOpBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        setOpBuilder_.setMessage(value);
      }
      relTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.SetOperation set_op = 6;</code>
     */
    public Builder setSetOp(
        org.apache.spark.connect.proto.SetOperation.Builder builderForValue) {
      if (setOpBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        setOpBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.SetOperation set_op = 6;</code>
     */
    public Builder mergeSetOp(org.apache.spark.connect.proto.SetOperation value) {
      if (setOpBuilder_ == null) {
        if (relTypeCase_ == 6 &&
            relType_ != org.apache.spark.connect.proto.SetOperation.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.SetOperation.newBuilder((org.apache.spark.connect.proto.SetOperation) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 6) {
          setOpBuilder_.mergeFrom(value);
        } else {
          setOpBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.SetOperation set_op = 6;</code>
     */
    public Builder clearSetOp() {
      if (setOpBuilder_ == null) {
        if (relTypeCase_ == 6) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 6) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        setOpBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.SetOperation set_op = 6;</code>
     */
    public org.apache.spark.connect.proto.SetOperation.Builder getSetOpBuilder() {
      return getSetOpFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.SetOperation set_op = 6;</code>
     */
    @Override
    public org.apache.spark.connect.proto.SetOperationOrBuilder getSetOpOrBuilder() {
      if ((relTypeCase_ == 6) && (setOpBuilder_ != null)) {
        return setOpBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 6) {
          return (org.apache.spark.connect.proto.SetOperation) relType_;
        }
        return org.apache.spark.connect.proto.SetOperation.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SetOperation set_op = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.SetOperation, org.apache.spark.connect.proto.SetOperation.Builder, org.apache.spark.connect.proto.SetOperationOrBuilder> 
        getSetOpFieldBuilder() {
      if (setOpBuilder_ == null) {
        if (!(relTypeCase_ == 6)) {
          relType_ = org.apache.spark.connect.proto.SetOperation.getDefaultInstance();
        }
        setOpBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.SetOperation, org.apache.spark.connect.proto.SetOperation.Builder, org.apache.spark.connect.proto.SetOperationOrBuilder>(
                (org.apache.spark.connect.proto.SetOperation) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 6;
      onChanged();
      return setOpBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Sort, org.apache.spark.connect.proto.Sort.Builder, org.apache.spark.connect.proto.SortOrBuilder> sortBuilder_;
    /**
     * <code>.spark.connect.Sort sort = 7;</code>
     * @return Whether the sort field is set.
     */
    @Override
    public boolean hasSort() {
      return relTypeCase_ == 7;
    }
    /**
     * <code>.spark.connect.Sort sort = 7;</code>
     * @return The sort.
     */
    @Override
    public org.apache.spark.connect.proto.Sort getSort() {
      if (sortBuilder_ == null) {
        if (relTypeCase_ == 7) {
          return (org.apache.spark.connect.proto.Sort) relType_;
        }
        return org.apache.spark.connect.proto.Sort.getDefaultInstance();
      } else {
        if (relTypeCase_ == 7) {
          return sortBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Sort.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Sort sort = 7;</code>
     */
    public Builder setSort(org.apache.spark.connect.proto.Sort value) {
      if (sortBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        sortBuilder_.setMessage(value);
      }
      relTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.Sort sort = 7;</code>
     */
    public Builder setSort(
        org.apache.spark.connect.proto.Sort.Builder builderForValue) {
      if (sortBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        sortBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.Sort sort = 7;</code>
     */
    public Builder mergeSort(org.apache.spark.connect.proto.Sort value) {
      if (sortBuilder_ == null) {
        if (relTypeCase_ == 7 &&
            relType_ != org.apache.spark.connect.proto.Sort.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Sort.newBuilder((org.apache.spark.connect.proto.Sort) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 7) {
          sortBuilder_.mergeFrom(value);
        } else {
          sortBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.Sort sort = 7;</code>
     */
    public Builder clearSort() {
      if (sortBuilder_ == null) {
        if (relTypeCase_ == 7) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 7) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        sortBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Sort sort = 7;</code>
     */
    public org.apache.spark.connect.proto.Sort.Builder getSortBuilder() {
      return getSortFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Sort sort = 7;</code>
     */
    @Override
    public org.apache.spark.connect.proto.SortOrBuilder getSortOrBuilder() {
      if ((relTypeCase_ == 7) && (sortBuilder_ != null)) {
        return sortBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 7) {
          return (org.apache.spark.connect.proto.Sort) relType_;
        }
        return org.apache.spark.connect.proto.Sort.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Sort sort = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Sort, org.apache.spark.connect.proto.Sort.Builder, org.apache.spark.connect.proto.SortOrBuilder> 
        getSortFieldBuilder() {
      if (sortBuilder_ == null) {
        if (!(relTypeCase_ == 7)) {
          relType_ = org.apache.spark.connect.proto.Sort.getDefaultInstance();
        }
        sortBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Sort, org.apache.spark.connect.proto.Sort.Builder, org.apache.spark.connect.proto.SortOrBuilder>(
                (org.apache.spark.connect.proto.Sort) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 7;
      onChanged();
      return sortBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Limit, org.apache.spark.connect.proto.Limit.Builder, org.apache.spark.connect.proto.LimitOrBuilder> limitBuilder_;
    /**
     * <code>.spark.connect.Limit limit = 8;</code>
     * @return Whether the limit field is set.
     */
    @Override
    public boolean hasLimit() {
      return relTypeCase_ == 8;
    }
    /**
     * <code>.spark.connect.Limit limit = 8;</code>
     * @return The limit.
     */
    @Override
    public org.apache.spark.connect.proto.Limit getLimit() {
      if (limitBuilder_ == null) {
        if (relTypeCase_ == 8) {
          return (org.apache.spark.connect.proto.Limit) relType_;
        }
        return org.apache.spark.connect.proto.Limit.getDefaultInstance();
      } else {
        if (relTypeCase_ == 8) {
          return limitBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Limit.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Limit limit = 8;</code>
     */
    public Builder setLimit(org.apache.spark.connect.proto.Limit value) {
      if (limitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        limitBuilder_.setMessage(value);
      }
      relTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.Limit limit = 8;</code>
     */
    public Builder setLimit(
        org.apache.spark.connect.proto.Limit.Builder builderForValue) {
      if (limitBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        limitBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.Limit limit = 8;</code>
     */
    public Builder mergeLimit(org.apache.spark.connect.proto.Limit value) {
      if (limitBuilder_ == null) {
        if (relTypeCase_ == 8 &&
            relType_ != org.apache.spark.connect.proto.Limit.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Limit.newBuilder((org.apache.spark.connect.proto.Limit) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 8) {
          limitBuilder_.mergeFrom(value);
        } else {
          limitBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.Limit limit = 8;</code>
     */
    public Builder clearLimit() {
      if (limitBuilder_ == null) {
        if (relTypeCase_ == 8) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 8) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        limitBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Limit limit = 8;</code>
     */
    public org.apache.spark.connect.proto.Limit.Builder getLimitBuilder() {
      return getLimitFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Limit limit = 8;</code>
     */
    @Override
    public org.apache.spark.connect.proto.LimitOrBuilder getLimitOrBuilder() {
      if ((relTypeCase_ == 8) && (limitBuilder_ != null)) {
        return limitBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 8) {
          return (org.apache.spark.connect.proto.Limit) relType_;
        }
        return org.apache.spark.connect.proto.Limit.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Limit limit = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Limit, org.apache.spark.connect.proto.Limit.Builder, org.apache.spark.connect.proto.LimitOrBuilder> 
        getLimitFieldBuilder() {
      if (limitBuilder_ == null) {
        if (!(relTypeCase_ == 8)) {
          relType_ = org.apache.spark.connect.proto.Limit.getDefaultInstance();
        }
        limitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Limit, org.apache.spark.connect.proto.Limit.Builder, org.apache.spark.connect.proto.LimitOrBuilder>(
                (org.apache.spark.connect.proto.Limit) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 8;
      onChanged();
      return limitBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Aggregate, org.apache.spark.connect.proto.Aggregate.Builder, org.apache.spark.connect.proto.AggregateOrBuilder> aggregateBuilder_;
    /**
     * <code>.spark.connect.Aggregate aggregate = 9;</code>
     * @return Whether the aggregate field is set.
     */
    @Override
    public boolean hasAggregate() {
      return relTypeCase_ == 9;
    }
    /**
     * <code>.spark.connect.Aggregate aggregate = 9;</code>
     * @return The aggregate.
     */
    @Override
    public org.apache.spark.connect.proto.Aggregate getAggregate() {
      if (aggregateBuilder_ == null) {
        if (relTypeCase_ == 9) {
          return (org.apache.spark.connect.proto.Aggregate) relType_;
        }
        return org.apache.spark.connect.proto.Aggregate.getDefaultInstance();
      } else {
        if (relTypeCase_ == 9) {
          return aggregateBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Aggregate.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Aggregate aggregate = 9;</code>
     */
    public Builder setAggregate(org.apache.spark.connect.proto.Aggregate value) {
      if (aggregateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        aggregateBuilder_.setMessage(value);
      }
      relTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.Aggregate aggregate = 9;</code>
     */
    public Builder setAggregate(
        org.apache.spark.connect.proto.Aggregate.Builder builderForValue) {
      if (aggregateBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        aggregateBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.Aggregate aggregate = 9;</code>
     */
    public Builder mergeAggregate(org.apache.spark.connect.proto.Aggregate value) {
      if (aggregateBuilder_ == null) {
        if (relTypeCase_ == 9 &&
            relType_ != org.apache.spark.connect.proto.Aggregate.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Aggregate.newBuilder((org.apache.spark.connect.proto.Aggregate) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 9) {
          aggregateBuilder_.mergeFrom(value);
        } else {
          aggregateBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.Aggregate aggregate = 9;</code>
     */
    public Builder clearAggregate() {
      if (aggregateBuilder_ == null) {
        if (relTypeCase_ == 9) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 9) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        aggregateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Aggregate aggregate = 9;</code>
     */
    public org.apache.spark.connect.proto.Aggregate.Builder getAggregateBuilder() {
      return getAggregateFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Aggregate aggregate = 9;</code>
     */
    @Override
    public org.apache.spark.connect.proto.AggregateOrBuilder getAggregateOrBuilder() {
      if ((relTypeCase_ == 9) && (aggregateBuilder_ != null)) {
        return aggregateBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 9) {
          return (org.apache.spark.connect.proto.Aggregate) relType_;
        }
        return org.apache.spark.connect.proto.Aggregate.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Aggregate aggregate = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Aggregate, org.apache.spark.connect.proto.Aggregate.Builder, org.apache.spark.connect.proto.AggregateOrBuilder> 
        getAggregateFieldBuilder() {
      if (aggregateBuilder_ == null) {
        if (!(relTypeCase_ == 9)) {
          relType_ = org.apache.spark.connect.proto.Aggregate.getDefaultInstance();
        }
        aggregateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Aggregate, org.apache.spark.connect.proto.Aggregate.Builder, org.apache.spark.connect.proto.AggregateOrBuilder>(
                (org.apache.spark.connect.proto.Aggregate) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 9;
      onChanged();
      return aggregateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.SQL, org.apache.spark.connect.proto.SQL.Builder, org.apache.spark.connect.proto.SQLOrBuilder> sqlBuilder_;
    /**
     * <code>.spark.connect.SQL sql = 10;</code>
     * @return Whether the sql field is set.
     */
    @Override
    public boolean hasSql() {
      return relTypeCase_ == 10;
    }
    /**
     * <code>.spark.connect.SQL sql = 10;</code>
     * @return The sql.
     */
    @Override
    public org.apache.spark.connect.proto.SQL getSql() {
      if (sqlBuilder_ == null) {
        if (relTypeCase_ == 10) {
          return (org.apache.spark.connect.proto.SQL) relType_;
        }
        return org.apache.spark.connect.proto.SQL.getDefaultInstance();
      } else {
        if (relTypeCase_ == 10) {
          return sqlBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.SQL.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SQL sql = 10;</code>
     */
    public Builder setSql(org.apache.spark.connect.proto.SQL value) {
      if (sqlBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        sqlBuilder_.setMessage(value);
      }
      relTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.SQL sql = 10;</code>
     */
    public Builder setSql(
        org.apache.spark.connect.proto.SQL.Builder builderForValue) {
      if (sqlBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        sqlBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.SQL sql = 10;</code>
     */
    public Builder mergeSql(org.apache.spark.connect.proto.SQL value) {
      if (sqlBuilder_ == null) {
        if (relTypeCase_ == 10 &&
            relType_ != org.apache.spark.connect.proto.SQL.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.SQL.newBuilder((org.apache.spark.connect.proto.SQL) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 10) {
          sqlBuilder_.mergeFrom(value);
        } else {
          sqlBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.SQL sql = 10;</code>
     */
    public Builder clearSql() {
      if (sqlBuilder_ == null) {
        if (relTypeCase_ == 10) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 10) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        sqlBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.SQL sql = 10;</code>
     */
    public org.apache.spark.connect.proto.SQL.Builder getSqlBuilder() {
      return getSqlFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.SQL sql = 10;</code>
     */
    @Override
    public org.apache.spark.connect.proto.SQLOrBuilder getSqlOrBuilder() {
      if ((relTypeCase_ == 10) && (sqlBuilder_ != null)) {
        return sqlBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 10) {
          return (org.apache.spark.connect.proto.SQL) relType_;
        }
        return org.apache.spark.connect.proto.SQL.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SQL sql = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.SQL, org.apache.spark.connect.proto.SQL.Builder, org.apache.spark.connect.proto.SQLOrBuilder> 
        getSqlFieldBuilder() {
      if (sqlBuilder_ == null) {
        if (!(relTypeCase_ == 10)) {
          relType_ = org.apache.spark.connect.proto.SQL.getDefaultInstance();
        }
        sqlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.SQL, org.apache.spark.connect.proto.SQL.Builder, org.apache.spark.connect.proto.SQLOrBuilder>(
                (org.apache.spark.connect.proto.SQL) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 10;
      onChanged();
      return sqlBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.LocalRelation, org.apache.spark.connect.proto.LocalRelation.Builder, org.apache.spark.connect.proto.LocalRelationOrBuilder> localRelationBuilder_;
    /**
     * <code>.spark.connect.LocalRelation local_relation = 11;</code>
     * @return Whether the localRelation field is set.
     */
    @Override
    public boolean hasLocalRelation() {
      return relTypeCase_ == 11;
    }
    /**
     * <code>.spark.connect.LocalRelation local_relation = 11;</code>
     * @return The localRelation.
     */
    @Override
    public org.apache.spark.connect.proto.LocalRelation getLocalRelation() {
      if (localRelationBuilder_ == null) {
        if (relTypeCase_ == 11) {
          return (org.apache.spark.connect.proto.LocalRelation) relType_;
        }
        return org.apache.spark.connect.proto.LocalRelation.getDefaultInstance();
      } else {
        if (relTypeCase_ == 11) {
          return localRelationBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.LocalRelation.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.LocalRelation local_relation = 11;</code>
     */
    public Builder setLocalRelation(org.apache.spark.connect.proto.LocalRelation value) {
      if (localRelationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        localRelationBuilder_.setMessage(value);
      }
      relTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.spark.connect.LocalRelation local_relation = 11;</code>
     */
    public Builder setLocalRelation(
        org.apache.spark.connect.proto.LocalRelation.Builder builderForValue) {
      if (localRelationBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        localRelationBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.spark.connect.LocalRelation local_relation = 11;</code>
     */
    public Builder mergeLocalRelation(org.apache.spark.connect.proto.LocalRelation value) {
      if (localRelationBuilder_ == null) {
        if (relTypeCase_ == 11 &&
            relType_ != org.apache.spark.connect.proto.LocalRelation.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.LocalRelation.newBuilder((org.apache.spark.connect.proto.LocalRelation) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 11) {
          localRelationBuilder_.mergeFrom(value);
        } else {
          localRelationBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.spark.connect.LocalRelation local_relation = 11;</code>
     */
    public Builder clearLocalRelation() {
      if (localRelationBuilder_ == null) {
        if (relTypeCase_ == 11) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 11) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        localRelationBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.LocalRelation local_relation = 11;</code>
     */
    public org.apache.spark.connect.proto.LocalRelation.Builder getLocalRelationBuilder() {
      return getLocalRelationFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.LocalRelation local_relation = 11;</code>
     */
    @Override
    public org.apache.spark.connect.proto.LocalRelationOrBuilder getLocalRelationOrBuilder() {
      if ((relTypeCase_ == 11) && (localRelationBuilder_ != null)) {
        return localRelationBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 11) {
          return (org.apache.spark.connect.proto.LocalRelation) relType_;
        }
        return org.apache.spark.connect.proto.LocalRelation.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.LocalRelation local_relation = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.LocalRelation, org.apache.spark.connect.proto.LocalRelation.Builder, org.apache.spark.connect.proto.LocalRelationOrBuilder> 
        getLocalRelationFieldBuilder() {
      if (localRelationBuilder_ == null) {
        if (!(relTypeCase_ == 11)) {
          relType_ = org.apache.spark.connect.proto.LocalRelation.getDefaultInstance();
        }
        localRelationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.LocalRelation, org.apache.spark.connect.proto.LocalRelation.Builder, org.apache.spark.connect.proto.LocalRelationOrBuilder>(
                (org.apache.spark.connect.proto.LocalRelation) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 11;
      onChanged();
      return localRelationBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Sample, org.apache.spark.connect.proto.Sample.Builder, org.apache.spark.connect.proto.SampleOrBuilder> sampleBuilder_;
    /**
     * <code>.spark.connect.Sample sample = 12;</code>
     * @return Whether the sample field is set.
     */
    @Override
    public boolean hasSample() {
      return relTypeCase_ == 12;
    }
    /**
     * <code>.spark.connect.Sample sample = 12;</code>
     * @return The sample.
     */
    @Override
    public org.apache.spark.connect.proto.Sample getSample() {
      if (sampleBuilder_ == null) {
        if (relTypeCase_ == 12) {
          return (org.apache.spark.connect.proto.Sample) relType_;
        }
        return org.apache.spark.connect.proto.Sample.getDefaultInstance();
      } else {
        if (relTypeCase_ == 12) {
          return sampleBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Sample.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Sample sample = 12;</code>
     */
    public Builder setSample(org.apache.spark.connect.proto.Sample value) {
      if (sampleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        sampleBuilder_.setMessage(value);
      }
      relTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.spark.connect.Sample sample = 12;</code>
     */
    public Builder setSample(
        org.apache.spark.connect.proto.Sample.Builder builderForValue) {
      if (sampleBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        sampleBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.spark.connect.Sample sample = 12;</code>
     */
    public Builder mergeSample(org.apache.spark.connect.proto.Sample value) {
      if (sampleBuilder_ == null) {
        if (relTypeCase_ == 12 &&
            relType_ != org.apache.spark.connect.proto.Sample.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Sample.newBuilder((org.apache.spark.connect.proto.Sample) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 12) {
          sampleBuilder_.mergeFrom(value);
        } else {
          sampleBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.spark.connect.Sample sample = 12;</code>
     */
    public Builder clearSample() {
      if (sampleBuilder_ == null) {
        if (relTypeCase_ == 12) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 12) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        sampleBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Sample sample = 12;</code>
     */
    public org.apache.spark.connect.proto.Sample.Builder getSampleBuilder() {
      return getSampleFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Sample sample = 12;</code>
     */
    @Override
    public org.apache.spark.connect.proto.SampleOrBuilder getSampleOrBuilder() {
      if ((relTypeCase_ == 12) && (sampleBuilder_ != null)) {
        return sampleBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 12) {
          return (org.apache.spark.connect.proto.Sample) relType_;
        }
        return org.apache.spark.connect.proto.Sample.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Sample sample = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Sample, org.apache.spark.connect.proto.Sample.Builder, org.apache.spark.connect.proto.SampleOrBuilder> 
        getSampleFieldBuilder() {
      if (sampleBuilder_ == null) {
        if (!(relTypeCase_ == 12)) {
          relType_ = org.apache.spark.connect.proto.Sample.getDefaultInstance();
        }
        sampleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Sample, org.apache.spark.connect.proto.Sample.Builder, org.apache.spark.connect.proto.SampleOrBuilder>(
                (org.apache.spark.connect.proto.Sample) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 12;
      onChanged();
      return sampleBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Offset, org.apache.spark.connect.proto.Offset.Builder, org.apache.spark.connect.proto.OffsetOrBuilder> offsetBuilder_;
    /**
     * <code>.spark.connect.Offset offset = 13;</code>
     * @return Whether the offset field is set.
     */
    @Override
    public boolean hasOffset() {
      return relTypeCase_ == 13;
    }
    /**
     * <code>.spark.connect.Offset offset = 13;</code>
     * @return The offset.
     */
    @Override
    public org.apache.spark.connect.proto.Offset getOffset() {
      if (offsetBuilder_ == null) {
        if (relTypeCase_ == 13) {
          return (org.apache.spark.connect.proto.Offset) relType_;
        }
        return org.apache.spark.connect.proto.Offset.getDefaultInstance();
      } else {
        if (relTypeCase_ == 13) {
          return offsetBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Offset.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Offset offset = 13;</code>
     */
    public Builder setOffset(org.apache.spark.connect.proto.Offset value) {
      if (offsetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        offsetBuilder_.setMessage(value);
      }
      relTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.spark.connect.Offset offset = 13;</code>
     */
    public Builder setOffset(
        org.apache.spark.connect.proto.Offset.Builder builderForValue) {
      if (offsetBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        offsetBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.spark.connect.Offset offset = 13;</code>
     */
    public Builder mergeOffset(org.apache.spark.connect.proto.Offset value) {
      if (offsetBuilder_ == null) {
        if (relTypeCase_ == 13 &&
            relType_ != org.apache.spark.connect.proto.Offset.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Offset.newBuilder((org.apache.spark.connect.proto.Offset) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 13) {
          offsetBuilder_.mergeFrom(value);
        } else {
          offsetBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.spark.connect.Offset offset = 13;</code>
     */
    public Builder clearOffset() {
      if (offsetBuilder_ == null) {
        if (relTypeCase_ == 13) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 13) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        offsetBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Offset offset = 13;</code>
     */
    public org.apache.spark.connect.proto.Offset.Builder getOffsetBuilder() {
      return getOffsetFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Offset offset = 13;</code>
     */
    @Override
    public org.apache.spark.connect.proto.OffsetOrBuilder getOffsetOrBuilder() {
      if ((relTypeCase_ == 13) && (offsetBuilder_ != null)) {
        return offsetBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 13) {
          return (org.apache.spark.connect.proto.Offset) relType_;
        }
        return org.apache.spark.connect.proto.Offset.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Offset offset = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Offset, org.apache.spark.connect.proto.Offset.Builder, org.apache.spark.connect.proto.OffsetOrBuilder> 
        getOffsetFieldBuilder() {
      if (offsetBuilder_ == null) {
        if (!(relTypeCase_ == 13)) {
          relType_ = org.apache.spark.connect.proto.Offset.getDefaultInstance();
        }
        offsetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Offset, org.apache.spark.connect.proto.Offset.Builder, org.apache.spark.connect.proto.OffsetOrBuilder>(
                (org.apache.spark.connect.proto.Offset) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 13;
      onChanged();
      return offsetBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Deduplicate, org.apache.spark.connect.proto.Deduplicate.Builder, org.apache.spark.connect.proto.DeduplicateOrBuilder> deduplicateBuilder_;
    /**
     * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
     * @return Whether the deduplicate field is set.
     */
    @Override
    public boolean hasDeduplicate() {
      return relTypeCase_ == 14;
    }
    /**
     * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
     * @return The deduplicate.
     */
    @Override
    public org.apache.spark.connect.proto.Deduplicate getDeduplicate() {
      if (deduplicateBuilder_ == null) {
        if (relTypeCase_ == 14) {
          return (org.apache.spark.connect.proto.Deduplicate) relType_;
        }
        return org.apache.spark.connect.proto.Deduplicate.getDefaultInstance();
      } else {
        if (relTypeCase_ == 14) {
          return deduplicateBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Deduplicate.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
     */
    public Builder setDeduplicate(org.apache.spark.connect.proto.Deduplicate value) {
      if (deduplicateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        deduplicateBuilder_.setMessage(value);
      }
      relTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
     */
    public Builder setDeduplicate(
        org.apache.spark.connect.proto.Deduplicate.Builder builderForValue) {
      if (deduplicateBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        deduplicateBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
     */
    public Builder mergeDeduplicate(org.apache.spark.connect.proto.Deduplicate value) {
      if (deduplicateBuilder_ == null) {
        if (relTypeCase_ == 14 &&
            relType_ != org.apache.spark.connect.proto.Deduplicate.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Deduplicate.newBuilder((org.apache.spark.connect.proto.Deduplicate) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 14) {
          deduplicateBuilder_.mergeFrom(value);
        } else {
          deduplicateBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
     */
    public Builder clearDeduplicate() {
      if (deduplicateBuilder_ == null) {
        if (relTypeCase_ == 14) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 14) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        deduplicateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
     */
    public org.apache.spark.connect.proto.Deduplicate.Builder getDeduplicateBuilder() {
      return getDeduplicateFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
     */
    @Override
    public org.apache.spark.connect.proto.DeduplicateOrBuilder getDeduplicateOrBuilder() {
      if ((relTypeCase_ == 14) && (deduplicateBuilder_ != null)) {
        return deduplicateBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 14) {
          return (org.apache.spark.connect.proto.Deduplicate) relType_;
        }
        return org.apache.spark.connect.proto.Deduplicate.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Deduplicate deduplicate = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Deduplicate, org.apache.spark.connect.proto.Deduplicate.Builder, org.apache.spark.connect.proto.DeduplicateOrBuilder> 
        getDeduplicateFieldBuilder() {
      if (deduplicateBuilder_ == null) {
        if (!(relTypeCase_ == 14)) {
          relType_ = org.apache.spark.connect.proto.Deduplicate.getDefaultInstance();
        }
        deduplicateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Deduplicate, org.apache.spark.connect.proto.Deduplicate.Builder, org.apache.spark.connect.proto.DeduplicateOrBuilder>(
                (org.apache.spark.connect.proto.Deduplicate) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 14;
      onChanged();
      return deduplicateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Range, org.apache.spark.connect.proto.Range.Builder, org.apache.spark.connect.proto.RangeOrBuilder> rangeBuilder_;
    /**
     * <code>.spark.connect.Range range = 15;</code>
     * @return Whether the range field is set.
     */
    @Override
    public boolean hasRange() {
      return relTypeCase_ == 15;
    }
    /**
     * <code>.spark.connect.Range range = 15;</code>
     * @return The range.
     */
    @Override
    public org.apache.spark.connect.proto.Range getRange() {
      if (rangeBuilder_ == null) {
        if (relTypeCase_ == 15) {
          return (org.apache.spark.connect.proto.Range) relType_;
        }
        return org.apache.spark.connect.proto.Range.getDefaultInstance();
      } else {
        if (relTypeCase_ == 15) {
          return rangeBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Range.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Range range = 15;</code>
     */
    public Builder setRange(org.apache.spark.connect.proto.Range value) {
      if (rangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        rangeBuilder_.setMessage(value);
      }
      relTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.spark.connect.Range range = 15;</code>
     */
    public Builder setRange(
        org.apache.spark.connect.proto.Range.Builder builderForValue) {
      if (rangeBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        rangeBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.spark.connect.Range range = 15;</code>
     */
    public Builder mergeRange(org.apache.spark.connect.proto.Range value) {
      if (rangeBuilder_ == null) {
        if (relTypeCase_ == 15 &&
            relType_ != org.apache.spark.connect.proto.Range.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Range.newBuilder((org.apache.spark.connect.proto.Range) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 15) {
          rangeBuilder_.mergeFrom(value);
        } else {
          rangeBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.spark.connect.Range range = 15;</code>
     */
    public Builder clearRange() {
      if (rangeBuilder_ == null) {
        if (relTypeCase_ == 15) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 15) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        rangeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Range range = 15;</code>
     */
    public org.apache.spark.connect.proto.Range.Builder getRangeBuilder() {
      return getRangeFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Range range = 15;</code>
     */
    @Override
    public org.apache.spark.connect.proto.RangeOrBuilder getRangeOrBuilder() {
      if ((relTypeCase_ == 15) && (rangeBuilder_ != null)) {
        return rangeBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 15) {
          return (org.apache.spark.connect.proto.Range) relType_;
        }
        return org.apache.spark.connect.proto.Range.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Range range = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Range, org.apache.spark.connect.proto.Range.Builder, org.apache.spark.connect.proto.RangeOrBuilder> 
        getRangeFieldBuilder() {
      if (rangeBuilder_ == null) {
        if (!(relTypeCase_ == 15)) {
          relType_ = org.apache.spark.connect.proto.Range.getDefaultInstance();
        }
        rangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Range, org.apache.spark.connect.proto.Range.Builder, org.apache.spark.connect.proto.RangeOrBuilder>(
                (org.apache.spark.connect.proto.Range) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 15;
      onChanged();
      return rangeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.SubqueryAlias, org.apache.spark.connect.proto.SubqueryAlias.Builder, org.apache.spark.connect.proto.SubqueryAliasOrBuilder> subqueryAliasBuilder_;
    /**
     * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
     * @return Whether the subqueryAlias field is set.
     */
    @Override
    public boolean hasSubqueryAlias() {
      return relTypeCase_ == 16;
    }
    /**
     * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
     * @return The subqueryAlias.
     */
    @Override
    public org.apache.spark.connect.proto.SubqueryAlias getSubqueryAlias() {
      if (subqueryAliasBuilder_ == null) {
        if (relTypeCase_ == 16) {
          return (org.apache.spark.connect.proto.SubqueryAlias) relType_;
        }
        return org.apache.spark.connect.proto.SubqueryAlias.getDefaultInstance();
      } else {
        if (relTypeCase_ == 16) {
          return subqueryAliasBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.SubqueryAlias.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
     */
    public Builder setSubqueryAlias(org.apache.spark.connect.proto.SubqueryAlias value) {
      if (subqueryAliasBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        subqueryAliasBuilder_.setMessage(value);
      }
      relTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
     */
    public Builder setSubqueryAlias(
        org.apache.spark.connect.proto.SubqueryAlias.Builder builderForValue) {
      if (subqueryAliasBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        subqueryAliasBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
     */
    public Builder mergeSubqueryAlias(org.apache.spark.connect.proto.SubqueryAlias value) {
      if (subqueryAliasBuilder_ == null) {
        if (relTypeCase_ == 16 &&
            relType_ != org.apache.spark.connect.proto.SubqueryAlias.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.SubqueryAlias.newBuilder((org.apache.spark.connect.proto.SubqueryAlias) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 16) {
          subqueryAliasBuilder_.mergeFrom(value);
        } else {
          subqueryAliasBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
     */
    public Builder clearSubqueryAlias() {
      if (subqueryAliasBuilder_ == null) {
        if (relTypeCase_ == 16) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 16) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        subqueryAliasBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
     */
    public org.apache.spark.connect.proto.SubqueryAlias.Builder getSubqueryAliasBuilder() {
      return getSubqueryAliasFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
     */
    @Override
    public org.apache.spark.connect.proto.SubqueryAliasOrBuilder getSubqueryAliasOrBuilder() {
      if ((relTypeCase_ == 16) && (subqueryAliasBuilder_ != null)) {
        return subqueryAliasBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 16) {
          return (org.apache.spark.connect.proto.SubqueryAlias) relType_;
        }
        return org.apache.spark.connect.proto.SubqueryAlias.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SubqueryAlias subquery_alias = 16;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.SubqueryAlias, org.apache.spark.connect.proto.SubqueryAlias.Builder, org.apache.spark.connect.proto.SubqueryAliasOrBuilder> 
        getSubqueryAliasFieldBuilder() {
      if (subqueryAliasBuilder_ == null) {
        if (!(relTypeCase_ == 16)) {
          relType_ = org.apache.spark.connect.proto.SubqueryAlias.getDefaultInstance();
        }
        subqueryAliasBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.SubqueryAlias, org.apache.spark.connect.proto.SubqueryAlias.Builder, org.apache.spark.connect.proto.SubqueryAliasOrBuilder>(
                (org.apache.spark.connect.proto.SubqueryAlias) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 16;
      onChanged();
      return subqueryAliasBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Repartition, org.apache.spark.connect.proto.Repartition.Builder, org.apache.spark.connect.proto.RepartitionOrBuilder> repartitionBuilder_;
    /**
     * <code>.spark.connect.Repartition repartition = 17;</code>
     * @return Whether the repartition field is set.
     */
    @Override
    public boolean hasRepartition() {
      return relTypeCase_ == 17;
    }
    /**
     * <code>.spark.connect.Repartition repartition = 17;</code>
     * @return The repartition.
     */
    @Override
    public org.apache.spark.connect.proto.Repartition getRepartition() {
      if (repartitionBuilder_ == null) {
        if (relTypeCase_ == 17) {
          return (org.apache.spark.connect.proto.Repartition) relType_;
        }
        return org.apache.spark.connect.proto.Repartition.getDefaultInstance();
      } else {
        if (relTypeCase_ == 17) {
          return repartitionBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Repartition.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Repartition repartition = 17;</code>
     */
    public Builder setRepartition(org.apache.spark.connect.proto.Repartition value) {
      if (repartitionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        repartitionBuilder_.setMessage(value);
      }
      relTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.spark.connect.Repartition repartition = 17;</code>
     */
    public Builder setRepartition(
        org.apache.spark.connect.proto.Repartition.Builder builderForValue) {
      if (repartitionBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        repartitionBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.spark.connect.Repartition repartition = 17;</code>
     */
    public Builder mergeRepartition(org.apache.spark.connect.proto.Repartition value) {
      if (repartitionBuilder_ == null) {
        if (relTypeCase_ == 17 &&
            relType_ != org.apache.spark.connect.proto.Repartition.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Repartition.newBuilder((org.apache.spark.connect.proto.Repartition) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 17) {
          repartitionBuilder_.mergeFrom(value);
        } else {
          repartitionBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.spark.connect.Repartition repartition = 17;</code>
     */
    public Builder clearRepartition() {
      if (repartitionBuilder_ == null) {
        if (relTypeCase_ == 17) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 17) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        repartitionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Repartition repartition = 17;</code>
     */
    public org.apache.spark.connect.proto.Repartition.Builder getRepartitionBuilder() {
      return getRepartitionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Repartition repartition = 17;</code>
     */
    @Override
    public org.apache.spark.connect.proto.RepartitionOrBuilder getRepartitionOrBuilder() {
      if ((relTypeCase_ == 17) && (repartitionBuilder_ != null)) {
        return repartitionBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 17) {
          return (org.apache.spark.connect.proto.Repartition) relType_;
        }
        return org.apache.spark.connect.proto.Repartition.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Repartition repartition = 17;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Repartition, org.apache.spark.connect.proto.Repartition.Builder, org.apache.spark.connect.proto.RepartitionOrBuilder> 
        getRepartitionFieldBuilder() {
      if (repartitionBuilder_ == null) {
        if (!(relTypeCase_ == 17)) {
          relType_ = org.apache.spark.connect.proto.Repartition.getDefaultInstance();
        }
        repartitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Repartition, org.apache.spark.connect.proto.Repartition.Builder, org.apache.spark.connect.proto.RepartitionOrBuilder>(
                (org.apache.spark.connect.proto.Repartition) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 17;
      onChanged();
      return repartitionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.ToDF, org.apache.spark.connect.proto.ToDF.Builder, org.apache.spark.connect.proto.ToDFOrBuilder> toDfBuilder_;
    /**
     * <code>.spark.connect.ToDF to_df = 18;</code>
     * @return Whether the toDf field is set.
     */
    @Override
    public boolean hasToDf() {
      return relTypeCase_ == 18;
    }
    /**
     * <code>.spark.connect.ToDF to_df = 18;</code>
     * @return The toDf.
     */
    @Override
    public org.apache.spark.connect.proto.ToDF getToDf() {
      if (toDfBuilder_ == null) {
        if (relTypeCase_ == 18) {
          return (org.apache.spark.connect.proto.ToDF) relType_;
        }
        return org.apache.spark.connect.proto.ToDF.getDefaultInstance();
      } else {
        if (relTypeCase_ == 18) {
          return toDfBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.ToDF.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ToDF to_df = 18;</code>
     */
    public Builder setToDf(org.apache.spark.connect.proto.ToDF value) {
      if (toDfBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        toDfBuilder_.setMessage(value);
      }
      relTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.spark.connect.ToDF to_df = 18;</code>
     */
    public Builder setToDf(
        org.apache.spark.connect.proto.ToDF.Builder builderForValue) {
      if (toDfBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        toDfBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.spark.connect.ToDF to_df = 18;</code>
     */
    public Builder mergeToDf(org.apache.spark.connect.proto.ToDF value) {
      if (toDfBuilder_ == null) {
        if (relTypeCase_ == 18 &&
            relType_ != org.apache.spark.connect.proto.ToDF.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.ToDF.newBuilder((org.apache.spark.connect.proto.ToDF) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 18) {
          toDfBuilder_.mergeFrom(value);
        } else {
          toDfBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.spark.connect.ToDF to_df = 18;</code>
     */
    public Builder clearToDf() {
      if (toDfBuilder_ == null) {
        if (relTypeCase_ == 18) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 18) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        toDfBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.ToDF to_df = 18;</code>
     */
    public org.apache.spark.connect.proto.ToDF.Builder getToDfBuilder() {
      return getToDfFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.ToDF to_df = 18;</code>
     */
    @Override
    public org.apache.spark.connect.proto.ToDFOrBuilder getToDfOrBuilder() {
      if ((relTypeCase_ == 18) && (toDfBuilder_ != null)) {
        return toDfBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 18) {
          return (org.apache.spark.connect.proto.ToDF) relType_;
        }
        return org.apache.spark.connect.proto.ToDF.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ToDF to_df = 18;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.ToDF, org.apache.spark.connect.proto.ToDF.Builder, org.apache.spark.connect.proto.ToDFOrBuilder> 
        getToDfFieldBuilder() {
      if (toDfBuilder_ == null) {
        if (!(relTypeCase_ == 18)) {
          relType_ = org.apache.spark.connect.proto.ToDF.getDefaultInstance();
        }
        toDfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.ToDF, org.apache.spark.connect.proto.ToDF.Builder, org.apache.spark.connect.proto.ToDFOrBuilder>(
                (org.apache.spark.connect.proto.ToDF) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 18;
      onChanged();
      return toDfBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.WithColumnsRenamed, org.apache.spark.connect.proto.WithColumnsRenamed.Builder, org.apache.spark.connect.proto.WithColumnsRenamedOrBuilder> withColumnsRenamedBuilder_;
    /**
     * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
     * @return Whether the withColumnsRenamed field is set.
     */
    @Override
    public boolean hasWithColumnsRenamed() {
      return relTypeCase_ == 19;
    }
    /**
     * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
     * @return The withColumnsRenamed.
     */
    @Override
    public org.apache.spark.connect.proto.WithColumnsRenamed getWithColumnsRenamed() {
      if (withColumnsRenamedBuilder_ == null) {
        if (relTypeCase_ == 19) {
          return (org.apache.spark.connect.proto.WithColumnsRenamed) relType_;
        }
        return org.apache.spark.connect.proto.WithColumnsRenamed.getDefaultInstance();
      } else {
        if (relTypeCase_ == 19) {
          return withColumnsRenamedBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.WithColumnsRenamed.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
     */
    public Builder setWithColumnsRenamed(org.apache.spark.connect.proto.WithColumnsRenamed value) {
      if (withColumnsRenamedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        withColumnsRenamedBuilder_.setMessage(value);
      }
      relTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
     */
    public Builder setWithColumnsRenamed(
        org.apache.spark.connect.proto.WithColumnsRenamed.Builder builderForValue) {
      if (withColumnsRenamedBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        withColumnsRenamedBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
     */
    public Builder mergeWithColumnsRenamed(org.apache.spark.connect.proto.WithColumnsRenamed value) {
      if (withColumnsRenamedBuilder_ == null) {
        if (relTypeCase_ == 19 &&
            relType_ != org.apache.spark.connect.proto.WithColumnsRenamed.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.WithColumnsRenamed.newBuilder((org.apache.spark.connect.proto.WithColumnsRenamed) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 19) {
          withColumnsRenamedBuilder_.mergeFrom(value);
        } else {
          withColumnsRenamedBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
     */
    public Builder clearWithColumnsRenamed() {
      if (withColumnsRenamedBuilder_ == null) {
        if (relTypeCase_ == 19) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 19) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        withColumnsRenamedBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
     */
    public org.apache.spark.connect.proto.WithColumnsRenamed.Builder getWithColumnsRenamedBuilder() {
      return getWithColumnsRenamedFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
     */
    @Override
    public org.apache.spark.connect.proto.WithColumnsRenamedOrBuilder getWithColumnsRenamedOrBuilder() {
      if ((relTypeCase_ == 19) && (withColumnsRenamedBuilder_ != null)) {
        return withColumnsRenamedBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 19) {
          return (org.apache.spark.connect.proto.WithColumnsRenamed) relType_;
        }
        return org.apache.spark.connect.proto.WithColumnsRenamed.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WithColumnsRenamed with_columns_renamed = 19;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.WithColumnsRenamed, org.apache.spark.connect.proto.WithColumnsRenamed.Builder, org.apache.spark.connect.proto.WithColumnsRenamedOrBuilder> 
        getWithColumnsRenamedFieldBuilder() {
      if (withColumnsRenamedBuilder_ == null) {
        if (!(relTypeCase_ == 19)) {
          relType_ = org.apache.spark.connect.proto.WithColumnsRenamed.getDefaultInstance();
        }
        withColumnsRenamedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.WithColumnsRenamed, org.apache.spark.connect.proto.WithColumnsRenamed.Builder, org.apache.spark.connect.proto.WithColumnsRenamedOrBuilder>(
                (org.apache.spark.connect.proto.WithColumnsRenamed) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 19;
      onChanged();
      return withColumnsRenamedBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.ShowString, org.apache.spark.connect.proto.ShowString.Builder, org.apache.spark.connect.proto.ShowStringOrBuilder> showStringBuilder_;
    /**
     * <code>.spark.connect.ShowString show_string = 20;</code>
     * @return Whether the showString field is set.
     */
    @Override
    public boolean hasShowString() {
      return relTypeCase_ == 20;
    }
    /**
     * <code>.spark.connect.ShowString show_string = 20;</code>
     * @return The showString.
     */
    @Override
    public org.apache.spark.connect.proto.ShowString getShowString() {
      if (showStringBuilder_ == null) {
        if (relTypeCase_ == 20) {
          return (org.apache.spark.connect.proto.ShowString) relType_;
        }
        return org.apache.spark.connect.proto.ShowString.getDefaultInstance();
      } else {
        if (relTypeCase_ == 20) {
          return showStringBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.ShowString.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ShowString show_string = 20;</code>
     */
    public Builder setShowString(org.apache.spark.connect.proto.ShowString value) {
      if (showStringBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        showStringBuilder_.setMessage(value);
      }
      relTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.spark.connect.ShowString show_string = 20;</code>
     */
    public Builder setShowString(
        org.apache.spark.connect.proto.ShowString.Builder builderForValue) {
      if (showStringBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        showStringBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.spark.connect.ShowString show_string = 20;</code>
     */
    public Builder mergeShowString(org.apache.spark.connect.proto.ShowString value) {
      if (showStringBuilder_ == null) {
        if (relTypeCase_ == 20 &&
            relType_ != org.apache.spark.connect.proto.ShowString.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.ShowString.newBuilder((org.apache.spark.connect.proto.ShowString) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 20) {
          showStringBuilder_.mergeFrom(value);
        } else {
          showStringBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.spark.connect.ShowString show_string = 20;</code>
     */
    public Builder clearShowString() {
      if (showStringBuilder_ == null) {
        if (relTypeCase_ == 20) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 20) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        showStringBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.ShowString show_string = 20;</code>
     */
    public org.apache.spark.connect.proto.ShowString.Builder getShowStringBuilder() {
      return getShowStringFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.ShowString show_string = 20;</code>
     */
    @Override
    public org.apache.spark.connect.proto.ShowStringOrBuilder getShowStringOrBuilder() {
      if ((relTypeCase_ == 20) && (showStringBuilder_ != null)) {
        return showStringBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 20) {
          return (org.apache.spark.connect.proto.ShowString) relType_;
        }
        return org.apache.spark.connect.proto.ShowString.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ShowString show_string = 20;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.ShowString, org.apache.spark.connect.proto.ShowString.Builder, org.apache.spark.connect.proto.ShowStringOrBuilder> 
        getShowStringFieldBuilder() {
      if (showStringBuilder_ == null) {
        if (!(relTypeCase_ == 20)) {
          relType_ = org.apache.spark.connect.proto.ShowString.getDefaultInstance();
        }
        showStringBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.ShowString, org.apache.spark.connect.proto.ShowString.Builder, org.apache.spark.connect.proto.ShowStringOrBuilder>(
                (org.apache.spark.connect.proto.ShowString) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 20;
      onChanged();
      return showStringBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Drop, org.apache.spark.connect.proto.Drop.Builder, org.apache.spark.connect.proto.DropOrBuilder> dropBuilder_;
    /**
     * <code>.spark.connect.Drop drop = 21;</code>
     * @return Whether the drop field is set.
     */
    @Override
    public boolean hasDrop() {
      return relTypeCase_ == 21;
    }
    /**
     * <code>.spark.connect.Drop drop = 21;</code>
     * @return The drop.
     */
    @Override
    public org.apache.spark.connect.proto.Drop getDrop() {
      if (dropBuilder_ == null) {
        if (relTypeCase_ == 21) {
          return (org.apache.spark.connect.proto.Drop) relType_;
        }
        return org.apache.spark.connect.proto.Drop.getDefaultInstance();
      } else {
        if (relTypeCase_ == 21) {
          return dropBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Drop.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Drop drop = 21;</code>
     */
    public Builder setDrop(org.apache.spark.connect.proto.Drop value) {
      if (dropBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        dropBuilder_.setMessage(value);
      }
      relTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.spark.connect.Drop drop = 21;</code>
     */
    public Builder setDrop(
        org.apache.spark.connect.proto.Drop.Builder builderForValue) {
      if (dropBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        dropBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.spark.connect.Drop drop = 21;</code>
     */
    public Builder mergeDrop(org.apache.spark.connect.proto.Drop value) {
      if (dropBuilder_ == null) {
        if (relTypeCase_ == 21 &&
            relType_ != org.apache.spark.connect.proto.Drop.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Drop.newBuilder((org.apache.spark.connect.proto.Drop) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 21) {
          dropBuilder_.mergeFrom(value);
        } else {
          dropBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.spark.connect.Drop drop = 21;</code>
     */
    public Builder clearDrop() {
      if (dropBuilder_ == null) {
        if (relTypeCase_ == 21) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 21) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        dropBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Drop drop = 21;</code>
     */
    public org.apache.spark.connect.proto.Drop.Builder getDropBuilder() {
      return getDropFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Drop drop = 21;</code>
     */
    @Override
    public org.apache.spark.connect.proto.DropOrBuilder getDropOrBuilder() {
      if ((relTypeCase_ == 21) && (dropBuilder_ != null)) {
        return dropBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 21) {
          return (org.apache.spark.connect.proto.Drop) relType_;
        }
        return org.apache.spark.connect.proto.Drop.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Drop drop = 21;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Drop, org.apache.spark.connect.proto.Drop.Builder, org.apache.spark.connect.proto.DropOrBuilder> 
        getDropFieldBuilder() {
      if (dropBuilder_ == null) {
        if (!(relTypeCase_ == 21)) {
          relType_ = org.apache.spark.connect.proto.Drop.getDefaultInstance();
        }
        dropBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Drop, org.apache.spark.connect.proto.Drop.Builder, org.apache.spark.connect.proto.DropOrBuilder>(
                (org.apache.spark.connect.proto.Drop) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 21;
      onChanged();
      return dropBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Tail, org.apache.spark.connect.proto.Tail.Builder, org.apache.spark.connect.proto.TailOrBuilder> tailBuilder_;
    /**
     * <code>.spark.connect.Tail tail = 22;</code>
     * @return Whether the tail field is set.
     */
    @Override
    public boolean hasTail() {
      return relTypeCase_ == 22;
    }
    /**
     * <code>.spark.connect.Tail tail = 22;</code>
     * @return The tail.
     */
    @Override
    public org.apache.spark.connect.proto.Tail getTail() {
      if (tailBuilder_ == null) {
        if (relTypeCase_ == 22) {
          return (org.apache.spark.connect.proto.Tail) relType_;
        }
        return org.apache.spark.connect.proto.Tail.getDefaultInstance();
      } else {
        if (relTypeCase_ == 22) {
          return tailBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Tail.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Tail tail = 22;</code>
     */
    public Builder setTail(org.apache.spark.connect.proto.Tail value) {
      if (tailBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        tailBuilder_.setMessage(value);
      }
      relTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.spark.connect.Tail tail = 22;</code>
     */
    public Builder setTail(
        org.apache.spark.connect.proto.Tail.Builder builderForValue) {
      if (tailBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        tailBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.spark.connect.Tail tail = 22;</code>
     */
    public Builder mergeTail(org.apache.spark.connect.proto.Tail value) {
      if (tailBuilder_ == null) {
        if (relTypeCase_ == 22 &&
            relType_ != org.apache.spark.connect.proto.Tail.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Tail.newBuilder((org.apache.spark.connect.proto.Tail) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 22) {
          tailBuilder_.mergeFrom(value);
        } else {
          tailBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.spark.connect.Tail tail = 22;</code>
     */
    public Builder clearTail() {
      if (tailBuilder_ == null) {
        if (relTypeCase_ == 22) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 22) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        tailBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Tail tail = 22;</code>
     */
    public org.apache.spark.connect.proto.Tail.Builder getTailBuilder() {
      return getTailFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Tail tail = 22;</code>
     */
    @Override
    public org.apache.spark.connect.proto.TailOrBuilder getTailOrBuilder() {
      if ((relTypeCase_ == 22) && (tailBuilder_ != null)) {
        return tailBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 22) {
          return (org.apache.spark.connect.proto.Tail) relType_;
        }
        return org.apache.spark.connect.proto.Tail.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Tail tail = 22;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Tail, org.apache.spark.connect.proto.Tail.Builder, org.apache.spark.connect.proto.TailOrBuilder> 
        getTailFieldBuilder() {
      if (tailBuilder_ == null) {
        if (!(relTypeCase_ == 22)) {
          relType_ = org.apache.spark.connect.proto.Tail.getDefaultInstance();
        }
        tailBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Tail, org.apache.spark.connect.proto.Tail.Builder, org.apache.spark.connect.proto.TailOrBuilder>(
                (org.apache.spark.connect.proto.Tail) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 22;
      onChanged();
      return tailBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.WithColumns, org.apache.spark.connect.proto.WithColumns.Builder, org.apache.spark.connect.proto.WithColumnsOrBuilder> withColumnsBuilder_;
    /**
     * <code>.spark.connect.WithColumns with_columns = 23;</code>
     * @return Whether the withColumns field is set.
     */
    @Override
    public boolean hasWithColumns() {
      return relTypeCase_ == 23;
    }
    /**
     * <code>.spark.connect.WithColumns with_columns = 23;</code>
     * @return The withColumns.
     */
    @Override
    public org.apache.spark.connect.proto.WithColumns getWithColumns() {
      if (withColumnsBuilder_ == null) {
        if (relTypeCase_ == 23) {
          return (org.apache.spark.connect.proto.WithColumns) relType_;
        }
        return org.apache.spark.connect.proto.WithColumns.getDefaultInstance();
      } else {
        if (relTypeCase_ == 23) {
          return withColumnsBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.WithColumns.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WithColumns with_columns = 23;</code>
     */
    public Builder setWithColumns(org.apache.spark.connect.proto.WithColumns value) {
      if (withColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        withColumnsBuilder_.setMessage(value);
      }
      relTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.spark.connect.WithColumns with_columns = 23;</code>
     */
    public Builder setWithColumns(
        org.apache.spark.connect.proto.WithColumns.Builder builderForValue) {
      if (withColumnsBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        withColumnsBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.spark.connect.WithColumns with_columns = 23;</code>
     */
    public Builder mergeWithColumns(org.apache.spark.connect.proto.WithColumns value) {
      if (withColumnsBuilder_ == null) {
        if (relTypeCase_ == 23 &&
            relType_ != org.apache.spark.connect.proto.WithColumns.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.WithColumns.newBuilder((org.apache.spark.connect.proto.WithColumns) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 23) {
          withColumnsBuilder_.mergeFrom(value);
        } else {
          withColumnsBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.spark.connect.WithColumns with_columns = 23;</code>
     */
    public Builder clearWithColumns() {
      if (withColumnsBuilder_ == null) {
        if (relTypeCase_ == 23) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 23) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        withColumnsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.WithColumns with_columns = 23;</code>
     */
    public org.apache.spark.connect.proto.WithColumns.Builder getWithColumnsBuilder() {
      return getWithColumnsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.WithColumns with_columns = 23;</code>
     */
    @Override
    public org.apache.spark.connect.proto.WithColumnsOrBuilder getWithColumnsOrBuilder() {
      if ((relTypeCase_ == 23) && (withColumnsBuilder_ != null)) {
        return withColumnsBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 23) {
          return (org.apache.spark.connect.proto.WithColumns) relType_;
        }
        return org.apache.spark.connect.proto.WithColumns.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WithColumns with_columns = 23;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.WithColumns, org.apache.spark.connect.proto.WithColumns.Builder, org.apache.spark.connect.proto.WithColumnsOrBuilder> 
        getWithColumnsFieldBuilder() {
      if (withColumnsBuilder_ == null) {
        if (!(relTypeCase_ == 23)) {
          relType_ = org.apache.spark.connect.proto.WithColumns.getDefaultInstance();
        }
        withColumnsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.WithColumns, org.apache.spark.connect.proto.WithColumns.Builder, org.apache.spark.connect.proto.WithColumnsOrBuilder>(
                (org.apache.spark.connect.proto.WithColumns) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 23;
      onChanged();
      return withColumnsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Hint, org.apache.spark.connect.proto.Hint.Builder, org.apache.spark.connect.proto.HintOrBuilder> hintBuilder_;
    /**
     * <code>.spark.connect.Hint hint = 24;</code>
     * @return Whether the hint field is set.
     */
    @Override
    public boolean hasHint() {
      return relTypeCase_ == 24;
    }
    /**
     * <code>.spark.connect.Hint hint = 24;</code>
     * @return The hint.
     */
    @Override
    public org.apache.spark.connect.proto.Hint getHint() {
      if (hintBuilder_ == null) {
        if (relTypeCase_ == 24) {
          return (org.apache.spark.connect.proto.Hint) relType_;
        }
        return org.apache.spark.connect.proto.Hint.getDefaultInstance();
      } else {
        if (relTypeCase_ == 24) {
          return hintBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Hint.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Hint hint = 24;</code>
     */
    public Builder setHint(org.apache.spark.connect.proto.Hint value) {
      if (hintBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        hintBuilder_.setMessage(value);
      }
      relTypeCase_ = 24;
      return this;
    }
    /**
     * <code>.spark.connect.Hint hint = 24;</code>
     */
    public Builder setHint(
        org.apache.spark.connect.proto.Hint.Builder builderForValue) {
      if (hintBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        hintBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 24;
      return this;
    }
    /**
     * <code>.spark.connect.Hint hint = 24;</code>
     */
    public Builder mergeHint(org.apache.spark.connect.proto.Hint value) {
      if (hintBuilder_ == null) {
        if (relTypeCase_ == 24 &&
            relType_ != org.apache.spark.connect.proto.Hint.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Hint.newBuilder((org.apache.spark.connect.proto.Hint) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 24) {
          hintBuilder_.mergeFrom(value);
        } else {
          hintBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 24;
      return this;
    }
    /**
     * <code>.spark.connect.Hint hint = 24;</code>
     */
    public Builder clearHint() {
      if (hintBuilder_ == null) {
        if (relTypeCase_ == 24) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 24) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        hintBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Hint hint = 24;</code>
     */
    public org.apache.spark.connect.proto.Hint.Builder getHintBuilder() {
      return getHintFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Hint hint = 24;</code>
     */
    @Override
    public org.apache.spark.connect.proto.HintOrBuilder getHintOrBuilder() {
      if ((relTypeCase_ == 24) && (hintBuilder_ != null)) {
        return hintBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 24) {
          return (org.apache.spark.connect.proto.Hint) relType_;
        }
        return org.apache.spark.connect.proto.Hint.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Hint hint = 24;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Hint, org.apache.spark.connect.proto.Hint.Builder, org.apache.spark.connect.proto.HintOrBuilder> 
        getHintFieldBuilder() {
      if (hintBuilder_ == null) {
        if (!(relTypeCase_ == 24)) {
          relType_ = org.apache.spark.connect.proto.Hint.getDefaultInstance();
        }
        hintBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Hint, org.apache.spark.connect.proto.Hint.Builder, org.apache.spark.connect.proto.HintOrBuilder>(
                (org.apache.spark.connect.proto.Hint) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 24;
      onChanged();
      return hintBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Unpivot, org.apache.spark.connect.proto.Unpivot.Builder, org.apache.spark.connect.proto.UnpivotOrBuilder> unpivotBuilder_;
    /**
     * <code>.spark.connect.Unpivot unpivot = 25;</code>
     * @return Whether the unpivot field is set.
     */
    @Override
    public boolean hasUnpivot() {
      return relTypeCase_ == 25;
    }
    /**
     * <code>.spark.connect.Unpivot unpivot = 25;</code>
     * @return The unpivot.
     */
    @Override
    public org.apache.spark.connect.proto.Unpivot getUnpivot() {
      if (unpivotBuilder_ == null) {
        if (relTypeCase_ == 25) {
          return (org.apache.spark.connect.proto.Unpivot) relType_;
        }
        return org.apache.spark.connect.proto.Unpivot.getDefaultInstance();
      } else {
        if (relTypeCase_ == 25) {
          return unpivotBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Unpivot.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Unpivot unpivot = 25;</code>
     */
    public Builder setUnpivot(org.apache.spark.connect.proto.Unpivot value) {
      if (unpivotBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        unpivotBuilder_.setMessage(value);
      }
      relTypeCase_ = 25;
      return this;
    }
    /**
     * <code>.spark.connect.Unpivot unpivot = 25;</code>
     */
    public Builder setUnpivot(
        org.apache.spark.connect.proto.Unpivot.Builder builderForValue) {
      if (unpivotBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        unpivotBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 25;
      return this;
    }
    /**
     * <code>.spark.connect.Unpivot unpivot = 25;</code>
     */
    public Builder mergeUnpivot(org.apache.spark.connect.proto.Unpivot value) {
      if (unpivotBuilder_ == null) {
        if (relTypeCase_ == 25 &&
            relType_ != org.apache.spark.connect.proto.Unpivot.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Unpivot.newBuilder((org.apache.spark.connect.proto.Unpivot) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 25) {
          unpivotBuilder_.mergeFrom(value);
        } else {
          unpivotBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 25;
      return this;
    }
    /**
     * <code>.spark.connect.Unpivot unpivot = 25;</code>
     */
    public Builder clearUnpivot() {
      if (unpivotBuilder_ == null) {
        if (relTypeCase_ == 25) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 25) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        unpivotBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Unpivot unpivot = 25;</code>
     */
    public org.apache.spark.connect.proto.Unpivot.Builder getUnpivotBuilder() {
      return getUnpivotFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Unpivot unpivot = 25;</code>
     */
    @Override
    public org.apache.spark.connect.proto.UnpivotOrBuilder getUnpivotOrBuilder() {
      if ((relTypeCase_ == 25) && (unpivotBuilder_ != null)) {
        return unpivotBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 25) {
          return (org.apache.spark.connect.proto.Unpivot) relType_;
        }
        return org.apache.spark.connect.proto.Unpivot.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Unpivot unpivot = 25;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Unpivot, org.apache.spark.connect.proto.Unpivot.Builder, org.apache.spark.connect.proto.UnpivotOrBuilder> 
        getUnpivotFieldBuilder() {
      if (unpivotBuilder_ == null) {
        if (!(relTypeCase_ == 25)) {
          relType_ = org.apache.spark.connect.proto.Unpivot.getDefaultInstance();
        }
        unpivotBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Unpivot, org.apache.spark.connect.proto.Unpivot.Builder, org.apache.spark.connect.proto.UnpivotOrBuilder>(
                (org.apache.spark.connect.proto.Unpivot) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 25;
      onChanged();
      return unpivotBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.ToSchema, org.apache.spark.connect.proto.ToSchema.Builder, org.apache.spark.connect.proto.ToSchemaOrBuilder> toSchemaBuilder_;
    /**
     * <code>.spark.connect.ToSchema to_schema = 26;</code>
     * @return Whether the toSchema field is set.
     */
    @Override
    public boolean hasToSchema() {
      return relTypeCase_ == 26;
    }
    /**
     * <code>.spark.connect.ToSchema to_schema = 26;</code>
     * @return The toSchema.
     */
    @Override
    public org.apache.spark.connect.proto.ToSchema getToSchema() {
      if (toSchemaBuilder_ == null) {
        if (relTypeCase_ == 26) {
          return (org.apache.spark.connect.proto.ToSchema) relType_;
        }
        return org.apache.spark.connect.proto.ToSchema.getDefaultInstance();
      } else {
        if (relTypeCase_ == 26) {
          return toSchemaBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.ToSchema.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ToSchema to_schema = 26;</code>
     */
    public Builder setToSchema(org.apache.spark.connect.proto.ToSchema value) {
      if (toSchemaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        toSchemaBuilder_.setMessage(value);
      }
      relTypeCase_ = 26;
      return this;
    }
    /**
     * <code>.spark.connect.ToSchema to_schema = 26;</code>
     */
    public Builder setToSchema(
        org.apache.spark.connect.proto.ToSchema.Builder builderForValue) {
      if (toSchemaBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        toSchemaBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 26;
      return this;
    }
    /**
     * <code>.spark.connect.ToSchema to_schema = 26;</code>
     */
    public Builder mergeToSchema(org.apache.spark.connect.proto.ToSchema value) {
      if (toSchemaBuilder_ == null) {
        if (relTypeCase_ == 26 &&
            relType_ != org.apache.spark.connect.proto.ToSchema.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.ToSchema.newBuilder((org.apache.spark.connect.proto.ToSchema) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 26) {
          toSchemaBuilder_.mergeFrom(value);
        } else {
          toSchemaBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 26;
      return this;
    }
    /**
     * <code>.spark.connect.ToSchema to_schema = 26;</code>
     */
    public Builder clearToSchema() {
      if (toSchemaBuilder_ == null) {
        if (relTypeCase_ == 26) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 26) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        toSchemaBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.ToSchema to_schema = 26;</code>
     */
    public org.apache.spark.connect.proto.ToSchema.Builder getToSchemaBuilder() {
      return getToSchemaFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.ToSchema to_schema = 26;</code>
     */
    @Override
    public org.apache.spark.connect.proto.ToSchemaOrBuilder getToSchemaOrBuilder() {
      if ((relTypeCase_ == 26) && (toSchemaBuilder_ != null)) {
        return toSchemaBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 26) {
          return (org.apache.spark.connect.proto.ToSchema) relType_;
        }
        return org.apache.spark.connect.proto.ToSchema.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ToSchema to_schema = 26;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.ToSchema, org.apache.spark.connect.proto.ToSchema.Builder, org.apache.spark.connect.proto.ToSchemaOrBuilder> 
        getToSchemaFieldBuilder() {
      if (toSchemaBuilder_ == null) {
        if (!(relTypeCase_ == 26)) {
          relType_ = org.apache.spark.connect.proto.ToSchema.getDefaultInstance();
        }
        toSchemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.ToSchema, org.apache.spark.connect.proto.ToSchema.Builder, org.apache.spark.connect.proto.ToSchemaOrBuilder>(
                (org.apache.spark.connect.proto.ToSchema) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 26;
      onChanged();
      return toSchemaBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.RepartitionByExpression, org.apache.spark.connect.proto.RepartitionByExpression.Builder, org.apache.spark.connect.proto.RepartitionByExpressionOrBuilder> repartitionByExpressionBuilder_;
    /**
     * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
     * @return Whether the repartitionByExpression field is set.
     */
    @Override
    public boolean hasRepartitionByExpression() {
      return relTypeCase_ == 27;
    }
    /**
     * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
     * @return The repartitionByExpression.
     */
    @Override
    public org.apache.spark.connect.proto.RepartitionByExpression getRepartitionByExpression() {
      if (repartitionByExpressionBuilder_ == null) {
        if (relTypeCase_ == 27) {
          return (org.apache.spark.connect.proto.RepartitionByExpression) relType_;
        }
        return org.apache.spark.connect.proto.RepartitionByExpression.getDefaultInstance();
      } else {
        if (relTypeCase_ == 27) {
          return repartitionByExpressionBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.RepartitionByExpression.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
     */
    public Builder setRepartitionByExpression(org.apache.spark.connect.proto.RepartitionByExpression value) {
      if (repartitionByExpressionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        repartitionByExpressionBuilder_.setMessage(value);
      }
      relTypeCase_ = 27;
      return this;
    }
    /**
     * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
     */
    public Builder setRepartitionByExpression(
        org.apache.spark.connect.proto.RepartitionByExpression.Builder builderForValue) {
      if (repartitionByExpressionBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        repartitionByExpressionBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 27;
      return this;
    }
    /**
     * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
     */
    public Builder mergeRepartitionByExpression(org.apache.spark.connect.proto.RepartitionByExpression value) {
      if (repartitionByExpressionBuilder_ == null) {
        if (relTypeCase_ == 27 &&
            relType_ != org.apache.spark.connect.proto.RepartitionByExpression.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.RepartitionByExpression.newBuilder((org.apache.spark.connect.proto.RepartitionByExpression) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 27) {
          repartitionByExpressionBuilder_.mergeFrom(value);
        } else {
          repartitionByExpressionBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 27;
      return this;
    }
    /**
     * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
     */
    public Builder clearRepartitionByExpression() {
      if (repartitionByExpressionBuilder_ == null) {
        if (relTypeCase_ == 27) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 27) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        repartitionByExpressionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
     */
    public org.apache.spark.connect.proto.RepartitionByExpression.Builder getRepartitionByExpressionBuilder() {
      return getRepartitionByExpressionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
     */
    @Override
    public org.apache.spark.connect.proto.RepartitionByExpressionOrBuilder getRepartitionByExpressionOrBuilder() {
      if ((relTypeCase_ == 27) && (repartitionByExpressionBuilder_ != null)) {
        return repartitionByExpressionBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 27) {
          return (org.apache.spark.connect.proto.RepartitionByExpression) relType_;
        }
        return org.apache.spark.connect.proto.RepartitionByExpression.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.RepartitionByExpression repartition_by_expression = 27;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.RepartitionByExpression, org.apache.spark.connect.proto.RepartitionByExpression.Builder, org.apache.spark.connect.proto.RepartitionByExpressionOrBuilder> 
        getRepartitionByExpressionFieldBuilder() {
      if (repartitionByExpressionBuilder_ == null) {
        if (!(relTypeCase_ == 27)) {
          relType_ = org.apache.spark.connect.proto.RepartitionByExpression.getDefaultInstance();
        }
        repartitionByExpressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.RepartitionByExpression, org.apache.spark.connect.proto.RepartitionByExpression.Builder, org.apache.spark.connect.proto.RepartitionByExpressionOrBuilder>(
                (org.apache.spark.connect.proto.RepartitionByExpression) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 27;
      onChanged();
      return repartitionByExpressionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.MapPartitions, org.apache.spark.connect.proto.MapPartitions.Builder, org.apache.spark.connect.proto.MapPartitionsOrBuilder> mapPartitionsBuilder_;
    /**
     * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
     * @return Whether the mapPartitions field is set.
     */
    @Override
    public boolean hasMapPartitions() {
      return relTypeCase_ == 28;
    }
    /**
     * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
     * @return The mapPartitions.
     */
    @Override
    public org.apache.spark.connect.proto.MapPartitions getMapPartitions() {
      if (mapPartitionsBuilder_ == null) {
        if (relTypeCase_ == 28) {
          return (org.apache.spark.connect.proto.MapPartitions) relType_;
        }
        return org.apache.spark.connect.proto.MapPartitions.getDefaultInstance();
      } else {
        if (relTypeCase_ == 28) {
          return mapPartitionsBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.MapPartitions.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
     */
    public Builder setMapPartitions(org.apache.spark.connect.proto.MapPartitions value) {
      if (mapPartitionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        mapPartitionsBuilder_.setMessage(value);
      }
      relTypeCase_ = 28;
      return this;
    }
    /**
     * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
     */
    public Builder setMapPartitions(
        org.apache.spark.connect.proto.MapPartitions.Builder builderForValue) {
      if (mapPartitionsBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        mapPartitionsBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 28;
      return this;
    }
    /**
     * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
     */
    public Builder mergeMapPartitions(org.apache.spark.connect.proto.MapPartitions value) {
      if (mapPartitionsBuilder_ == null) {
        if (relTypeCase_ == 28 &&
            relType_ != org.apache.spark.connect.proto.MapPartitions.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.MapPartitions.newBuilder((org.apache.spark.connect.proto.MapPartitions) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 28) {
          mapPartitionsBuilder_.mergeFrom(value);
        } else {
          mapPartitionsBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 28;
      return this;
    }
    /**
     * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
     */
    public Builder clearMapPartitions() {
      if (mapPartitionsBuilder_ == null) {
        if (relTypeCase_ == 28) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 28) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        mapPartitionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
     */
    public org.apache.spark.connect.proto.MapPartitions.Builder getMapPartitionsBuilder() {
      return getMapPartitionsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
     */
    @Override
    public org.apache.spark.connect.proto.MapPartitionsOrBuilder getMapPartitionsOrBuilder() {
      if ((relTypeCase_ == 28) && (mapPartitionsBuilder_ != null)) {
        return mapPartitionsBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 28) {
          return (org.apache.spark.connect.proto.MapPartitions) relType_;
        }
        return org.apache.spark.connect.proto.MapPartitions.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.MapPartitions map_partitions = 28;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.MapPartitions, org.apache.spark.connect.proto.MapPartitions.Builder, org.apache.spark.connect.proto.MapPartitionsOrBuilder> 
        getMapPartitionsFieldBuilder() {
      if (mapPartitionsBuilder_ == null) {
        if (!(relTypeCase_ == 28)) {
          relType_ = org.apache.spark.connect.proto.MapPartitions.getDefaultInstance();
        }
        mapPartitionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.MapPartitions, org.apache.spark.connect.proto.MapPartitions.Builder, org.apache.spark.connect.proto.MapPartitionsOrBuilder>(
                (org.apache.spark.connect.proto.MapPartitions) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 28;
      onChanged();
      return mapPartitionsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CollectMetrics, org.apache.spark.connect.proto.CollectMetrics.Builder, org.apache.spark.connect.proto.CollectMetricsOrBuilder> collectMetricsBuilder_;
    /**
     * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
     * @return Whether the collectMetrics field is set.
     */
    @Override
    public boolean hasCollectMetrics() {
      return relTypeCase_ == 29;
    }
    /**
     * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
     * @return The collectMetrics.
     */
    @Override
    public org.apache.spark.connect.proto.CollectMetrics getCollectMetrics() {
      if (collectMetricsBuilder_ == null) {
        if (relTypeCase_ == 29) {
          return (org.apache.spark.connect.proto.CollectMetrics) relType_;
        }
        return org.apache.spark.connect.proto.CollectMetrics.getDefaultInstance();
      } else {
        if (relTypeCase_ == 29) {
          return collectMetricsBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.CollectMetrics.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
     */
    public Builder setCollectMetrics(org.apache.spark.connect.proto.CollectMetrics value) {
      if (collectMetricsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        collectMetricsBuilder_.setMessage(value);
      }
      relTypeCase_ = 29;
      return this;
    }
    /**
     * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
     */
    public Builder setCollectMetrics(
        org.apache.spark.connect.proto.CollectMetrics.Builder builderForValue) {
      if (collectMetricsBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        collectMetricsBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 29;
      return this;
    }
    /**
     * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
     */
    public Builder mergeCollectMetrics(org.apache.spark.connect.proto.CollectMetrics value) {
      if (collectMetricsBuilder_ == null) {
        if (relTypeCase_ == 29 &&
            relType_ != org.apache.spark.connect.proto.CollectMetrics.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.CollectMetrics.newBuilder((org.apache.spark.connect.proto.CollectMetrics) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 29) {
          collectMetricsBuilder_.mergeFrom(value);
        } else {
          collectMetricsBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 29;
      return this;
    }
    /**
     * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
     */
    public Builder clearCollectMetrics() {
      if (collectMetricsBuilder_ == null) {
        if (relTypeCase_ == 29) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 29) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        collectMetricsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
     */
    public org.apache.spark.connect.proto.CollectMetrics.Builder getCollectMetricsBuilder() {
      return getCollectMetricsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
     */
    @Override
    public org.apache.spark.connect.proto.CollectMetricsOrBuilder getCollectMetricsOrBuilder() {
      if ((relTypeCase_ == 29) && (collectMetricsBuilder_ != null)) {
        return collectMetricsBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 29) {
          return (org.apache.spark.connect.proto.CollectMetrics) relType_;
        }
        return org.apache.spark.connect.proto.CollectMetrics.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CollectMetrics collect_metrics = 29;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CollectMetrics, org.apache.spark.connect.proto.CollectMetrics.Builder, org.apache.spark.connect.proto.CollectMetricsOrBuilder> 
        getCollectMetricsFieldBuilder() {
      if (collectMetricsBuilder_ == null) {
        if (!(relTypeCase_ == 29)) {
          relType_ = org.apache.spark.connect.proto.CollectMetrics.getDefaultInstance();
        }
        collectMetricsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.CollectMetrics, org.apache.spark.connect.proto.CollectMetrics.Builder, org.apache.spark.connect.proto.CollectMetricsOrBuilder>(
                (org.apache.spark.connect.proto.CollectMetrics) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 29;
      onChanged();
      return collectMetricsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Parse, org.apache.spark.connect.proto.Parse.Builder, org.apache.spark.connect.proto.ParseOrBuilder> parseBuilder_;
    /**
     * <code>.spark.connect.Parse parse = 30;</code>
     * @return Whether the parse field is set.
     */
    @Override
    public boolean hasParse() {
      return relTypeCase_ == 30;
    }
    /**
     * <code>.spark.connect.Parse parse = 30;</code>
     * @return The parse.
     */
    @Override
    public org.apache.spark.connect.proto.Parse getParse() {
      if (parseBuilder_ == null) {
        if (relTypeCase_ == 30) {
          return (org.apache.spark.connect.proto.Parse) relType_;
        }
        return org.apache.spark.connect.proto.Parse.getDefaultInstance();
      } else {
        if (relTypeCase_ == 30) {
          return parseBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Parse.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Parse parse = 30;</code>
     */
    public Builder setParse(org.apache.spark.connect.proto.Parse value) {
      if (parseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        parseBuilder_.setMessage(value);
      }
      relTypeCase_ = 30;
      return this;
    }
    /**
     * <code>.spark.connect.Parse parse = 30;</code>
     */
    public Builder setParse(
        org.apache.spark.connect.proto.Parse.Builder builderForValue) {
      if (parseBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        parseBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 30;
      return this;
    }
    /**
     * <code>.spark.connect.Parse parse = 30;</code>
     */
    public Builder mergeParse(org.apache.spark.connect.proto.Parse value) {
      if (parseBuilder_ == null) {
        if (relTypeCase_ == 30 &&
            relType_ != org.apache.spark.connect.proto.Parse.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Parse.newBuilder((org.apache.spark.connect.proto.Parse) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 30) {
          parseBuilder_.mergeFrom(value);
        } else {
          parseBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 30;
      return this;
    }
    /**
     * <code>.spark.connect.Parse parse = 30;</code>
     */
    public Builder clearParse() {
      if (parseBuilder_ == null) {
        if (relTypeCase_ == 30) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 30) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        parseBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Parse parse = 30;</code>
     */
    public org.apache.spark.connect.proto.Parse.Builder getParseBuilder() {
      return getParseFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Parse parse = 30;</code>
     */
    @Override
    public org.apache.spark.connect.proto.ParseOrBuilder getParseOrBuilder() {
      if ((relTypeCase_ == 30) && (parseBuilder_ != null)) {
        return parseBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 30) {
          return (org.apache.spark.connect.proto.Parse) relType_;
        }
        return org.apache.spark.connect.proto.Parse.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Parse parse = 30;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Parse, org.apache.spark.connect.proto.Parse.Builder, org.apache.spark.connect.proto.ParseOrBuilder> 
        getParseFieldBuilder() {
      if (parseBuilder_ == null) {
        if (!(relTypeCase_ == 30)) {
          relType_ = org.apache.spark.connect.proto.Parse.getDefaultInstance();
        }
        parseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Parse, org.apache.spark.connect.proto.Parse.Builder, org.apache.spark.connect.proto.ParseOrBuilder>(
                (org.apache.spark.connect.proto.Parse) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 30;
      onChanged();
      return parseBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.GroupMap, org.apache.spark.connect.proto.GroupMap.Builder, org.apache.spark.connect.proto.GroupMapOrBuilder> groupMapBuilder_;
    /**
     * <code>.spark.connect.GroupMap group_map = 31;</code>
     * @return Whether the groupMap field is set.
     */
    @Override
    public boolean hasGroupMap() {
      return relTypeCase_ == 31;
    }
    /**
     * <code>.spark.connect.GroupMap group_map = 31;</code>
     * @return The groupMap.
     */
    @Override
    public org.apache.spark.connect.proto.GroupMap getGroupMap() {
      if (groupMapBuilder_ == null) {
        if (relTypeCase_ == 31) {
          return (org.apache.spark.connect.proto.GroupMap) relType_;
        }
        return org.apache.spark.connect.proto.GroupMap.getDefaultInstance();
      } else {
        if (relTypeCase_ == 31) {
          return groupMapBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.GroupMap.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.GroupMap group_map = 31;</code>
     */
    public Builder setGroupMap(org.apache.spark.connect.proto.GroupMap value) {
      if (groupMapBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        groupMapBuilder_.setMessage(value);
      }
      relTypeCase_ = 31;
      return this;
    }
    /**
     * <code>.spark.connect.GroupMap group_map = 31;</code>
     */
    public Builder setGroupMap(
        org.apache.spark.connect.proto.GroupMap.Builder builderForValue) {
      if (groupMapBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        groupMapBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 31;
      return this;
    }
    /**
     * <code>.spark.connect.GroupMap group_map = 31;</code>
     */
    public Builder mergeGroupMap(org.apache.spark.connect.proto.GroupMap value) {
      if (groupMapBuilder_ == null) {
        if (relTypeCase_ == 31 &&
            relType_ != org.apache.spark.connect.proto.GroupMap.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.GroupMap.newBuilder((org.apache.spark.connect.proto.GroupMap) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 31) {
          groupMapBuilder_.mergeFrom(value);
        } else {
          groupMapBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 31;
      return this;
    }
    /**
     * <code>.spark.connect.GroupMap group_map = 31;</code>
     */
    public Builder clearGroupMap() {
      if (groupMapBuilder_ == null) {
        if (relTypeCase_ == 31) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 31) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        groupMapBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.GroupMap group_map = 31;</code>
     */
    public org.apache.spark.connect.proto.GroupMap.Builder getGroupMapBuilder() {
      return getGroupMapFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.GroupMap group_map = 31;</code>
     */
    @Override
    public org.apache.spark.connect.proto.GroupMapOrBuilder getGroupMapOrBuilder() {
      if ((relTypeCase_ == 31) && (groupMapBuilder_ != null)) {
        return groupMapBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 31) {
          return (org.apache.spark.connect.proto.GroupMap) relType_;
        }
        return org.apache.spark.connect.proto.GroupMap.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.GroupMap group_map = 31;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.GroupMap, org.apache.spark.connect.proto.GroupMap.Builder, org.apache.spark.connect.proto.GroupMapOrBuilder> 
        getGroupMapFieldBuilder() {
      if (groupMapBuilder_ == null) {
        if (!(relTypeCase_ == 31)) {
          relType_ = org.apache.spark.connect.proto.GroupMap.getDefaultInstance();
        }
        groupMapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.GroupMap, org.apache.spark.connect.proto.GroupMap.Builder, org.apache.spark.connect.proto.GroupMapOrBuilder>(
                (org.apache.spark.connect.proto.GroupMap) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 31;
      onChanged();
      return groupMapBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CoGroupMap, org.apache.spark.connect.proto.CoGroupMap.Builder, org.apache.spark.connect.proto.CoGroupMapOrBuilder> coGroupMapBuilder_;
    /**
     * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
     * @return Whether the coGroupMap field is set.
     */
    @Override
    public boolean hasCoGroupMap() {
      return relTypeCase_ == 32;
    }
    /**
     * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
     * @return The coGroupMap.
     */
    @Override
    public org.apache.spark.connect.proto.CoGroupMap getCoGroupMap() {
      if (coGroupMapBuilder_ == null) {
        if (relTypeCase_ == 32) {
          return (org.apache.spark.connect.proto.CoGroupMap) relType_;
        }
        return org.apache.spark.connect.proto.CoGroupMap.getDefaultInstance();
      } else {
        if (relTypeCase_ == 32) {
          return coGroupMapBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.CoGroupMap.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
     */
    public Builder setCoGroupMap(org.apache.spark.connect.proto.CoGroupMap value) {
      if (coGroupMapBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        coGroupMapBuilder_.setMessage(value);
      }
      relTypeCase_ = 32;
      return this;
    }
    /**
     * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
     */
    public Builder setCoGroupMap(
        org.apache.spark.connect.proto.CoGroupMap.Builder builderForValue) {
      if (coGroupMapBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        coGroupMapBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 32;
      return this;
    }
    /**
     * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
     */
    public Builder mergeCoGroupMap(org.apache.spark.connect.proto.CoGroupMap value) {
      if (coGroupMapBuilder_ == null) {
        if (relTypeCase_ == 32 &&
            relType_ != org.apache.spark.connect.proto.CoGroupMap.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.CoGroupMap.newBuilder((org.apache.spark.connect.proto.CoGroupMap) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 32) {
          coGroupMapBuilder_.mergeFrom(value);
        } else {
          coGroupMapBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 32;
      return this;
    }
    /**
     * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
     */
    public Builder clearCoGroupMap() {
      if (coGroupMapBuilder_ == null) {
        if (relTypeCase_ == 32) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 32) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        coGroupMapBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
     */
    public org.apache.spark.connect.proto.CoGroupMap.Builder getCoGroupMapBuilder() {
      return getCoGroupMapFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
     */
    @Override
    public org.apache.spark.connect.proto.CoGroupMapOrBuilder getCoGroupMapOrBuilder() {
      if ((relTypeCase_ == 32) && (coGroupMapBuilder_ != null)) {
        return coGroupMapBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 32) {
          return (org.apache.spark.connect.proto.CoGroupMap) relType_;
        }
        return org.apache.spark.connect.proto.CoGroupMap.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CoGroupMap co_group_map = 32;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CoGroupMap, org.apache.spark.connect.proto.CoGroupMap.Builder, org.apache.spark.connect.proto.CoGroupMapOrBuilder> 
        getCoGroupMapFieldBuilder() {
      if (coGroupMapBuilder_ == null) {
        if (!(relTypeCase_ == 32)) {
          relType_ = org.apache.spark.connect.proto.CoGroupMap.getDefaultInstance();
        }
        coGroupMapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.CoGroupMap, org.apache.spark.connect.proto.CoGroupMap.Builder, org.apache.spark.connect.proto.CoGroupMapOrBuilder>(
                (org.apache.spark.connect.proto.CoGroupMap) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 32;
      onChanged();
      return coGroupMapBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.WithWatermark, org.apache.spark.connect.proto.WithWatermark.Builder, org.apache.spark.connect.proto.WithWatermarkOrBuilder> withWatermarkBuilder_;
    /**
     * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
     * @return Whether the withWatermark field is set.
     */
    @Override
    public boolean hasWithWatermark() {
      return relTypeCase_ == 33;
    }
    /**
     * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
     * @return The withWatermark.
     */
    @Override
    public org.apache.spark.connect.proto.WithWatermark getWithWatermark() {
      if (withWatermarkBuilder_ == null) {
        if (relTypeCase_ == 33) {
          return (org.apache.spark.connect.proto.WithWatermark) relType_;
        }
        return org.apache.spark.connect.proto.WithWatermark.getDefaultInstance();
      } else {
        if (relTypeCase_ == 33) {
          return withWatermarkBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.WithWatermark.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
     */
    public Builder setWithWatermark(org.apache.spark.connect.proto.WithWatermark value) {
      if (withWatermarkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        withWatermarkBuilder_.setMessage(value);
      }
      relTypeCase_ = 33;
      return this;
    }
    /**
     * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
     */
    public Builder setWithWatermark(
        org.apache.spark.connect.proto.WithWatermark.Builder builderForValue) {
      if (withWatermarkBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        withWatermarkBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 33;
      return this;
    }
    /**
     * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
     */
    public Builder mergeWithWatermark(org.apache.spark.connect.proto.WithWatermark value) {
      if (withWatermarkBuilder_ == null) {
        if (relTypeCase_ == 33 &&
            relType_ != org.apache.spark.connect.proto.WithWatermark.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.WithWatermark.newBuilder((org.apache.spark.connect.proto.WithWatermark) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 33) {
          withWatermarkBuilder_.mergeFrom(value);
        } else {
          withWatermarkBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 33;
      return this;
    }
    /**
     * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
     */
    public Builder clearWithWatermark() {
      if (withWatermarkBuilder_ == null) {
        if (relTypeCase_ == 33) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 33) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        withWatermarkBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
     */
    public org.apache.spark.connect.proto.WithWatermark.Builder getWithWatermarkBuilder() {
      return getWithWatermarkFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
     */
    @Override
    public org.apache.spark.connect.proto.WithWatermarkOrBuilder getWithWatermarkOrBuilder() {
      if ((relTypeCase_ == 33) && (withWatermarkBuilder_ != null)) {
        return withWatermarkBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 33) {
          return (org.apache.spark.connect.proto.WithWatermark) relType_;
        }
        return org.apache.spark.connect.proto.WithWatermark.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WithWatermark with_watermark = 33;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.WithWatermark, org.apache.spark.connect.proto.WithWatermark.Builder, org.apache.spark.connect.proto.WithWatermarkOrBuilder> 
        getWithWatermarkFieldBuilder() {
      if (withWatermarkBuilder_ == null) {
        if (!(relTypeCase_ == 33)) {
          relType_ = org.apache.spark.connect.proto.WithWatermark.getDefaultInstance();
        }
        withWatermarkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.WithWatermark, org.apache.spark.connect.proto.WithWatermark.Builder, org.apache.spark.connect.proto.WithWatermarkOrBuilder>(
                (org.apache.spark.connect.proto.WithWatermark) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 33;
      onChanged();
      return withWatermarkBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.ApplyInPandasWithState, org.apache.spark.connect.proto.ApplyInPandasWithState.Builder, org.apache.spark.connect.proto.ApplyInPandasWithStateOrBuilder> applyInPandasWithStateBuilder_;
    /**
     * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
     * @return Whether the applyInPandasWithState field is set.
     */
    @Override
    public boolean hasApplyInPandasWithState() {
      return relTypeCase_ == 34;
    }
    /**
     * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
     * @return The applyInPandasWithState.
     */
    @Override
    public org.apache.spark.connect.proto.ApplyInPandasWithState getApplyInPandasWithState() {
      if (applyInPandasWithStateBuilder_ == null) {
        if (relTypeCase_ == 34) {
          return (org.apache.spark.connect.proto.ApplyInPandasWithState) relType_;
        }
        return org.apache.spark.connect.proto.ApplyInPandasWithState.getDefaultInstance();
      } else {
        if (relTypeCase_ == 34) {
          return applyInPandasWithStateBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.ApplyInPandasWithState.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
     */
    public Builder setApplyInPandasWithState(org.apache.spark.connect.proto.ApplyInPandasWithState value) {
      if (applyInPandasWithStateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        applyInPandasWithStateBuilder_.setMessage(value);
      }
      relTypeCase_ = 34;
      return this;
    }
    /**
     * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
     */
    public Builder setApplyInPandasWithState(
        org.apache.spark.connect.proto.ApplyInPandasWithState.Builder builderForValue) {
      if (applyInPandasWithStateBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        applyInPandasWithStateBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 34;
      return this;
    }
    /**
     * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
     */
    public Builder mergeApplyInPandasWithState(org.apache.spark.connect.proto.ApplyInPandasWithState value) {
      if (applyInPandasWithStateBuilder_ == null) {
        if (relTypeCase_ == 34 &&
            relType_ != org.apache.spark.connect.proto.ApplyInPandasWithState.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.ApplyInPandasWithState.newBuilder((org.apache.spark.connect.proto.ApplyInPandasWithState) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 34) {
          applyInPandasWithStateBuilder_.mergeFrom(value);
        } else {
          applyInPandasWithStateBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 34;
      return this;
    }
    /**
     * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
     */
    public Builder clearApplyInPandasWithState() {
      if (applyInPandasWithStateBuilder_ == null) {
        if (relTypeCase_ == 34) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 34) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        applyInPandasWithStateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
     */
    public org.apache.spark.connect.proto.ApplyInPandasWithState.Builder getApplyInPandasWithStateBuilder() {
      return getApplyInPandasWithStateFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
     */
    @Override
    public org.apache.spark.connect.proto.ApplyInPandasWithStateOrBuilder getApplyInPandasWithStateOrBuilder() {
      if ((relTypeCase_ == 34) && (applyInPandasWithStateBuilder_ != null)) {
        return applyInPandasWithStateBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 34) {
          return (org.apache.spark.connect.proto.ApplyInPandasWithState) relType_;
        }
        return org.apache.spark.connect.proto.ApplyInPandasWithState.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ApplyInPandasWithState apply_in_pandas_with_state = 34;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.ApplyInPandasWithState, org.apache.spark.connect.proto.ApplyInPandasWithState.Builder, org.apache.spark.connect.proto.ApplyInPandasWithStateOrBuilder> 
        getApplyInPandasWithStateFieldBuilder() {
      if (applyInPandasWithStateBuilder_ == null) {
        if (!(relTypeCase_ == 34)) {
          relType_ = org.apache.spark.connect.proto.ApplyInPandasWithState.getDefaultInstance();
        }
        applyInPandasWithStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.ApplyInPandasWithState, org.apache.spark.connect.proto.ApplyInPandasWithState.Builder, org.apache.spark.connect.proto.ApplyInPandasWithStateOrBuilder>(
                (org.apache.spark.connect.proto.ApplyInPandasWithState) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 34;
      onChanged();
      return applyInPandasWithStateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.HtmlString, org.apache.spark.connect.proto.HtmlString.Builder, org.apache.spark.connect.proto.HtmlStringOrBuilder> htmlStringBuilder_;
    /**
     * <code>.spark.connect.HtmlString html_string = 35;</code>
     * @return Whether the htmlString field is set.
     */
    @Override
    public boolean hasHtmlString() {
      return relTypeCase_ == 35;
    }
    /**
     * <code>.spark.connect.HtmlString html_string = 35;</code>
     * @return The htmlString.
     */
    @Override
    public org.apache.spark.connect.proto.HtmlString getHtmlString() {
      if (htmlStringBuilder_ == null) {
        if (relTypeCase_ == 35) {
          return (org.apache.spark.connect.proto.HtmlString) relType_;
        }
        return org.apache.spark.connect.proto.HtmlString.getDefaultInstance();
      } else {
        if (relTypeCase_ == 35) {
          return htmlStringBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.HtmlString.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.HtmlString html_string = 35;</code>
     */
    public Builder setHtmlString(org.apache.spark.connect.proto.HtmlString value) {
      if (htmlStringBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        htmlStringBuilder_.setMessage(value);
      }
      relTypeCase_ = 35;
      return this;
    }
    /**
     * <code>.spark.connect.HtmlString html_string = 35;</code>
     */
    public Builder setHtmlString(
        org.apache.spark.connect.proto.HtmlString.Builder builderForValue) {
      if (htmlStringBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        htmlStringBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 35;
      return this;
    }
    /**
     * <code>.spark.connect.HtmlString html_string = 35;</code>
     */
    public Builder mergeHtmlString(org.apache.spark.connect.proto.HtmlString value) {
      if (htmlStringBuilder_ == null) {
        if (relTypeCase_ == 35 &&
            relType_ != org.apache.spark.connect.proto.HtmlString.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.HtmlString.newBuilder((org.apache.spark.connect.proto.HtmlString) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 35) {
          htmlStringBuilder_.mergeFrom(value);
        } else {
          htmlStringBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 35;
      return this;
    }
    /**
     * <code>.spark.connect.HtmlString html_string = 35;</code>
     */
    public Builder clearHtmlString() {
      if (htmlStringBuilder_ == null) {
        if (relTypeCase_ == 35) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 35) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        htmlStringBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.HtmlString html_string = 35;</code>
     */
    public org.apache.spark.connect.proto.HtmlString.Builder getHtmlStringBuilder() {
      return getHtmlStringFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.HtmlString html_string = 35;</code>
     */
    @Override
    public org.apache.spark.connect.proto.HtmlStringOrBuilder getHtmlStringOrBuilder() {
      if ((relTypeCase_ == 35) && (htmlStringBuilder_ != null)) {
        return htmlStringBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 35) {
          return (org.apache.spark.connect.proto.HtmlString) relType_;
        }
        return org.apache.spark.connect.proto.HtmlString.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.HtmlString html_string = 35;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.HtmlString, org.apache.spark.connect.proto.HtmlString.Builder, org.apache.spark.connect.proto.HtmlStringOrBuilder> 
        getHtmlStringFieldBuilder() {
      if (htmlStringBuilder_ == null) {
        if (!(relTypeCase_ == 35)) {
          relType_ = org.apache.spark.connect.proto.HtmlString.getDefaultInstance();
        }
        htmlStringBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.HtmlString, org.apache.spark.connect.proto.HtmlString.Builder, org.apache.spark.connect.proto.HtmlStringOrBuilder>(
                (org.apache.spark.connect.proto.HtmlString) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 35;
      onChanged();
      return htmlStringBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CachedLocalRelation, org.apache.spark.connect.proto.CachedLocalRelation.Builder, org.apache.spark.connect.proto.CachedLocalRelationOrBuilder> cachedLocalRelationBuilder_;
    /**
     * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
     * @return Whether the cachedLocalRelation field is set.
     */
    @Override
    public boolean hasCachedLocalRelation() {
      return relTypeCase_ == 36;
    }
    /**
     * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
     * @return The cachedLocalRelation.
     */
    @Override
    public org.apache.spark.connect.proto.CachedLocalRelation getCachedLocalRelation() {
      if (cachedLocalRelationBuilder_ == null) {
        if (relTypeCase_ == 36) {
          return (org.apache.spark.connect.proto.CachedLocalRelation) relType_;
        }
        return org.apache.spark.connect.proto.CachedLocalRelation.getDefaultInstance();
      } else {
        if (relTypeCase_ == 36) {
          return cachedLocalRelationBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.CachedLocalRelation.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
     */
    public Builder setCachedLocalRelation(org.apache.spark.connect.proto.CachedLocalRelation value) {
      if (cachedLocalRelationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        cachedLocalRelationBuilder_.setMessage(value);
      }
      relTypeCase_ = 36;
      return this;
    }
    /**
     * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
     */
    public Builder setCachedLocalRelation(
        org.apache.spark.connect.proto.CachedLocalRelation.Builder builderForValue) {
      if (cachedLocalRelationBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        cachedLocalRelationBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 36;
      return this;
    }
    /**
     * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
     */
    public Builder mergeCachedLocalRelation(org.apache.spark.connect.proto.CachedLocalRelation value) {
      if (cachedLocalRelationBuilder_ == null) {
        if (relTypeCase_ == 36 &&
            relType_ != org.apache.spark.connect.proto.CachedLocalRelation.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.CachedLocalRelation.newBuilder((org.apache.spark.connect.proto.CachedLocalRelation) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 36) {
          cachedLocalRelationBuilder_.mergeFrom(value);
        } else {
          cachedLocalRelationBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 36;
      return this;
    }
    /**
     * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
     */
    public Builder clearCachedLocalRelation() {
      if (cachedLocalRelationBuilder_ == null) {
        if (relTypeCase_ == 36) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 36) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        cachedLocalRelationBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
     */
    public org.apache.spark.connect.proto.CachedLocalRelation.Builder getCachedLocalRelationBuilder() {
      return getCachedLocalRelationFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
     */
    @Override
    public org.apache.spark.connect.proto.CachedLocalRelationOrBuilder getCachedLocalRelationOrBuilder() {
      if ((relTypeCase_ == 36) && (cachedLocalRelationBuilder_ != null)) {
        return cachedLocalRelationBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 36) {
          return (org.apache.spark.connect.proto.CachedLocalRelation) relType_;
        }
        return org.apache.spark.connect.proto.CachedLocalRelation.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CachedLocalRelation cached_local_relation = 36;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CachedLocalRelation, org.apache.spark.connect.proto.CachedLocalRelation.Builder, org.apache.spark.connect.proto.CachedLocalRelationOrBuilder> 
        getCachedLocalRelationFieldBuilder() {
      if (cachedLocalRelationBuilder_ == null) {
        if (!(relTypeCase_ == 36)) {
          relType_ = org.apache.spark.connect.proto.CachedLocalRelation.getDefaultInstance();
        }
        cachedLocalRelationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.CachedLocalRelation, org.apache.spark.connect.proto.CachedLocalRelation.Builder, org.apache.spark.connect.proto.CachedLocalRelationOrBuilder>(
                (org.apache.spark.connect.proto.CachedLocalRelation) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 36;
      onChanged();
      return cachedLocalRelationBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CachedRemoteRelation, org.apache.spark.connect.proto.CachedRemoteRelation.Builder, org.apache.spark.connect.proto.CachedRemoteRelationOrBuilder> cachedRemoteRelationBuilder_;
    /**
     * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
     * @return Whether the cachedRemoteRelation field is set.
     */
    @Override
    public boolean hasCachedRemoteRelation() {
      return relTypeCase_ == 37;
    }
    /**
     * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
     * @return The cachedRemoteRelation.
     */
    @Override
    public org.apache.spark.connect.proto.CachedRemoteRelation getCachedRemoteRelation() {
      if (cachedRemoteRelationBuilder_ == null) {
        if (relTypeCase_ == 37) {
          return (org.apache.spark.connect.proto.CachedRemoteRelation) relType_;
        }
        return org.apache.spark.connect.proto.CachedRemoteRelation.getDefaultInstance();
      } else {
        if (relTypeCase_ == 37) {
          return cachedRemoteRelationBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.CachedRemoteRelation.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
     */
    public Builder setCachedRemoteRelation(org.apache.spark.connect.proto.CachedRemoteRelation value) {
      if (cachedRemoteRelationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        cachedRemoteRelationBuilder_.setMessage(value);
      }
      relTypeCase_ = 37;
      return this;
    }
    /**
     * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
     */
    public Builder setCachedRemoteRelation(
        org.apache.spark.connect.proto.CachedRemoteRelation.Builder builderForValue) {
      if (cachedRemoteRelationBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        cachedRemoteRelationBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 37;
      return this;
    }
    /**
     * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
     */
    public Builder mergeCachedRemoteRelation(org.apache.spark.connect.proto.CachedRemoteRelation value) {
      if (cachedRemoteRelationBuilder_ == null) {
        if (relTypeCase_ == 37 &&
            relType_ != org.apache.spark.connect.proto.CachedRemoteRelation.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.CachedRemoteRelation.newBuilder((org.apache.spark.connect.proto.CachedRemoteRelation) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 37) {
          cachedRemoteRelationBuilder_.mergeFrom(value);
        } else {
          cachedRemoteRelationBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 37;
      return this;
    }
    /**
     * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
     */
    public Builder clearCachedRemoteRelation() {
      if (cachedRemoteRelationBuilder_ == null) {
        if (relTypeCase_ == 37) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 37) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        cachedRemoteRelationBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
     */
    public org.apache.spark.connect.proto.CachedRemoteRelation.Builder getCachedRemoteRelationBuilder() {
      return getCachedRemoteRelationFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
     */
    @Override
    public org.apache.spark.connect.proto.CachedRemoteRelationOrBuilder getCachedRemoteRelationOrBuilder() {
      if ((relTypeCase_ == 37) && (cachedRemoteRelationBuilder_ != null)) {
        return cachedRemoteRelationBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 37) {
          return (org.apache.spark.connect.proto.CachedRemoteRelation) relType_;
        }
        return org.apache.spark.connect.proto.CachedRemoteRelation.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CachedRemoteRelation cached_remote_relation = 37;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CachedRemoteRelation, org.apache.spark.connect.proto.CachedRemoteRelation.Builder, org.apache.spark.connect.proto.CachedRemoteRelationOrBuilder> 
        getCachedRemoteRelationFieldBuilder() {
      if (cachedRemoteRelationBuilder_ == null) {
        if (!(relTypeCase_ == 37)) {
          relType_ = org.apache.spark.connect.proto.CachedRemoteRelation.getDefaultInstance();
        }
        cachedRemoteRelationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.CachedRemoteRelation, org.apache.spark.connect.proto.CachedRemoteRelation.Builder, org.apache.spark.connect.proto.CachedRemoteRelationOrBuilder>(
                (org.apache.spark.connect.proto.CachedRemoteRelation) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 37;
      onChanged();
      return cachedRemoteRelationBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction, org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.Builder, org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunctionOrBuilder> commonInlineUserDefinedTableFunctionBuilder_;
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
     * @return Whether the commonInlineUserDefinedTableFunction field is set.
     */
    @Override
    public boolean hasCommonInlineUserDefinedTableFunction() {
      return relTypeCase_ == 38;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
     * @return The commonInlineUserDefinedTableFunction.
     */
    @Override
    public org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction getCommonInlineUserDefinedTableFunction() {
      if (commonInlineUserDefinedTableFunctionBuilder_ == null) {
        if (relTypeCase_ == 38) {
          return (org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction) relType_;
        }
        return org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
      } else {
        if (relTypeCase_ == 38) {
          return commonInlineUserDefinedTableFunctionBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
     */
    public Builder setCommonInlineUserDefinedTableFunction(org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction value) {
      if (commonInlineUserDefinedTableFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        commonInlineUserDefinedTableFunctionBuilder_.setMessage(value);
      }
      relTypeCase_ = 38;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
     */
    public Builder setCommonInlineUserDefinedTableFunction(
        org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.Builder builderForValue) {
      if (commonInlineUserDefinedTableFunctionBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        commonInlineUserDefinedTableFunctionBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 38;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
     */
    public Builder mergeCommonInlineUserDefinedTableFunction(org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction value) {
      if (commonInlineUserDefinedTableFunctionBuilder_ == null) {
        if (relTypeCase_ == 38 &&
            relType_ != org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.newBuilder((org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 38) {
          commonInlineUserDefinedTableFunctionBuilder_.mergeFrom(value);
        } else {
          commonInlineUserDefinedTableFunctionBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 38;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
     */
    public Builder clearCommonInlineUserDefinedTableFunction() {
      if (commonInlineUserDefinedTableFunctionBuilder_ == null) {
        if (relTypeCase_ == 38) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 38) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        commonInlineUserDefinedTableFunctionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
     */
    public org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.Builder getCommonInlineUserDefinedTableFunctionBuilder() {
      return getCommonInlineUserDefinedTableFunctionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
     */
    @Override
    public org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunctionOrBuilder getCommonInlineUserDefinedTableFunctionOrBuilder() {
      if ((relTypeCase_ == 38) && (commonInlineUserDefinedTableFunctionBuilder_ != null)) {
        return commonInlineUserDefinedTableFunctionBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 38) {
          return (org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction) relType_;
        }
        return org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction common_inline_user_defined_table_function = 38;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction, org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.Builder, org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunctionOrBuilder> 
        getCommonInlineUserDefinedTableFunctionFieldBuilder() {
      if (commonInlineUserDefinedTableFunctionBuilder_ == null) {
        if (!(relTypeCase_ == 38)) {
          relType_ = org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
        }
        commonInlineUserDefinedTableFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction, org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction.Builder, org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunctionOrBuilder>(
                (org.apache.spark.connect.proto.CommonInlineUserDefinedTableFunction) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 38;
      onChanged();
      return commonInlineUserDefinedTableFunctionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.AsOfJoin, org.apache.spark.connect.proto.AsOfJoin.Builder, org.apache.spark.connect.proto.AsOfJoinOrBuilder> asOfJoinBuilder_;
    /**
     * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
     * @return Whether the asOfJoin field is set.
     */
    @Override
    public boolean hasAsOfJoin() {
      return relTypeCase_ == 39;
    }
    /**
     * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
     * @return The asOfJoin.
     */
    @Override
    public org.apache.spark.connect.proto.AsOfJoin getAsOfJoin() {
      if (asOfJoinBuilder_ == null) {
        if (relTypeCase_ == 39) {
          return (org.apache.spark.connect.proto.AsOfJoin) relType_;
        }
        return org.apache.spark.connect.proto.AsOfJoin.getDefaultInstance();
      } else {
        if (relTypeCase_ == 39) {
          return asOfJoinBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.AsOfJoin.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
     */
    public Builder setAsOfJoin(org.apache.spark.connect.proto.AsOfJoin value) {
      if (asOfJoinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        asOfJoinBuilder_.setMessage(value);
      }
      relTypeCase_ = 39;
      return this;
    }
    /**
     * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
     */
    public Builder setAsOfJoin(
        org.apache.spark.connect.proto.AsOfJoin.Builder builderForValue) {
      if (asOfJoinBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        asOfJoinBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 39;
      return this;
    }
    /**
     * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
     */
    public Builder mergeAsOfJoin(org.apache.spark.connect.proto.AsOfJoin value) {
      if (asOfJoinBuilder_ == null) {
        if (relTypeCase_ == 39 &&
            relType_ != org.apache.spark.connect.proto.AsOfJoin.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.AsOfJoin.newBuilder((org.apache.spark.connect.proto.AsOfJoin) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 39) {
          asOfJoinBuilder_.mergeFrom(value);
        } else {
          asOfJoinBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 39;
      return this;
    }
    /**
     * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
     */
    public Builder clearAsOfJoin() {
      if (asOfJoinBuilder_ == null) {
        if (relTypeCase_ == 39) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 39) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        asOfJoinBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
     */
    public org.apache.spark.connect.proto.AsOfJoin.Builder getAsOfJoinBuilder() {
      return getAsOfJoinFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
     */
    @Override
    public org.apache.spark.connect.proto.AsOfJoinOrBuilder getAsOfJoinOrBuilder() {
      if ((relTypeCase_ == 39) && (asOfJoinBuilder_ != null)) {
        return asOfJoinBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 39) {
          return (org.apache.spark.connect.proto.AsOfJoin) relType_;
        }
        return org.apache.spark.connect.proto.AsOfJoin.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.AsOfJoin as_of_join = 39;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.AsOfJoin, org.apache.spark.connect.proto.AsOfJoin.Builder, org.apache.spark.connect.proto.AsOfJoinOrBuilder> 
        getAsOfJoinFieldBuilder() {
      if (asOfJoinBuilder_ == null) {
        if (!(relTypeCase_ == 39)) {
          relType_ = org.apache.spark.connect.proto.AsOfJoin.getDefaultInstance();
        }
        asOfJoinBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.AsOfJoin, org.apache.spark.connect.proto.AsOfJoin.Builder, org.apache.spark.connect.proto.AsOfJoinOrBuilder>(
                (org.apache.spark.connect.proto.AsOfJoin) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 39;
      onChanged();
      return asOfJoinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.NAFill, org.apache.spark.connect.proto.NAFill.Builder, org.apache.spark.connect.proto.NAFillOrBuilder> fillNaBuilder_;
    /**
     * <pre>
     * NA functions
     * </pre>
     *
     * <code>.spark.connect.NAFill fill_na = 90;</code>
     * @return Whether the fillNa field is set.
     */
    @Override
    public boolean hasFillNa() {
      return relTypeCase_ == 90;
    }
    /**
     * <pre>
     * NA functions
     * </pre>
     *
     * <code>.spark.connect.NAFill fill_na = 90;</code>
     * @return The fillNa.
     */
    @Override
    public org.apache.spark.connect.proto.NAFill getFillNa() {
      if (fillNaBuilder_ == null) {
        if (relTypeCase_ == 90) {
          return (org.apache.spark.connect.proto.NAFill) relType_;
        }
        return org.apache.spark.connect.proto.NAFill.getDefaultInstance();
      } else {
        if (relTypeCase_ == 90) {
          return fillNaBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.NAFill.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * NA functions
     * </pre>
     *
     * <code>.spark.connect.NAFill fill_na = 90;</code>
     */
    public Builder setFillNa(org.apache.spark.connect.proto.NAFill value) {
      if (fillNaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        fillNaBuilder_.setMessage(value);
      }
      relTypeCase_ = 90;
      return this;
    }
    /**
     * <pre>
     * NA functions
     * </pre>
     *
     * <code>.spark.connect.NAFill fill_na = 90;</code>
     */
    public Builder setFillNa(
        org.apache.spark.connect.proto.NAFill.Builder builderForValue) {
      if (fillNaBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        fillNaBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 90;
      return this;
    }
    /**
     * <pre>
     * NA functions
     * </pre>
     *
     * <code>.spark.connect.NAFill fill_na = 90;</code>
     */
    public Builder mergeFillNa(org.apache.spark.connect.proto.NAFill value) {
      if (fillNaBuilder_ == null) {
        if (relTypeCase_ == 90 &&
            relType_ != org.apache.spark.connect.proto.NAFill.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.NAFill.newBuilder((org.apache.spark.connect.proto.NAFill) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 90) {
          fillNaBuilder_.mergeFrom(value);
        } else {
          fillNaBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 90;
      return this;
    }
    /**
     * <pre>
     * NA functions
     * </pre>
     *
     * <code>.spark.connect.NAFill fill_na = 90;</code>
     */
    public Builder clearFillNa() {
      if (fillNaBuilder_ == null) {
        if (relTypeCase_ == 90) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 90) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        fillNaBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * NA functions
     * </pre>
     *
     * <code>.spark.connect.NAFill fill_na = 90;</code>
     */
    public org.apache.spark.connect.proto.NAFill.Builder getFillNaBuilder() {
      return getFillNaFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * NA functions
     * </pre>
     *
     * <code>.spark.connect.NAFill fill_na = 90;</code>
     */
    @Override
    public org.apache.spark.connect.proto.NAFillOrBuilder getFillNaOrBuilder() {
      if ((relTypeCase_ == 90) && (fillNaBuilder_ != null)) {
        return fillNaBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 90) {
          return (org.apache.spark.connect.proto.NAFill) relType_;
        }
        return org.apache.spark.connect.proto.NAFill.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * NA functions
     * </pre>
     *
     * <code>.spark.connect.NAFill fill_na = 90;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.NAFill, org.apache.spark.connect.proto.NAFill.Builder, org.apache.spark.connect.proto.NAFillOrBuilder> 
        getFillNaFieldBuilder() {
      if (fillNaBuilder_ == null) {
        if (!(relTypeCase_ == 90)) {
          relType_ = org.apache.spark.connect.proto.NAFill.getDefaultInstance();
        }
        fillNaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.NAFill, org.apache.spark.connect.proto.NAFill.Builder, org.apache.spark.connect.proto.NAFillOrBuilder>(
                (org.apache.spark.connect.proto.NAFill) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 90;
      onChanged();
      return fillNaBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.NADrop, org.apache.spark.connect.proto.NADrop.Builder, org.apache.spark.connect.proto.NADropOrBuilder> dropNaBuilder_;
    /**
     * <code>.spark.connect.NADrop drop_na = 91;</code>
     * @return Whether the dropNa field is set.
     */
    @Override
    public boolean hasDropNa() {
      return relTypeCase_ == 91;
    }
    /**
     * <code>.spark.connect.NADrop drop_na = 91;</code>
     * @return The dropNa.
     */
    @Override
    public org.apache.spark.connect.proto.NADrop getDropNa() {
      if (dropNaBuilder_ == null) {
        if (relTypeCase_ == 91) {
          return (org.apache.spark.connect.proto.NADrop) relType_;
        }
        return org.apache.spark.connect.proto.NADrop.getDefaultInstance();
      } else {
        if (relTypeCase_ == 91) {
          return dropNaBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.NADrop.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.NADrop drop_na = 91;</code>
     */
    public Builder setDropNa(org.apache.spark.connect.proto.NADrop value) {
      if (dropNaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        dropNaBuilder_.setMessage(value);
      }
      relTypeCase_ = 91;
      return this;
    }
    /**
     * <code>.spark.connect.NADrop drop_na = 91;</code>
     */
    public Builder setDropNa(
        org.apache.spark.connect.proto.NADrop.Builder builderForValue) {
      if (dropNaBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        dropNaBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 91;
      return this;
    }
    /**
     * <code>.spark.connect.NADrop drop_na = 91;</code>
     */
    public Builder mergeDropNa(org.apache.spark.connect.proto.NADrop value) {
      if (dropNaBuilder_ == null) {
        if (relTypeCase_ == 91 &&
            relType_ != org.apache.spark.connect.proto.NADrop.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.NADrop.newBuilder((org.apache.spark.connect.proto.NADrop) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 91) {
          dropNaBuilder_.mergeFrom(value);
        } else {
          dropNaBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 91;
      return this;
    }
    /**
     * <code>.spark.connect.NADrop drop_na = 91;</code>
     */
    public Builder clearDropNa() {
      if (dropNaBuilder_ == null) {
        if (relTypeCase_ == 91) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 91) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        dropNaBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.NADrop drop_na = 91;</code>
     */
    public org.apache.spark.connect.proto.NADrop.Builder getDropNaBuilder() {
      return getDropNaFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.NADrop drop_na = 91;</code>
     */
    @Override
    public org.apache.spark.connect.proto.NADropOrBuilder getDropNaOrBuilder() {
      if ((relTypeCase_ == 91) && (dropNaBuilder_ != null)) {
        return dropNaBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 91) {
          return (org.apache.spark.connect.proto.NADrop) relType_;
        }
        return org.apache.spark.connect.proto.NADrop.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.NADrop drop_na = 91;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.NADrop, org.apache.spark.connect.proto.NADrop.Builder, org.apache.spark.connect.proto.NADropOrBuilder> 
        getDropNaFieldBuilder() {
      if (dropNaBuilder_ == null) {
        if (!(relTypeCase_ == 91)) {
          relType_ = org.apache.spark.connect.proto.NADrop.getDefaultInstance();
        }
        dropNaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.NADrop, org.apache.spark.connect.proto.NADrop.Builder, org.apache.spark.connect.proto.NADropOrBuilder>(
                (org.apache.spark.connect.proto.NADrop) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 91;
      onChanged();
      return dropNaBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.NAReplace, org.apache.spark.connect.proto.NAReplace.Builder, org.apache.spark.connect.proto.NAReplaceOrBuilder> replaceBuilder_;
    /**
     * <code>.spark.connect.NAReplace replace = 92;</code>
     * @return Whether the replace field is set.
     */
    @Override
    public boolean hasReplace() {
      return relTypeCase_ == 92;
    }
    /**
     * <code>.spark.connect.NAReplace replace = 92;</code>
     * @return The replace.
     */
    @Override
    public org.apache.spark.connect.proto.NAReplace getReplace() {
      if (replaceBuilder_ == null) {
        if (relTypeCase_ == 92) {
          return (org.apache.spark.connect.proto.NAReplace) relType_;
        }
        return org.apache.spark.connect.proto.NAReplace.getDefaultInstance();
      } else {
        if (relTypeCase_ == 92) {
          return replaceBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.NAReplace.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.NAReplace replace = 92;</code>
     */
    public Builder setReplace(org.apache.spark.connect.proto.NAReplace value) {
      if (replaceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        replaceBuilder_.setMessage(value);
      }
      relTypeCase_ = 92;
      return this;
    }
    /**
     * <code>.spark.connect.NAReplace replace = 92;</code>
     */
    public Builder setReplace(
        org.apache.spark.connect.proto.NAReplace.Builder builderForValue) {
      if (replaceBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        replaceBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 92;
      return this;
    }
    /**
     * <code>.spark.connect.NAReplace replace = 92;</code>
     */
    public Builder mergeReplace(org.apache.spark.connect.proto.NAReplace value) {
      if (replaceBuilder_ == null) {
        if (relTypeCase_ == 92 &&
            relType_ != org.apache.spark.connect.proto.NAReplace.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.NAReplace.newBuilder((org.apache.spark.connect.proto.NAReplace) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 92) {
          replaceBuilder_.mergeFrom(value);
        } else {
          replaceBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 92;
      return this;
    }
    /**
     * <code>.spark.connect.NAReplace replace = 92;</code>
     */
    public Builder clearReplace() {
      if (replaceBuilder_ == null) {
        if (relTypeCase_ == 92) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 92) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        replaceBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.NAReplace replace = 92;</code>
     */
    public org.apache.spark.connect.proto.NAReplace.Builder getReplaceBuilder() {
      return getReplaceFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.NAReplace replace = 92;</code>
     */
    @Override
    public org.apache.spark.connect.proto.NAReplaceOrBuilder getReplaceOrBuilder() {
      if ((relTypeCase_ == 92) && (replaceBuilder_ != null)) {
        return replaceBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 92) {
          return (org.apache.spark.connect.proto.NAReplace) relType_;
        }
        return org.apache.spark.connect.proto.NAReplace.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.NAReplace replace = 92;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.NAReplace, org.apache.spark.connect.proto.NAReplace.Builder, org.apache.spark.connect.proto.NAReplaceOrBuilder> 
        getReplaceFieldBuilder() {
      if (replaceBuilder_ == null) {
        if (!(relTypeCase_ == 92)) {
          relType_ = org.apache.spark.connect.proto.NAReplace.getDefaultInstance();
        }
        replaceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.NAReplace, org.apache.spark.connect.proto.NAReplace.Builder, org.apache.spark.connect.proto.NAReplaceOrBuilder>(
                (org.apache.spark.connect.proto.NAReplace) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 92;
      onChanged();
      return replaceBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatSummary, org.apache.spark.connect.proto.StatSummary.Builder, org.apache.spark.connect.proto.StatSummaryOrBuilder> summaryBuilder_;
    /**
     * <pre>
     * stat functions
     * </pre>
     *
     * <code>.spark.connect.StatSummary summary = 100;</code>
     * @return Whether the summary field is set.
     */
    @Override
    public boolean hasSummary() {
      return relTypeCase_ == 100;
    }
    /**
     * <pre>
     * stat functions
     * </pre>
     *
     * <code>.spark.connect.StatSummary summary = 100;</code>
     * @return The summary.
     */
    @Override
    public org.apache.spark.connect.proto.StatSummary getSummary() {
      if (summaryBuilder_ == null) {
        if (relTypeCase_ == 100) {
          return (org.apache.spark.connect.proto.StatSummary) relType_;
        }
        return org.apache.spark.connect.proto.StatSummary.getDefaultInstance();
      } else {
        if (relTypeCase_ == 100) {
          return summaryBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.StatSummary.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * stat functions
     * </pre>
     *
     * <code>.spark.connect.StatSummary summary = 100;</code>
     */
    public Builder setSummary(org.apache.spark.connect.proto.StatSummary value) {
      if (summaryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        summaryBuilder_.setMessage(value);
      }
      relTypeCase_ = 100;
      return this;
    }
    /**
     * <pre>
     * stat functions
     * </pre>
     *
     * <code>.spark.connect.StatSummary summary = 100;</code>
     */
    public Builder setSummary(
        org.apache.spark.connect.proto.StatSummary.Builder builderForValue) {
      if (summaryBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        summaryBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 100;
      return this;
    }
    /**
     * <pre>
     * stat functions
     * </pre>
     *
     * <code>.spark.connect.StatSummary summary = 100;</code>
     */
    public Builder mergeSummary(org.apache.spark.connect.proto.StatSummary value) {
      if (summaryBuilder_ == null) {
        if (relTypeCase_ == 100 &&
            relType_ != org.apache.spark.connect.proto.StatSummary.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.StatSummary.newBuilder((org.apache.spark.connect.proto.StatSummary) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 100) {
          summaryBuilder_.mergeFrom(value);
        } else {
          summaryBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 100;
      return this;
    }
    /**
     * <pre>
     * stat functions
     * </pre>
     *
     * <code>.spark.connect.StatSummary summary = 100;</code>
     */
    public Builder clearSummary() {
      if (summaryBuilder_ == null) {
        if (relTypeCase_ == 100) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 100) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        summaryBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * stat functions
     * </pre>
     *
     * <code>.spark.connect.StatSummary summary = 100;</code>
     */
    public org.apache.spark.connect.proto.StatSummary.Builder getSummaryBuilder() {
      return getSummaryFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * stat functions
     * </pre>
     *
     * <code>.spark.connect.StatSummary summary = 100;</code>
     */
    @Override
    public org.apache.spark.connect.proto.StatSummaryOrBuilder getSummaryOrBuilder() {
      if ((relTypeCase_ == 100) && (summaryBuilder_ != null)) {
        return summaryBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 100) {
          return (org.apache.spark.connect.proto.StatSummary) relType_;
        }
        return org.apache.spark.connect.proto.StatSummary.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * stat functions
     * </pre>
     *
     * <code>.spark.connect.StatSummary summary = 100;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatSummary, org.apache.spark.connect.proto.StatSummary.Builder, org.apache.spark.connect.proto.StatSummaryOrBuilder> 
        getSummaryFieldBuilder() {
      if (summaryBuilder_ == null) {
        if (!(relTypeCase_ == 100)) {
          relType_ = org.apache.spark.connect.proto.StatSummary.getDefaultInstance();
        }
        summaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.StatSummary, org.apache.spark.connect.proto.StatSummary.Builder, org.apache.spark.connect.proto.StatSummaryOrBuilder>(
                (org.apache.spark.connect.proto.StatSummary) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 100;
      onChanged();
      return summaryBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatCrosstab, org.apache.spark.connect.proto.StatCrosstab.Builder, org.apache.spark.connect.proto.StatCrosstabOrBuilder> crosstabBuilder_;
    /**
     * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
     * @return Whether the crosstab field is set.
     */
    @Override
    public boolean hasCrosstab() {
      return relTypeCase_ == 101;
    }
    /**
     * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
     * @return The crosstab.
     */
    @Override
    public org.apache.spark.connect.proto.StatCrosstab getCrosstab() {
      if (crosstabBuilder_ == null) {
        if (relTypeCase_ == 101) {
          return (org.apache.spark.connect.proto.StatCrosstab) relType_;
        }
        return org.apache.spark.connect.proto.StatCrosstab.getDefaultInstance();
      } else {
        if (relTypeCase_ == 101) {
          return crosstabBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.StatCrosstab.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
     */
    public Builder setCrosstab(org.apache.spark.connect.proto.StatCrosstab value) {
      if (crosstabBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        crosstabBuilder_.setMessage(value);
      }
      relTypeCase_ = 101;
      return this;
    }
    /**
     * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
     */
    public Builder setCrosstab(
        org.apache.spark.connect.proto.StatCrosstab.Builder builderForValue) {
      if (crosstabBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        crosstabBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 101;
      return this;
    }
    /**
     * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
     */
    public Builder mergeCrosstab(org.apache.spark.connect.proto.StatCrosstab value) {
      if (crosstabBuilder_ == null) {
        if (relTypeCase_ == 101 &&
            relType_ != org.apache.spark.connect.proto.StatCrosstab.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.StatCrosstab.newBuilder((org.apache.spark.connect.proto.StatCrosstab) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 101) {
          crosstabBuilder_.mergeFrom(value);
        } else {
          crosstabBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 101;
      return this;
    }
    /**
     * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
     */
    public Builder clearCrosstab() {
      if (crosstabBuilder_ == null) {
        if (relTypeCase_ == 101) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 101) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        crosstabBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
     */
    public org.apache.spark.connect.proto.StatCrosstab.Builder getCrosstabBuilder() {
      return getCrosstabFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
     */
    @Override
    public org.apache.spark.connect.proto.StatCrosstabOrBuilder getCrosstabOrBuilder() {
      if ((relTypeCase_ == 101) && (crosstabBuilder_ != null)) {
        return crosstabBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 101) {
          return (org.apache.spark.connect.proto.StatCrosstab) relType_;
        }
        return org.apache.spark.connect.proto.StatCrosstab.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatCrosstab crosstab = 101;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatCrosstab, org.apache.spark.connect.proto.StatCrosstab.Builder, org.apache.spark.connect.proto.StatCrosstabOrBuilder> 
        getCrosstabFieldBuilder() {
      if (crosstabBuilder_ == null) {
        if (!(relTypeCase_ == 101)) {
          relType_ = org.apache.spark.connect.proto.StatCrosstab.getDefaultInstance();
        }
        crosstabBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.StatCrosstab, org.apache.spark.connect.proto.StatCrosstab.Builder, org.apache.spark.connect.proto.StatCrosstabOrBuilder>(
                (org.apache.spark.connect.proto.StatCrosstab) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 101;
      onChanged();
      return crosstabBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatDescribe, org.apache.spark.connect.proto.StatDescribe.Builder, org.apache.spark.connect.proto.StatDescribeOrBuilder> describeBuilder_;
    /**
     * <code>.spark.connect.StatDescribe describe = 102;</code>
     * @return Whether the describe field is set.
     */
    @Override
    public boolean hasDescribe() {
      return relTypeCase_ == 102;
    }
    /**
     * <code>.spark.connect.StatDescribe describe = 102;</code>
     * @return The describe.
     */
    @Override
    public org.apache.spark.connect.proto.StatDescribe getDescribe() {
      if (describeBuilder_ == null) {
        if (relTypeCase_ == 102) {
          return (org.apache.spark.connect.proto.StatDescribe) relType_;
        }
        return org.apache.spark.connect.proto.StatDescribe.getDefaultInstance();
      } else {
        if (relTypeCase_ == 102) {
          return describeBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.StatDescribe.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatDescribe describe = 102;</code>
     */
    public Builder setDescribe(org.apache.spark.connect.proto.StatDescribe value) {
      if (describeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        describeBuilder_.setMessage(value);
      }
      relTypeCase_ = 102;
      return this;
    }
    /**
     * <code>.spark.connect.StatDescribe describe = 102;</code>
     */
    public Builder setDescribe(
        org.apache.spark.connect.proto.StatDescribe.Builder builderForValue) {
      if (describeBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        describeBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 102;
      return this;
    }
    /**
     * <code>.spark.connect.StatDescribe describe = 102;</code>
     */
    public Builder mergeDescribe(org.apache.spark.connect.proto.StatDescribe value) {
      if (describeBuilder_ == null) {
        if (relTypeCase_ == 102 &&
            relType_ != org.apache.spark.connect.proto.StatDescribe.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.StatDescribe.newBuilder((org.apache.spark.connect.proto.StatDescribe) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 102) {
          describeBuilder_.mergeFrom(value);
        } else {
          describeBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 102;
      return this;
    }
    /**
     * <code>.spark.connect.StatDescribe describe = 102;</code>
     */
    public Builder clearDescribe() {
      if (describeBuilder_ == null) {
        if (relTypeCase_ == 102) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 102) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        describeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.StatDescribe describe = 102;</code>
     */
    public org.apache.spark.connect.proto.StatDescribe.Builder getDescribeBuilder() {
      return getDescribeFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StatDescribe describe = 102;</code>
     */
    @Override
    public org.apache.spark.connect.proto.StatDescribeOrBuilder getDescribeOrBuilder() {
      if ((relTypeCase_ == 102) && (describeBuilder_ != null)) {
        return describeBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 102) {
          return (org.apache.spark.connect.proto.StatDescribe) relType_;
        }
        return org.apache.spark.connect.proto.StatDescribe.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatDescribe describe = 102;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatDescribe, org.apache.spark.connect.proto.StatDescribe.Builder, org.apache.spark.connect.proto.StatDescribeOrBuilder> 
        getDescribeFieldBuilder() {
      if (describeBuilder_ == null) {
        if (!(relTypeCase_ == 102)) {
          relType_ = org.apache.spark.connect.proto.StatDescribe.getDefaultInstance();
        }
        describeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.StatDescribe, org.apache.spark.connect.proto.StatDescribe.Builder, org.apache.spark.connect.proto.StatDescribeOrBuilder>(
                (org.apache.spark.connect.proto.StatDescribe) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 102;
      onChanged();
      return describeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatCov, org.apache.spark.connect.proto.StatCov.Builder, org.apache.spark.connect.proto.StatCovOrBuilder> covBuilder_;
    /**
     * <code>.spark.connect.StatCov cov = 103;</code>
     * @return Whether the cov field is set.
     */
    @Override
    public boolean hasCov() {
      return relTypeCase_ == 103;
    }
    /**
     * <code>.spark.connect.StatCov cov = 103;</code>
     * @return The cov.
     */
    @Override
    public org.apache.spark.connect.proto.StatCov getCov() {
      if (covBuilder_ == null) {
        if (relTypeCase_ == 103) {
          return (org.apache.spark.connect.proto.StatCov) relType_;
        }
        return org.apache.spark.connect.proto.StatCov.getDefaultInstance();
      } else {
        if (relTypeCase_ == 103) {
          return covBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.StatCov.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatCov cov = 103;</code>
     */
    public Builder setCov(org.apache.spark.connect.proto.StatCov value) {
      if (covBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        covBuilder_.setMessage(value);
      }
      relTypeCase_ = 103;
      return this;
    }
    /**
     * <code>.spark.connect.StatCov cov = 103;</code>
     */
    public Builder setCov(
        org.apache.spark.connect.proto.StatCov.Builder builderForValue) {
      if (covBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        covBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 103;
      return this;
    }
    /**
     * <code>.spark.connect.StatCov cov = 103;</code>
     */
    public Builder mergeCov(org.apache.spark.connect.proto.StatCov value) {
      if (covBuilder_ == null) {
        if (relTypeCase_ == 103 &&
            relType_ != org.apache.spark.connect.proto.StatCov.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.StatCov.newBuilder((org.apache.spark.connect.proto.StatCov) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 103) {
          covBuilder_.mergeFrom(value);
        } else {
          covBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 103;
      return this;
    }
    /**
     * <code>.spark.connect.StatCov cov = 103;</code>
     */
    public Builder clearCov() {
      if (covBuilder_ == null) {
        if (relTypeCase_ == 103) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 103) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        covBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.StatCov cov = 103;</code>
     */
    public org.apache.spark.connect.proto.StatCov.Builder getCovBuilder() {
      return getCovFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StatCov cov = 103;</code>
     */
    @Override
    public org.apache.spark.connect.proto.StatCovOrBuilder getCovOrBuilder() {
      if ((relTypeCase_ == 103) && (covBuilder_ != null)) {
        return covBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 103) {
          return (org.apache.spark.connect.proto.StatCov) relType_;
        }
        return org.apache.spark.connect.proto.StatCov.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatCov cov = 103;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatCov, org.apache.spark.connect.proto.StatCov.Builder, org.apache.spark.connect.proto.StatCovOrBuilder> 
        getCovFieldBuilder() {
      if (covBuilder_ == null) {
        if (!(relTypeCase_ == 103)) {
          relType_ = org.apache.spark.connect.proto.StatCov.getDefaultInstance();
        }
        covBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.StatCov, org.apache.spark.connect.proto.StatCov.Builder, org.apache.spark.connect.proto.StatCovOrBuilder>(
                (org.apache.spark.connect.proto.StatCov) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 103;
      onChanged();
      return covBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatCorr, org.apache.spark.connect.proto.StatCorr.Builder, org.apache.spark.connect.proto.StatCorrOrBuilder> corrBuilder_;
    /**
     * <code>.spark.connect.StatCorr corr = 104;</code>
     * @return Whether the corr field is set.
     */
    @Override
    public boolean hasCorr() {
      return relTypeCase_ == 104;
    }
    /**
     * <code>.spark.connect.StatCorr corr = 104;</code>
     * @return The corr.
     */
    @Override
    public org.apache.spark.connect.proto.StatCorr getCorr() {
      if (corrBuilder_ == null) {
        if (relTypeCase_ == 104) {
          return (org.apache.spark.connect.proto.StatCorr) relType_;
        }
        return org.apache.spark.connect.proto.StatCorr.getDefaultInstance();
      } else {
        if (relTypeCase_ == 104) {
          return corrBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.StatCorr.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatCorr corr = 104;</code>
     */
    public Builder setCorr(org.apache.spark.connect.proto.StatCorr value) {
      if (corrBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        corrBuilder_.setMessage(value);
      }
      relTypeCase_ = 104;
      return this;
    }
    /**
     * <code>.spark.connect.StatCorr corr = 104;</code>
     */
    public Builder setCorr(
        org.apache.spark.connect.proto.StatCorr.Builder builderForValue) {
      if (corrBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        corrBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 104;
      return this;
    }
    /**
     * <code>.spark.connect.StatCorr corr = 104;</code>
     */
    public Builder mergeCorr(org.apache.spark.connect.proto.StatCorr value) {
      if (corrBuilder_ == null) {
        if (relTypeCase_ == 104 &&
            relType_ != org.apache.spark.connect.proto.StatCorr.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.StatCorr.newBuilder((org.apache.spark.connect.proto.StatCorr) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 104) {
          corrBuilder_.mergeFrom(value);
        } else {
          corrBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 104;
      return this;
    }
    /**
     * <code>.spark.connect.StatCorr corr = 104;</code>
     */
    public Builder clearCorr() {
      if (corrBuilder_ == null) {
        if (relTypeCase_ == 104) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 104) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        corrBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.StatCorr corr = 104;</code>
     */
    public org.apache.spark.connect.proto.StatCorr.Builder getCorrBuilder() {
      return getCorrFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StatCorr corr = 104;</code>
     */
    @Override
    public org.apache.spark.connect.proto.StatCorrOrBuilder getCorrOrBuilder() {
      if ((relTypeCase_ == 104) && (corrBuilder_ != null)) {
        return corrBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 104) {
          return (org.apache.spark.connect.proto.StatCorr) relType_;
        }
        return org.apache.spark.connect.proto.StatCorr.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatCorr corr = 104;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatCorr, org.apache.spark.connect.proto.StatCorr.Builder, org.apache.spark.connect.proto.StatCorrOrBuilder> 
        getCorrFieldBuilder() {
      if (corrBuilder_ == null) {
        if (!(relTypeCase_ == 104)) {
          relType_ = org.apache.spark.connect.proto.StatCorr.getDefaultInstance();
        }
        corrBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.StatCorr, org.apache.spark.connect.proto.StatCorr.Builder, org.apache.spark.connect.proto.StatCorrOrBuilder>(
                (org.apache.spark.connect.proto.StatCorr) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 104;
      onChanged();
      return corrBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatApproxQuantile, org.apache.spark.connect.proto.StatApproxQuantile.Builder, org.apache.spark.connect.proto.StatApproxQuantileOrBuilder> approxQuantileBuilder_;
    /**
     * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
     * @return Whether the approxQuantile field is set.
     */
    @Override
    public boolean hasApproxQuantile() {
      return relTypeCase_ == 105;
    }
    /**
     * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
     * @return The approxQuantile.
     */
    @Override
    public org.apache.spark.connect.proto.StatApproxQuantile getApproxQuantile() {
      if (approxQuantileBuilder_ == null) {
        if (relTypeCase_ == 105) {
          return (org.apache.spark.connect.proto.StatApproxQuantile) relType_;
        }
        return org.apache.spark.connect.proto.StatApproxQuantile.getDefaultInstance();
      } else {
        if (relTypeCase_ == 105) {
          return approxQuantileBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.StatApproxQuantile.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
     */
    public Builder setApproxQuantile(org.apache.spark.connect.proto.StatApproxQuantile value) {
      if (approxQuantileBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        approxQuantileBuilder_.setMessage(value);
      }
      relTypeCase_ = 105;
      return this;
    }
    /**
     * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
     */
    public Builder setApproxQuantile(
        org.apache.spark.connect.proto.StatApproxQuantile.Builder builderForValue) {
      if (approxQuantileBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        approxQuantileBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 105;
      return this;
    }
    /**
     * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
     */
    public Builder mergeApproxQuantile(org.apache.spark.connect.proto.StatApproxQuantile value) {
      if (approxQuantileBuilder_ == null) {
        if (relTypeCase_ == 105 &&
            relType_ != org.apache.spark.connect.proto.StatApproxQuantile.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.StatApproxQuantile.newBuilder((org.apache.spark.connect.proto.StatApproxQuantile) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 105) {
          approxQuantileBuilder_.mergeFrom(value);
        } else {
          approxQuantileBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 105;
      return this;
    }
    /**
     * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
     */
    public Builder clearApproxQuantile() {
      if (approxQuantileBuilder_ == null) {
        if (relTypeCase_ == 105) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 105) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        approxQuantileBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
     */
    public org.apache.spark.connect.proto.StatApproxQuantile.Builder getApproxQuantileBuilder() {
      return getApproxQuantileFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
     */
    @Override
    public org.apache.spark.connect.proto.StatApproxQuantileOrBuilder getApproxQuantileOrBuilder() {
      if ((relTypeCase_ == 105) && (approxQuantileBuilder_ != null)) {
        return approxQuantileBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 105) {
          return (org.apache.spark.connect.proto.StatApproxQuantile) relType_;
        }
        return org.apache.spark.connect.proto.StatApproxQuantile.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatApproxQuantile approx_quantile = 105;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatApproxQuantile, org.apache.spark.connect.proto.StatApproxQuantile.Builder, org.apache.spark.connect.proto.StatApproxQuantileOrBuilder> 
        getApproxQuantileFieldBuilder() {
      if (approxQuantileBuilder_ == null) {
        if (!(relTypeCase_ == 105)) {
          relType_ = org.apache.spark.connect.proto.StatApproxQuantile.getDefaultInstance();
        }
        approxQuantileBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.StatApproxQuantile, org.apache.spark.connect.proto.StatApproxQuantile.Builder, org.apache.spark.connect.proto.StatApproxQuantileOrBuilder>(
                (org.apache.spark.connect.proto.StatApproxQuantile) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 105;
      onChanged();
      return approxQuantileBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatFreqItems, org.apache.spark.connect.proto.StatFreqItems.Builder, org.apache.spark.connect.proto.StatFreqItemsOrBuilder> freqItemsBuilder_;
    /**
     * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
     * @return Whether the freqItems field is set.
     */
    @Override
    public boolean hasFreqItems() {
      return relTypeCase_ == 106;
    }
    /**
     * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
     * @return The freqItems.
     */
    @Override
    public org.apache.spark.connect.proto.StatFreqItems getFreqItems() {
      if (freqItemsBuilder_ == null) {
        if (relTypeCase_ == 106) {
          return (org.apache.spark.connect.proto.StatFreqItems) relType_;
        }
        return org.apache.spark.connect.proto.StatFreqItems.getDefaultInstance();
      } else {
        if (relTypeCase_ == 106) {
          return freqItemsBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.StatFreqItems.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
     */
    public Builder setFreqItems(org.apache.spark.connect.proto.StatFreqItems value) {
      if (freqItemsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        freqItemsBuilder_.setMessage(value);
      }
      relTypeCase_ = 106;
      return this;
    }
    /**
     * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
     */
    public Builder setFreqItems(
        org.apache.spark.connect.proto.StatFreqItems.Builder builderForValue) {
      if (freqItemsBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        freqItemsBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 106;
      return this;
    }
    /**
     * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
     */
    public Builder mergeFreqItems(org.apache.spark.connect.proto.StatFreqItems value) {
      if (freqItemsBuilder_ == null) {
        if (relTypeCase_ == 106 &&
            relType_ != org.apache.spark.connect.proto.StatFreqItems.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.StatFreqItems.newBuilder((org.apache.spark.connect.proto.StatFreqItems) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 106) {
          freqItemsBuilder_.mergeFrom(value);
        } else {
          freqItemsBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 106;
      return this;
    }
    /**
     * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
     */
    public Builder clearFreqItems() {
      if (freqItemsBuilder_ == null) {
        if (relTypeCase_ == 106) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 106) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        freqItemsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
     */
    public org.apache.spark.connect.proto.StatFreqItems.Builder getFreqItemsBuilder() {
      return getFreqItemsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
     */
    @Override
    public org.apache.spark.connect.proto.StatFreqItemsOrBuilder getFreqItemsOrBuilder() {
      if ((relTypeCase_ == 106) && (freqItemsBuilder_ != null)) {
        return freqItemsBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 106) {
          return (org.apache.spark.connect.proto.StatFreqItems) relType_;
        }
        return org.apache.spark.connect.proto.StatFreqItems.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatFreqItems freq_items = 106;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatFreqItems, org.apache.spark.connect.proto.StatFreqItems.Builder, org.apache.spark.connect.proto.StatFreqItemsOrBuilder> 
        getFreqItemsFieldBuilder() {
      if (freqItemsBuilder_ == null) {
        if (!(relTypeCase_ == 106)) {
          relType_ = org.apache.spark.connect.proto.StatFreqItems.getDefaultInstance();
        }
        freqItemsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.StatFreqItems, org.apache.spark.connect.proto.StatFreqItems.Builder, org.apache.spark.connect.proto.StatFreqItemsOrBuilder>(
                (org.apache.spark.connect.proto.StatFreqItems) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 106;
      onChanged();
      return freqItemsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatSampleBy, org.apache.spark.connect.proto.StatSampleBy.Builder, org.apache.spark.connect.proto.StatSampleByOrBuilder> sampleByBuilder_;
    /**
     * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
     * @return Whether the sampleBy field is set.
     */
    @Override
    public boolean hasSampleBy() {
      return relTypeCase_ == 107;
    }
    /**
     * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
     * @return The sampleBy.
     */
    @Override
    public org.apache.spark.connect.proto.StatSampleBy getSampleBy() {
      if (sampleByBuilder_ == null) {
        if (relTypeCase_ == 107) {
          return (org.apache.spark.connect.proto.StatSampleBy) relType_;
        }
        return org.apache.spark.connect.proto.StatSampleBy.getDefaultInstance();
      } else {
        if (relTypeCase_ == 107) {
          return sampleByBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.StatSampleBy.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
     */
    public Builder setSampleBy(org.apache.spark.connect.proto.StatSampleBy value) {
      if (sampleByBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        sampleByBuilder_.setMessage(value);
      }
      relTypeCase_ = 107;
      return this;
    }
    /**
     * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
     */
    public Builder setSampleBy(
        org.apache.spark.connect.proto.StatSampleBy.Builder builderForValue) {
      if (sampleByBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        sampleByBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 107;
      return this;
    }
    /**
     * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
     */
    public Builder mergeSampleBy(org.apache.spark.connect.proto.StatSampleBy value) {
      if (sampleByBuilder_ == null) {
        if (relTypeCase_ == 107 &&
            relType_ != org.apache.spark.connect.proto.StatSampleBy.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.StatSampleBy.newBuilder((org.apache.spark.connect.proto.StatSampleBy) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 107) {
          sampleByBuilder_.mergeFrom(value);
        } else {
          sampleByBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 107;
      return this;
    }
    /**
     * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
     */
    public Builder clearSampleBy() {
      if (sampleByBuilder_ == null) {
        if (relTypeCase_ == 107) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 107) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        sampleByBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
     */
    public org.apache.spark.connect.proto.StatSampleBy.Builder getSampleByBuilder() {
      return getSampleByFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
     */
    @Override
    public org.apache.spark.connect.proto.StatSampleByOrBuilder getSampleByOrBuilder() {
      if ((relTypeCase_ == 107) && (sampleByBuilder_ != null)) {
        return sampleByBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 107) {
          return (org.apache.spark.connect.proto.StatSampleBy) relType_;
        }
        return org.apache.spark.connect.proto.StatSampleBy.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StatSampleBy sample_by = 107;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StatSampleBy, org.apache.spark.connect.proto.StatSampleBy.Builder, org.apache.spark.connect.proto.StatSampleByOrBuilder> 
        getSampleByFieldBuilder() {
      if (sampleByBuilder_ == null) {
        if (!(relTypeCase_ == 107)) {
          relType_ = org.apache.spark.connect.proto.StatSampleBy.getDefaultInstance();
        }
        sampleByBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.StatSampleBy, org.apache.spark.connect.proto.StatSampleBy.Builder, org.apache.spark.connect.proto.StatSampleByOrBuilder>(
                (org.apache.spark.connect.proto.StatSampleBy) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 107;
      onChanged();
      return sampleByBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Catalog, org.apache.spark.connect.proto.Catalog.Builder, org.apache.spark.connect.proto.CatalogOrBuilder> catalogBuilder_;
    /**
     * <pre>
     * Catalog API (experimental / unstable)
     * </pre>
     *
     * <code>.spark.connect.Catalog catalog = 200;</code>
     * @return Whether the catalog field is set.
     */
    @Override
    public boolean hasCatalog() {
      return relTypeCase_ == 200;
    }
    /**
     * <pre>
     * Catalog API (experimental / unstable)
     * </pre>
     *
     * <code>.spark.connect.Catalog catalog = 200;</code>
     * @return The catalog.
     */
    @Override
    public org.apache.spark.connect.proto.Catalog getCatalog() {
      if (catalogBuilder_ == null) {
        if (relTypeCase_ == 200) {
          return (org.apache.spark.connect.proto.Catalog) relType_;
        }
        return org.apache.spark.connect.proto.Catalog.getDefaultInstance();
      } else {
        if (relTypeCase_ == 200) {
          return catalogBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Catalog.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Catalog API (experimental / unstable)
     * </pre>
     *
     * <code>.spark.connect.Catalog catalog = 200;</code>
     */
    public Builder setCatalog(org.apache.spark.connect.proto.Catalog value) {
      if (catalogBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        catalogBuilder_.setMessage(value);
      }
      relTypeCase_ = 200;
      return this;
    }
    /**
     * <pre>
     * Catalog API (experimental / unstable)
     * </pre>
     *
     * <code>.spark.connect.Catalog catalog = 200;</code>
     */
    public Builder setCatalog(
        org.apache.spark.connect.proto.Catalog.Builder builderForValue) {
      if (catalogBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        catalogBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 200;
      return this;
    }
    /**
     * <pre>
     * Catalog API (experimental / unstable)
     * </pre>
     *
     * <code>.spark.connect.Catalog catalog = 200;</code>
     */
    public Builder mergeCatalog(org.apache.spark.connect.proto.Catalog value) {
      if (catalogBuilder_ == null) {
        if (relTypeCase_ == 200 &&
            relType_ != org.apache.spark.connect.proto.Catalog.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Catalog.newBuilder((org.apache.spark.connect.proto.Catalog) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 200) {
          catalogBuilder_.mergeFrom(value);
        } else {
          catalogBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 200;
      return this;
    }
    /**
     * <pre>
     * Catalog API (experimental / unstable)
     * </pre>
     *
     * <code>.spark.connect.Catalog catalog = 200;</code>
     */
    public Builder clearCatalog() {
      if (catalogBuilder_ == null) {
        if (relTypeCase_ == 200) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 200) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        catalogBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Catalog API (experimental / unstable)
     * </pre>
     *
     * <code>.spark.connect.Catalog catalog = 200;</code>
     */
    public org.apache.spark.connect.proto.Catalog.Builder getCatalogBuilder() {
      return getCatalogFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Catalog API (experimental / unstable)
     * </pre>
     *
     * <code>.spark.connect.Catalog catalog = 200;</code>
     */
    @Override
    public org.apache.spark.connect.proto.CatalogOrBuilder getCatalogOrBuilder() {
      if ((relTypeCase_ == 200) && (catalogBuilder_ != null)) {
        return catalogBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 200) {
          return (org.apache.spark.connect.proto.Catalog) relType_;
        }
        return org.apache.spark.connect.proto.Catalog.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Catalog API (experimental / unstable)
     * </pre>
     *
     * <code>.spark.connect.Catalog catalog = 200;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Catalog, org.apache.spark.connect.proto.Catalog.Builder, org.apache.spark.connect.proto.CatalogOrBuilder> 
        getCatalogFieldBuilder() {
      if (catalogBuilder_ == null) {
        if (!(relTypeCase_ == 200)) {
          relType_ = org.apache.spark.connect.proto.Catalog.getDefaultInstance();
        }
        catalogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Catalog, org.apache.spark.connect.proto.Catalog.Builder, org.apache.spark.connect.proto.CatalogOrBuilder>(
                (org.apache.spark.connect.proto.Catalog) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 200;
      onChanged();
      return catalogBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> extensionBuilder_;
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 998;</code>
     * @return Whether the extension field is set.
     */
    @Override
    public boolean hasExtension() {
      return relTypeCase_ == 998;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 998;</code>
     * @return The extension.
     */
    @Override
    public com.google.protobuf.Any getExtension() {
      if (extensionBuilder_ == null) {
        if (relTypeCase_ == 998) {
          return (com.google.protobuf.Any) relType_;
        }
        return com.google.protobuf.Any.getDefaultInstance();
      } else {
        if (relTypeCase_ == 998) {
          return extensionBuilder_.getMessage();
        }
        return com.google.protobuf.Any.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 998;</code>
     */
    public Builder setExtension(com.google.protobuf.Any value) {
      if (extensionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        extensionBuilder_.setMessage(value);
      }
      relTypeCase_ = 998;
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 998;</code>
     */
    public Builder setExtension(
        com.google.protobuf.Any.Builder builderForValue) {
      if (extensionBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        extensionBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 998;
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 998;</code>
     */
    public Builder mergeExtension(com.google.protobuf.Any value) {
      if (extensionBuilder_ == null) {
        if (relTypeCase_ == 998 &&
            relType_ != com.google.protobuf.Any.getDefaultInstance()) {
          relType_ = com.google.protobuf.Any.newBuilder((com.google.protobuf.Any) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 998) {
          extensionBuilder_.mergeFrom(value);
        } else {
          extensionBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 998;
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 998;</code>
     */
    public Builder clearExtension() {
      if (extensionBuilder_ == null) {
        if (relTypeCase_ == 998) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 998) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        extensionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 998;</code>
     */
    public com.google.protobuf.Any.Builder getExtensionBuilder() {
      return getExtensionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 998;</code>
     */
    @Override
    public com.google.protobuf.AnyOrBuilder getExtensionOrBuilder() {
      if ((relTypeCase_ == 998) && (extensionBuilder_ != null)) {
        return extensionBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 998) {
          return (com.google.protobuf.Any) relType_;
        }
        return com.google.protobuf.Any.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 998;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
        getExtensionFieldBuilder() {
      if (extensionBuilder_ == null) {
        if (!(relTypeCase_ == 998)) {
          relType_ = com.google.protobuf.Any.getDefaultInstance();
        }
        extensionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                (com.google.protobuf.Any) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 998;
      onChanged();
      return extensionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Unknown, org.apache.spark.connect.proto.Unknown.Builder, org.apache.spark.connect.proto.UnknownOrBuilder> unknownBuilder_;
    /**
     * <code>.spark.connect.Unknown unknown = 999;</code>
     * @return Whether the unknown field is set.
     */
    @Override
    public boolean hasUnknown() {
      return relTypeCase_ == 999;
    }
    /**
     * <code>.spark.connect.Unknown unknown = 999;</code>
     * @return The unknown.
     */
    @Override
    public org.apache.spark.connect.proto.Unknown getUnknown() {
      if (unknownBuilder_ == null) {
        if (relTypeCase_ == 999) {
          return (org.apache.spark.connect.proto.Unknown) relType_;
        }
        return org.apache.spark.connect.proto.Unknown.getDefaultInstance();
      } else {
        if (relTypeCase_ == 999) {
          return unknownBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Unknown.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Unknown unknown = 999;</code>
     */
    public Builder setUnknown(org.apache.spark.connect.proto.Unknown value) {
      if (unknownBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relType_ = value;
        onChanged();
      } else {
        unknownBuilder_.setMessage(value);
      }
      relTypeCase_ = 999;
      return this;
    }
    /**
     * <code>.spark.connect.Unknown unknown = 999;</code>
     */
    public Builder setUnknown(
        org.apache.spark.connect.proto.Unknown.Builder builderForValue) {
      if (unknownBuilder_ == null) {
        relType_ = builderForValue.build();
        onChanged();
      } else {
        unknownBuilder_.setMessage(builderForValue.build());
      }
      relTypeCase_ = 999;
      return this;
    }
    /**
     * <code>.spark.connect.Unknown unknown = 999;</code>
     */
    public Builder mergeUnknown(org.apache.spark.connect.proto.Unknown value) {
      if (unknownBuilder_ == null) {
        if (relTypeCase_ == 999 &&
            relType_ != org.apache.spark.connect.proto.Unknown.getDefaultInstance()) {
          relType_ = org.apache.spark.connect.proto.Unknown.newBuilder((org.apache.spark.connect.proto.Unknown) relType_)
              .mergeFrom(value).buildPartial();
        } else {
          relType_ = value;
        }
        onChanged();
      } else {
        if (relTypeCase_ == 999) {
          unknownBuilder_.mergeFrom(value);
        } else {
          unknownBuilder_.setMessage(value);
        }
      }
      relTypeCase_ = 999;
      return this;
    }
    /**
     * <code>.spark.connect.Unknown unknown = 999;</code>
     */
    public Builder clearUnknown() {
      if (unknownBuilder_ == null) {
        if (relTypeCase_ == 999) {
          relTypeCase_ = 0;
          relType_ = null;
          onChanged();
        }
      } else {
        if (relTypeCase_ == 999) {
          relTypeCase_ = 0;
          relType_ = null;
        }
        unknownBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Unknown unknown = 999;</code>
     */
    public org.apache.spark.connect.proto.Unknown.Builder getUnknownBuilder() {
      return getUnknownFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Unknown unknown = 999;</code>
     */
    @Override
    public org.apache.spark.connect.proto.UnknownOrBuilder getUnknownOrBuilder() {
      if ((relTypeCase_ == 999) && (unknownBuilder_ != null)) {
        return unknownBuilder_.getMessageOrBuilder();
      } else {
        if (relTypeCase_ == 999) {
          return (org.apache.spark.connect.proto.Unknown) relType_;
        }
        return org.apache.spark.connect.proto.Unknown.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Unknown unknown = 999;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Unknown, org.apache.spark.connect.proto.Unknown.Builder, org.apache.spark.connect.proto.UnknownOrBuilder> 
        getUnknownFieldBuilder() {
      if (unknownBuilder_ == null) {
        if (!(relTypeCase_ == 999)) {
          relType_ = org.apache.spark.connect.proto.Unknown.getDefaultInstance();
        }
        unknownBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Unknown, org.apache.spark.connect.proto.Unknown.Builder, org.apache.spark.connect.proto.UnknownOrBuilder>(
                (org.apache.spark.connect.proto.Unknown) relType_,
                getParentForChildren(),
                isClean());
        relType_ = null;
      }
      relTypeCase_ = 999;
      onChanged();
      return unknownBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.Relation)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.Relation)
  private static final org.apache.spark.connect.proto.Relation DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.Relation();
  }

  public static org.apache.spark.connect.proto.Relation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Relation>
      PARSER = new com.google.protobuf.AbstractParser<Relation>() {
    @Override
    public Relation parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Relation> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<Relation> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.Relation getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

