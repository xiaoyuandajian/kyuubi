// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/expressions.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * Protobuf type {@code spark.connect.ScalarScalaUDF}
 */
public final class ScalarScalaUDF extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.ScalarScalaUDF)
    ScalarScalaUDFOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ScalarScalaUDF.newBuilder() to construct.
  private ScalarScalaUDF(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ScalarScalaUDF() {
    payload_ = com.google.protobuf.ByteString.EMPTY;
    inputTypes_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new ScalarScalaUDF();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Expressions.internal_static_spark_connect_ScalarScalaUDF_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Expressions.internal_static_spark_connect_ScalarScalaUDF_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.ScalarScalaUDF.class, org.apache.spark.connect.proto.ScalarScalaUDF.Builder.class);
  }

  public static final int PAYLOAD_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * (Required) Serialized JVM object containing UDF definition, input encoders and output encoder
   * </pre>
   *
   * <code>bytes payload = 1;</code>
   * @return The payload.
   */
  @Override
  public com.google.protobuf.ByteString getPayload() {
    return payload_;
  }

  public static final int INPUTTYPES_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.DataType> inputTypes_;
  /**
   * <pre>
   * (Optional) Input type(s) of the UDF
   * </pre>
   *
   * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.DataType> getInputTypesList() {
    return inputTypes_;
  }
  /**
   * <pre>
   * (Optional) Input type(s) of the UDF
   * </pre>
   *
   * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.DataTypeOrBuilder> 
      getInputTypesOrBuilderList() {
    return inputTypes_;
  }
  /**
   * <pre>
   * (Optional) Input type(s) of the UDF
   * </pre>
   *
   * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
   */
  @Override
  public int getInputTypesCount() {
    return inputTypes_.size();
  }
  /**
   * <pre>
   * (Optional) Input type(s) of the UDF
   * </pre>
   *
   * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.DataType getInputTypes(int index) {
    return inputTypes_.get(index);
  }
  /**
   * <pre>
   * (Optional) Input type(s) of the UDF
   * </pre>
   *
   * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.DataTypeOrBuilder getInputTypesOrBuilder(
      int index) {
    return inputTypes_.get(index);
  }

  public static final int OUTPUTTYPE_FIELD_NUMBER = 3;
  private org.apache.spark.connect.proto.DataType outputType_;
  /**
   * <pre>
   * (Required) Output type of the UDF
   * </pre>
   *
   * <code>.spark.connect.DataType outputType = 3;</code>
   * @return Whether the outputType field is set.
   */
  @Override
  public boolean hasOutputType() {
    return outputType_ != null;
  }
  /**
   * <pre>
   * (Required) Output type of the UDF
   * </pre>
   *
   * <code>.spark.connect.DataType outputType = 3;</code>
   * @return The outputType.
   */
  @Override
  public org.apache.spark.connect.proto.DataType getOutputType() {
    return outputType_ == null ? org.apache.spark.connect.proto.DataType.getDefaultInstance() : outputType_;
  }
  /**
   * <pre>
   * (Required) Output type of the UDF
   * </pre>
   *
   * <code>.spark.connect.DataType outputType = 3;</code>
   */
  @Override
  public org.apache.spark.connect.proto.DataTypeOrBuilder getOutputTypeOrBuilder() {
    return outputType_ == null ? org.apache.spark.connect.proto.DataType.getDefaultInstance() : outputType_;
  }

  public static final int NULLABLE_FIELD_NUMBER = 4;
  private boolean nullable_ = false;
  /**
   * <pre>
   * (Required) True if the UDF can return null value
   * </pre>
   *
   * <code>bool nullable = 4;</code>
   * @return The nullable.
   */
  @Override
  public boolean getNullable() {
    return nullable_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!payload_.isEmpty()) {
      output.writeBytes(1, payload_);
    }
    for (int i = 0; i < inputTypes_.size(); i++) {
      output.writeMessage(2, inputTypes_.get(i));
    }
    if (outputType_ != null) {
      output.writeMessage(3, getOutputType());
    }
    if (nullable_ != false) {
      output.writeBool(4, nullable_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!payload_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, payload_);
    }
    for (int i = 0; i < inputTypes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, inputTypes_.get(i));
    }
    if (outputType_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getOutputType());
    }
    if (nullable_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, nullable_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.ScalarScalaUDF)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.ScalarScalaUDF other = (org.apache.spark.connect.proto.ScalarScalaUDF) obj;

    if (!getPayload()
        .equals(other.getPayload())) return false;
    if (!getInputTypesList()
        .equals(other.getInputTypesList())) return false;
    if (hasOutputType() != other.hasOutputType()) return false;
    if (hasOutputType()) {
      if (!getOutputType()
          .equals(other.getOutputType())) return false;
    }
    if (getNullable()
        != other.getNullable()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
    hash = (53 * hash) + getPayload().hashCode();
    if (getInputTypesCount() > 0) {
      hash = (37 * hash) + INPUTTYPES_FIELD_NUMBER;
      hash = (53 * hash) + getInputTypesList().hashCode();
    }
    if (hasOutputType()) {
      hash = (37 * hash) + OUTPUTTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getOutputType().hashCode();
    }
    hash = (37 * hash) + NULLABLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getNullable());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.ScalarScalaUDF parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ScalarScalaUDF parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ScalarScalaUDF parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ScalarScalaUDF parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ScalarScalaUDF parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ScalarScalaUDF parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ScalarScalaUDF parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.ScalarScalaUDF parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.ScalarScalaUDF parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.ScalarScalaUDF parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ScalarScalaUDF parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.ScalarScalaUDF parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.ScalarScalaUDF prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code spark.connect.ScalarScalaUDF}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.ScalarScalaUDF)
      org.apache.spark.connect.proto.ScalarScalaUDFOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Expressions.internal_static_spark_connect_ScalarScalaUDF_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Expressions.internal_static_spark_connect_ScalarScalaUDF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.ScalarScalaUDF.class, org.apache.spark.connect.proto.ScalarScalaUDF.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.ScalarScalaUDF.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      payload_ = com.google.protobuf.ByteString.EMPTY;
      if (inputTypesBuilder_ == null) {
        inputTypes_ = java.util.Collections.emptyList();
      } else {
        inputTypes_ = null;
        inputTypesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      outputType_ = null;
      if (outputTypeBuilder_ != null) {
        outputTypeBuilder_.dispose();
        outputTypeBuilder_ = null;
      }
      nullable_ = false;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Expressions.internal_static_spark_connect_ScalarScalaUDF_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.ScalarScalaUDF getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.ScalarScalaUDF.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.ScalarScalaUDF build() {
      org.apache.spark.connect.proto.ScalarScalaUDF result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.ScalarScalaUDF buildPartial() {
      org.apache.spark.connect.proto.ScalarScalaUDF result = new org.apache.spark.connect.proto.ScalarScalaUDF(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.apache.spark.connect.proto.ScalarScalaUDF result) {
      if (inputTypesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          inputTypes_ = java.util.Collections.unmodifiableList(inputTypes_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.inputTypes_ = inputTypes_;
      } else {
        result.inputTypes_ = inputTypesBuilder_.build();
      }
    }

    private void buildPartial0(org.apache.spark.connect.proto.ScalarScalaUDF result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.payload_ = payload_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.outputType_ = outputTypeBuilder_ == null
            ? outputType_
            : outputTypeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.nullable_ = nullable_;
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.ScalarScalaUDF) {
        return mergeFrom((org.apache.spark.connect.proto.ScalarScalaUDF)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.ScalarScalaUDF other) {
      if (other == org.apache.spark.connect.proto.ScalarScalaUDF.getDefaultInstance()) return this;
      if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
        setPayload(other.getPayload());
      }
      if (inputTypesBuilder_ == null) {
        if (!other.inputTypes_.isEmpty()) {
          if (inputTypes_.isEmpty()) {
            inputTypes_ = other.inputTypes_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureInputTypesIsMutable();
            inputTypes_.addAll(other.inputTypes_);
          }
          onChanged();
        }
      } else {
        if (!other.inputTypes_.isEmpty()) {
          if (inputTypesBuilder_.isEmpty()) {
            inputTypesBuilder_.dispose();
            inputTypesBuilder_ = null;
            inputTypes_ = other.inputTypes_;
            bitField0_ = (bitField0_ & ~0x00000002);
            inputTypesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInputTypesFieldBuilder() : null;
          } else {
            inputTypesBuilder_.addAllMessages(other.inputTypes_);
          }
        }
      }
      if (other.hasOutputType()) {
        mergeOutputType(other.getOutputType());
      }
      if (other.getNullable() != false) {
        setNullable(other.getNullable());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              payload_ = input.readBytes();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              org.apache.spark.connect.proto.DataType m =
                  input.readMessage(
                      org.apache.spark.connect.proto.DataType.parser(),
                      extensionRegistry);
              if (inputTypesBuilder_ == null) {
                ensureInputTypesIsMutable();
                inputTypes_.add(m);
              } else {
                inputTypesBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getOutputTypeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 32: {
              nullable_ = input.readBool();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * (Required) Serialized JVM object containing UDF definition, input encoders and output encoder
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @return The payload.
     */
    @Override
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }
    /**
     * <pre>
     * (Required) Serialized JVM object containing UDF definition, input encoders and output encoder
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @param value The payload to set.
     * @return This builder for chaining.
     */
    public Builder setPayload(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      payload_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Serialized JVM object containing UDF definition, input encoders and output encoder
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPayload() {
      bitField0_ = (bitField0_ & ~0x00000001);
      payload_ = getDefaultInstance().getPayload();
      onChanged();
      return this;
    }

    private java.util.List<org.apache.spark.connect.proto.DataType> inputTypes_ =
      java.util.Collections.emptyList();
    private void ensureInputTypesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        inputTypes_ = new java.util.ArrayList<org.apache.spark.connect.proto.DataType>(inputTypes_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.DataType, org.apache.spark.connect.proto.DataType.Builder, org.apache.spark.connect.proto.DataTypeOrBuilder> inputTypesBuilder_;

    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.DataType> getInputTypesList() {
      if (inputTypesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(inputTypes_);
      } else {
        return inputTypesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public int getInputTypesCount() {
      if (inputTypesBuilder_ == null) {
        return inputTypes_.size();
      } else {
        return inputTypesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public org.apache.spark.connect.proto.DataType getInputTypes(int index) {
      if (inputTypesBuilder_ == null) {
        return inputTypes_.get(index);
      } else {
        return inputTypesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public Builder setInputTypes(
        int index, org.apache.spark.connect.proto.DataType value) {
      if (inputTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputTypesIsMutable();
        inputTypes_.set(index, value);
        onChanged();
      } else {
        inputTypesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public Builder setInputTypes(
        int index, org.apache.spark.connect.proto.DataType.Builder builderForValue) {
      if (inputTypesBuilder_ == null) {
        ensureInputTypesIsMutable();
        inputTypes_.set(index, builderForValue.build());
        onChanged();
      } else {
        inputTypesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public Builder addInputTypes(org.apache.spark.connect.proto.DataType value) {
      if (inputTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputTypesIsMutable();
        inputTypes_.add(value);
        onChanged();
      } else {
        inputTypesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public Builder addInputTypes(
        int index, org.apache.spark.connect.proto.DataType value) {
      if (inputTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputTypesIsMutable();
        inputTypes_.add(index, value);
        onChanged();
      } else {
        inputTypesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public Builder addInputTypes(
        org.apache.spark.connect.proto.DataType.Builder builderForValue) {
      if (inputTypesBuilder_ == null) {
        ensureInputTypesIsMutable();
        inputTypes_.add(builderForValue.build());
        onChanged();
      } else {
        inputTypesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public Builder addInputTypes(
        int index, org.apache.spark.connect.proto.DataType.Builder builderForValue) {
      if (inputTypesBuilder_ == null) {
        ensureInputTypesIsMutable();
        inputTypes_.add(index, builderForValue.build());
        onChanged();
      } else {
        inputTypesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public Builder addAllInputTypes(
        Iterable<? extends org.apache.spark.connect.proto.DataType> values) {
      if (inputTypesBuilder_ == null) {
        ensureInputTypesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, inputTypes_);
        onChanged();
      } else {
        inputTypesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public Builder clearInputTypes() {
      if (inputTypesBuilder_ == null) {
        inputTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        inputTypesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public Builder removeInputTypes(int index) {
      if (inputTypesBuilder_ == null) {
        ensureInputTypesIsMutable();
        inputTypes_.remove(index);
        onChanged();
      } else {
        inputTypesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public org.apache.spark.connect.proto.DataType.Builder getInputTypesBuilder(
        int index) {
      return getInputTypesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public org.apache.spark.connect.proto.DataTypeOrBuilder getInputTypesOrBuilder(
        int index) {
      if (inputTypesBuilder_ == null) {
        return inputTypes_.get(index);  } else {
        return inputTypesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.DataTypeOrBuilder> 
         getInputTypesOrBuilderList() {
      if (inputTypesBuilder_ != null) {
        return inputTypesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(inputTypes_);
      }
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public org.apache.spark.connect.proto.DataType.Builder addInputTypesBuilder() {
      return getInputTypesFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.DataType.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public org.apache.spark.connect.proto.DataType.Builder addInputTypesBuilder(
        int index) {
      return getInputTypesFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.DataType.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) Input type(s) of the UDF
     * </pre>
     *
     * <code>repeated .spark.connect.DataType inputTypes = 2;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.DataType.Builder> 
         getInputTypesBuilderList() {
      return getInputTypesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.DataType, org.apache.spark.connect.proto.DataType.Builder, org.apache.spark.connect.proto.DataTypeOrBuilder> 
        getInputTypesFieldBuilder() {
      if (inputTypesBuilder_ == null) {
        inputTypesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.DataType, org.apache.spark.connect.proto.DataType.Builder, org.apache.spark.connect.proto.DataTypeOrBuilder>(
                inputTypes_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        inputTypes_ = null;
      }
      return inputTypesBuilder_;
    }

    private org.apache.spark.connect.proto.DataType outputType_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.DataType, org.apache.spark.connect.proto.DataType.Builder, org.apache.spark.connect.proto.DataTypeOrBuilder> outputTypeBuilder_;
    /**
     * <pre>
     * (Required) Output type of the UDF
     * </pre>
     *
     * <code>.spark.connect.DataType outputType = 3;</code>
     * @return Whether the outputType field is set.
     */
    public boolean hasOutputType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * (Required) Output type of the UDF
     * </pre>
     *
     * <code>.spark.connect.DataType outputType = 3;</code>
     * @return The outputType.
     */
    public org.apache.spark.connect.proto.DataType getOutputType() {
      if (outputTypeBuilder_ == null) {
        return outputType_ == null ? org.apache.spark.connect.proto.DataType.getDefaultInstance() : outputType_;
      } else {
        return outputTypeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Output type of the UDF
     * </pre>
     *
     * <code>.spark.connect.DataType outputType = 3;</code>
     */
    public Builder setOutputType(org.apache.spark.connect.proto.DataType value) {
      if (outputTypeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outputType_ = value;
      } else {
        outputTypeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Output type of the UDF
     * </pre>
     *
     * <code>.spark.connect.DataType outputType = 3;</code>
     */
    public Builder setOutputType(
        org.apache.spark.connect.proto.DataType.Builder builderForValue) {
      if (outputTypeBuilder_ == null) {
        outputType_ = builderForValue.build();
      } else {
        outputTypeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Output type of the UDF
     * </pre>
     *
     * <code>.spark.connect.DataType outputType = 3;</code>
     */
    public Builder mergeOutputType(org.apache.spark.connect.proto.DataType value) {
      if (outputTypeBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          outputType_ != null &&
          outputType_ != org.apache.spark.connect.proto.DataType.getDefaultInstance()) {
          getOutputTypeBuilder().mergeFrom(value);
        } else {
          outputType_ = value;
        }
      } else {
        outputTypeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Output type of the UDF
     * </pre>
     *
     * <code>.spark.connect.DataType outputType = 3;</code>
     */
    public Builder clearOutputType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      outputType_ = null;
      if (outputTypeBuilder_ != null) {
        outputTypeBuilder_.dispose();
        outputTypeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Output type of the UDF
     * </pre>
     *
     * <code>.spark.connect.DataType outputType = 3;</code>
     */
    public org.apache.spark.connect.proto.DataType.Builder getOutputTypeBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getOutputTypeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Output type of the UDF
     * </pre>
     *
     * <code>.spark.connect.DataType outputType = 3;</code>
     */
    public org.apache.spark.connect.proto.DataTypeOrBuilder getOutputTypeOrBuilder() {
      if (outputTypeBuilder_ != null) {
        return outputTypeBuilder_.getMessageOrBuilder();
      } else {
        return outputType_ == null ?
            org.apache.spark.connect.proto.DataType.getDefaultInstance() : outputType_;
      }
    }
    /**
     * <pre>
     * (Required) Output type of the UDF
     * </pre>
     *
     * <code>.spark.connect.DataType outputType = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.DataType, org.apache.spark.connect.proto.DataType.Builder, org.apache.spark.connect.proto.DataTypeOrBuilder> 
        getOutputTypeFieldBuilder() {
      if (outputTypeBuilder_ == null) {
        outputTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.DataType, org.apache.spark.connect.proto.DataType.Builder, org.apache.spark.connect.proto.DataTypeOrBuilder>(
                getOutputType(),
                getParentForChildren(),
                isClean());
        outputType_ = null;
      }
      return outputTypeBuilder_;
    }

    private boolean nullable_ ;
    /**
     * <pre>
     * (Required) True if the UDF can return null value
     * </pre>
     *
     * <code>bool nullable = 4;</code>
     * @return The nullable.
     */
    @Override
    public boolean getNullable() {
      return nullable_;
    }
    /**
     * <pre>
     * (Required) True if the UDF can return null value
     * </pre>
     *
     * <code>bool nullable = 4;</code>
     * @param value The nullable to set.
     * @return This builder for chaining.
     */
    public Builder setNullable(boolean value) {

      nullable_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) True if the UDF can return null value
     * </pre>
     *
     * <code>bool nullable = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearNullable() {
      bitField0_ = (bitField0_ & ~0x00000008);
      nullable_ = false;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.ScalarScalaUDF)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.ScalarScalaUDF)
  private static final org.apache.spark.connect.proto.ScalarScalaUDF DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.ScalarScalaUDF();
  }

  public static org.apache.spark.connect.proto.ScalarScalaUDF getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ScalarScalaUDF>
      PARSER = new com.google.protobuf.AbstractParser<ScalarScalaUDF>() {
    @Override
    public ScalarScalaUDF parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ScalarScalaUDF> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<ScalarScalaUDF> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.ScalarScalaUDF getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

