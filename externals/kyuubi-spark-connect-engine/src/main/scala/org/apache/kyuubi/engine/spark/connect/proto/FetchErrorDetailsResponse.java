// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * Protobuf type {@code spark.connect.FetchErrorDetailsResponse}
 */
public final class FetchErrorDetailsResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.FetchErrorDetailsResponse)
    FetchErrorDetailsResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FetchErrorDetailsResponse.newBuilder() to construct.
  private FetchErrorDetailsResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FetchErrorDetailsResponse() {
    errors_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new FetchErrorDetailsResponse();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.FetchErrorDetailsResponse.class, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Builder.class);
  }

  public interface StackTraceElementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.FetchErrorDetailsResponse.StackTraceElement)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The fully qualified name of the class containing the execution point.
     * </pre>
     *
     * <code>string declaring_class = 1;</code>
     * @return The declaringClass.
     */
    String getDeclaringClass();
    /**
     * <pre>
     * The fully qualified name of the class containing the execution point.
     * </pre>
     *
     * <code>string declaring_class = 1;</code>
     * @return The bytes for declaringClass.
     */
    com.google.protobuf.ByteString
        getDeclaringClassBytes();

    /**
     * <pre>
     * The name of the method containing the execution point.
     * </pre>
     *
     * <code>string method_name = 2;</code>
     * @return The methodName.
     */
    String getMethodName();
    /**
     * <pre>
     * The name of the method containing the execution point.
     * </pre>
     *
     * <code>string method_name = 2;</code>
     * @return The bytes for methodName.
     */
    com.google.protobuf.ByteString
        getMethodNameBytes();

    /**
     * <pre>
     * The name of the file containing the execution point.
     * </pre>
     *
     * <code>optional string file_name = 3;</code>
     * @return Whether the fileName field is set.
     */
    boolean hasFileName();
    /**
     * <pre>
     * The name of the file containing the execution point.
     * </pre>
     *
     * <code>optional string file_name = 3;</code>
     * @return The fileName.
     */
    String getFileName();
    /**
     * <pre>
     * The name of the file containing the execution point.
     * </pre>
     *
     * <code>optional string file_name = 3;</code>
     * @return The bytes for fileName.
     */
    com.google.protobuf.ByteString
        getFileNameBytes();

    /**
     * <pre>
     * The line number of the source line containing the execution point.
     * </pre>
     *
     * <code>int32 line_number = 4;</code>
     * @return The lineNumber.
     */
    int getLineNumber();
  }
  /**
   * Protobuf type {@code spark.connect.FetchErrorDetailsResponse.StackTraceElement}
   */
  public static final class StackTraceElement extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.FetchErrorDetailsResponse.StackTraceElement)
      StackTraceElementOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StackTraceElement.newBuilder() to construct.
    private StackTraceElement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StackTraceElement() {
      declaringClass_ = "";
      methodName_ = "";
      fileName_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new StackTraceElement();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_StackTraceElement_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_StackTraceElement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.class, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder.class);
    }

    private int bitField0_;
    public static final int DECLARING_CLASS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile Object declaringClass_ = "";
    /**
     * <pre>
     * The fully qualified name of the class containing the execution point.
     * </pre>
     *
     * <code>string declaring_class = 1;</code>
     * @return The declaringClass.
     */
    @Override
    public String getDeclaringClass() {
      Object ref = declaringClass_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        declaringClass_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The fully qualified name of the class containing the execution point.
     * </pre>
     *
     * <code>string declaring_class = 1;</code>
     * @return The bytes for declaringClass.
     */
    @Override
    public com.google.protobuf.ByteString
        getDeclaringClassBytes() {
      Object ref = declaringClass_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        declaringClass_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int METHOD_NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile Object methodName_ = "";
    /**
     * <pre>
     * The name of the method containing the execution point.
     * </pre>
     *
     * <code>string method_name = 2;</code>
     * @return The methodName.
     */
    @Override
    public String getMethodName() {
      Object ref = methodName_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        methodName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the method containing the execution point.
     * </pre>
     *
     * <code>string method_name = 2;</code>
     * @return The bytes for methodName.
     */
    @Override
    public com.google.protobuf.ByteString
        getMethodNameBytes() {
      Object ref = methodName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        methodName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FILE_NAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile Object fileName_ = "";
    /**
     * <pre>
     * The name of the file containing the execution point.
     * </pre>
     *
     * <code>optional string file_name = 3;</code>
     * @return Whether the fileName field is set.
     */
    @Override
    public boolean hasFileName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The name of the file containing the execution point.
     * </pre>
     *
     * <code>optional string file_name = 3;</code>
     * @return The fileName.
     */
    @Override
    public String getFileName() {
      Object ref = fileName_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        fileName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the file containing the execution point.
     * </pre>
     *
     * <code>optional string file_name = 3;</code>
     * @return The bytes for fileName.
     */
    @Override
    public com.google.protobuf.ByteString
        getFileNameBytes() {
      Object ref = fileName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        fileName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LINE_NUMBER_FIELD_NUMBER = 4;
    private int lineNumber_ = 0;
    /**
     * <pre>
     * The line number of the source line containing the execution point.
     * </pre>
     *
     * <code>int32 line_number = 4;</code>
     * @return The lineNumber.
     */
    @Override
    public int getLineNumber() {
      return lineNumber_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(declaringClass_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, declaringClass_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(methodName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, methodName_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, fileName_);
      }
      if (lineNumber_ != 0) {
        output.writeInt32(4, lineNumber_);
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(declaringClass_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, declaringClass_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(methodName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, methodName_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, fileName_);
      }
      if (lineNumber_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, lineNumber_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement other = (org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement) obj;

      if (!getDeclaringClass()
          .equals(other.getDeclaringClass())) return false;
      if (!getMethodName()
          .equals(other.getMethodName())) return false;
      if (hasFileName() != other.hasFileName()) return false;
      if (hasFileName()) {
        if (!getFileName()
            .equals(other.getFileName())) return false;
      }
      if (getLineNumber()
          != other.getLineNumber()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DECLARING_CLASS_FIELD_NUMBER;
      hash = (53 * hash) + getDeclaringClass().hashCode();
      hash = (37 * hash) + METHOD_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getMethodName().hashCode();
      if (hasFileName()) {
        hash = (37 * hash) + FILE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getFileName().hashCode();
      }
      hash = (37 * hash) + LINE_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + getLineNumber();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.FetchErrorDetailsResponse.StackTraceElement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.FetchErrorDetailsResponse.StackTraceElement)
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_StackTraceElement_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_StackTraceElement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.class, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        declaringClass_ = "";
        methodName_ = "";
        fileName_ = "";
        lineNumber_ = 0;
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_StackTraceElement_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement build() {
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement buildPartial() {
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement result = new org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.declaringClass_ = declaringClass_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.methodName_ = methodName_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.fileName_ = fileName_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.lineNumber_ = lineNumber_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement) {
          return mergeFrom((org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement other) {
        if (other == org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.getDefaultInstance()) return this;
        if (!other.getDeclaringClass().isEmpty()) {
          declaringClass_ = other.declaringClass_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getMethodName().isEmpty()) {
          methodName_ = other.methodName_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasFileName()) {
          fileName_ = other.fileName_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.getLineNumber() != 0) {
          setLineNumber(other.getLineNumber());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                declaringClass_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                methodName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                fileName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                lineNumber_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private Object declaringClass_ = "";
      /**
       * <pre>
       * The fully qualified name of the class containing the execution point.
       * </pre>
       *
       * <code>string declaring_class = 1;</code>
       * @return The declaringClass.
       */
      public String getDeclaringClass() {
        Object ref = declaringClass_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          declaringClass_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The fully qualified name of the class containing the execution point.
       * </pre>
       *
       * <code>string declaring_class = 1;</code>
       * @return The bytes for declaringClass.
       */
      public com.google.protobuf.ByteString
          getDeclaringClassBytes() {
        Object ref = declaringClass_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          declaringClass_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The fully qualified name of the class containing the execution point.
       * </pre>
       *
       * <code>string declaring_class = 1;</code>
       * @param value The declaringClass to set.
       * @return This builder for chaining.
       */
      public Builder setDeclaringClass(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        declaringClass_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The fully qualified name of the class containing the execution point.
       * </pre>
       *
       * <code>string declaring_class = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeclaringClass() {
        declaringClass_ = getDefaultInstance().getDeclaringClass();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The fully qualified name of the class containing the execution point.
       * </pre>
       *
       * <code>string declaring_class = 1;</code>
       * @param value The bytes for declaringClass to set.
       * @return This builder for chaining.
       */
      public Builder setDeclaringClassBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        declaringClass_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private Object methodName_ = "";
      /**
       * <pre>
       * The name of the method containing the execution point.
       * </pre>
       *
       * <code>string method_name = 2;</code>
       * @return The methodName.
       */
      public String getMethodName() {
        Object ref = methodName_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          methodName_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The name of the method containing the execution point.
       * </pre>
       *
       * <code>string method_name = 2;</code>
       * @return The bytes for methodName.
       */
      public com.google.protobuf.ByteString
          getMethodNameBytes() {
        Object ref = methodName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          methodName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the method containing the execution point.
       * </pre>
       *
       * <code>string method_name = 2;</code>
       * @param value The methodName to set.
       * @return This builder for chaining.
       */
      public Builder setMethodName(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        methodName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the method containing the execution point.
       * </pre>
       *
       * <code>string method_name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMethodName() {
        methodName_ = getDefaultInstance().getMethodName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the method containing the execution point.
       * </pre>
       *
       * <code>string method_name = 2;</code>
       * @param value The bytes for methodName to set.
       * @return This builder for chaining.
       */
      public Builder setMethodNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        methodName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private Object fileName_ = "";
      /**
       * <pre>
       * The name of the file containing the execution point.
       * </pre>
       *
       * <code>optional string file_name = 3;</code>
       * @return Whether the fileName field is set.
       */
      public boolean hasFileName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The name of the file containing the execution point.
       * </pre>
       *
       * <code>optional string file_name = 3;</code>
       * @return The fileName.
       */
      public String getFileName() {
        Object ref = fileName_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          fileName_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The name of the file containing the execution point.
       * </pre>
       *
       * <code>optional string file_name = 3;</code>
       * @return The bytes for fileName.
       */
      public com.google.protobuf.ByteString
          getFileNameBytes() {
        Object ref = fileName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          fileName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the file containing the execution point.
       * </pre>
       *
       * <code>optional string file_name = 3;</code>
       * @param value The fileName to set.
       * @return This builder for chaining.
       */
      public Builder setFileName(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        fileName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the file containing the execution point.
       * </pre>
       *
       * <code>optional string file_name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileName() {
        fileName_ = getDefaultInstance().getFileName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the file containing the execution point.
       * </pre>
       *
       * <code>optional string file_name = 3;</code>
       * @param value The bytes for fileName to set.
       * @return This builder for chaining.
       */
      public Builder setFileNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        fileName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private int lineNumber_ ;
      /**
       * <pre>
       * The line number of the source line containing the execution point.
       * </pre>
       *
       * <code>int32 line_number = 4;</code>
       * @return The lineNumber.
       */
      @Override
      public int getLineNumber() {
        return lineNumber_;
      }
      /**
       * <pre>
       * The line number of the source line containing the execution point.
       * </pre>
       *
       * <code>int32 line_number = 4;</code>
       * @param value The lineNumber to set.
       * @return This builder for chaining.
       */
      public Builder setLineNumber(int value) {

        lineNumber_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The line number of the source line containing the execution point.
       * </pre>
       *
       * <code>int32 line_number = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLineNumber() {
        bitField0_ = (bitField0_ & ~0x00000008);
        lineNumber_ = 0;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.FetchErrorDetailsResponse.StackTraceElement)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.FetchErrorDetailsResponse.StackTraceElement)
    private static final org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement();
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StackTraceElement>
        PARSER = new com.google.protobuf.AbstractParser<StackTraceElement>() {
      @Override
      public StackTraceElement parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StackTraceElement> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<StackTraceElement> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface QueryContextOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.FetchErrorDetailsResponse.QueryContext)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The object type of the query which throws the exception.
     * If the exception is directly from the main query, it should be an empty string.
     * Otherwise, it should be the exact object type in upper case. For example, a "VIEW".
     * </pre>
     *
     * <code>string object_type = 1;</code>
     * @return The objectType.
     */
    String getObjectType();
    /**
     * <pre>
     * The object type of the query which throws the exception.
     * If the exception is directly from the main query, it should be an empty string.
     * Otherwise, it should be the exact object type in upper case. For example, a "VIEW".
     * </pre>
     *
     * <code>string object_type = 1;</code>
     * @return The bytes for objectType.
     */
    com.google.protobuf.ByteString
        getObjectTypeBytes();

    /**
     * <pre>
     * The object name of the query which throws the exception.
     * If the exception is directly from the main query, it should be an empty string.
     * Otherwise, it should be the object name. For example, a view name "V1".
     * </pre>
     *
     * <code>string object_name = 2;</code>
     * @return The objectName.
     */
    String getObjectName();
    /**
     * <pre>
     * The object name of the query which throws the exception.
     * If the exception is directly from the main query, it should be an empty string.
     * Otherwise, it should be the object name. For example, a view name "V1".
     * </pre>
     *
     * <code>string object_name = 2;</code>
     * @return The bytes for objectName.
     */
    com.google.protobuf.ByteString
        getObjectNameBytes();

    /**
     * <pre>
     * The starting index in the query text which throws the exception. The index starts from 0.
     * </pre>
     *
     * <code>int32 start_index = 3;</code>
     * @return The startIndex.
     */
    int getStartIndex();

    /**
     * <pre>
     * The stopping index in the query which throws the exception. The index starts from 0.
     * </pre>
     *
     * <code>int32 stop_index = 4;</code>
     * @return The stopIndex.
     */
    int getStopIndex();

    /**
     * <pre>
     * The corresponding fragment of the query which throws the exception.
     * </pre>
     *
     * <code>string fragment = 5;</code>
     * @return The fragment.
     */
    String getFragment();
    /**
     * <pre>
     * The corresponding fragment of the query which throws the exception.
     * </pre>
     *
     * <code>string fragment = 5;</code>
     * @return The bytes for fragment.
     */
    com.google.protobuf.ByteString
        getFragmentBytes();
  }
  /**
   * <pre>
   * QueryContext defines the schema for the query context of a SparkThrowable.
   * It helps users understand where the error occurs while executing queries.
   * </pre>
   *
   * Protobuf type {@code spark.connect.FetchErrorDetailsResponse.QueryContext}
   */
  public static final class QueryContext extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.FetchErrorDetailsResponse.QueryContext)
      QueryContextOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use QueryContext.newBuilder() to construct.
    private QueryContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private QueryContext() {
      objectType_ = "";
      objectName_ = "";
      fragment_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new QueryContext();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_QueryContext_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_QueryContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.class, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder.class);
    }

    public static final int OBJECT_TYPE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile Object objectType_ = "";
    /**
     * <pre>
     * The object type of the query which throws the exception.
     * If the exception is directly from the main query, it should be an empty string.
     * Otherwise, it should be the exact object type in upper case. For example, a "VIEW".
     * </pre>
     *
     * <code>string object_type = 1;</code>
     * @return The objectType.
     */
    @Override
    public String getObjectType() {
      Object ref = objectType_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        objectType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The object type of the query which throws the exception.
     * If the exception is directly from the main query, it should be an empty string.
     * Otherwise, it should be the exact object type in upper case. For example, a "VIEW".
     * </pre>
     *
     * <code>string object_type = 1;</code>
     * @return The bytes for objectType.
     */
    @Override
    public com.google.protobuf.ByteString
        getObjectTypeBytes() {
      Object ref = objectType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        objectType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OBJECT_NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile Object objectName_ = "";
    /**
     * <pre>
     * The object name of the query which throws the exception.
     * If the exception is directly from the main query, it should be an empty string.
     * Otherwise, it should be the object name. For example, a view name "V1".
     * </pre>
     *
     * <code>string object_name = 2;</code>
     * @return The objectName.
     */
    @Override
    public String getObjectName() {
      Object ref = objectName_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        objectName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The object name of the query which throws the exception.
     * If the exception is directly from the main query, it should be an empty string.
     * Otherwise, it should be the object name. For example, a view name "V1".
     * </pre>
     *
     * <code>string object_name = 2;</code>
     * @return The bytes for objectName.
     */
    @Override
    public com.google.protobuf.ByteString
        getObjectNameBytes() {
      Object ref = objectName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        objectName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_INDEX_FIELD_NUMBER = 3;
    private int startIndex_ = 0;
    /**
     * <pre>
     * The starting index in the query text which throws the exception. The index starts from 0.
     * </pre>
     *
     * <code>int32 start_index = 3;</code>
     * @return The startIndex.
     */
    @Override
    public int getStartIndex() {
      return startIndex_;
    }

    public static final int STOP_INDEX_FIELD_NUMBER = 4;
    private int stopIndex_ = 0;
    /**
     * <pre>
     * The stopping index in the query which throws the exception. The index starts from 0.
     * </pre>
     *
     * <code>int32 stop_index = 4;</code>
     * @return The stopIndex.
     */
    @Override
    public int getStopIndex() {
      return stopIndex_;
    }

    public static final int FRAGMENT_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private volatile Object fragment_ = "";
    /**
     * <pre>
     * The corresponding fragment of the query which throws the exception.
     * </pre>
     *
     * <code>string fragment = 5;</code>
     * @return The fragment.
     */
    @Override
    public String getFragment() {
      Object ref = fragment_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        fragment_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The corresponding fragment of the query which throws the exception.
     * </pre>
     *
     * <code>string fragment = 5;</code>
     * @return The bytes for fragment.
     */
    @Override
    public com.google.protobuf.ByteString
        getFragmentBytes() {
      Object ref = fragment_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        fragment_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(objectType_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, objectType_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(objectName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, objectName_);
      }
      if (startIndex_ != 0) {
        output.writeInt32(3, startIndex_);
      }
      if (stopIndex_ != 0) {
        output.writeInt32(4, stopIndex_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(fragment_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, fragment_);
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(objectType_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, objectType_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(objectName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, objectName_);
      }
      if (startIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, startIndex_);
      }
      if (stopIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, stopIndex_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(fragment_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, fragment_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext other = (org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext) obj;

      if (!getObjectType()
          .equals(other.getObjectType())) return false;
      if (!getObjectName()
          .equals(other.getObjectName())) return false;
      if (getStartIndex()
          != other.getStartIndex()) return false;
      if (getStopIndex()
          != other.getStopIndex()) return false;
      if (!getFragment()
          .equals(other.getFragment())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OBJECT_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getObjectType().hashCode();
      hash = (37 * hash) + OBJECT_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getObjectName().hashCode();
      hash = (37 * hash) + START_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getStartIndex();
      hash = (37 * hash) + STOP_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getStopIndex();
      hash = (37 * hash) + FRAGMENT_FIELD_NUMBER;
      hash = (53 * hash) + getFragment().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * QueryContext defines the schema for the query context of a SparkThrowable.
     * It helps users understand where the error occurs while executing queries.
     * </pre>
     *
     * Protobuf type {@code spark.connect.FetchErrorDetailsResponse.QueryContext}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.FetchErrorDetailsResponse.QueryContext)
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContextOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_QueryContext_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_QueryContext_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.class, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        objectType_ = "";
        objectName_ = "";
        startIndex_ = 0;
        stopIndex_ = 0;
        fragment_ = "";
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_QueryContext_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext build() {
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext buildPartial() {
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext result = new org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.objectType_ = objectType_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.objectName_ = objectName_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.startIndex_ = startIndex_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.stopIndex_ = stopIndex_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.fragment_ = fragment_;
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext) {
          return mergeFrom((org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext other) {
        if (other == org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.getDefaultInstance()) return this;
        if (!other.getObjectType().isEmpty()) {
          objectType_ = other.objectType_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getObjectName().isEmpty()) {
          objectName_ = other.objectName_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.getStartIndex() != 0) {
          setStartIndex(other.getStartIndex());
        }
        if (other.getStopIndex() != 0) {
          setStopIndex(other.getStopIndex());
        }
        if (!other.getFragment().isEmpty()) {
          fragment_ = other.fragment_;
          bitField0_ |= 0x00000010;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                objectType_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                objectName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                startIndex_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                stopIndex_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                fragment_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private Object objectType_ = "";
      /**
       * <pre>
       * The object type of the query which throws the exception.
       * If the exception is directly from the main query, it should be an empty string.
       * Otherwise, it should be the exact object type in upper case. For example, a "VIEW".
       * </pre>
       *
       * <code>string object_type = 1;</code>
       * @return The objectType.
       */
      public String getObjectType() {
        Object ref = objectType_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          objectType_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The object type of the query which throws the exception.
       * If the exception is directly from the main query, it should be an empty string.
       * Otherwise, it should be the exact object type in upper case. For example, a "VIEW".
       * </pre>
       *
       * <code>string object_type = 1;</code>
       * @return The bytes for objectType.
       */
      public com.google.protobuf.ByteString
          getObjectTypeBytes() {
        Object ref = objectType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          objectType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The object type of the query which throws the exception.
       * If the exception is directly from the main query, it should be an empty string.
       * Otherwise, it should be the exact object type in upper case. For example, a "VIEW".
       * </pre>
       *
       * <code>string object_type = 1;</code>
       * @param value The objectType to set.
       * @return This builder for chaining.
       */
      public Builder setObjectType(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        objectType_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The object type of the query which throws the exception.
       * If the exception is directly from the main query, it should be an empty string.
       * Otherwise, it should be the exact object type in upper case. For example, a "VIEW".
       * </pre>
       *
       * <code>string object_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearObjectType() {
        objectType_ = getDefaultInstance().getObjectType();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The object type of the query which throws the exception.
       * If the exception is directly from the main query, it should be an empty string.
       * Otherwise, it should be the exact object type in upper case. For example, a "VIEW".
       * </pre>
       *
       * <code>string object_type = 1;</code>
       * @param value The bytes for objectType to set.
       * @return This builder for chaining.
       */
      public Builder setObjectTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        objectType_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private Object objectName_ = "";
      /**
       * <pre>
       * The object name of the query which throws the exception.
       * If the exception is directly from the main query, it should be an empty string.
       * Otherwise, it should be the object name. For example, a view name "V1".
       * </pre>
       *
       * <code>string object_name = 2;</code>
       * @return The objectName.
       */
      public String getObjectName() {
        Object ref = objectName_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          objectName_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The object name of the query which throws the exception.
       * If the exception is directly from the main query, it should be an empty string.
       * Otherwise, it should be the object name. For example, a view name "V1".
       * </pre>
       *
       * <code>string object_name = 2;</code>
       * @return The bytes for objectName.
       */
      public com.google.protobuf.ByteString
          getObjectNameBytes() {
        Object ref = objectName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          objectName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The object name of the query which throws the exception.
       * If the exception is directly from the main query, it should be an empty string.
       * Otherwise, it should be the object name. For example, a view name "V1".
       * </pre>
       *
       * <code>string object_name = 2;</code>
       * @param value The objectName to set.
       * @return This builder for chaining.
       */
      public Builder setObjectName(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        objectName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The object name of the query which throws the exception.
       * If the exception is directly from the main query, it should be an empty string.
       * Otherwise, it should be the object name. For example, a view name "V1".
       * </pre>
       *
       * <code>string object_name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearObjectName() {
        objectName_ = getDefaultInstance().getObjectName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The object name of the query which throws the exception.
       * If the exception is directly from the main query, it should be an empty string.
       * Otherwise, it should be the object name. For example, a view name "V1".
       * </pre>
       *
       * <code>string object_name = 2;</code>
       * @param value The bytes for objectName to set.
       * @return This builder for chaining.
       */
      public Builder setObjectNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        objectName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private int startIndex_ ;
      /**
       * <pre>
       * The starting index in the query text which throws the exception. The index starts from 0.
       * </pre>
       *
       * <code>int32 start_index = 3;</code>
       * @return The startIndex.
       */
      @Override
      public int getStartIndex() {
        return startIndex_;
      }
      /**
       * <pre>
       * The starting index in the query text which throws the exception. The index starts from 0.
       * </pre>
       *
       * <code>int32 start_index = 3;</code>
       * @param value The startIndex to set.
       * @return This builder for chaining.
       */
      public Builder setStartIndex(int value) {

        startIndex_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The starting index in the query text which throws the exception. The index starts from 0.
       * </pre>
       *
       * <code>int32 start_index = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        startIndex_ = 0;
        onChanged();
        return this;
      }

      private int stopIndex_ ;
      /**
       * <pre>
       * The stopping index in the query which throws the exception. The index starts from 0.
       * </pre>
       *
       * <code>int32 stop_index = 4;</code>
       * @return The stopIndex.
       */
      @Override
      public int getStopIndex() {
        return stopIndex_;
      }
      /**
       * <pre>
       * The stopping index in the query which throws the exception. The index starts from 0.
       * </pre>
       *
       * <code>int32 stop_index = 4;</code>
       * @param value The stopIndex to set.
       * @return This builder for chaining.
       */
      public Builder setStopIndex(int value) {

        stopIndex_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The stopping index in the query which throws the exception. The index starts from 0.
       * </pre>
       *
       * <code>int32 stop_index = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearStopIndex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        stopIndex_ = 0;
        onChanged();
        return this;
      }

      private Object fragment_ = "";
      /**
       * <pre>
       * The corresponding fragment of the query which throws the exception.
       * </pre>
       *
       * <code>string fragment = 5;</code>
       * @return The fragment.
       */
      public String getFragment() {
        Object ref = fragment_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          fragment_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The corresponding fragment of the query which throws the exception.
       * </pre>
       *
       * <code>string fragment = 5;</code>
       * @return The bytes for fragment.
       */
      public com.google.protobuf.ByteString
          getFragmentBytes() {
        Object ref = fragment_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          fragment_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The corresponding fragment of the query which throws the exception.
       * </pre>
       *
       * <code>string fragment = 5;</code>
       * @param value The fragment to set.
       * @return This builder for chaining.
       */
      public Builder setFragment(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        fragment_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The corresponding fragment of the query which throws the exception.
       * </pre>
       *
       * <code>string fragment = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearFragment() {
        fragment_ = getDefaultInstance().getFragment();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The corresponding fragment of the query which throws the exception.
       * </pre>
       *
       * <code>string fragment = 5;</code>
       * @param value The bytes for fragment to set.
       * @return This builder for chaining.
       */
      public Builder setFragmentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        fragment_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.FetchErrorDetailsResponse.QueryContext)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.FetchErrorDetailsResponse.QueryContext)
    private static final org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext();
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<QueryContext>
        PARSER = new com.google.protobuf.AbstractParser<QueryContext>() {
      @Override
      public QueryContext parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<QueryContext> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<QueryContext> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SparkThrowableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.FetchErrorDetailsResponse.SparkThrowable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Succinct, human-readable, unique, and consistent representation of the error category.
     * </pre>
     *
     * <code>optional string error_class = 1;</code>
     * @return Whether the errorClass field is set.
     */
    boolean hasErrorClass();
    /**
     * <pre>
     * Succinct, human-readable, unique, and consistent representation of the error category.
     * </pre>
     *
     * <code>optional string error_class = 1;</code>
     * @return The errorClass.
     */
    String getErrorClass();
    /**
     * <pre>
     * Succinct, human-readable, unique, and consistent representation of the error category.
     * </pre>
     *
     * <code>optional string error_class = 1;</code>
     * @return The bytes for errorClass.
     */
    com.google.protobuf.ByteString
        getErrorClassBytes();

    /**
     * <pre>
     * The message parameters for the error framework.
     * </pre>
     *
     * <code>map&lt;string, string&gt; message_parameters = 2;</code>
     */
    int getMessageParametersCount();
    /**
     * <pre>
     * The message parameters for the error framework.
     * </pre>
     *
     * <code>map&lt;string, string&gt; message_parameters = 2;</code>
     */
    boolean containsMessageParameters(
        String key);
    /**
     * Use {@link #getMessageParametersMap()} instead.
     */
    @Deprecated
    java.util.Map<String, String>
    getMessageParameters();
    /**
     * <pre>
     * The message parameters for the error framework.
     * </pre>
     *
     * <code>map&lt;string, string&gt; message_parameters = 2;</code>
     */
    java.util.Map<String, String>
    getMessageParametersMap();
    /**
     * <pre>
     * The message parameters for the error framework.
     * </pre>
     *
     * <code>map&lt;string, string&gt; message_parameters = 2;</code>
     */
    /* nullable */
String getMessageParametersOrDefault(
        String key,
        /* nullable */
String defaultValue);
    /**
     * <pre>
     * The message parameters for the error framework.
     * </pre>
     *
     * <code>map&lt;string, string&gt; message_parameters = 2;</code>
     */
    String getMessageParametersOrThrow(
        String key);

    /**
     * <pre>
     * The query context of a SparkThrowable.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
     */
    java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext> 
        getQueryContextsList();
    /**
     * <pre>
     * The query context of a SparkThrowable.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
     */
    org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext getQueryContexts(int index);
    /**
     * <pre>
     * The query context of a SparkThrowable.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
     */
    int getQueryContextsCount();
    /**
     * <pre>
     * The query context of a SparkThrowable.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
     */
    java.util.List<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContextOrBuilder> 
        getQueryContextsOrBuilderList();
    /**
     * <pre>
     * The query context of a SparkThrowable.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
     */
    org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContextOrBuilder getQueryContextsOrBuilder(
        int index);

    /**
     * <pre>
     * Portable error identifier across SQL engines
     * If null, error class or SQLSTATE is not set.
     * </pre>
     *
     * <code>optional string sql_state = 4;</code>
     * @return Whether the sqlState field is set.
     */
    boolean hasSqlState();
    /**
     * <pre>
     * Portable error identifier across SQL engines
     * If null, error class or SQLSTATE is not set.
     * </pre>
     *
     * <code>optional string sql_state = 4;</code>
     * @return The sqlState.
     */
    String getSqlState();
    /**
     * <pre>
     * Portable error identifier across SQL engines
     * If null, error class or SQLSTATE is not set.
     * </pre>
     *
     * <code>optional string sql_state = 4;</code>
     * @return The bytes for sqlState.
     */
    com.google.protobuf.ByteString
        getSqlStateBytes();
  }
  /**
   * <pre>
   * SparkThrowable defines the schema for SparkThrowable exceptions.
   * </pre>
   *
   * Protobuf type {@code spark.connect.FetchErrorDetailsResponse.SparkThrowable}
   */
  public static final class SparkThrowable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.FetchErrorDetailsResponse.SparkThrowable)
      SparkThrowableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SparkThrowable.newBuilder() to construct.
    private SparkThrowable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SparkThrowable() {
      errorClass_ = "";
      queryContexts_ = java.util.Collections.emptyList();
      sqlState_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new SparkThrowable();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_SparkThrowable_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMessageParameters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_SparkThrowable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.class, org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.Builder.class);
    }

    private int bitField0_;
    public static final int ERROR_CLASS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile Object errorClass_ = "";
    /**
     * <pre>
     * Succinct, human-readable, unique, and consistent representation of the error category.
     * </pre>
     *
     * <code>optional string error_class = 1;</code>
     * @return Whether the errorClass field is set.
     */
    @Override
    public boolean hasErrorClass() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Succinct, human-readable, unique, and consistent representation of the error category.
     * </pre>
     *
     * <code>optional string error_class = 1;</code>
     * @return The errorClass.
     */
    @Override
    public String getErrorClass() {
      Object ref = errorClass_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        errorClass_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Succinct, human-readable, unique, and consistent representation of the error category.
     * </pre>
     *
     * <code>optional string error_class = 1;</code>
     * @return The bytes for errorClass.
     */
    @Override
    public com.google.protobuf.ByteString
        getErrorClassBytes() {
      Object ref = errorClass_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        errorClass_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MESSAGE_PARAMETERS_FIELD_NUMBER = 2;
    private static final class MessageParametersDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, String> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, String>newDefaultInstance(
                  org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_SparkThrowable_MessageParametersEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        String, String> messageParameters_;
    private com.google.protobuf.MapField<String, String>
    internalGetMessageParameters() {
      if (messageParameters_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MessageParametersDefaultEntryHolder.defaultEntry);
      }
      return messageParameters_;
    }
    public int getMessageParametersCount() {
      return internalGetMessageParameters().getMap().size();
    }
    /**
     * <pre>
     * The message parameters for the error framework.
     * </pre>
     *
     * <code>map&lt;string, string&gt; message_parameters = 2;</code>
     */
    @Override
    public boolean containsMessageParameters(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetMessageParameters().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMessageParametersMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, String> getMessageParameters() {
      return getMessageParametersMap();
    }
    /**
     * <pre>
     * The message parameters for the error framework.
     * </pre>
     *
     * <code>map&lt;string, string&gt; message_parameters = 2;</code>
     */
    @Override
    public java.util.Map<String, String> getMessageParametersMap() {
      return internalGetMessageParameters().getMap();
    }
    /**
     * <pre>
     * The message parameters for the error framework.
     * </pre>
     *
     * <code>map&lt;string, string&gt; message_parameters = 2;</code>
     */
    @Override
    public /* nullable */
String getMessageParametersOrDefault(
        String key,
        /* nullable */
String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetMessageParameters().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The message parameters for the error framework.
     * </pre>
     *
     * <code>map&lt;string, string&gt; message_parameters = 2;</code>
     */
    @Override
    public String getMessageParametersOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetMessageParameters().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int QUERY_CONTEXTS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext> queryContexts_;
    /**
     * <pre>
     * The query context of a SparkThrowable.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
     */
    @Override
    public java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext> getQueryContextsList() {
      return queryContexts_;
    }
    /**
     * <pre>
     * The query context of a SparkThrowable.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
     */
    @Override
    public java.util.List<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContextOrBuilder> 
        getQueryContextsOrBuilderList() {
      return queryContexts_;
    }
    /**
     * <pre>
     * The query context of a SparkThrowable.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
     */
    @Override
    public int getQueryContextsCount() {
      return queryContexts_.size();
    }
    /**
     * <pre>
     * The query context of a SparkThrowable.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
     */
    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext getQueryContexts(int index) {
      return queryContexts_.get(index);
    }
    /**
     * <pre>
     * The query context of a SparkThrowable.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
     */
    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContextOrBuilder getQueryContextsOrBuilder(
        int index) {
      return queryContexts_.get(index);
    }

    public static final int SQL_STATE_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile Object sqlState_ = "";
    /**
     * <pre>
     * Portable error identifier across SQL engines
     * If null, error class or SQLSTATE is not set.
     * </pre>
     *
     * <code>optional string sql_state = 4;</code>
     * @return Whether the sqlState field is set.
     */
    @Override
    public boolean hasSqlState() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Portable error identifier across SQL engines
     * If null, error class or SQLSTATE is not set.
     * </pre>
     *
     * <code>optional string sql_state = 4;</code>
     * @return The sqlState.
     */
    @Override
    public String getSqlState() {
      Object ref = sqlState_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        sqlState_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Portable error identifier across SQL engines
     * If null, error class or SQLSTATE is not set.
     * </pre>
     *
     * <code>optional string sql_state = 4;</code>
     * @return The bytes for sqlState.
     */
    @Override
    public com.google.protobuf.ByteString
        getSqlStateBytes() {
      Object ref = sqlState_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        sqlState_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, errorClass_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMessageParameters(),
          MessageParametersDefaultEntryHolder.defaultEntry,
          2);
      for (int i = 0; i < queryContexts_.size(); i++) {
        output.writeMessage(3, queryContexts_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, sqlState_);
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, errorClass_);
      }
      for (java.util.Map.Entry<String, String> entry
           : internalGetMessageParameters().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, String>
        messageParameters__ = MessageParametersDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, messageParameters__);
      }
      for (int i = 0; i < queryContexts_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, queryContexts_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, sqlState_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable other = (org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable) obj;

      if (hasErrorClass() != other.hasErrorClass()) return false;
      if (hasErrorClass()) {
        if (!getErrorClass()
            .equals(other.getErrorClass())) return false;
      }
      if (!internalGetMessageParameters().equals(
          other.internalGetMessageParameters())) return false;
      if (!getQueryContextsList()
          .equals(other.getQueryContextsList())) return false;
      if (hasSqlState() != other.hasSqlState()) return false;
      if (hasSqlState()) {
        if (!getSqlState()
            .equals(other.getSqlState())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasErrorClass()) {
        hash = (37 * hash) + ERROR_CLASS_FIELD_NUMBER;
        hash = (53 * hash) + getErrorClass().hashCode();
      }
      if (!internalGetMessageParameters().getMap().isEmpty()) {
        hash = (37 * hash) + MESSAGE_PARAMETERS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMessageParameters().hashCode();
      }
      if (getQueryContextsCount() > 0) {
        hash = (37 * hash) + QUERY_CONTEXTS_FIELD_NUMBER;
        hash = (53 * hash) + getQueryContextsList().hashCode();
      }
      if (hasSqlState()) {
        hash = (37 * hash) + SQL_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getSqlState().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SparkThrowable defines the schema for SparkThrowable exceptions.
     * </pre>
     *
     * Protobuf type {@code spark.connect.FetchErrorDetailsResponse.SparkThrowable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.FetchErrorDetailsResponse.SparkThrowable)
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_SparkThrowable_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMessageParameters();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMutableMessageParameters();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_SparkThrowable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.class, org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        errorClass_ = "";
        internalGetMutableMessageParameters().clear();
        if (queryContextsBuilder_ == null) {
          queryContexts_ = java.util.Collections.emptyList();
        } else {
          queryContexts_ = null;
          queryContextsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        sqlState_ = "";
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_SparkThrowable_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable build() {
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable buildPartial() {
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable result = new org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable result) {
        if (queryContextsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            queryContexts_ = java.util.Collections.unmodifiableList(queryContexts_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.queryContexts_ = queryContexts_;
        } else {
          result.queryContexts_ = queryContextsBuilder_.build();
        }
      }

      private void buildPartial0(org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.errorClass_ = errorClass_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.messageParameters_ = internalGetMessageParameters();
          result.messageParameters_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.sqlState_ = sqlState_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable) {
          return mergeFrom((org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable other) {
        if (other == org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.getDefaultInstance()) return this;
        if (other.hasErrorClass()) {
          errorClass_ = other.errorClass_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        internalGetMutableMessageParameters().mergeFrom(
            other.internalGetMessageParameters());
        bitField0_ |= 0x00000002;
        if (queryContextsBuilder_ == null) {
          if (!other.queryContexts_.isEmpty()) {
            if (queryContexts_.isEmpty()) {
              queryContexts_ = other.queryContexts_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureQueryContextsIsMutable();
              queryContexts_.addAll(other.queryContexts_);
            }
            onChanged();
          }
        } else {
          if (!other.queryContexts_.isEmpty()) {
            if (queryContextsBuilder_.isEmpty()) {
              queryContextsBuilder_.dispose();
              queryContextsBuilder_ = null;
              queryContexts_ = other.queryContexts_;
              bitField0_ = (bitField0_ & ~0x00000004);
              queryContextsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getQueryContextsFieldBuilder() : null;
            } else {
              queryContextsBuilder_.addAllMessages(other.queryContexts_);
            }
          }
        }
        if (other.hasSqlState()) {
          sqlState_ = other.sqlState_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                errorClass_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.google.protobuf.MapEntry<String, String>
                messageParameters__ = input.readMessage(
                    MessageParametersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableMessageParameters().getMutableMap().put(
                    messageParameters__.getKey(), messageParameters__.getValue());
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext m =
                    input.readMessage(
                        org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.parser(),
                        extensionRegistry);
                if (queryContextsBuilder_ == null) {
                  ensureQueryContextsIsMutable();
                  queryContexts_.add(m);
                } else {
                  queryContextsBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                sqlState_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private Object errorClass_ = "";
      /**
       * <pre>
       * Succinct, human-readable, unique, and consistent representation of the error category.
       * </pre>
       *
       * <code>optional string error_class = 1;</code>
       * @return Whether the errorClass field is set.
       */
      public boolean hasErrorClass() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Succinct, human-readable, unique, and consistent representation of the error category.
       * </pre>
       *
       * <code>optional string error_class = 1;</code>
       * @return The errorClass.
       */
      public String getErrorClass() {
        Object ref = errorClass_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          errorClass_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * Succinct, human-readable, unique, and consistent representation of the error category.
       * </pre>
       *
       * <code>optional string error_class = 1;</code>
       * @return The bytes for errorClass.
       */
      public com.google.protobuf.ByteString
          getErrorClassBytes() {
        Object ref = errorClass_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          errorClass_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Succinct, human-readable, unique, and consistent representation of the error category.
       * </pre>
       *
       * <code>optional string error_class = 1;</code>
       * @param value The errorClass to set.
       * @return This builder for chaining.
       */
      public Builder setErrorClass(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        errorClass_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Succinct, human-readable, unique, and consistent representation of the error category.
       * </pre>
       *
       * <code>optional string error_class = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorClass() {
        errorClass_ = getDefaultInstance().getErrorClass();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Succinct, human-readable, unique, and consistent representation of the error category.
       * </pre>
       *
       * <code>optional string error_class = 1;</code>
       * @param value The bytes for errorClass to set.
       * @return This builder for chaining.
       */
      public Builder setErrorClassBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        errorClass_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          String, String> messageParameters_;
      private com.google.protobuf.MapField<String, String>
          internalGetMessageParameters() {
        if (messageParameters_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MessageParametersDefaultEntryHolder.defaultEntry);
        }
        return messageParameters_;
      }
      private com.google.protobuf.MapField<String, String>
          internalGetMutableMessageParameters() {
        if (messageParameters_ == null) {
          messageParameters_ = com.google.protobuf.MapField.newMapField(
              MessageParametersDefaultEntryHolder.defaultEntry);
        }
        if (!messageParameters_.isMutable()) {
          messageParameters_ = messageParameters_.copy();
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return messageParameters_;
      }
      public int getMessageParametersCount() {
        return internalGetMessageParameters().getMap().size();
      }
      /**
       * <pre>
       * The message parameters for the error framework.
       * </pre>
       *
       * <code>map&lt;string, string&gt; message_parameters = 2;</code>
       */
      @Override
      public boolean containsMessageParameters(
          String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetMessageParameters().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMessageParametersMap()} instead.
       */
      @Override
      @Deprecated
      public java.util.Map<String, String> getMessageParameters() {
        return getMessageParametersMap();
      }
      /**
       * <pre>
       * The message parameters for the error framework.
       * </pre>
       *
       * <code>map&lt;string, string&gt; message_parameters = 2;</code>
       */
      @Override
      public java.util.Map<String, String> getMessageParametersMap() {
        return internalGetMessageParameters().getMap();
      }
      /**
       * <pre>
       * The message parameters for the error framework.
       * </pre>
       *
       * <code>map&lt;string, string&gt; message_parameters = 2;</code>
       */
      @Override
      public /* nullable */
String getMessageParametersOrDefault(
          String key,
          /* nullable */
String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<String, String> map =
            internalGetMessageParameters().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * The message parameters for the error framework.
       * </pre>
       *
       * <code>map&lt;string, string&gt; message_parameters = 2;</code>
       */
      @Override
      public String getMessageParametersOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<String, String> map =
            internalGetMessageParameters().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearMessageParameters() {
        bitField0_ = (bitField0_ & ~0x00000002);
        internalGetMutableMessageParameters().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * The message parameters for the error framework.
       * </pre>
       *
       * <code>map&lt;string, string&gt; message_parameters = 2;</code>
       */
      public Builder removeMessageParameters(
          String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableMessageParameters().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, String>
          getMutableMessageParameters() {
        bitField0_ |= 0x00000002;
        return internalGetMutableMessageParameters().getMutableMap();
      }
      /**
       * <pre>
       * The message parameters for the error framework.
       * </pre>
       *
       * <code>map&lt;string, string&gt; message_parameters = 2;</code>
       */
      public Builder putMessageParameters(
          String key,
          String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableMessageParameters().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * The message parameters for the error framework.
       * </pre>
       *
       * <code>map&lt;string, string&gt; message_parameters = 2;</code>
       */
      public Builder putAllMessageParameters(
          java.util.Map<String, String> values) {
        internalGetMutableMessageParameters().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000002;
        return this;
      }

      private java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext> queryContexts_ =
        java.util.Collections.emptyList();
      private void ensureQueryContextsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          queryContexts_ = new java.util.ArrayList<org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext>(queryContexts_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContextOrBuilder> queryContextsBuilder_;

      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext> getQueryContextsList() {
        if (queryContextsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(queryContexts_);
        } else {
          return queryContextsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public int getQueryContextsCount() {
        if (queryContextsBuilder_ == null) {
          return queryContexts_.size();
        } else {
          return queryContextsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext getQueryContexts(int index) {
        if (queryContextsBuilder_ == null) {
          return queryContexts_.get(index);
        } else {
          return queryContextsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public Builder setQueryContexts(
          int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext value) {
        if (queryContextsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQueryContextsIsMutable();
          queryContexts_.set(index, value);
          onChanged();
        } else {
          queryContextsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public Builder setQueryContexts(
          int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder builderForValue) {
        if (queryContextsBuilder_ == null) {
          ensureQueryContextsIsMutable();
          queryContexts_.set(index, builderForValue.build());
          onChanged();
        } else {
          queryContextsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public Builder addQueryContexts(org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext value) {
        if (queryContextsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQueryContextsIsMutable();
          queryContexts_.add(value);
          onChanged();
        } else {
          queryContextsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public Builder addQueryContexts(
          int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext value) {
        if (queryContextsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQueryContextsIsMutable();
          queryContexts_.add(index, value);
          onChanged();
        } else {
          queryContextsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public Builder addQueryContexts(
          org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder builderForValue) {
        if (queryContextsBuilder_ == null) {
          ensureQueryContextsIsMutable();
          queryContexts_.add(builderForValue.build());
          onChanged();
        } else {
          queryContextsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public Builder addQueryContexts(
          int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder builderForValue) {
        if (queryContextsBuilder_ == null) {
          ensureQueryContextsIsMutable();
          queryContexts_.add(index, builderForValue.build());
          onChanged();
        } else {
          queryContextsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public Builder addAllQueryContexts(
          Iterable<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext> values) {
        if (queryContextsBuilder_ == null) {
          ensureQueryContextsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, queryContexts_);
          onChanged();
        } else {
          queryContextsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public Builder clearQueryContexts() {
        if (queryContextsBuilder_ == null) {
          queryContexts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          queryContextsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public Builder removeQueryContexts(int index) {
        if (queryContextsBuilder_ == null) {
          ensureQueryContextsIsMutable();
          queryContexts_.remove(index);
          onChanged();
        } else {
          queryContextsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder getQueryContextsBuilder(
          int index) {
        return getQueryContextsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContextOrBuilder getQueryContextsOrBuilder(
          int index) {
        if (queryContextsBuilder_ == null) {
          return queryContexts_.get(index);  } else {
          return queryContextsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public java.util.List<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContextOrBuilder> 
           getQueryContextsOrBuilderList() {
        if (queryContextsBuilder_ != null) {
          return queryContextsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(queryContexts_);
        }
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder addQueryContextsBuilder() {
        return getQueryContextsFieldBuilder().addBuilder(
            org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.getDefaultInstance());
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder addQueryContextsBuilder(
          int index) {
        return getQueryContextsFieldBuilder().addBuilder(
            index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.getDefaultInstance());
      }
      /**
       * <pre>
       * The query context of a SparkThrowable.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.QueryContext query_contexts = 3;</code>
       */
      public java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder> 
           getQueryContextsBuilderList() {
        return getQueryContextsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContextOrBuilder> 
          getQueryContextsFieldBuilder() {
        if (queryContextsBuilder_ == null) {
          queryContextsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContext.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.QueryContextOrBuilder>(
                  queryContexts_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          queryContexts_ = null;
        }
        return queryContextsBuilder_;
      }

      private Object sqlState_ = "";
      /**
       * <pre>
       * Portable error identifier across SQL engines
       * If null, error class or SQLSTATE is not set.
       * </pre>
       *
       * <code>optional string sql_state = 4;</code>
       * @return Whether the sqlState field is set.
       */
      public boolean hasSqlState() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Portable error identifier across SQL engines
       * If null, error class or SQLSTATE is not set.
       * </pre>
       *
       * <code>optional string sql_state = 4;</code>
       * @return The sqlState.
       */
      public String getSqlState() {
        Object ref = sqlState_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          sqlState_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * Portable error identifier across SQL engines
       * If null, error class or SQLSTATE is not set.
       * </pre>
       *
       * <code>optional string sql_state = 4;</code>
       * @return The bytes for sqlState.
       */
      public com.google.protobuf.ByteString
          getSqlStateBytes() {
        Object ref = sqlState_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          sqlState_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Portable error identifier across SQL engines
       * If null, error class or SQLSTATE is not set.
       * </pre>
       *
       * <code>optional string sql_state = 4;</code>
       * @param value The sqlState to set.
       * @return This builder for chaining.
       */
      public Builder setSqlState(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        sqlState_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Portable error identifier across SQL engines
       * If null, error class or SQLSTATE is not set.
       * </pre>
       *
       * <code>optional string sql_state = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSqlState() {
        sqlState_ = getDefaultInstance().getSqlState();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Portable error identifier across SQL engines
       * If null, error class or SQLSTATE is not set.
       * </pre>
       *
       * <code>optional string sql_state = 4;</code>
       * @param value The bytes for sqlState to set.
       * @return This builder for chaining.
       */
      public Builder setSqlStateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        sqlState_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.FetchErrorDetailsResponse.SparkThrowable)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.FetchErrorDetailsResponse.SparkThrowable)
    private static final org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable();
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SparkThrowable>
        PARSER = new com.google.protobuf.AbstractParser<SparkThrowable>() {
      @Override
      public SparkThrowable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SparkThrowable> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<SparkThrowable> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ErrorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.FetchErrorDetailsResponse.Error)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The fully qualified names of the exception class and its parent classes.
     * </pre>
     *
     * <code>repeated string error_type_hierarchy = 1;</code>
     * @return A list containing the errorTypeHierarchy.
     */
    java.util.List<String>
        getErrorTypeHierarchyList();
    /**
     * <pre>
     * The fully qualified names of the exception class and its parent classes.
     * </pre>
     *
     * <code>repeated string error_type_hierarchy = 1;</code>
     * @return The count of errorTypeHierarchy.
     */
    int getErrorTypeHierarchyCount();
    /**
     * <pre>
     * The fully qualified names of the exception class and its parent classes.
     * </pre>
     *
     * <code>repeated string error_type_hierarchy = 1;</code>
     * @param index The index of the element to return.
     * @return The errorTypeHierarchy at the given index.
     */
    String getErrorTypeHierarchy(int index);
    /**
     * <pre>
     * The fully qualified names of the exception class and its parent classes.
     * </pre>
     *
     * <code>repeated string error_type_hierarchy = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the errorTypeHierarchy at the given index.
     */
    com.google.protobuf.ByteString
        getErrorTypeHierarchyBytes(int index);

    /**
     * <pre>
     * The detailed message of the exception.
     * </pre>
     *
     * <code>string message = 2;</code>
     * @return The message.
     */
    String getMessage();
    /**
     * <pre>
     * The detailed message of the exception.
     * </pre>
     *
     * <code>string message = 2;</code>
     * @return The bytes for message.
     */
    com.google.protobuf.ByteString
        getMessageBytes();

    /**
     * <pre>
     * The stackTrace of the exception. It will be set
     * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
     */
    java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement> 
        getStackTraceList();
    /**
     * <pre>
     * The stackTrace of the exception. It will be set
     * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
     */
    org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement getStackTrace(int index);
    /**
     * <pre>
     * The stackTrace of the exception. It will be set
     * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
     */
    int getStackTraceCount();
    /**
     * <pre>
     * The stackTrace of the exception. It will be set
     * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
     */
    java.util.List<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElementOrBuilder> 
        getStackTraceOrBuilderList();
    /**
     * <pre>
     * The stackTrace of the exception. It will be set
     * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
     */
    org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElementOrBuilder getStackTraceOrBuilder(
        int index);

    /**
     * <pre>
     * The index of the cause error in errors.
     * </pre>
     *
     * <code>optional int32 cause_idx = 4;</code>
     * @return Whether the causeIdx field is set.
     */
    boolean hasCauseIdx();
    /**
     * <pre>
     * The index of the cause error in errors.
     * </pre>
     *
     * <code>optional int32 cause_idx = 4;</code>
     * @return The causeIdx.
     */
    int getCauseIdx();

    /**
     * <pre>
     * The structured data of a SparkThrowable exception.
     * </pre>
     *
     * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
     * @return Whether the sparkThrowable field is set.
     */
    boolean hasSparkThrowable();
    /**
     * <pre>
     * The structured data of a SparkThrowable exception.
     * </pre>
     *
     * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
     * @return The sparkThrowable.
     */
    org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable getSparkThrowable();
    /**
     * <pre>
     * The structured data of a SparkThrowable exception.
     * </pre>
     *
     * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
     */
    org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowableOrBuilder getSparkThrowableOrBuilder();
  }
  /**
   * <pre>
   * Error defines the schema for the representing exception.
   * </pre>
   *
   * Protobuf type {@code spark.connect.FetchErrorDetailsResponse.Error}
   */
  public static final class Error extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.FetchErrorDetailsResponse.Error)
      ErrorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Error.newBuilder() to construct.
    private Error(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Error() {
      errorTypeHierarchy_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      message_ = "";
      stackTrace_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Error();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_Error_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_Error_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.class, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder.class);
    }

    private int bitField0_;
    public static final int ERROR_TYPE_HIERARCHY_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList errorTypeHierarchy_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * The fully qualified names of the exception class and its parent classes.
     * </pre>
     *
     * <code>repeated string error_type_hierarchy = 1;</code>
     * @return A list containing the errorTypeHierarchy.
     */
    public com.google.protobuf.ProtocolStringList
        getErrorTypeHierarchyList() {
      return errorTypeHierarchy_;
    }
    /**
     * <pre>
     * The fully qualified names of the exception class and its parent classes.
     * </pre>
     *
     * <code>repeated string error_type_hierarchy = 1;</code>
     * @return The count of errorTypeHierarchy.
     */
    public int getErrorTypeHierarchyCount() {
      return errorTypeHierarchy_.size();
    }
    /**
     * <pre>
     * The fully qualified names of the exception class and its parent classes.
     * </pre>
     *
     * <code>repeated string error_type_hierarchy = 1;</code>
     * @param index The index of the element to return.
     * @return The errorTypeHierarchy at the given index.
     */
    public String getErrorTypeHierarchy(int index) {
      return errorTypeHierarchy_.get(index);
    }
    /**
     * <pre>
     * The fully qualified names of the exception class and its parent classes.
     * </pre>
     *
     * <code>repeated string error_type_hierarchy = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the errorTypeHierarchy at the given index.
     */
    public com.google.protobuf.ByteString
        getErrorTypeHierarchyBytes(int index) {
      return errorTypeHierarchy_.getByteString(index);
    }

    public static final int MESSAGE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile Object message_ = "";
    /**
     * <pre>
     * The detailed message of the exception.
     * </pre>
     *
     * <code>string message = 2;</code>
     * @return The message.
     */
    @Override
    public String getMessage() {
      Object ref = message_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        message_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The detailed message of the exception.
     * </pre>
     *
     * <code>string message = 2;</code>
     * @return The bytes for message.
     */
    @Override
    public com.google.protobuf.ByteString
        getMessageBytes() {
      Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STACK_TRACE_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement> stackTrace_;
    /**
     * <pre>
     * The stackTrace of the exception. It will be set
     * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
     */
    @Override
    public java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement> getStackTraceList() {
      return stackTrace_;
    }
    /**
     * <pre>
     * The stackTrace of the exception. It will be set
     * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
     */
    @Override
    public java.util.List<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElementOrBuilder> 
        getStackTraceOrBuilderList() {
      return stackTrace_;
    }
    /**
     * <pre>
     * The stackTrace of the exception. It will be set
     * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
     */
    @Override
    public int getStackTraceCount() {
      return stackTrace_.size();
    }
    /**
     * <pre>
     * The stackTrace of the exception. It will be set
     * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
     */
    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement getStackTrace(int index) {
      return stackTrace_.get(index);
    }
    /**
     * <pre>
     * The stackTrace of the exception. It will be set
     * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
     */
    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElementOrBuilder getStackTraceOrBuilder(
        int index) {
      return stackTrace_.get(index);
    }

    public static final int CAUSE_IDX_FIELD_NUMBER = 4;
    private int causeIdx_ = 0;
    /**
     * <pre>
     * The index of the cause error in errors.
     * </pre>
     *
     * <code>optional int32 cause_idx = 4;</code>
     * @return Whether the causeIdx field is set.
     */
    @Override
    public boolean hasCauseIdx() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The index of the cause error in errors.
     * </pre>
     *
     * <code>optional int32 cause_idx = 4;</code>
     * @return The causeIdx.
     */
    @Override
    public int getCauseIdx() {
      return causeIdx_;
    }

    public static final int SPARK_THROWABLE_FIELD_NUMBER = 5;
    private org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable sparkThrowable_;
    /**
     * <pre>
     * The structured data of a SparkThrowable exception.
     * </pre>
     *
     * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
     * @return Whether the sparkThrowable field is set.
     */
    @Override
    public boolean hasSparkThrowable() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The structured data of a SparkThrowable exception.
     * </pre>
     *
     * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
     * @return The sparkThrowable.
     */
    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable getSparkThrowable() {
      return sparkThrowable_ == null ? org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.getDefaultInstance() : sparkThrowable_;
    }
    /**
     * <pre>
     * The structured data of a SparkThrowable exception.
     * </pre>
     *
     * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
     */
    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowableOrBuilder getSparkThrowableOrBuilder() {
      return sparkThrowable_ == null ? org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.getDefaultInstance() : sparkThrowable_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < errorTypeHierarchy_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, errorTypeHierarchy_.getRaw(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(message_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, message_);
      }
      for (int i = 0; i < stackTrace_.size(); i++) {
        output.writeMessage(3, stackTrace_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(4, causeIdx_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(5, getSparkThrowable());
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < errorTypeHierarchy_.size(); i++) {
          dataSize += computeStringSizeNoTag(errorTypeHierarchy_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getErrorTypeHierarchyList().size();
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(message_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, message_);
      }
      for (int i = 0; i < stackTrace_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, stackTrace_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, causeIdx_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSparkThrowable());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error other = (org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error) obj;

      if (!getErrorTypeHierarchyList()
          .equals(other.getErrorTypeHierarchyList())) return false;
      if (!getMessage()
          .equals(other.getMessage())) return false;
      if (!getStackTraceList()
          .equals(other.getStackTraceList())) return false;
      if (hasCauseIdx() != other.hasCauseIdx()) return false;
      if (hasCauseIdx()) {
        if (getCauseIdx()
            != other.getCauseIdx()) return false;
      }
      if (hasSparkThrowable() != other.hasSparkThrowable()) return false;
      if (hasSparkThrowable()) {
        if (!getSparkThrowable()
            .equals(other.getSparkThrowable())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getErrorTypeHierarchyCount() > 0) {
        hash = (37 * hash) + ERROR_TYPE_HIERARCHY_FIELD_NUMBER;
        hash = (53 * hash) + getErrorTypeHierarchyList().hashCode();
      }
      hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + getMessage().hashCode();
      if (getStackTraceCount() > 0) {
        hash = (37 * hash) + STACK_TRACE_FIELD_NUMBER;
        hash = (53 * hash) + getStackTraceList().hashCode();
      }
      if (hasCauseIdx()) {
        hash = (37 * hash) + CAUSE_IDX_FIELD_NUMBER;
        hash = (53 * hash) + getCauseIdx();
      }
      if (hasSparkThrowable()) {
        hash = (37 * hash) + SPARK_THROWABLE_FIELD_NUMBER;
        hash = (53 * hash) + getSparkThrowable().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Error defines the schema for the representing exception.
     * </pre>
     *
     * Protobuf type {@code spark.connect.FetchErrorDetailsResponse.Error}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.FetchErrorDetailsResponse.Error)
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.ErrorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_Error_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_Error_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.class, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getStackTraceFieldBuilder();
          getSparkThrowableFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        errorTypeHierarchy_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        message_ = "";
        if (stackTraceBuilder_ == null) {
          stackTrace_ = java.util.Collections.emptyList();
        } else {
          stackTrace_ = null;
          stackTraceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        causeIdx_ = 0;
        sparkThrowable_ = null;
        if (sparkThrowableBuilder_ != null) {
          sparkThrowableBuilder_.dispose();
          sparkThrowableBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_Error_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error build() {
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error buildPartial() {
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error result = new org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error result) {
        if (stackTraceBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            stackTrace_ = java.util.Collections.unmodifiableList(stackTrace_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.stackTrace_ = stackTrace_;
        } else {
          result.stackTrace_ = stackTraceBuilder_.build();
        }
      }

      private void buildPartial0(org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          errorTypeHierarchy_.makeImmutable();
          result.errorTypeHierarchy_ = errorTypeHierarchy_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.message_ = message_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.causeIdx_ = causeIdx_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.sparkThrowable_ = sparkThrowableBuilder_ == null
              ? sparkThrowable_
              : sparkThrowableBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error) {
          return mergeFrom((org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error other) {
        if (other == org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.getDefaultInstance()) return this;
        if (!other.errorTypeHierarchy_.isEmpty()) {
          if (errorTypeHierarchy_.isEmpty()) {
            errorTypeHierarchy_ = other.errorTypeHierarchy_;
            bitField0_ |= 0x00000001;
          } else {
            ensureErrorTypeHierarchyIsMutable();
            errorTypeHierarchy_.addAll(other.errorTypeHierarchy_);
          }
          onChanged();
        }
        if (!other.getMessage().isEmpty()) {
          message_ = other.message_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (stackTraceBuilder_ == null) {
          if (!other.stackTrace_.isEmpty()) {
            if (stackTrace_.isEmpty()) {
              stackTrace_ = other.stackTrace_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureStackTraceIsMutable();
              stackTrace_.addAll(other.stackTrace_);
            }
            onChanged();
          }
        } else {
          if (!other.stackTrace_.isEmpty()) {
            if (stackTraceBuilder_.isEmpty()) {
              stackTraceBuilder_.dispose();
              stackTraceBuilder_ = null;
              stackTrace_ = other.stackTrace_;
              bitField0_ = (bitField0_ & ~0x00000004);
              stackTraceBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getStackTraceFieldBuilder() : null;
            } else {
              stackTraceBuilder_.addAllMessages(other.stackTrace_);
            }
          }
        }
        if (other.hasCauseIdx()) {
          setCauseIdx(other.getCauseIdx());
        }
        if (other.hasSparkThrowable()) {
          mergeSparkThrowable(other.getSparkThrowable());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                String s = input.readStringRequireUtf8();
                ensureErrorTypeHierarchyIsMutable();
                errorTypeHierarchy_.add(s);
                break;
              } // case 10
              case 18: {
                message_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement m =
                    input.readMessage(
                        org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.parser(),
                        extensionRegistry);
                if (stackTraceBuilder_ == null) {
                  ensureStackTraceIsMutable();
                  stackTrace_.add(m);
                } else {
                  stackTraceBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 32: {
                causeIdx_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                input.readMessage(
                    getSparkThrowableFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringArrayList errorTypeHierarchy_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureErrorTypeHierarchyIsMutable() {
        if (!errorTypeHierarchy_.isModifiable()) {
          errorTypeHierarchy_ = new com.google.protobuf.LazyStringArrayList(errorTypeHierarchy_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * The fully qualified names of the exception class and its parent classes.
       * </pre>
       *
       * <code>repeated string error_type_hierarchy = 1;</code>
       * @return A list containing the errorTypeHierarchy.
       */
      public com.google.protobuf.ProtocolStringList
          getErrorTypeHierarchyList() {
        errorTypeHierarchy_.makeImmutable();
        return errorTypeHierarchy_;
      }
      /**
       * <pre>
       * The fully qualified names of the exception class and its parent classes.
       * </pre>
       *
       * <code>repeated string error_type_hierarchy = 1;</code>
       * @return The count of errorTypeHierarchy.
       */
      public int getErrorTypeHierarchyCount() {
        return errorTypeHierarchy_.size();
      }
      /**
       * <pre>
       * The fully qualified names of the exception class and its parent classes.
       * </pre>
       *
       * <code>repeated string error_type_hierarchy = 1;</code>
       * @param index The index of the element to return.
       * @return The errorTypeHierarchy at the given index.
       */
      public String getErrorTypeHierarchy(int index) {
        return errorTypeHierarchy_.get(index);
      }
      /**
       * <pre>
       * The fully qualified names of the exception class and its parent classes.
       * </pre>
       *
       * <code>repeated string error_type_hierarchy = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the errorTypeHierarchy at the given index.
       */
      public com.google.protobuf.ByteString
          getErrorTypeHierarchyBytes(int index) {
        return errorTypeHierarchy_.getByteString(index);
      }
      /**
       * <pre>
       * The fully qualified names of the exception class and its parent classes.
       * </pre>
       *
       * <code>repeated string error_type_hierarchy = 1;</code>
       * @param index The index to set the value at.
       * @param value The errorTypeHierarchy to set.
       * @return This builder for chaining.
       */
      public Builder setErrorTypeHierarchy(
          int index, String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureErrorTypeHierarchyIsMutable();
        errorTypeHierarchy_.set(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The fully qualified names of the exception class and its parent classes.
       * </pre>
       *
       * <code>repeated string error_type_hierarchy = 1;</code>
       * @param value The errorTypeHierarchy to add.
       * @return This builder for chaining.
       */
      public Builder addErrorTypeHierarchy(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureErrorTypeHierarchyIsMutable();
        errorTypeHierarchy_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The fully qualified names of the exception class and its parent classes.
       * </pre>
       *
       * <code>repeated string error_type_hierarchy = 1;</code>
       * @param values The errorTypeHierarchy to add.
       * @return This builder for chaining.
       */
      public Builder addAllErrorTypeHierarchy(
          Iterable<String> values) {
        ensureErrorTypeHierarchyIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, errorTypeHierarchy_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The fully qualified names of the exception class and its parent classes.
       * </pre>
       *
       * <code>repeated string error_type_hierarchy = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorTypeHierarchy() {
        errorTypeHierarchy_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The fully qualified names of the exception class and its parent classes.
       * </pre>
       *
       * <code>repeated string error_type_hierarchy = 1;</code>
       * @param value The bytes of the errorTypeHierarchy to add.
       * @return This builder for chaining.
       */
      public Builder addErrorTypeHierarchyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureErrorTypeHierarchyIsMutable();
        errorTypeHierarchy_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private Object message_ = "";
      /**
       * <pre>
       * The detailed message of the exception.
       * </pre>
       *
       * <code>string message = 2;</code>
       * @return The message.
       */
      public String getMessage() {
        Object ref = message_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The detailed message of the exception.
       * </pre>
       *
       * <code>string message = 2;</code>
       * @return The bytes for message.
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The detailed message of the exception.
       * </pre>
       *
       * <code>string message = 2;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The detailed message of the exception.
       * </pre>
       *
       * <code>string message = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        message_ = getDefaultInstance().getMessage();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The detailed message of the exception.
       * </pre>
       *
       * <code>string message = 2;</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        message_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement> stackTrace_ =
        java.util.Collections.emptyList();
      private void ensureStackTraceIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          stackTrace_ = new java.util.ArrayList<org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement>(stackTrace_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElementOrBuilder> stackTraceBuilder_;

      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement> getStackTraceList() {
        if (stackTraceBuilder_ == null) {
          return java.util.Collections.unmodifiableList(stackTrace_);
        } else {
          return stackTraceBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public int getStackTraceCount() {
        if (stackTraceBuilder_ == null) {
          return stackTrace_.size();
        } else {
          return stackTraceBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement getStackTrace(int index) {
        if (stackTraceBuilder_ == null) {
          return stackTrace_.get(index);
        } else {
          return stackTraceBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public Builder setStackTrace(
          int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement value) {
        if (stackTraceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStackTraceIsMutable();
          stackTrace_.set(index, value);
          onChanged();
        } else {
          stackTraceBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public Builder setStackTrace(
          int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder builderForValue) {
        if (stackTraceBuilder_ == null) {
          ensureStackTraceIsMutable();
          stackTrace_.set(index, builderForValue.build());
          onChanged();
        } else {
          stackTraceBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public Builder addStackTrace(org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement value) {
        if (stackTraceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStackTraceIsMutable();
          stackTrace_.add(value);
          onChanged();
        } else {
          stackTraceBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public Builder addStackTrace(
          int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement value) {
        if (stackTraceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStackTraceIsMutable();
          stackTrace_.add(index, value);
          onChanged();
        } else {
          stackTraceBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public Builder addStackTrace(
          org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder builderForValue) {
        if (stackTraceBuilder_ == null) {
          ensureStackTraceIsMutable();
          stackTrace_.add(builderForValue.build());
          onChanged();
        } else {
          stackTraceBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public Builder addStackTrace(
          int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder builderForValue) {
        if (stackTraceBuilder_ == null) {
          ensureStackTraceIsMutable();
          stackTrace_.add(index, builderForValue.build());
          onChanged();
        } else {
          stackTraceBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public Builder addAllStackTrace(
          Iterable<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement> values) {
        if (stackTraceBuilder_ == null) {
          ensureStackTraceIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, stackTrace_);
          onChanged();
        } else {
          stackTraceBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public Builder clearStackTrace() {
        if (stackTraceBuilder_ == null) {
          stackTrace_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          stackTraceBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public Builder removeStackTrace(int index) {
        if (stackTraceBuilder_ == null) {
          ensureStackTraceIsMutable();
          stackTrace_.remove(index);
          onChanged();
        } else {
          stackTraceBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder getStackTraceBuilder(
          int index) {
        return getStackTraceFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElementOrBuilder getStackTraceOrBuilder(
          int index) {
        if (stackTraceBuilder_ == null) {
          return stackTrace_.get(index);  } else {
          return stackTraceBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public java.util.List<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElementOrBuilder> 
           getStackTraceOrBuilderList() {
        if (stackTraceBuilder_ != null) {
          return stackTraceBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(stackTrace_);
        }
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder addStackTraceBuilder() {
        return getStackTraceFieldBuilder().addBuilder(
            org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.getDefaultInstance());
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder addStackTraceBuilder(
          int index) {
        return getStackTraceFieldBuilder().addBuilder(
            index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.getDefaultInstance());
      }
      /**
       * <pre>
       * The stackTrace of the exception. It will be set
       * if the SQLConf spark.sql.connect.serverStacktrace.enabled is true.
       * </pre>
       *
       * <code>repeated .spark.connect.FetchErrorDetailsResponse.StackTraceElement stack_trace = 3;</code>
       */
      public java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder> 
           getStackTraceBuilderList() {
        return getStackTraceFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElementOrBuilder> 
          getStackTraceFieldBuilder() {
        if (stackTraceBuilder_ == null) {
          stackTraceBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElement.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.StackTraceElementOrBuilder>(
                  stackTrace_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          stackTrace_ = null;
        }
        return stackTraceBuilder_;
      }

      private int causeIdx_ ;
      /**
       * <pre>
       * The index of the cause error in errors.
       * </pre>
       *
       * <code>optional int32 cause_idx = 4;</code>
       * @return Whether the causeIdx field is set.
       */
      @Override
      public boolean hasCauseIdx() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The index of the cause error in errors.
       * </pre>
       *
       * <code>optional int32 cause_idx = 4;</code>
       * @return The causeIdx.
       */
      @Override
      public int getCauseIdx() {
        return causeIdx_;
      }
      /**
       * <pre>
       * The index of the cause error in errors.
       * </pre>
       *
       * <code>optional int32 cause_idx = 4;</code>
       * @param value The causeIdx to set.
       * @return This builder for chaining.
       */
      public Builder setCauseIdx(int value) {

        causeIdx_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The index of the cause error in errors.
       * </pre>
       *
       * <code>optional int32 cause_idx = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCauseIdx() {
        bitField0_ = (bitField0_ & ~0x00000008);
        causeIdx_ = 0;
        onChanged();
        return this;
      }

      private org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable sparkThrowable_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable, org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowableOrBuilder> sparkThrowableBuilder_;
      /**
       * <pre>
       * The structured data of a SparkThrowable exception.
       * </pre>
       *
       * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
       * @return Whether the sparkThrowable field is set.
       */
      public boolean hasSparkThrowable() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The structured data of a SparkThrowable exception.
       * </pre>
       *
       * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
       * @return The sparkThrowable.
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable getSparkThrowable() {
        if (sparkThrowableBuilder_ == null) {
          return sparkThrowable_ == null ? org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.getDefaultInstance() : sparkThrowable_;
        } else {
          return sparkThrowableBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The structured data of a SparkThrowable exception.
       * </pre>
       *
       * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
       */
      public Builder setSparkThrowable(org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable value) {
        if (sparkThrowableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sparkThrowable_ = value;
        } else {
          sparkThrowableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The structured data of a SparkThrowable exception.
       * </pre>
       *
       * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
       */
      public Builder setSparkThrowable(
          org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.Builder builderForValue) {
        if (sparkThrowableBuilder_ == null) {
          sparkThrowable_ = builderForValue.build();
        } else {
          sparkThrowableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The structured data of a SparkThrowable exception.
       * </pre>
       *
       * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
       */
      public Builder mergeSparkThrowable(org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable value) {
        if (sparkThrowableBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            sparkThrowable_ != null &&
            sparkThrowable_ != org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.getDefaultInstance()) {
            getSparkThrowableBuilder().mergeFrom(value);
          } else {
            sparkThrowable_ = value;
          }
        } else {
          sparkThrowableBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The structured data of a SparkThrowable exception.
       * </pre>
       *
       * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
       */
      public Builder clearSparkThrowable() {
        bitField0_ = (bitField0_ & ~0x00000010);
        sparkThrowable_ = null;
        if (sparkThrowableBuilder_ != null) {
          sparkThrowableBuilder_.dispose();
          sparkThrowableBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The structured data of a SparkThrowable exception.
       * </pre>
       *
       * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.Builder getSparkThrowableBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getSparkThrowableFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The structured data of a SparkThrowable exception.
       * </pre>
       *
       * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
       */
      public org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowableOrBuilder getSparkThrowableOrBuilder() {
        if (sparkThrowableBuilder_ != null) {
          return sparkThrowableBuilder_.getMessageOrBuilder();
        } else {
          return sparkThrowable_ == null ?
              org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.getDefaultInstance() : sparkThrowable_;
        }
      }
      /**
       * <pre>
       * The structured data of a SparkThrowable exception.
       * </pre>
       *
       * <code>optional .spark.connect.FetchErrorDetailsResponse.SparkThrowable spark_throwable = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable, org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowableOrBuilder> 
          getSparkThrowableFieldBuilder() {
        if (sparkThrowableBuilder_ == null) {
          sparkThrowableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable, org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowable.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.SparkThrowableOrBuilder>(
                  getSparkThrowable(),
                  getParentForChildren(),
                  isClean());
          sparkThrowable_ = null;
        }
        return sparkThrowableBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.FetchErrorDetailsResponse.Error)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.FetchErrorDetailsResponse.Error)
    private static final org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error();
    }

    public static org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Error>
        PARSER = new com.google.protobuf.AbstractParser<Error>() {
      @Override
      public Error parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Error> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Error> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int ROOT_ERROR_IDX_FIELD_NUMBER = 1;
  private int rootErrorIdx_ = 0;
  /**
   * <pre>
   * The index of the root error in errors. The field will not be set if the error is not found.
   * </pre>
   *
   * <code>optional int32 root_error_idx = 1;</code>
   * @return Whether the rootErrorIdx field is set.
   */
  @Override
  public boolean hasRootErrorIdx() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The index of the root error in errors. The field will not be set if the error is not found.
   * </pre>
   *
   * <code>optional int32 root_error_idx = 1;</code>
   * @return The rootErrorIdx.
   */
  @Override
  public int getRootErrorIdx() {
    return rootErrorIdx_;
  }

  public static final int ERRORS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error> errors_;
  /**
   * <pre>
   * A list of errors.
   * </pre>
   *
   * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error> getErrorsList() {
    return errors_;
  }
  /**
   * <pre>
   * A list of errors.
   * </pre>
   *
   * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.ErrorOrBuilder> 
      getErrorsOrBuilderList() {
    return errors_;
  }
  /**
   * <pre>
   * A list of errors.
   * </pre>
   *
   * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
   */
  @Override
  public int getErrorsCount() {
    return errors_.size();
  }
  /**
   * <pre>
   * A list of errors.
   * </pre>
   *
   * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error getErrors(int index) {
    return errors_.get(index);
  }
  /**
   * <pre>
   * A list of errors.
   * </pre>
   *
   * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.FetchErrorDetailsResponse.ErrorOrBuilder getErrorsOrBuilder(
      int index) {
    return errors_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeInt32(1, rootErrorIdx_);
    }
    for (int i = 0; i < errors_.size(); i++) {
      output.writeMessage(2, errors_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, rootErrorIdx_);
    }
    for (int i = 0; i < errors_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, errors_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.FetchErrorDetailsResponse)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.FetchErrorDetailsResponse other = (org.apache.spark.connect.proto.FetchErrorDetailsResponse) obj;

    if (hasRootErrorIdx() != other.hasRootErrorIdx()) return false;
    if (hasRootErrorIdx()) {
      if (getRootErrorIdx()
          != other.getRootErrorIdx()) return false;
    }
    if (!getErrorsList()
        .equals(other.getErrorsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasRootErrorIdx()) {
      hash = (37 * hash) + ROOT_ERROR_IDX_FIELD_NUMBER;
      hash = (53 * hash) + getRootErrorIdx();
    }
    if (getErrorsCount() > 0) {
      hash = (37 * hash) + ERRORS_FIELD_NUMBER;
      hash = (53 * hash) + getErrorsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.FetchErrorDetailsResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code spark.connect.FetchErrorDetailsResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.FetchErrorDetailsResponse)
      org.apache.spark.connect.proto.FetchErrorDetailsResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.FetchErrorDetailsResponse.class, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.FetchErrorDetailsResponse.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      rootErrorIdx_ = 0;
      if (errorsBuilder_ == null) {
        errors_ = java.util.Collections.emptyList();
      } else {
        errors_ = null;
        errorsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsResponse_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.FetchErrorDetailsResponse.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse build() {
      org.apache.spark.connect.proto.FetchErrorDetailsResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse buildPartial() {
      org.apache.spark.connect.proto.FetchErrorDetailsResponse result = new org.apache.spark.connect.proto.FetchErrorDetailsResponse(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.apache.spark.connect.proto.FetchErrorDetailsResponse result) {
      if (errorsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          errors_ = java.util.Collections.unmodifiableList(errors_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.errors_ = errors_;
      } else {
        result.errors_ = errorsBuilder_.build();
      }
    }

    private void buildPartial0(org.apache.spark.connect.proto.FetchErrorDetailsResponse result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.rootErrorIdx_ = rootErrorIdx_;
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.FetchErrorDetailsResponse) {
        return mergeFrom((org.apache.spark.connect.proto.FetchErrorDetailsResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.FetchErrorDetailsResponse other) {
      if (other == org.apache.spark.connect.proto.FetchErrorDetailsResponse.getDefaultInstance()) return this;
      if (other.hasRootErrorIdx()) {
        setRootErrorIdx(other.getRootErrorIdx());
      }
      if (errorsBuilder_ == null) {
        if (!other.errors_.isEmpty()) {
          if (errors_.isEmpty()) {
            errors_ = other.errors_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureErrorsIsMutable();
            errors_.addAll(other.errors_);
          }
          onChanged();
        }
      } else {
        if (!other.errors_.isEmpty()) {
          if (errorsBuilder_.isEmpty()) {
            errorsBuilder_.dispose();
            errorsBuilder_ = null;
            errors_ = other.errors_;
            bitField0_ = (bitField0_ & ~0x00000002);
            errorsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getErrorsFieldBuilder() : null;
          } else {
            errorsBuilder_.addAllMessages(other.errors_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              rootErrorIdx_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error m =
                  input.readMessage(
                      org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.parser(),
                      extensionRegistry);
              if (errorsBuilder_ == null) {
                ensureErrorsIsMutable();
                errors_.add(m);
              } else {
                errorsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int rootErrorIdx_ ;
    /**
     * <pre>
     * The index of the root error in errors. The field will not be set if the error is not found.
     * </pre>
     *
     * <code>optional int32 root_error_idx = 1;</code>
     * @return Whether the rootErrorIdx field is set.
     */
    @Override
    public boolean hasRootErrorIdx() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The index of the root error in errors. The field will not be set if the error is not found.
     * </pre>
     *
     * <code>optional int32 root_error_idx = 1;</code>
     * @return The rootErrorIdx.
     */
    @Override
    public int getRootErrorIdx() {
      return rootErrorIdx_;
    }
    /**
     * <pre>
     * The index of the root error in errors. The field will not be set if the error is not found.
     * </pre>
     *
     * <code>optional int32 root_error_idx = 1;</code>
     * @param value The rootErrorIdx to set.
     * @return This builder for chaining.
     */
    public Builder setRootErrorIdx(int value) {

      rootErrorIdx_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The index of the root error in errors. The field will not be set if the error is not found.
     * </pre>
     *
     * <code>optional int32 root_error_idx = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearRootErrorIdx() {
      bitField0_ = (bitField0_ & ~0x00000001);
      rootErrorIdx_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error> errors_ =
      java.util.Collections.emptyList();
    private void ensureErrorsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        errors_ = new java.util.ArrayList<org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error>(errors_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.ErrorOrBuilder> errorsBuilder_;

    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error> getErrorsList() {
      if (errorsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(errors_);
      } else {
        return errorsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public int getErrorsCount() {
      if (errorsBuilder_ == null) {
        return errors_.size();
      } else {
        return errorsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error getErrors(int index) {
      if (errorsBuilder_ == null) {
        return errors_.get(index);
      } else {
        return errorsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public Builder setErrors(
        int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error value) {
      if (errorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureErrorsIsMutable();
        errors_.set(index, value);
        onChanged();
      } else {
        errorsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public Builder setErrors(
        int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder builderForValue) {
      if (errorsBuilder_ == null) {
        ensureErrorsIsMutable();
        errors_.set(index, builderForValue.build());
        onChanged();
      } else {
        errorsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public Builder addErrors(org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error value) {
      if (errorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureErrorsIsMutable();
        errors_.add(value);
        onChanged();
      } else {
        errorsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public Builder addErrors(
        int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error value) {
      if (errorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureErrorsIsMutable();
        errors_.add(index, value);
        onChanged();
      } else {
        errorsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public Builder addErrors(
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder builderForValue) {
      if (errorsBuilder_ == null) {
        ensureErrorsIsMutable();
        errors_.add(builderForValue.build());
        onChanged();
      } else {
        errorsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public Builder addErrors(
        int index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder builderForValue) {
      if (errorsBuilder_ == null) {
        ensureErrorsIsMutable();
        errors_.add(index, builderForValue.build());
        onChanged();
      } else {
        errorsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public Builder addAllErrors(
        Iterable<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error> values) {
      if (errorsBuilder_ == null) {
        ensureErrorsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, errors_);
        onChanged();
      } else {
        errorsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public Builder clearErrors() {
      if (errorsBuilder_ == null) {
        errors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        errorsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public Builder removeErrors(int index) {
      if (errorsBuilder_ == null) {
        ensureErrorsIsMutable();
        errors_.remove(index);
        onChanged();
      } else {
        errorsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder getErrorsBuilder(
        int index) {
      return getErrorsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.ErrorOrBuilder getErrorsOrBuilder(
        int index) {
      if (errorsBuilder_ == null) {
        return errors_.get(index);  } else {
        return errorsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.FetchErrorDetailsResponse.ErrorOrBuilder> 
         getErrorsOrBuilderList() {
      if (errorsBuilder_ != null) {
        return errorsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(errors_);
      }
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder addErrorsBuilder() {
      return getErrorsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder addErrorsBuilder(
        int index) {
      return getErrorsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of errors.
     * </pre>
     *
     * <code>repeated .spark.connect.FetchErrorDetailsResponse.Error errors = 2;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder> 
         getErrorsBuilderList() {
      return getErrorsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.ErrorOrBuilder> 
        getErrorsFieldBuilder() {
      if (errorsBuilder_ == null) {
        errorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error, org.apache.spark.connect.proto.FetchErrorDetailsResponse.Error.Builder, org.apache.spark.connect.proto.FetchErrorDetailsResponse.ErrorOrBuilder>(
                errors_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        errors_ = null;
      }
      return errorsBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.FetchErrorDetailsResponse)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.FetchErrorDetailsResponse)
  private static final org.apache.spark.connect.proto.FetchErrorDetailsResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.FetchErrorDetailsResponse();
  }

  public static org.apache.spark.connect.proto.FetchErrorDetailsResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FetchErrorDetailsResponse>
      PARSER = new com.google.protobuf.AbstractParser<FetchErrorDetailsResponse>() {
    @Override
    public FetchErrorDetailsResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<FetchErrorDetailsResponse> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<FetchErrorDetailsResponse> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.FetchErrorDetailsResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

