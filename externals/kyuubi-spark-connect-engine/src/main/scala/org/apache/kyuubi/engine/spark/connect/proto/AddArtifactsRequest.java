// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Request to transfer client-local artifacts.
 * </pre>
 *
 * Protobuf type {@code spark.connect.AddArtifactsRequest}
 */
public final class AddArtifactsRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.AddArtifactsRequest)
    AddArtifactsRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AddArtifactsRequest.newBuilder() to construct.
  private AddArtifactsRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AddArtifactsRequest() {
    sessionId_ = "";
    clientType_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new AddArtifactsRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.AddArtifactsRequest.class, org.apache.spark.connect.proto.AddArtifactsRequest.Builder.class);
  }

  public interface ArtifactChunkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.AddArtifactsRequest.ArtifactChunk)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Data chunk.
     * </pre>
     *
     * <code>bytes data = 1;</code>
     * @return The data.
     */
    com.google.protobuf.ByteString getData();

    /**
     * <pre>
     * CRC to allow server to verify integrity of the chunk.
     * </pre>
     *
     * <code>int64 crc = 2;</code>
     * @return The crc.
     */
    long getCrc();
  }
  /**
   * <pre>
   * A chunk of an Artifact.
   * </pre>
   *
   * Protobuf type {@code spark.connect.AddArtifactsRequest.ArtifactChunk}
   */
  public static final class ArtifactChunk extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.AddArtifactsRequest.ArtifactChunk)
      ArtifactChunkOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ArtifactChunk.newBuilder() to construct.
    private ArtifactChunk(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ArtifactChunk() {
      data_ = com.google.protobuf.ByteString.EMPTY;
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new ArtifactChunk();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_ArtifactChunk_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_ArtifactChunk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.class, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder.class);
    }

    public static final int DATA_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Data chunk.
     * </pre>
     *
     * <code>bytes data = 1;</code>
     * @return The data.
     */
    @Override
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    public static final int CRC_FIELD_NUMBER = 2;
    private long crc_ = 0L;
    /**
     * <pre>
     * CRC to allow server to verify integrity of the chunk.
     * </pre>
     *
     * <code>int64 crc = 2;</code>
     * @return The crc.
     */
    @Override
    public long getCrc() {
      return crc_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!data_.isEmpty()) {
        output.writeBytes(1, data_);
      }
      if (crc_ != 0L) {
        output.writeInt64(2, crc_);
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, data_);
      }
      if (crc_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, crc_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk other = (org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk) obj;

      if (!getData()
          .equals(other.getData())) return false;
      if (getCrc()
          != other.getCrc()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
      hash = (37 * hash) + CRC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCrc());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A chunk of an Artifact.
     * </pre>
     *
     * Protobuf type {@code spark.connect.AddArtifactsRequest.ArtifactChunk}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.AddArtifactsRequest.ArtifactChunk)
        org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_ArtifactChunk_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_ArtifactChunk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.class, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        data_ = com.google.protobuf.ByteString.EMPTY;
        crc_ = 0L;
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_ArtifactChunk_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk build() {
        org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk buildPartial() {
        org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk result = new org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.data_ = data_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.crc_ = crc_;
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk) {
          return mergeFrom((org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk other) {
        if (other == org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance()) return this;
        if (other.getData() != com.google.protobuf.ByteString.EMPTY) {
          setData(other.getData());
        }
        if (other.getCrc() != 0L) {
          setCrc(other.getCrc());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                data_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                crc_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Data chunk.
       * </pre>
       *
       * <code>bytes data = 1;</code>
       * @return The data.
       */
      @Override
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <pre>
       * Data chunk.
       * </pre>
       *
       * <code>bytes data = 1;</code>
       * @param value The data to set.
       * @return This builder for chaining.
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        data_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data chunk.
       * </pre>
       *
       * <code>bytes data = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      private long crc_ ;
      /**
       * <pre>
       * CRC to allow server to verify integrity of the chunk.
       * </pre>
       *
       * <code>int64 crc = 2;</code>
       * @return The crc.
       */
      @Override
      public long getCrc() {
        return crc_;
      }
      /**
       * <pre>
       * CRC to allow server to verify integrity of the chunk.
       * </pre>
       *
       * <code>int64 crc = 2;</code>
       * @param value The crc to set.
       * @return This builder for chaining.
       */
      public Builder setCrc(long value) {

        crc_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * CRC to allow server to verify integrity of the chunk.
       * </pre>
       *
       * <code>int64 crc = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCrc() {
        bitField0_ = (bitField0_ & ~0x00000002);
        crc_ = 0L;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.AddArtifactsRequest.ArtifactChunk)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.AddArtifactsRequest.ArtifactChunk)
    private static final org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk();
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ArtifactChunk>
        PARSER = new com.google.protobuf.AbstractParser<ArtifactChunk>() {
      @Override
      public ArtifactChunk parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ArtifactChunk> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<ArtifactChunk> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SingleChunkArtifactOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.AddArtifactsRequest.SingleChunkArtifact)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
     * sequence of directories and the final file element.
     * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
     * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
     * The relative path of the file on the server's filesystem will be the same as the name of
     * the provided artifact)
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    String getName();
    /**
     * <pre>
     * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
     * sequence of directories and the final file element.
     * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
     * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
     * The relative path of the file on the server's filesystem will be the same as the name of
     * the provided artifact)
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * A single data chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
     * @return Whether the data field is set.
     */
    boolean hasData();
    /**
     * <pre>
     * A single data chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
     * @return The data.
     */
    org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getData();
    /**
     * <pre>
     * A single data chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
     */
    org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder getDataOrBuilder();
  }
  /**
   * <pre>
   * An artifact that is contained in a single `ArtifactChunk`.
   * Generally, this message represents tiny artifacts such as REPL-generated class files.
   * </pre>
   *
   * Protobuf type {@code spark.connect.AddArtifactsRequest.SingleChunkArtifact}
   */
  public static final class SingleChunkArtifact extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.AddArtifactsRequest.SingleChunkArtifact)
      SingleChunkArtifactOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SingleChunkArtifact.newBuilder() to construct.
    private SingleChunkArtifact(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SingleChunkArtifact() {
      name_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new SingleChunkArtifact();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_SingleChunkArtifact_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_SingleChunkArtifact_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.class, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile Object name_ = "";
    /**
     * <pre>
     * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
     * sequence of directories and the final file element.
     * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
     * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
     * The relative path of the file on the server's filesystem will be the same as the name of
     * the provided artifact)
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @Override
    public String getName() {
      Object ref = name_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
     * sequence of directories and the final file element.
     * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
     * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
     * The relative path of the file on the server's filesystem will be the same as the name of
     * the provided artifact)
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DATA_FIELD_NUMBER = 2;
    private org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk data_;
    /**
     * <pre>
     * A single data chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
     * @return Whether the data field is set.
     */
    @Override
    public boolean hasData() {
      return data_ != null;
    }
    /**
     * <pre>
     * A single data chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
     * @return The data.
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getData() {
      return data_ == null ? org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance() : data_;
    }
    /**
     * <pre>
     * A single data chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder getDataOrBuilder() {
      return data_ == null ? org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance() : data_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (data_ != null) {
        output.writeMessage(2, getData());
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (data_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getData());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact other = (org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (hasData() != other.hasData()) return false;
      if (hasData()) {
        if (!getData()
            .equals(other.getData())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasData()) {
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getData().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An artifact that is contained in a single `ArtifactChunk`.
     * Generally, this message represents tiny artifacts such as REPL-generated class files.
     * </pre>
     *
     * Protobuf type {@code spark.connect.AddArtifactsRequest.SingleChunkArtifact}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.AddArtifactsRequest.SingleChunkArtifact)
        org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifactOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_SingleChunkArtifact_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_SingleChunkArtifact_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.class, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = "";
        data_ = null;
        if (dataBuilder_ != null) {
          dataBuilder_.dispose();
          dataBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_SingleChunkArtifact_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact build() {
        org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact buildPartial() {
        org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact result = new org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.data_ = dataBuilder_ == null
              ? data_
              : dataBuilder_.build();
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact) {
          return mergeFrom((org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact other) {
        if (other == org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasData()) {
          mergeData(other.getData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getDataFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private Object name_ = "";
      /**
       * <pre>
       * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
       * sequence of directories and the final file element.
       * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
       * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
       * The relative path of the file on the server's filesystem will be the same as the name of
       * the provided artifact)
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The name.
       */
      public String getName() {
        Object ref = name_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
       * sequence of directories and the final file element.
       * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
       * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
       * The relative path of the file on the server's filesystem will be the same as the name of
       * the provided artifact)
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
       * sequence of directories and the final file element.
       * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
       * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
       * The relative path of the file on the server's filesystem will be the same as the name of
       * the provided artifact)
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
       * sequence of directories and the final file element.
       * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
       * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
       * The relative path of the file on the server's filesystem will be the same as the name of
       * the provided artifact)
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
       * sequence of directories and the final file element.
       * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
       * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
       * The relative path of the file on the server's filesystem will be the same as the name of
       * the provided artifact)
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk data_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder> dataBuilder_;
      /**
       * <pre>
       * A single data chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
       * @return Whether the data field is set.
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * A single data chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
       * @return The data.
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getData() {
        if (dataBuilder_ == null) {
          return data_ == null ? org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance() : data_;
        } else {
          return dataBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A single data chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
       */
      public Builder setData(org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          data_ = value;
        } else {
          dataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A single data chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
       */
      public Builder setData(
          org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder builderForValue) {
        if (dataBuilder_ == null) {
          data_ = builderForValue.build();
        } else {
          dataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A single data chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
       */
      public Builder mergeData(org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk value) {
        if (dataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            data_ != null &&
            data_ != org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance()) {
            getDataBuilder().mergeFrom(value);
          } else {
            data_ = value;
          }
        } else {
          dataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A single data chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = null;
        if (dataBuilder_ != null) {
          dataBuilder_.dispose();
          dataBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A single data chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder getDataBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getDataFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A single data chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder getDataOrBuilder() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilder();
        } else {
          return data_ == null ?
              org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance() : data_;
        }
      }
      /**
       * <pre>
       * A single data chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk data = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder>(
                  getData(),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.AddArtifactsRequest.SingleChunkArtifact)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.AddArtifactsRequest.SingleChunkArtifact)
    private static final org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact();
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SingleChunkArtifact>
        PARSER = new com.google.protobuf.AbstractParser<SingleChunkArtifact>() {
      @Override
      public SingleChunkArtifact parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SingleChunkArtifact> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<SingleChunkArtifact> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BatchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.AddArtifactsRequest.Batch)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
     */
    java.util.List<org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact> 
        getArtifactsList();
    /**
     * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
     */
    org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact getArtifacts(int index);
    /**
     * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
     */
    int getArtifactsCount();
    /**
     * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
     */
    java.util.List<? extends org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifactOrBuilder> 
        getArtifactsOrBuilderList();
    /**
     * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
     */
    org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifactOrBuilder getArtifactsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A number of `SingleChunkArtifact` batched into a single RPC.
   * </pre>
   *
   * Protobuf type {@code spark.connect.AddArtifactsRequest.Batch}
   */
  public static final class Batch extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.AddArtifactsRequest.Batch)
      BatchOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Batch.newBuilder() to construct.
    private Batch(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Batch() {
      artifacts_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Batch();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_Batch_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_Batch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.AddArtifactsRequest.Batch.class, org.apache.spark.connect.proto.AddArtifactsRequest.Batch.Builder.class);
    }

    public static final int ARTIFACTS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact> artifacts_;
    /**
     * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
     */
    @Override
    public java.util.List<org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact> getArtifactsList() {
      return artifacts_;
    }
    /**
     * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
     */
    @Override
    public java.util.List<? extends org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifactOrBuilder> 
        getArtifactsOrBuilderList() {
      return artifacts_;
    }
    /**
     * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
     */
    @Override
    public int getArtifactsCount() {
      return artifacts_.size();
    }
    /**
     * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact getArtifacts(int index) {
      return artifacts_.get(index);
    }
    /**
     * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifactOrBuilder getArtifactsOrBuilder(
        int index) {
      return artifacts_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < artifacts_.size(); i++) {
        output.writeMessage(1, artifacts_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < artifacts_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, artifacts_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.AddArtifactsRequest.Batch)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.AddArtifactsRequest.Batch other = (org.apache.spark.connect.proto.AddArtifactsRequest.Batch) obj;

      if (!getArtifactsList()
          .equals(other.getArtifactsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArtifactsCount() > 0) {
        hash = (37 * hash) + ARTIFACTS_FIELD_NUMBER;
        hash = (53 * hash) + getArtifactsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.AddArtifactsRequest.Batch prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A number of `SingleChunkArtifact` batched into a single RPC.
     * </pre>
     *
     * Protobuf type {@code spark.connect.AddArtifactsRequest.Batch}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.AddArtifactsRequest.Batch)
        org.apache.spark.connect.proto.AddArtifactsRequest.BatchOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_Batch_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_Batch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.AddArtifactsRequest.Batch.class, org.apache.spark.connect.proto.AddArtifactsRequest.Batch.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.AddArtifactsRequest.Batch.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (artifactsBuilder_ == null) {
          artifacts_ = java.util.Collections.emptyList();
        } else {
          artifacts_ = null;
          artifactsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_Batch_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.Batch getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.AddArtifactsRequest.Batch.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.Batch build() {
        org.apache.spark.connect.proto.AddArtifactsRequest.Batch result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.Batch buildPartial() {
        org.apache.spark.connect.proto.AddArtifactsRequest.Batch result = new org.apache.spark.connect.proto.AddArtifactsRequest.Batch(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.apache.spark.connect.proto.AddArtifactsRequest.Batch result) {
        if (artifactsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            artifacts_ = java.util.Collections.unmodifiableList(artifacts_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.artifacts_ = artifacts_;
        } else {
          result.artifacts_ = artifactsBuilder_.build();
        }
      }

      private void buildPartial0(org.apache.spark.connect.proto.AddArtifactsRequest.Batch result) {
        int from_bitField0_ = bitField0_;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.AddArtifactsRequest.Batch) {
          return mergeFrom((org.apache.spark.connect.proto.AddArtifactsRequest.Batch)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.AddArtifactsRequest.Batch other) {
        if (other == org.apache.spark.connect.proto.AddArtifactsRequest.Batch.getDefaultInstance()) return this;
        if (artifactsBuilder_ == null) {
          if (!other.artifacts_.isEmpty()) {
            if (artifacts_.isEmpty()) {
              artifacts_ = other.artifacts_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArtifactsIsMutable();
              artifacts_.addAll(other.artifacts_);
            }
            onChanged();
          }
        } else {
          if (!other.artifacts_.isEmpty()) {
            if (artifactsBuilder_.isEmpty()) {
              artifactsBuilder_.dispose();
              artifactsBuilder_ = null;
              artifacts_ = other.artifacts_;
              bitField0_ = (bitField0_ & ~0x00000001);
              artifactsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArtifactsFieldBuilder() : null;
            } else {
              artifactsBuilder_.addAllMessages(other.artifacts_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact m =
                    input.readMessage(
                        org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.parser(),
                        extensionRegistry);
                if (artifactsBuilder_ == null) {
                  ensureArtifactsIsMutable();
                  artifacts_.add(m);
                } else {
                  artifactsBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact> artifacts_ =
        java.util.Collections.emptyList();
      private void ensureArtifactsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          artifacts_ = new java.util.ArrayList<org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact>(artifacts_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifactOrBuilder> artifactsBuilder_;

      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public java.util.List<org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact> getArtifactsList() {
        if (artifactsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(artifacts_);
        } else {
          return artifactsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public int getArtifactsCount() {
        if (artifactsBuilder_ == null) {
          return artifacts_.size();
        } else {
          return artifactsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact getArtifacts(int index) {
        if (artifactsBuilder_ == null) {
          return artifacts_.get(index);
        } else {
          return artifactsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public Builder setArtifacts(
          int index, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact value) {
        if (artifactsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArtifactsIsMutable();
          artifacts_.set(index, value);
          onChanged();
        } else {
          artifactsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public Builder setArtifacts(
          int index, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder builderForValue) {
        if (artifactsBuilder_ == null) {
          ensureArtifactsIsMutable();
          artifacts_.set(index, builderForValue.build());
          onChanged();
        } else {
          artifactsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public Builder addArtifacts(org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact value) {
        if (artifactsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArtifactsIsMutable();
          artifacts_.add(value);
          onChanged();
        } else {
          artifactsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public Builder addArtifacts(
          int index, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact value) {
        if (artifactsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArtifactsIsMutable();
          artifacts_.add(index, value);
          onChanged();
        } else {
          artifactsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public Builder addArtifacts(
          org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder builderForValue) {
        if (artifactsBuilder_ == null) {
          ensureArtifactsIsMutable();
          artifacts_.add(builderForValue.build());
          onChanged();
        } else {
          artifactsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public Builder addArtifacts(
          int index, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder builderForValue) {
        if (artifactsBuilder_ == null) {
          ensureArtifactsIsMutable();
          artifacts_.add(index, builderForValue.build());
          onChanged();
        } else {
          artifactsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public Builder addAllArtifacts(
          Iterable<? extends org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact> values) {
        if (artifactsBuilder_ == null) {
          ensureArtifactsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, artifacts_);
          onChanged();
        } else {
          artifactsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public Builder clearArtifacts() {
        if (artifactsBuilder_ == null) {
          artifacts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          artifactsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public Builder removeArtifacts(int index) {
        if (artifactsBuilder_ == null) {
          ensureArtifactsIsMutable();
          artifacts_.remove(index);
          onChanged();
        } else {
          artifactsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder getArtifactsBuilder(
          int index) {
        return getArtifactsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifactOrBuilder getArtifactsOrBuilder(
          int index) {
        if (artifactsBuilder_ == null) {
          return artifacts_.get(index);  } else {
          return artifactsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public java.util.List<? extends org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifactOrBuilder> 
           getArtifactsOrBuilderList() {
        if (artifactsBuilder_ != null) {
          return artifactsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(artifacts_);
        }
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder addArtifactsBuilder() {
        return getArtifactsFieldBuilder().addBuilder(
            org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.getDefaultInstance());
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder addArtifactsBuilder(
          int index) {
        return getArtifactsFieldBuilder().addBuilder(
            index, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.getDefaultInstance());
      }
      /**
       * <code>repeated .spark.connect.AddArtifactsRequest.SingleChunkArtifact artifacts = 1;</code>
       */
      public java.util.List<org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder> 
           getArtifactsBuilderList() {
        return getArtifactsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifactOrBuilder> 
          getArtifactsFieldBuilder() {
        if (artifactsBuilder_ == null) {
          artifactsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifact.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.SingleChunkArtifactOrBuilder>(
                  artifacts_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          artifacts_ = null;
        }
        return artifactsBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.AddArtifactsRequest.Batch)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.AddArtifactsRequest.Batch)
    private static final org.apache.spark.connect.proto.AddArtifactsRequest.Batch DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.AddArtifactsRequest.Batch();
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.Batch getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Batch>
        PARSER = new com.google.protobuf.AbstractParser<Batch>() {
      @Override
      public Batch parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Batch> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Batch> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.Batch getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BeginChunkedArtifactOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.AddArtifactsRequest.BeginChunkedArtifact)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the artifact undergoing chunking. Follows the same conventions as the `name` in
     * the `Artifact` message.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    String getName();
    /**
     * <pre>
     * Name of the artifact undergoing chunking. Follows the same conventions as the `name` in
     * the `Artifact` message.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Total size of the artifact in bytes.
     * </pre>
     *
     * <code>int64 total_bytes = 2;</code>
     * @return The totalBytes.
     */
    long getTotalBytes();

    /**
     * <pre>
     * Number of chunks the artifact is split into.
     * This includes the `initial_chunk`.
     * </pre>
     *
     * <code>int64 num_chunks = 3;</code>
     * @return The numChunks.
     */
    long getNumChunks();

    /**
     * <pre>
     * The first/initial chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
     * @return Whether the initialChunk field is set.
     */
    boolean hasInitialChunk();
    /**
     * <pre>
     * The first/initial chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
     * @return The initialChunk.
     */
    org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getInitialChunk();
    /**
     * <pre>
     * The first/initial chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
     */
    org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder getInitialChunkOrBuilder();
  }
  /**
   * <pre>
   * Signals the beginning/start of a chunked artifact.
   * A large artifact is transferred through a payload of `BeginChunkedArtifact` followed by a
   * sequence of `ArtifactChunk`s.
   * </pre>
   *
   * Protobuf type {@code spark.connect.AddArtifactsRequest.BeginChunkedArtifact}
   */
  public static final class BeginChunkedArtifact extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.AddArtifactsRequest.BeginChunkedArtifact)
      BeginChunkedArtifactOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BeginChunkedArtifact.newBuilder() to construct.
    private BeginChunkedArtifact(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BeginChunkedArtifact() {
      name_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new BeginChunkedArtifact();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_BeginChunkedArtifact_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_BeginChunkedArtifact_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.class, org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile Object name_ = "";
    /**
     * <pre>
     * Name of the artifact undergoing chunking. Follows the same conventions as the `name` in
     * the `Artifact` message.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @Override
    public String getName() {
      Object ref = name_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the artifact undergoing chunking. Follows the same conventions as the `name` in
     * the `Artifact` message.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOTAL_BYTES_FIELD_NUMBER = 2;
    private long totalBytes_ = 0L;
    /**
     * <pre>
     * Total size of the artifact in bytes.
     * </pre>
     *
     * <code>int64 total_bytes = 2;</code>
     * @return The totalBytes.
     */
    @Override
    public long getTotalBytes() {
      return totalBytes_;
    }

    public static final int NUM_CHUNKS_FIELD_NUMBER = 3;
    private long numChunks_ = 0L;
    /**
     * <pre>
     * Number of chunks the artifact is split into.
     * This includes the `initial_chunk`.
     * </pre>
     *
     * <code>int64 num_chunks = 3;</code>
     * @return The numChunks.
     */
    @Override
    public long getNumChunks() {
      return numChunks_;
    }

    public static final int INITIAL_CHUNK_FIELD_NUMBER = 4;
    private org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk initialChunk_;
    /**
     * <pre>
     * The first/initial chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
     * @return Whether the initialChunk field is set.
     */
    @Override
    public boolean hasInitialChunk() {
      return initialChunk_ != null;
    }
    /**
     * <pre>
     * The first/initial chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
     * @return The initialChunk.
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getInitialChunk() {
      return initialChunk_ == null ? org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance() : initialChunk_;
    }
    /**
     * <pre>
     * The first/initial chunk.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder getInitialChunkOrBuilder() {
      return initialChunk_ == null ? org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance() : initialChunk_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (totalBytes_ != 0L) {
        output.writeInt64(2, totalBytes_);
      }
      if (numChunks_ != 0L) {
        output.writeInt64(3, numChunks_);
      }
      if (initialChunk_ != null) {
        output.writeMessage(4, getInitialChunk());
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (totalBytes_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, totalBytes_);
      }
      if (numChunks_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, numChunks_);
      }
      if (initialChunk_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getInitialChunk());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact other = (org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (getTotalBytes()
          != other.getTotalBytes()) return false;
      if (getNumChunks()
          != other.getNumChunks()) return false;
      if (hasInitialChunk() != other.hasInitialChunk()) return false;
      if (hasInitialChunk()) {
        if (!getInitialChunk()
            .equals(other.getInitialChunk())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + TOTAL_BYTES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTotalBytes());
      hash = (37 * hash) + NUM_CHUNKS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNumChunks());
      if (hasInitialChunk()) {
        hash = (37 * hash) + INITIAL_CHUNK_FIELD_NUMBER;
        hash = (53 * hash) + getInitialChunk().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Signals the beginning/start of a chunked artifact.
     * A large artifact is transferred through a payload of `BeginChunkedArtifact` followed by a
     * sequence of `ArtifactChunk`s.
     * </pre>
     *
     * Protobuf type {@code spark.connect.AddArtifactsRequest.BeginChunkedArtifact}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.AddArtifactsRequest.BeginChunkedArtifact)
        org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifactOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_BeginChunkedArtifact_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_BeginChunkedArtifact_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.class, org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = "";
        totalBytes_ = 0L;
        numChunks_ = 0L;
        initialChunk_ = null;
        if (initialChunkBuilder_ != null) {
          initialChunkBuilder_.dispose();
          initialChunkBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_BeginChunkedArtifact_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact build() {
        org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact buildPartial() {
        org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact result = new org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.totalBytes_ = totalBytes_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.numChunks_ = numChunks_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.initialChunk_ = initialChunkBuilder_ == null
              ? initialChunk_
              : initialChunkBuilder_.build();
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact) {
          return mergeFrom((org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact other) {
        if (other == org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.getTotalBytes() != 0L) {
          setTotalBytes(other.getTotalBytes());
        }
        if (other.getNumChunks() != 0L) {
          setNumChunks(other.getNumChunks());
        }
        if (other.hasInitialChunk()) {
          mergeInitialChunk(other.getInitialChunk());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                totalBytes_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                numChunks_ = input.readInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                input.readMessage(
                    getInitialChunkFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private Object name_ = "";
      /**
       * <pre>
       * Name of the artifact undergoing chunking. Follows the same conventions as the `name` in
       * the `Artifact` message.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The name.
       */
      public String getName() {
        Object ref = name_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * Name of the artifact undergoing chunking. Follows the same conventions as the `name` in
       * the `Artifact` message.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the artifact undergoing chunking. Follows the same conventions as the `name` in
       * the `Artifact` message.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the artifact undergoing chunking. Follows the same conventions as the `name` in
       * the `Artifact` message.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the artifact undergoing chunking. Follows the same conventions as the `name` in
       * the `Artifact` message.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private long totalBytes_ ;
      /**
       * <pre>
       * Total size of the artifact in bytes.
       * </pre>
       *
       * <code>int64 total_bytes = 2;</code>
       * @return The totalBytes.
       */
      @Override
      public long getTotalBytes() {
        return totalBytes_;
      }
      /**
       * <pre>
       * Total size of the artifact in bytes.
       * </pre>
       *
       * <code>int64 total_bytes = 2;</code>
       * @param value The totalBytes to set.
       * @return This builder for chaining.
       */
      public Builder setTotalBytes(long value) {

        totalBytes_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Total size of the artifact in bytes.
       * </pre>
       *
       * <code>int64 total_bytes = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalBytes() {
        bitField0_ = (bitField0_ & ~0x00000002);
        totalBytes_ = 0L;
        onChanged();
        return this;
      }

      private long numChunks_ ;
      /**
       * <pre>
       * Number of chunks the artifact is split into.
       * This includes the `initial_chunk`.
       * </pre>
       *
       * <code>int64 num_chunks = 3;</code>
       * @return The numChunks.
       */
      @Override
      public long getNumChunks() {
        return numChunks_;
      }
      /**
       * <pre>
       * Number of chunks the artifact is split into.
       * This includes the `initial_chunk`.
       * </pre>
       *
       * <code>int64 num_chunks = 3;</code>
       * @param value The numChunks to set.
       * @return This builder for chaining.
       */
      public Builder setNumChunks(long value) {

        numChunks_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of chunks the artifact is split into.
       * This includes the `initial_chunk`.
       * </pre>
       *
       * <code>int64 num_chunks = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumChunks() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numChunks_ = 0L;
        onChanged();
        return this;
      }

      private org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk initialChunk_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder> initialChunkBuilder_;
      /**
       * <pre>
       * The first/initial chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
       * @return Whether the initialChunk field is set.
       */
      public boolean hasInitialChunk() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The first/initial chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
       * @return The initialChunk.
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getInitialChunk() {
        if (initialChunkBuilder_ == null) {
          return initialChunk_ == null ? org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance() : initialChunk_;
        } else {
          return initialChunkBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The first/initial chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
       */
      public Builder setInitialChunk(org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk value) {
        if (initialChunkBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          initialChunk_ = value;
        } else {
          initialChunkBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The first/initial chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
       */
      public Builder setInitialChunk(
          org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder builderForValue) {
        if (initialChunkBuilder_ == null) {
          initialChunk_ = builderForValue.build();
        } else {
          initialChunkBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The first/initial chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
       */
      public Builder mergeInitialChunk(org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk value) {
        if (initialChunkBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            initialChunk_ != null &&
            initialChunk_ != org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance()) {
            getInitialChunkBuilder().mergeFrom(value);
          } else {
            initialChunk_ = value;
          }
        } else {
          initialChunkBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The first/initial chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
       */
      public Builder clearInitialChunk() {
        bitField0_ = (bitField0_ & ~0x00000008);
        initialChunk_ = null;
        if (initialChunkBuilder_ != null) {
          initialChunkBuilder_.dispose();
          initialChunkBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The first/initial chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder getInitialChunkBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getInitialChunkFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The first/initial chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
       */
      public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder getInitialChunkOrBuilder() {
        if (initialChunkBuilder_ != null) {
          return initialChunkBuilder_.getMessageOrBuilder();
        } else {
          return initialChunk_ == null ?
              org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance() : initialChunk_;
        }
      }
      /**
       * <pre>
       * The first/initial chunk.
       * </pre>
       *
       * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk initial_chunk = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder> 
          getInitialChunkFieldBuilder() {
        if (initialChunkBuilder_ == null) {
          initialChunkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder>(
                  getInitialChunk(),
                  getParentForChildren(),
                  isClean());
          initialChunk_ = null;
        }
        return initialChunkBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.AddArtifactsRequest.BeginChunkedArtifact)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.AddArtifactsRequest.BeginChunkedArtifact)
    private static final org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact();
    }

    public static org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BeginChunkedArtifact>
        PARSER = new com.google.protobuf.AbstractParser<BeginChunkedArtifact>() {
      @Override
      public BeginChunkedArtifact parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BeginChunkedArtifact> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<BeginChunkedArtifact> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  private int payloadCase_ = 0;
  @SuppressWarnings("serial")
  private Object payload_;
  public enum PayloadCase
      implements com.google.protobuf.Internal.EnumLite,
          InternalOneOfEnum {
    BATCH(3),
    BEGIN_CHUNK(4),
    CHUNK(5),
    PAYLOAD_NOT_SET(0);
    private final int value;
    private PayloadCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static PayloadCase valueOf(int value) {
      return forNumber(value);
    }

    public static PayloadCase forNumber(int value) {
      switch (value) {
        case 3: return BATCH;
        case 4: return BEGIN_CHUNK;
        case 5: return CHUNK;
        case 0: return PAYLOAD_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PayloadCase
  getPayloadCase() {
    return PayloadCase.forNumber(
        payloadCase_);
  }

  public static final int SESSION_ID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile Object sessionId_ = "";
  /**
   * <pre>
   * (Required)
   *
   * The session_id specifies a spark session for a user id (which is specified
   * by user_context.user_id). The session_id is set by the client to be able to
   * collate streaming responses from different queries within the dedicated session.
   * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
   * </pre>
   *
   * <code>string session_id = 1;</code>
   * @return The sessionId.
   */
  @Override
  public String getSessionId() {
    Object ref = sessionId_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      sessionId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Required)
   *
   * The session_id specifies a spark session for a user id (which is specified
   * by user_context.user_id). The session_id is set by the client to be able to
   * collate streaming responses from different queries within the dedicated session.
   * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
   * </pre>
   *
   * <code>string session_id = 1;</code>
   * @return The bytes for sessionId.
   */
  @Override
  public com.google.protobuf.ByteString
      getSessionIdBytes() {
    Object ref = sessionId_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      sessionId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int USER_CONTEXT_FIELD_NUMBER = 2;
  private org.apache.spark.connect.proto.UserContext userContext_;
  /**
   * <pre>
   * User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   * @return Whether the userContext field is set.
   */
  @Override
  public boolean hasUserContext() {
    return userContext_ != null;
  }
  /**
   * <pre>
   * User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   * @return The userContext.
   */
  @Override
  public org.apache.spark.connect.proto.UserContext getUserContext() {
    return userContext_ == null ? org.apache.spark.connect.proto.UserContext.getDefaultInstance() : userContext_;
  }
  /**
   * <pre>
   * User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.UserContextOrBuilder getUserContextOrBuilder() {
    return userContext_ == null ? org.apache.spark.connect.proto.UserContext.getDefaultInstance() : userContext_;
  }

  public static final int CLIENT_TYPE_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private volatile Object clientType_ = "";
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 6;</code>
   * @return Whether the clientType field is set.
   */
  @Override
  public boolean hasClientType() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 6;</code>
   * @return The clientType.
   */
  @Override
  public String getClientType() {
    Object ref = clientType_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      clientType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 6;</code>
   * @return The bytes for clientType.
   */
  @Override
  public com.google.protobuf.ByteString
      getClientTypeBytes() {
    Object ref = clientType_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      clientType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BATCH_FIELD_NUMBER = 3;
  /**
   * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
   * @return Whether the batch field is set.
   */
  @Override
  public boolean hasBatch() {
    return payloadCase_ == 3;
  }
  /**
   * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
   * @return The batch.
   */
  @Override
  public org.apache.spark.connect.proto.AddArtifactsRequest.Batch getBatch() {
    if (payloadCase_ == 3) {
       return (org.apache.spark.connect.proto.AddArtifactsRequest.Batch) payload_;
    }
    return org.apache.spark.connect.proto.AddArtifactsRequest.Batch.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
   */
  @Override
  public org.apache.spark.connect.proto.AddArtifactsRequest.BatchOrBuilder getBatchOrBuilder() {
    if (payloadCase_ == 3) {
       return (org.apache.spark.connect.proto.AddArtifactsRequest.Batch) payload_;
    }
    return org.apache.spark.connect.proto.AddArtifactsRequest.Batch.getDefaultInstance();
  }

  public static final int BEGIN_CHUNK_FIELD_NUMBER = 4;
  /**
   * <pre>
   * The metadata and the initial chunk of a large artifact chunked into multiple requests.
   * The server side is notified about the total size of the large artifact as well as the
   * number of chunks to expect.
   * </pre>
   *
   * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
   * @return Whether the beginChunk field is set.
   */
  @Override
  public boolean hasBeginChunk() {
    return payloadCase_ == 4;
  }
  /**
   * <pre>
   * The metadata and the initial chunk of a large artifact chunked into multiple requests.
   * The server side is notified about the total size of the large artifact as well as the
   * number of chunks to expect.
   * </pre>
   *
   * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
   * @return The beginChunk.
   */
  @Override
  public org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact getBeginChunk() {
    if (payloadCase_ == 4) {
       return (org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact) payload_;
    }
    return org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.getDefaultInstance();
  }
  /**
   * <pre>
   * The metadata and the initial chunk of a large artifact chunked into multiple requests.
   * The server side is notified about the total size of the large artifact as well as the
   * number of chunks to expect.
   * </pre>
   *
   * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifactOrBuilder getBeginChunkOrBuilder() {
    if (payloadCase_ == 4) {
       return (org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact) payload_;
    }
    return org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.getDefaultInstance();
  }

  public static final int CHUNK_FIELD_NUMBER = 5;
  /**
   * <pre>
   * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
   * excluding the first chunk (which is included in `BeginChunkedArtifact`).
   * </pre>
   *
   * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
   * @return Whether the chunk field is set.
   */
  @Override
  public boolean hasChunk() {
    return payloadCase_ == 5;
  }
  /**
   * <pre>
   * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
   * excluding the first chunk (which is included in `BeginChunkedArtifact`).
   * </pre>
   *
   * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
   * @return The chunk.
   */
  @Override
  public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getChunk() {
    if (payloadCase_ == 5) {
       return (org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk) payload_;
    }
    return org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance();
  }
  /**
   * <pre>
   * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
   * excluding the first chunk (which is included in `BeginChunkedArtifact`).
   * </pre>
   *
   * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
   */
  @Override
  public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder getChunkOrBuilder() {
    if (payloadCase_ == 5) {
       return (org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk) payload_;
    }
    return org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sessionId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sessionId_);
    }
    if (userContext_ != null) {
      output.writeMessage(2, getUserContext());
    }
    if (payloadCase_ == 3) {
      output.writeMessage(3, (org.apache.spark.connect.proto.AddArtifactsRequest.Batch) payload_);
    }
    if (payloadCase_ == 4) {
      output.writeMessage(4, (org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact) payload_);
    }
    if (payloadCase_ == 5) {
      output.writeMessage(5, (org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk) payload_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, clientType_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sessionId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sessionId_);
    }
    if (userContext_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getUserContext());
    }
    if (payloadCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.apache.spark.connect.proto.AddArtifactsRequest.Batch) payload_);
    }
    if (payloadCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact) payload_);
    }
    if (payloadCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk) payload_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, clientType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.AddArtifactsRequest)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.AddArtifactsRequest other = (org.apache.spark.connect.proto.AddArtifactsRequest) obj;

    if (!getSessionId()
        .equals(other.getSessionId())) return false;
    if (hasUserContext() != other.hasUserContext()) return false;
    if (hasUserContext()) {
      if (!getUserContext()
          .equals(other.getUserContext())) return false;
    }
    if (hasClientType() != other.hasClientType()) return false;
    if (hasClientType()) {
      if (!getClientType()
          .equals(other.getClientType())) return false;
    }
    if (!getPayloadCase().equals(other.getPayloadCase())) return false;
    switch (payloadCase_) {
      case 3:
        if (!getBatch()
            .equals(other.getBatch())) return false;
        break;
      case 4:
        if (!getBeginChunk()
            .equals(other.getBeginChunk())) return false;
        break;
      case 5:
        if (!getChunk()
            .equals(other.getChunk())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SESSION_ID_FIELD_NUMBER;
    hash = (53 * hash) + getSessionId().hashCode();
    if (hasUserContext()) {
      hash = (37 * hash) + USER_CONTEXT_FIELD_NUMBER;
      hash = (53 * hash) + getUserContext().hashCode();
    }
    if (hasClientType()) {
      hash = (37 * hash) + CLIENT_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getClientType().hashCode();
    }
    switch (payloadCase_) {
      case 3:
        hash = (37 * hash) + BATCH_FIELD_NUMBER;
        hash = (53 * hash) + getBatch().hashCode();
        break;
      case 4:
        hash = (37 * hash) + BEGIN_CHUNK_FIELD_NUMBER;
        hash = (53 * hash) + getBeginChunk().hashCode();
        break;
      case 5:
        hash = (37 * hash) + CHUNK_FIELD_NUMBER;
        hash = (53 * hash) + getChunk().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.AddArtifactsRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.AddArtifactsRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.AddArtifactsRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.AddArtifactsRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.AddArtifactsRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.AddArtifactsRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.AddArtifactsRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.AddArtifactsRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.AddArtifactsRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.AddArtifactsRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.AddArtifactsRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.AddArtifactsRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.AddArtifactsRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Request to transfer client-local artifacts.
   * </pre>
   *
   * Protobuf type {@code spark.connect.AddArtifactsRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.AddArtifactsRequest)
      org.apache.spark.connect.proto.AddArtifactsRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.AddArtifactsRequest.class, org.apache.spark.connect.proto.AddArtifactsRequest.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.AddArtifactsRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      sessionId_ = "";
      userContext_ = null;
      if (userContextBuilder_ != null) {
        userContextBuilder_.dispose();
        userContextBuilder_ = null;
      }
      clientType_ = "";
      if (batchBuilder_ != null) {
        batchBuilder_.clear();
      }
      if (beginChunkBuilder_ != null) {
        beginChunkBuilder_.clear();
      }
      if (chunkBuilder_ != null) {
        chunkBuilder_.clear();
      }
      payloadCase_ = 0;
      payload_ = null;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_AddArtifactsRequest_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.AddArtifactsRequest.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest build() {
      org.apache.spark.connect.proto.AddArtifactsRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest buildPartial() {
      org.apache.spark.connect.proto.AddArtifactsRequest result = new org.apache.spark.connect.proto.AddArtifactsRequest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.spark.connect.proto.AddArtifactsRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.sessionId_ = sessionId_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.userContext_ = userContextBuilder_ == null
            ? userContext_
            : userContextBuilder_.build();
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.clientType_ = clientType_;
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    private void buildPartialOneofs(org.apache.spark.connect.proto.AddArtifactsRequest result) {
      result.payloadCase_ = payloadCase_;
      result.payload_ = this.payload_;
      if (payloadCase_ == 3 &&
          batchBuilder_ != null) {
        result.payload_ = batchBuilder_.build();
      }
      if (payloadCase_ == 4 &&
          beginChunkBuilder_ != null) {
        result.payload_ = beginChunkBuilder_.build();
      }
      if (payloadCase_ == 5 &&
          chunkBuilder_ != null) {
        result.payload_ = chunkBuilder_.build();
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.AddArtifactsRequest) {
        return mergeFrom((org.apache.spark.connect.proto.AddArtifactsRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.AddArtifactsRequest other) {
      if (other == org.apache.spark.connect.proto.AddArtifactsRequest.getDefaultInstance()) return this;
      if (!other.getSessionId().isEmpty()) {
        sessionId_ = other.sessionId_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.hasUserContext()) {
        mergeUserContext(other.getUserContext());
      }
      if (other.hasClientType()) {
        clientType_ = other.clientType_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      switch (other.getPayloadCase()) {
        case BATCH: {
          mergeBatch(other.getBatch());
          break;
        }
        case BEGIN_CHUNK: {
          mergeBeginChunk(other.getBeginChunk());
          break;
        }
        case CHUNK: {
          mergeChunk(other.getChunk());
          break;
        }
        case PAYLOAD_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              sessionId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getUserContextFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getBatchFieldBuilder().getBuilder(),
                  extensionRegistry);
              payloadCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getBeginChunkFieldBuilder().getBuilder(),
                  extensionRegistry);
              payloadCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getChunkFieldBuilder().getBuilder(),
                  extensionRegistry);
              payloadCase_ = 5;
              break;
            } // case 42
            case 50: {
              clientType_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 50
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int payloadCase_ = 0;
    private Object payload_;
    public PayloadCase
        getPayloadCase() {
      return PayloadCase.forNumber(
          payloadCase_);
    }

    public Builder clearPayload() {
      payloadCase_ = 0;
      payload_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private Object sessionId_ = "";
    /**
     * <pre>
     * (Required)
     *
     * The session_id specifies a spark session for a user id (which is specified
     * by user_context.user_id). The session_id is set by the client to be able to
     * collate streaming responses from different queries within the dedicated session.
     * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
     * </pre>
     *
     * <code>string session_id = 1;</code>
     * @return The sessionId.
     */
    public String getSessionId() {
      Object ref = sessionId_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        sessionId_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * (Required)
     *
     * The session_id specifies a spark session for a user id (which is specified
     * by user_context.user_id). The session_id is set by the client to be able to
     * collate streaming responses from different queries within the dedicated session.
     * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
     * </pre>
     *
     * <code>string session_id = 1;</code>
     * @return The bytes for sessionId.
     */
    public com.google.protobuf.ByteString
        getSessionIdBytes() {
      Object ref = sessionId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        sessionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Required)
     *
     * The session_id specifies a spark session for a user id (which is specified
     * by user_context.user_id). The session_id is set by the client to be able to
     * collate streaming responses from different queries within the dedicated session.
     * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
     * </pre>
     *
     * <code>string session_id = 1;</code>
     * @param value The sessionId to set.
     * @return This builder for chaining.
     */
    public Builder setSessionId(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      sessionId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required)
     *
     * The session_id specifies a spark session for a user id (which is specified
     * by user_context.user_id). The session_id is set by the client to be able to
     * collate streaming responses from different queries within the dedicated session.
     * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
     * </pre>
     *
     * <code>string session_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSessionId() {
      sessionId_ = getDefaultInstance().getSessionId();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required)
     *
     * The session_id specifies a spark session for a user id (which is specified
     * by user_context.user_id). The session_id is set by the client to be able to
     * collate streaming responses from different queries within the dedicated session.
     * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
     * </pre>
     *
     * <code>string session_id = 1;</code>
     * @param value The bytes for sessionId to set.
     * @return This builder for chaining.
     */
    public Builder setSessionIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      sessionId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private org.apache.spark.connect.proto.UserContext userContext_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.UserContext, org.apache.spark.connect.proto.UserContext.Builder, org.apache.spark.connect.proto.UserContextOrBuilder> userContextBuilder_;
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     * @return Whether the userContext field is set.
     */
    public boolean hasUserContext() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     * @return The userContext.
     */
    public org.apache.spark.connect.proto.UserContext getUserContext() {
      if (userContextBuilder_ == null) {
        return userContext_ == null ? org.apache.spark.connect.proto.UserContext.getDefaultInstance() : userContext_;
      } else {
        return userContextBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public Builder setUserContext(org.apache.spark.connect.proto.UserContext value) {
      if (userContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        userContext_ = value;
      } else {
        userContextBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public Builder setUserContext(
        org.apache.spark.connect.proto.UserContext.Builder builderForValue) {
      if (userContextBuilder_ == null) {
        userContext_ = builderForValue.build();
      } else {
        userContextBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public Builder mergeUserContext(org.apache.spark.connect.proto.UserContext value) {
      if (userContextBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          userContext_ != null &&
          userContext_ != org.apache.spark.connect.proto.UserContext.getDefaultInstance()) {
          getUserContextBuilder().mergeFrom(value);
        } else {
          userContext_ = value;
        }
      } else {
        userContextBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public Builder clearUserContext() {
      bitField0_ = (bitField0_ & ~0x00000002);
      userContext_ = null;
      if (userContextBuilder_ != null) {
        userContextBuilder_.dispose();
        userContextBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public org.apache.spark.connect.proto.UserContext.Builder getUserContextBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getUserContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public org.apache.spark.connect.proto.UserContextOrBuilder getUserContextOrBuilder() {
      if (userContextBuilder_ != null) {
        return userContextBuilder_.getMessageOrBuilder();
      } else {
        return userContext_ == null ?
            org.apache.spark.connect.proto.UserContext.getDefaultInstance() : userContext_;
      }
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.UserContext, org.apache.spark.connect.proto.UserContext.Builder, org.apache.spark.connect.proto.UserContextOrBuilder> 
        getUserContextFieldBuilder() {
      if (userContextBuilder_ == null) {
        userContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.UserContext, org.apache.spark.connect.proto.UserContext.Builder, org.apache.spark.connect.proto.UserContextOrBuilder>(
                getUserContext(),
                getParentForChildren(),
                isClean());
        userContext_ = null;
      }
      return userContextBuilder_;
    }

    private Object clientType_ = "";
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 6;</code>
     * @return Whether the clientType field is set.
     */
    public boolean hasClientType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 6;</code>
     * @return The clientType.
     */
    public String getClientType() {
      Object ref = clientType_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        clientType_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 6;</code>
     * @return The bytes for clientType.
     */
    public com.google.protobuf.ByteString
        getClientTypeBytes() {
      Object ref = clientType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        clientType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 6;</code>
     * @param value The clientType to set.
     * @return This builder for chaining.
     */
    public Builder setClientType(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      clientType_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearClientType() {
      clientType_ = getDefaultInstance().getClientType();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 6;</code>
     * @param value The bytes for clientType to set.
     * @return This builder for chaining.
     */
    public Builder setClientTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      clientType_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.AddArtifactsRequest.Batch, org.apache.spark.connect.proto.AddArtifactsRequest.Batch.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.BatchOrBuilder> batchBuilder_;
    /**
     * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
     * @return Whether the batch field is set.
     */
    @Override
    public boolean hasBatch() {
      return payloadCase_ == 3;
    }
    /**
     * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
     * @return The batch.
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.Batch getBatch() {
      if (batchBuilder_ == null) {
        if (payloadCase_ == 3) {
          return (org.apache.spark.connect.proto.AddArtifactsRequest.Batch) payload_;
        }
        return org.apache.spark.connect.proto.AddArtifactsRequest.Batch.getDefaultInstance();
      } else {
        if (payloadCase_ == 3) {
          return batchBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.AddArtifactsRequest.Batch.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
     */
    public Builder setBatch(org.apache.spark.connect.proto.AddArtifactsRequest.Batch value) {
      if (batchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        payload_ = value;
        onChanged();
      } else {
        batchBuilder_.setMessage(value);
      }
      payloadCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
     */
    public Builder setBatch(
        org.apache.spark.connect.proto.AddArtifactsRequest.Batch.Builder builderForValue) {
      if (batchBuilder_ == null) {
        payload_ = builderForValue.build();
        onChanged();
      } else {
        batchBuilder_.setMessage(builderForValue.build());
      }
      payloadCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
     */
    public Builder mergeBatch(org.apache.spark.connect.proto.AddArtifactsRequest.Batch value) {
      if (batchBuilder_ == null) {
        if (payloadCase_ == 3 &&
            payload_ != org.apache.spark.connect.proto.AddArtifactsRequest.Batch.getDefaultInstance()) {
          payload_ = org.apache.spark.connect.proto.AddArtifactsRequest.Batch.newBuilder((org.apache.spark.connect.proto.AddArtifactsRequest.Batch) payload_)
              .mergeFrom(value).buildPartial();
        } else {
          payload_ = value;
        }
        onChanged();
      } else {
        if (payloadCase_ == 3) {
          batchBuilder_.mergeFrom(value);
        } else {
          batchBuilder_.setMessage(value);
        }
      }
      payloadCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
     */
    public Builder clearBatch() {
      if (batchBuilder_ == null) {
        if (payloadCase_ == 3) {
          payloadCase_ = 0;
          payload_ = null;
          onChanged();
        }
      } else {
        if (payloadCase_ == 3) {
          payloadCase_ = 0;
          payload_ = null;
        }
        batchBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
     */
    public org.apache.spark.connect.proto.AddArtifactsRequest.Batch.Builder getBatchBuilder() {
      return getBatchFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.BatchOrBuilder getBatchOrBuilder() {
      if ((payloadCase_ == 3) && (batchBuilder_ != null)) {
        return batchBuilder_.getMessageOrBuilder();
      } else {
        if (payloadCase_ == 3) {
          return (org.apache.spark.connect.proto.AddArtifactsRequest.Batch) payload_;
        }
        return org.apache.spark.connect.proto.AddArtifactsRequest.Batch.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.AddArtifactsRequest.Batch batch = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.AddArtifactsRequest.Batch, org.apache.spark.connect.proto.AddArtifactsRequest.Batch.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.BatchOrBuilder> 
        getBatchFieldBuilder() {
      if (batchBuilder_ == null) {
        if (!(payloadCase_ == 3)) {
          payload_ = org.apache.spark.connect.proto.AddArtifactsRequest.Batch.getDefaultInstance();
        }
        batchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.AddArtifactsRequest.Batch, org.apache.spark.connect.proto.AddArtifactsRequest.Batch.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.BatchOrBuilder>(
                (org.apache.spark.connect.proto.AddArtifactsRequest.Batch) payload_,
                getParentForChildren(),
                isClean());
        payload_ = null;
      }
      payloadCase_ = 3;
      onChanged();
      return batchBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact, org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifactOrBuilder> beginChunkBuilder_;
    /**
     * <pre>
     * The metadata and the initial chunk of a large artifact chunked into multiple requests.
     * The server side is notified about the total size of the large artifact as well as the
     * number of chunks to expect.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
     * @return Whether the beginChunk field is set.
     */
    @Override
    public boolean hasBeginChunk() {
      return payloadCase_ == 4;
    }
    /**
     * <pre>
     * The metadata and the initial chunk of a large artifact chunked into multiple requests.
     * The server side is notified about the total size of the large artifact as well as the
     * number of chunks to expect.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
     * @return The beginChunk.
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact getBeginChunk() {
      if (beginChunkBuilder_ == null) {
        if (payloadCase_ == 4) {
          return (org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact) payload_;
        }
        return org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.getDefaultInstance();
      } else {
        if (payloadCase_ == 4) {
          return beginChunkBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The metadata and the initial chunk of a large artifact chunked into multiple requests.
     * The server side is notified about the total size of the large artifact as well as the
     * number of chunks to expect.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
     */
    public Builder setBeginChunk(org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact value) {
      if (beginChunkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        payload_ = value;
        onChanged();
      } else {
        beginChunkBuilder_.setMessage(value);
      }
      payloadCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * The metadata and the initial chunk of a large artifact chunked into multiple requests.
     * The server side is notified about the total size of the large artifact as well as the
     * number of chunks to expect.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
     */
    public Builder setBeginChunk(
        org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.Builder builderForValue) {
      if (beginChunkBuilder_ == null) {
        payload_ = builderForValue.build();
        onChanged();
      } else {
        beginChunkBuilder_.setMessage(builderForValue.build());
      }
      payloadCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * The metadata and the initial chunk of a large artifact chunked into multiple requests.
     * The server side is notified about the total size of the large artifact as well as the
     * number of chunks to expect.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
     */
    public Builder mergeBeginChunk(org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact value) {
      if (beginChunkBuilder_ == null) {
        if (payloadCase_ == 4 &&
            payload_ != org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.getDefaultInstance()) {
          payload_ = org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.newBuilder((org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact) payload_)
              .mergeFrom(value).buildPartial();
        } else {
          payload_ = value;
        }
        onChanged();
      } else {
        if (payloadCase_ == 4) {
          beginChunkBuilder_.mergeFrom(value);
        } else {
          beginChunkBuilder_.setMessage(value);
        }
      }
      payloadCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * The metadata and the initial chunk of a large artifact chunked into multiple requests.
     * The server side is notified about the total size of the large artifact as well as the
     * number of chunks to expect.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
     */
    public Builder clearBeginChunk() {
      if (beginChunkBuilder_ == null) {
        if (payloadCase_ == 4) {
          payloadCase_ = 0;
          payload_ = null;
          onChanged();
        }
      } else {
        if (payloadCase_ == 4) {
          payloadCase_ = 0;
          payload_ = null;
        }
        beginChunkBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The metadata and the initial chunk of a large artifact chunked into multiple requests.
     * The server side is notified about the total size of the large artifact as well as the
     * number of chunks to expect.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
     */
    public org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.Builder getBeginChunkBuilder() {
      return getBeginChunkFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The metadata and the initial chunk of a large artifact chunked into multiple requests.
     * The server side is notified about the total size of the large artifact as well as the
     * number of chunks to expect.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifactOrBuilder getBeginChunkOrBuilder() {
      if ((payloadCase_ == 4) && (beginChunkBuilder_ != null)) {
        return beginChunkBuilder_.getMessageOrBuilder();
      } else {
        if (payloadCase_ == 4) {
          return (org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact) payload_;
        }
        return org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The metadata and the initial chunk of a large artifact chunked into multiple requests.
     * The server side is notified about the total size of the large artifact as well as the
     * number of chunks to expect.
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.BeginChunkedArtifact begin_chunk = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact, org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifactOrBuilder> 
        getBeginChunkFieldBuilder() {
      if (beginChunkBuilder_ == null) {
        if (!(payloadCase_ == 4)) {
          payload_ = org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.getDefaultInstance();
        }
        beginChunkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact, org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifactOrBuilder>(
                (org.apache.spark.connect.proto.AddArtifactsRequest.BeginChunkedArtifact) payload_,
                getParentForChildren(),
                isClean());
        payload_ = null;
      }
      payloadCase_ = 4;
      onChanged();
      return beginChunkBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder> chunkBuilder_;
    /**
     * <pre>
     * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
     * excluding the first chunk (which is included in `BeginChunkedArtifact`).
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
     * @return Whether the chunk field is set.
     */
    @Override
    public boolean hasChunk() {
      return payloadCase_ == 5;
    }
    /**
     * <pre>
     * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
     * excluding the first chunk (which is included in `BeginChunkedArtifact`).
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
     * @return The chunk.
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk getChunk() {
      if (chunkBuilder_ == null) {
        if (payloadCase_ == 5) {
          return (org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk) payload_;
        }
        return org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance();
      } else {
        if (payloadCase_ == 5) {
          return chunkBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
     * excluding the first chunk (which is included in `BeginChunkedArtifact`).
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
     */
    public Builder setChunk(org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk value) {
      if (chunkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        payload_ = value;
        onChanged();
      } else {
        chunkBuilder_.setMessage(value);
      }
      payloadCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
     * excluding the first chunk (which is included in `BeginChunkedArtifact`).
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
     */
    public Builder setChunk(
        org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder builderForValue) {
      if (chunkBuilder_ == null) {
        payload_ = builderForValue.build();
        onChanged();
      } else {
        chunkBuilder_.setMessage(builderForValue.build());
      }
      payloadCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
     * excluding the first chunk (which is included in `BeginChunkedArtifact`).
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
     */
    public Builder mergeChunk(org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk value) {
      if (chunkBuilder_ == null) {
        if (payloadCase_ == 5 &&
            payload_ != org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance()) {
          payload_ = org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.newBuilder((org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk) payload_)
              .mergeFrom(value).buildPartial();
        } else {
          payload_ = value;
        }
        onChanged();
      } else {
        if (payloadCase_ == 5) {
          chunkBuilder_.mergeFrom(value);
        } else {
          chunkBuilder_.setMessage(value);
        }
      }
      payloadCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
     * excluding the first chunk (which is included in `BeginChunkedArtifact`).
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
     */
    public Builder clearChunk() {
      if (chunkBuilder_ == null) {
        if (payloadCase_ == 5) {
          payloadCase_ = 0;
          payload_ = null;
          onChanged();
        }
      } else {
        if (payloadCase_ == 5) {
          payloadCase_ = 0;
          payload_ = null;
        }
        chunkBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
     * excluding the first chunk (which is included in `BeginChunkedArtifact`).
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
     */
    public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder getChunkBuilder() {
      return getChunkFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
     * excluding the first chunk (which is included in `BeginChunkedArtifact`).
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
     */
    @Override
    public org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder getChunkOrBuilder() {
      if ((payloadCase_ == 5) && (chunkBuilder_ != null)) {
        return chunkBuilder_.getMessageOrBuilder();
      } else {
        if (payloadCase_ == 5) {
          return (org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk) payload_;
        }
        return org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A chunk of an artifact excluding metadata. This can be any chunk of a large artifact
     * excluding the first chunk (which is included in `BeginChunkedArtifact`).
     * </pre>
     *
     * <code>.spark.connect.AddArtifactsRequest.ArtifactChunk chunk = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder> 
        getChunkFieldBuilder() {
      if (chunkBuilder_ == null) {
        if (!(payloadCase_ == 5)) {
          payload_ = org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.getDefaultInstance();
        }
        chunkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk.Builder, org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunkOrBuilder>(
                (org.apache.spark.connect.proto.AddArtifactsRequest.ArtifactChunk) payload_,
                getParentForChildren(),
                isClean());
        payload_ = null;
      }
      payloadCase_ = 5;
      onChanged();
      return chunkBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.AddArtifactsRequest)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.AddArtifactsRequest)
  private static final org.apache.spark.connect.proto.AddArtifactsRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.AddArtifactsRequest();
  }

  public static org.apache.spark.connect.proto.AddArtifactsRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AddArtifactsRequest>
      PARSER = new com.google.protobuf.AbstractParser<AddArtifactsRequest>() {
    @Override
    public AddArtifactsRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AddArtifactsRequest> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<AddArtifactsRequest> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.AddArtifactsRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

