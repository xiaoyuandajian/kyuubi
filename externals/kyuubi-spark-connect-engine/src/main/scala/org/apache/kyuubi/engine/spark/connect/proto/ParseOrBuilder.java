// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface ParseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.Parse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Required) Input relation to Parse. The input is expected to have single text column.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   * <pre>
   * (Required) Input relation to Parse. The input is expected to have single text column.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  org.apache.spark.connect.proto.Relation getInput();
  /**
   * <pre>
   * (Required) Input relation to Parse. The input is expected to have single text column.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder();

  /**
   * <pre>
   * (Required) The expected format of the text.
   * </pre>
   *
   * <code>.spark.connect.Parse.ParseFormat format = 2;</code>
   * @return The enum numeric value on the wire for format.
   */
  int getFormatValue();
  /**
   * <pre>
   * (Required) The expected format of the text.
   * </pre>
   *
   * <code>.spark.connect.Parse.ParseFormat format = 2;</code>
   * @return The format.
   */
  org.apache.spark.connect.proto.Parse.ParseFormat getFormat();

  /**
   * <pre>
   * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
   * </pre>
   *
   * <code>optional .spark.connect.DataType schema = 3;</code>
   * @return Whether the schema field is set.
   */
  boolean hasSchema();
  /**
   * <pre>
   * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
   * </pre>
   *
   * <code>optional .spark.connect.DataType schema = 3;</code>
   * @return The schema.
   */
  org.apache.spark.connect.proto.DataType getSchema();
  /**
   * <pre>
   * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
   * </pre>
   *
   * <code>optional .spark.connect.DataType schema = 3;</code>
   */
  org.apache.spark.connect.proto.DataTypeOrBuilder getSchemaOrBuilder();

  /**
   * <pre>
   * Options for the csv/json parser. The map key is case insensitive.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 4;</code>
   */
  int getOptionsCount();
  /**
   * <pre>
   * Options for the csv/json parser. The map key is case insensitive.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 4;</code>
   */
  boolean containsOptions(
      String key);
  /**
   * Use {@link #getOptionsMap()} instead.
   */
  @Deprecated
  java.util.Map<String, String>
  getOptions();
  /**
   * <pre>
   * Options for the csv/json parser. The map key is case insensitive.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 4;</code>
   */
  java.util.Map<String, String>
  getOptionsMap();
  /**
   * <pre>
   * Options for the csv/json parser. The map key is case insensitive.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 4;</code>
   */
  /* nullable */
String getOptionsOrDefault(
      String key,
      /* nullable */
String defaultValue);
  /**
   * <pre>
   * Options for the csv/json parser. The map key is case insensitive.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 4;</code>
   */
  String getOptionsOrThrow(
      String key);
}
