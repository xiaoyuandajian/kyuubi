// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/catalog.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface CatalogOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.Catalog)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
   * @return Whether the currentDatabase field is set.
   */
  boolean hasCurrentDatabase();
  /**
   * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
   * @return The currentDatabase.
   */
  org.apache.spark.connect.proto.CurrentDatabase getCurrentDatabase();
  /**
   * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
   */
  org.apache.spark.connect.proto.CurrentDatabaseOrBuilder getCurrentDatabaseOrBuilder();

  /**
   * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
   * @return Whether the setCurrentDatabase field is set.
   */
  boolean hasSetCurrentDatabase();
  /**
   * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
   * @return The setCurrentDatabase.
   */
  org.apache.spark.connect.proto.SetCurrentDatabase getSetCurrentDatabase();
  /**
   * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
   */
  org.apache.spark.connect.proto.SetCurrentDatabaseOrBuilder getSetCurrentDatabaseOrBuilder();

  /**
   * <code>.spark.connect.ListDatabases list_databases = 3;</code>
   * @return Whether the listDatabases field is set.
   */
  boolean hasListDatabases();
  /**
   * <code>.spark.connect.ListDatabases list_databases = 3;</code>
   * @return The listDatabases.
   */
  org.apache.spark.connect.proto.ListDatabases getListDatabases();
  /**
   * <code>.spark.connect.ListDatabases list_databases = 3;</code>
   */
  org.apache.spark.connect.proto.ListDatabasesOrBuilder getListDatabasesOrBuilder();

  /**
   * <code>.spark.connect.ListTables list_tables = 4;</code>
   * @return Whether the listTables field is set.
   */
  boolean hasListTables();
  /**
   * <code>.spark.connect.ListTables list_tables = 4;</code>
   * @return The listTables.
   */
  org.apache.spark.connect.proto.ListTables getListTables();
  /**
   * <code>.spark.connect.ListTables list_tables = 4;</code>
   */
  org.apache.spark.connect.proto.ListTablesOrBuilder getListTablesOrBuilder();

  /**
   * <code>.spark.connect.ListFunctions list_functions = 5;</code>
   * @return Whether the listFunctions field is set.
   */
  boolean hasListFunctions();
  /**
   * <code>.spark.connect.ListFunctions list_functions = 5;</code>
   * @return The listFunctions.
   */
  org.apache.spark.connect.proto.ListFunctions getListFunctions();
  /**
   * <code>.spark.connect.ListFunctions list_functions = 5;</code>
   */
  org.apache.spark.connect.proto.ListFunctionsOrBuilder getListFunctionsOrBuilder();

  /**
   * <code>.spark.connect.ListColumns list_columns = 6;</code>
   * @return Whether the listColumns field is set.
   */
  boolean hasListColumns();
  /**
   * <code>.spark.connect.ListColumns list_columns = 6;</code>
   * @return The listColumns.
   */
  org.apache.spark.connect.proto.ListColumns getListColumns();
  /**
   * <code>.spark.connect.ListColumns list_columns = 6;</code>
   */
  org.apache.spark.connect.proto.ListColumnsOrBuilder getListColumnsOrBuilder();

  /**
   * <code>.spark.connect.GetDatabase get_database = 7;</code>
   * @return Whether the getDatabase field is set.
   */
  boolean hasGetDatabase();
  /**
   * <code>.spark.connect.GetDatabase get_database = 7;</code>
   * @return The getDatabase.
   */
  org.apache.spark.connect.proto.GetDatabase getGetDatabase();
  /**
   * <code>.spark.connect.GetDatabase get_database = 7;</code>
   */
  org.apache.spark.connect.proto.GetDatabaseOrBuilder getGetDatabaseOrBuilder();

  /**
   * <code>.spark.connect.GetTable get_table = 8;</code>
   * @return Whether the getTable field is set.
   */
  boolean hasGetTable();
  /**
   * <code>.spark.connect.GetTable get_table = 8;</code>
   * @return The getTable.
   */
  org.apache.spark.connect.proto.GetTable getGetTable();
  /**
   * <code>.spark.connect.GetTable get_table = 8;</code>
   */
  org.apache.spark.connect.proto.GetTableOrBuilder getGetTableOrBuilder();

  /**
   * <code>.spark.connect.GetFunction get_function = 9;</code>
   * @return Whether the getFunction field is set.
   */
  boolean hasGetFunction();
  /**
   * <code>.spark.connect.GetFunction get_function = 9;</code>
   * @return The getFunction.
   */
  org.apache.spark.connect.proto.GetFunction getGetFunction();
  /**
   * <code>.spark.connect.GetFunction get_function = 9;</code>
   */
  org.apache.spark.connect.proto.GetFunctionOrBuilder getGetFunctionOrBuilder();

  /**
   * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
   * @return Whether the databaseExists field is set.
   */
  boolean hasDatabaseExists();
  /**
   * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
   * @return The databaseExists.
   */
  org.apache.spark.connect.proto.DatabaseExists getDatabaseExists();
  /**
   * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
   */
  org.apache.spark.connect.proto.DatabaseExistsOrBuilder getDatabaseExistsOrBuilder();

  /**
   * <code>.spark.connect.TableExists table_exists = 11;</code>
   * @return Whether the tableExists field is set.
   */
  boolean hasTableExists();
  /**
   * <code>.spark.connect.TableExists table_exists = 11;</code>
   * @return The tableExists.
   */
  org.apache.spark.connect.proto.TableExists getTableExists();
  /**
   * <code>.spark.connect.TableExists table_exists = 11;</code>
   */
  org.apache.spark.connect.proto.TableExistsOrBuilder getTableExistsOrBuilder();

  /**
   * <code>.spark.connect.FunctionExists function_exists = 12;</code>
   * @return Whether the functionExists field is set.
   */
  boolean hasFunctionExists();
  /**
   * <code>.spark.connect.FunctionExists function_exists = 12;</code>
   * @return The functionExists.
   */
  org.apache.spark.connect.proto.FunctionExists getFunctionExists();
  /**
   * <code>.spark.connect.FunctionExists function_exists = 12;</code>
   */
  org.apache.spark.connect.proto.FunctionExistsOrBuilder getFunctionExistsOrBuilder();

  /**
   * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
   * @return Whether the createExternalTable field is set.
   */
  boolean hasCreateExternalTable();
  /**
   * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
   * @return The createExternalTable.
   */
  org.apache.spark.connect.proto.CreateExternalTable getCreateExternalTable();
  /**
   * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
   */
  org.apache.spark.connect.proto.CreateExternalTableOrBuilder getCreateExternalTableOrBuilder();

  /**
   * <code>.spark.connect.CreateTable create_table = 14;</code>
   * @return Whether the createTable field is set.
   */
  boolean hasCreateTable();
  /**
   * <code>.spark.connect.CreateTable create_table = 14;</code>
   * @return The createTable.
   */
  org.apache.spark.connect.proto.CreateTable getCreateTable();
  /**
   * <code>.spark.connect.CreateTable create_table = 14;</code>
   */
  org.apache.spark.connect.proto.CreateTableOrBuilder getCreateTableOrBuilder();

  /**
   * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
   * @return Whether the dropTempView field is set.
   */
  boolean hasDropTempView();
  /**
   * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
   * @return The dropTempView.
   */
  org.apache.spark.connect.proto.DropTempView getDropTempView();
  /**
   * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
   */
  org.apache.spark.connect.proto.DropTempViewOrBuilder getDropTempViewOrBuilder();

  /**
   * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
   * @return Whether the dropGlobalTempView field is set.
   */
  boolean hasDropGlobalTempView();
  /**
   * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
   * @return The dropGlobalTempView.
   */
  org.apache.spark.connect.proto.DropGlobalTempView getDropGlobalTempView();
  /**
   * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
   */
  org.apache.spark.connect.proto.DropGlobalTempViewOrBuilder getDropGlobalTempViewOrBuilder();

  /**
   * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
   * @return Whether the recoverPartitions field is set.
   */
  boolean hasRecoverPartitions();
  /**
   * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
   * @return The recoverPartitions.
   */
  org.apache.spark.connect.proto.RecoverPartitions getRecoverPartitions();
  /**
   * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
   */
  org.apache.spark.connect.proto.RecoverPartitionsOrBuilder getRecoverPartitionsOrBuilder();

  /**
   * <code>.spark.connect.IsCached is_cached = 18;</code>
   * @return Whether the isCached field is set.
   */
  boolean hasIsCached();
  /**
   * <code>.spark.connect.IsCached is_cached = 18;</code>
   * @return The isCached.
   */
  org.apache.spark.connect.proto.IsCached getIsCached();
  /**
   * <code>.spark.connect.IsCached is_cached = 18;</code>
   */
  org.apache.spark.connect.proto.IsCachedOrBuilder getIsCachedOrBuilder();

  /**
   * <code>.spark.connect.CacheTable cache_table = 19;</code>
   * @return Whether the cacheTable field is set.
   */
  boolean hasCacheTable();
  /**
   * <code>.spark.connect.CacheTable cache_table = 19;</code>
   * @return The cacheTable.
   */
  org.apache.spark.connect.proto.CacheTable getCacheTable();
  /**
   * <code>.spark.connect.CacheTable cache_table = 19;</code>
   */
  org.apache.spark.connect.proto.CacheTableOrBuilder getCacheTableOrBuilder();

  /**
   * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
   * @return Whether the uncacheTable field is set.
   */
  boolean hasUncacheTable();
  /**
   * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
   * @return The uncacheTable.
   */
  org.apache.spark.connect.proto.UncacheTable getUncacheTable();
  /**
   * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
   */
  org.apache.spark.connect.proto.UncacheTableOrBuilder getUncacheTableOrBuilder();

  /**
   * <code>.spark.connect.ClearCache clear_cache = 21;</code>
   * @return Whether the clearCache field is set.
   */
  boolean hasClearCache();
  /**
   * <code>.spark.connect.ClearCache clear_cache = 21;</code>
   * @return The clearCache.
   */
  org.apache.spark.connect.proto.ClearCache getClearCache();
  /**
   * <code>.spark.connect.ClearCache clear_cache = 21;</code>
   */
  org.apache.spark.connect.proto.ClearCacheOrBuilder getClearCacheOrBuilder();

  /**
   * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
   * @return Whether the refreshTable field is set.
   */
  boolean hasRefreshTable();
  /**
   * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
   * @return The refreshTable.
   */
  org.apache.spark.connect.proto.RefreshTable getRefreshTable();
  /**
   * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
   */
  org.apache.spark.connect.proto.RefreshTableOrBuilder getRefreshTableOrBuilder();

  /**
   * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
   * @return Whether the refreshByPath field is set.
   */
  boolean hasRefreshByPath();
  /**
   * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
   * @return The refreshByPath.
   */
  org.apache.spark.connect.proto.RefreshByPath getRefreshByPath();
  /**
   * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
   */
  org.apache.spark.connect.proto.RefreshByPathOrBuilder getRefreshByPathOrBuilder();

  /**
   * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
   * @return Whether the currentCatalog field is set.
   */
  boolean hasCurrentCatalog();
  /**
   * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
   * @return The currentCatalog.
   */
  org.apache.spark.connect.proto.CurrentCatalog getCurrentCatalog();
  /**
   * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
   */
  org.apache.spark.connect.proto.CurrentCatalogOrBuilder getCurrentCatalogOrBuilder();

  /**
   * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
   * @return Whether the setCurrentCatalog field is set.
   */
  boolean hasSetCurrentCatalog();
  /**
   * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
   * @return The setCurrentCatalog.
   */
  org.apache.spark.connect.proto.SetCurrentCatalog getSetCurrentCatalog();
  /**
   * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
   */
  org.apache.spark.connect.proto.SetCurrentCatalogOrBuilder getSetCurrentCatalogOrBuilder();

  /**
   * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
   * @return Whether the listCatalogs field is set.
   */
  boolean hasListCatalogs();
  /**
   * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
   * @return The listCatalogs.
   */
  org.apache.spark.connect.proto.ListCatalogs getListCatalogs();
  /**
   * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
   */
  org.apache.spark.connect.proto.ListCatalogsOrBuilder getListCatalogsOrBuilder();

  org.apache.spark.connect.proto.Catalog.CatTypeCase getCatTypeCase();
}
