// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * Protobuf type {@code spark.connect.CoGroupMap}
 */
public final class CoGroupMap extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.CoGroupMap)
    CoGroupMapOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CoGroupMap.newBuilder() to construct.
  private CoGroupMap(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CoGroupMap() {
    inputGroupingExpressions_ = java.util.Collections.emptyList();
    otherGroupingExpressions_ = java.util.Collections.emptyList();
    inputSortingExpressions_ = java.util.Collections.emptyList();
    otherSortingExpressions_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new CoGroupMap();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_CoGroupMap_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_CoGroupMap_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.CoGroupMap.class, org.apache.spark.connect.proto.CoGroupMap.Builder.class);
  }

  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.spark.connect.proto.Relation input_;
  /**
   * <pre>
   * (Required) One input relation for CoGroup Map API - applyInPandas.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  @Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   * <pre>
   * (Required) One input relation for CoGroup Map API - applyInPandas.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  @Override
  public org.apache.spark.connect.proto.Relation getInput() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }
  /**
   * <pre>
   * (Required) One input relation for CoGroup Map API - applyInPandas.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }

  public static final int INPUT_GROUPING_EXPRESSIONS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.Expression> inputGroupingExpressions_;
  /**
   * <pre>
   * Expressions for grouping keys of the first input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.Expression> getInputGroupingExpressionsList() {
    return inputGroupingExpressions_;
  }
  /**
   * <pre>
   * Expressions for grouping keys of the first input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
      getInputGroupingExpressionsOrBuilderList() {
    return inputGroupingExpressions_;
  }
  /**
   * <pre>
   * Expressions for grouping keys of the first input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
   */
  @Override
  public int getInputGroupingExpressionsCount() {
    return inputGroupingExpressions_.size();
  }
  /**
   * <pre>
   * Expressions for grouping keys of the first input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Expression getInputGroupingExpressions(int index) {
    return inputGroupingExpressions_.get(index);
  }
  /**
   * <pre>
   * Expressions for grouping keys of the first input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getInputGroupingExpressionsOrBuilder(
      int index) {
    return inputGroupingExpressions_.get(index);
  }

  public static final int OTHER_FIELD_NUMBER = 3;
  private org.apache.spark.connect.proto.Relation other_;
  /**
   * <pre>
   * (Required) The other input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation other = 3;</code>
   * @return Whether the other field is set.
   */
  @Override
  public boolean hasOther() {
    return other_ != null;
  }
  /**
   * <pre>
   * (Required) The other input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation other = 3;</code>
   * @return The other.
   */
  @Override
  public org.apache.spark.connect.proto.Relation getOther() {
    return other_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : other_;
  }
  /**
   * <pre>
   * (Required) The other input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation other = 3;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationOrBuilder getOtherOrBuilder() {
    return other_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : other_;
  }

  public static final int OTHER_GROUPING_EXPRESSIONS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.Expression> otherGroupingExpressions_;
  /**
   * <pre>
   * Expressions for grouping keys of the other input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.Expression> getOtherGroupingExpressionsList() {
    return otherGroupingExpressions_;
  }
  /**
   * <pre>
   * Expressions for grouping keys of the other input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
      getOtherGroupingExpressionsOrBuilderList() {
    return otherGroupingExpressions_;
  }
  /**
   * <pre>
   * Expressions for grouping keys of the other input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
   */
  @Override
  public int getOtherGroupingExpressionsCount() {
    return otherGroupingExpressions_.size();
  }
  /**
   * <pre>
   * Expressions for grouping keys of the other input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Expression getOtherGroupingExpressions(int index) {
    return otherGroupingExpressions_.get(index);
  }
  /**
   * <pre>
   * Expressions for grouping keys of the other input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getOtherGroupingExpressionsOrBuilder(
      int index) {
    return otherGroupingExpressions_.get(index);
  }

  public static final int FUNC_FIELD_NUMBER = 5;
  private org.apache.spark.connect.proto.CommonInlineUserDefinedFunction func_;
  /**
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
   * @return Whether the func field is set.
   */
  @Override
  public boolean hasFunc() {
    return func_ != null;
  }
  /**
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
   * @return The func.
   */
  @Override
  public org.apache.spark.connect.proto.CommonInlineUserDefinedFunction getFunc() {
    return func_ == null ? org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance() : func_;
  }
  /**
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
   */
  @Override
  public org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder getFuncOrBuilder() {
    return func_ == null ? org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance() : func_;
  }

  public static final int INPUT_SORTING_EXPRESSIONS_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.Expression> inputSortingExpressions_;
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.Expression> getInputSortingExpressionsList() {
    return inputSortingExpressions_;
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
      getInputSortingExpressionsOrBuilderList() {
    return inputSortingExpressions_;
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
   */
  @Override
  public int getInputSortingExpressionsCount() {
    return inputSortingExpressions_.size();
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Expression getInputSortingExpressions(int index) {
    return inputSortingExpressions_.get(index);
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getInputSortingExpressionsOrBuilder(
      int index) {
    return inputSortingExpressions_.get(index);
  }

  public static final int OTHER_SORTING_EXPRESSIONS_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.Expression> otherSortingExpressions_;
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.Expression> getOtherSortingExpressionsList() {
    return otherSortingExpressions_;
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
      getOtherSortingExpressionsOrBuilderList() {
    return otherSortingExpressions_;
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
   */
  @Override
  public int getOtherSortingExpressionsCount() {
    return otherSortingExpressions_.size();
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Expression getOtherSortingExpressions(int index) {
    return otherSortingExpressions_.get(index);
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getOtherSortingExpressionsOrBuilder(
      int index) {
    return otherSortingExpressions_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    for (int i = 0; i < inputGroupingExpressions_.size(); i++) {
      output.writeMessage(2, inputGroupingExpressions_.get(i));
    }
    if (other_ != null) {
      output.writeMessage(3, getOther());
    }
    for (int i = 0; i < otherGroupingExpressions_.size(); i++) {
      output.writeMessage(4, otherGroupingExpressions_.get(i));
    }
    if (func_ != null) {
      output.writeMessage(5, getFunc());
    }
    for (int i = 0; i < inputSortingExpressions_.size(); i++) {
      output.writeMessage(6, inputSortingExpressions_.get(i));
    }
    for (int i = 0; i < otherSortingExpressions_.size(); i++) {
      output.writeMessage(7, otherSortingExpressions_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInput());
    }
    for (int i = 0; i < inputGroupingExpressions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, inputGroupingExpressions_.get(i));
    }
    if (other_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getOther());
    }
    for (int i = 0; i < otherGroupingExpressions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, otherGroupingExpressions_.get(i));
    }
    if (func_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getFunc());
    }
    for (int i = 0; i < inputSortingExpressions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, inputSortingExpressions_.get(i));
    }
    for (int i = 0; i < otherSortingExpressions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, otherSortingExpressions_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.CoGroupMap)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.CoGroupMap other = (org.apache.spark.connect.proto.CoGroupMap) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput()
          .equals(other.getInput())) return false;
    }
    if (!getInputGroupingExpressionsList()
        .equals(other.getInputGroupingExpressionsList())) return false;
    if (hasOther() != other.hasOther()) return false;
    if (hasOther()) {
      if (!getOther()
          .equals(other.getOther())) return false;
    }
    if (!getOtherGroupingExpressionsList()
        .equals(other.getOtherGroupingExpressionsList())) return false;
    if (hasFunc() != other.hasFunc()) return false;
    if (hasFunc()) {
      if (!getFunc()
          .equals(other.getFunc())) return false;
    }
    if (!getInputSortingExpressionsList()
        .equals(other.getInputSortingExpressionsList())) return false;
    if (!getOtherSortingExpressionsList()
        .equals(other.getOtherSortingExpressionsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    if (getInputGroupingExpressionsCount() > 0) {
      hash = (37 * hash) + INPUT_GROUPING_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getInputGroupingExpressionsList().hashCode();
    }
    if (hasOther()) {
      hash = (37 * hash) + OTHER_FIELD_NUMBER;
      hash = (53 * hash) + getOther().hashCode();
    }
    if (getOtherGroupingExpressionsCount() > 0) {
      hash = (37 * hash) + OTHER_GROUPING_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getOtherGroupingExpressionsList().hashCode();
    }
    if (hasFunc()) {
      hash = (37 * hash) + FUNC_FIELD_NUMBER;
      hash = (53 * hash) + getFunc().hashCode();
    }
    if (getInputSortingExpressionsCount() > 0) {
      hash = (37 * hash) + INPUT_SORTING_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getInputSortingExpressionsList().hashCode();
    }
    if (getOtherSortingExpressionsCount() > 0) {
      hash = (37 * hash) + OTHER_SORTING_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getOtherSortingExpressionsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.CoGroupMap parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.CoGroupMap parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.CoGroupMap parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.CoGroupMap parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.CoGroupMap parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.CoGroupMap parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.CoGroupMap parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.CoGroupMap parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.CoGroupMap parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.CoGroupMap parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.CoGroupMap parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.CoGroupMap parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.CoGroupMap prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code spark.connect.CoGroupMap}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.CoGroupMap)
      org.apache.spark.connect.proto.CoGroupMapOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_CoGroupMap_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_CoGroupMap_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.CoGroupMap.class, org.apache.spark.connect.proto.CoGroupMap.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.CoGroupMap.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      if (inputGroupingExpressionsBuilder_ == null) {
        inputGroupingExpressions_ = java.util.Collections.emptyList();
      } else {
        inputGroupingExpressions_ = null;
        inputGroupingExpressionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      other_ = null;
      if (otherBuilder_ != null) {
        otherBuilder_.dispose();
        otherBuilder_ = null;
      }
      if (otherGroupingExpressionsBuilder_ == null) {
        otherGroupingExpressions_ = java.util.Collections.emptyList();
      } else {
        otherGroupingExpressions_ = null;
        otherGroupingExpressionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      func_ = null;
      if (funcBuilder_ != null) {
        funcBuilder_.dispose();
        funcBuilder_ = null;
      }
      if (inputSortingExpressionsBuilder_ == null) {
        inputSortingExpressions_ = java.util.Collections.emptyList();
      } else {
        inputSortingExpressions_ = null;
        inputSortingExpressionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      if (otherSortingExpressionsBuilder_ == null) {
        otherSortingExpressions_ = java.util.Collections.emptyList();
      } else {
        otherSortingExpressions_ = null;
        otherSortingExpressionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000040);
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_CoGroupMap_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.CoGroupMap getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.CoGroupMap.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.CoGroupMap build() {
      org.apache.spark.connect.proto.CoGroupMap result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.CoGroupMap buildPartial() {
      org.apache.spark.connect.proto.CoGroupMap result = new org.apache.spark.connect.proto.CoGroupMap(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.apache.spark.connect.proto.CoGroupMap result) {
      if (inputGroupingExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          inputGroupingExpressions_ = java.util.Collections.unmodifiableList(inputGroupingExpressions_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.inputGroupingExpressions_ = inputGroupingExpressions_;
      } else {
        result.inputGroupingExpressions_ = inputGroupingExpressionsBuilder_.build();
      }
      if (otherGroupingExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          otherGroupingExpressions_ = java.util.Collections.unmodifiableList(otherGroupingExpressions_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.otherGroupingExpressions_ = otherGroupingExpressions_;
      } else {
        result.otherGroupingExpressions_ = otherGroupingExpressionsBuilder_.build();
      }
      if (inputSortingExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          inputSortingExpressions_ = java.util.Collections.unmodifiableList(inputSortingExpressions_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.inputSortingExpressions_ = inputSortingExpressions_;
      } else {
        result.inputSortingExpressions_ = inputSortingExpressionsBuilder_.build();
      }
      if (otherSortingExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0)) {
          otherSortingExpressions_ = java.util.Collections.unmodifiableList(otherSortingExpressions_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.otherSortingExpressions_ = otherSortingExpressions_;
      } else {
        result.otherSortingExpressions_ = otherSortingExpressionsBuilder_.build();
      }
    }

    private void buildPartial0(org.apache.spark.connect.proto.CoGroupMap result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.input_ = inputBuilder_ == null
            ? input_
            : inputBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.other_ = otherBuilder_ == null
            ? other_
            : otherBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.func_ = funcBuilder_ == null
            ? func_
            : funcBuilder_.build();
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.CoGroupMap) {
        return mergeFrom((org.apache.spark.connect.proto.CoGroupMap)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.CoGroupMap other) {
      if (other == org.apache.spark.connect.proto.CoGroupMap.getDefaultInstance()) return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      if (inputGroupingExpressionsBuilder_ == null) {
        if (!other.inputGroupingExpressions_.isEmpty()) {
          if (inputGroupingExpressions_.isEmpty()) {
            inputGroupingExpressions_ = other.inputGroupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureInputGroupingExpressionsIsMutable();
            inputGroupingExpressions_.addAll(other.inputGroupingExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.inputGroupingExpressions_.isEmpty()) {
          if (inputGroupingExpressionsBuilder_.isEmpty()) {
            inputGroupingExpressionsBuilder_.dispose();
            inputGroupingExpressionsBuilder_ = null;
            inputGroupingExpressions_ = other.inputGroupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000002);
            inputGroupingExpressionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInputGroupingExpressionsFieldBuilder() : null;
          } else {
            inputGroupingExpressionsBuilder_.addAllMessages(other.inputGroupingExpressions_);
          }
        }
      }
      if (other.hasOther()) {
        mergeOther(other.getOther());
      }
      if (otherGroupingExpressionsBuilder_ == null) {
        if (!other.otherGroupingExpressions_.isEmpty()) {
          if (otherGroupingExpressions_.isEmpty()) {
            otherGroupingExpressions_ = other.otherGroupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureOtherGroupingExpressionsIsMutable();
            otherGroupingExpressions_.addAll(other.otherGroupingExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.otherGroupingExpressions_.isEmpty()) {
          if (otherGroupingExpressionsBuilder_.isEmpty()) {
            otherGroupingExpressionsBuilder_.dispose();
            otherGroupingExpressionsBuilder_ = null;
            otherGroupingExpressions_ = other.otherGroupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000008);
            otherGroupingExpressionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getOtherGroupingExpressionsFieldBuilder() : null;
          } else {
            otherGroupingExpressionsBuilder_.addAllMessages(other.otherGroupingExpressions_);
          }
        }
      }
      if (other.hasFunc()) {
        mergeFunc(other.getFunc());
      }
      if (inputSortingExpressionsBuilder_ == null) {
        if (!other.inputSortingExpressions_.isEmpty()) {
          if (inputSortingExpressions_.isEmpty()) {
            inputSortingExpressions_ = other.inputSortingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureInputSortingExpressionsIsMutable();
            inputSortingExpressions_.addAll(other.inputSortingExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.inputSortingExpressions_.isEmpty()) {
          if (inputSortingExpressionsBuilder_.isEmpty()) {
            inputSortingExpressionsBuilder_.dispose();
            inputSortingExpressionsBuilder_ = null;
            inputSortingExpressions_ = other.inputSortingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000020);
            inputSortingExpressionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInputSortingExpressionsFieldBuilder() : null;
          } else {
            inputSortingExpressionsBuilder_.addAllMessages(other.inputSortingExpressions_);
          }
        }
      }
      if (otherSortingExpressionsBuilder_ == null) {
        if (!other.otherSortingExpressions_.isEmpty()) {
          if (otherSortingExpressions_.isEmpty()) {
            otherSortingExpressions_ = other.otherSortingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureOtherSortingExpressionsIsMutable();
            otherSortingExpressions_.addAll(other.otherSortingExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.otherSortingExpressions_.isEmpty()) {
          if (otherSortingExpressionsBuilder_.isEmpty()) {
            otherSortingExpressionsBuilder_.dispose();
            otherSortingExpressionsBuilder_ = null;
            otherSortingExpressions_ = other.otherSortingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000040);
            otherSortingExpressionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getOtherSortingExpressionsFieldBuilder() : null;
          } else {
            otherSortingExpressionsBuilder_.addAllMessages(other.otherSortingExpressions_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getInputFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              org.apache.spark.connect.proto.Expression m =
                  input.readMessage(
                      org.apache.spark.connect.proto.Expression.parser(),
                      extensionRegistry);
              if (inputGroupingExpressionsBuilder_ == null) {
                ensureInputGroupingExpressionsIsMutable();
                inputGroupingExpressions_.add(m);
              } else {
                inputGroupingExpressionsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getOtherFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              org.apache.spark.connect.proto.Expression m =
                  input.readMessage(
                      org.apache.spark.connect.proto.Expression.parser(),
                      extensionRegistry);
              if (otherGroupingExpressionsBuilder_ == null) {
                ensureOtherGroupingExpressionsIsMutable();
                otherGroupingExpressions_.add(m);
              } else {
                otherGroupingExpressionsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getFuncFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              org.apache.spark.connect.proto.Expression m =
                  input.readMessage(
                      org.apache.spark.connect.proto.Expression.parser(),
                      extensionRegistry);
              if (inputSortingExpressionsBuilder_ == null) {
                ensureInputSortingExpressionsIsMutable();
                inputSortingExpressions_.add(m);
              } else {
                inputSortingExpressionsBuilder_.addMessage(m);
              }
              break;
            } // case 50
            case 58: {
              org.apache.spark.connect.proto.Expression m =
                  input.readMessage(
                      org.apache.spark.connect.proto.Expression.parser(),
                      extensionRegistry);
              if (otherSortingExpressionsBuilder_ == null) {
                ensureOtherSortingExpressionsIsMutable();
                otherSortingExpressions_.add(m);
              } else {
                otherSortingExpressionsBuilder_.addMessage(m);
              }
              break;
            } // case 58
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.apache.spark.connect.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> inputBuilder_;
    /**
     * <pre>
     * (Required) One input relation for CoGroup Map API - applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Required) One input relation for CoGroup Map API - applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return The input.
     */
    public org.apache.spark.connect.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) One input relation for CoGroup Map API - applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
      } else {
        inputBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) One input relation for CoGroup Map API - applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.spark.connect.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) One input relation for CoGroup Map API - applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          input_ != null &&
          input_ != org.apache.spark.connect.proto.Relation.getDefaultInstance()) {
          getInputBuilder().mergeFrom(value);
        } else {
          input_ = value;
        }
      } else {
        inputBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) One input relation for CoGroup Map API - applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      bitField0_ = (bitField0_ & ~0x00000001);
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) One input relation for CoGroup Map API - applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.Relation.Builder getInputBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) One input relation for CoGroup Map API - applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null ?
            org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      }
    }
    /**
     * <pre>
     * (Required) One input relation for CoGroup Map API - applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> 
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder>(
                getInput(),
                getParentForChildren(),
                isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private java.util.List<org.apache.spark.connect.proto.Expression> inputGroupingExpressions_ =
      java.util.Collections.emptyList();
    private void ensureInputGroupingExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        inputGroupingExpressions_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression>(inputGroupingExpressions_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> inputGroupingExpressionsBuilder_;

    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression> getInputGroupingExpressionsList() {
      if (inputGroupingExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(inputGroupingExpressions_);
      } else {
        return inputGroupingExpressionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public int getInputGroupingExpressionsCount() {
      if (inputGroupingExpressionsBuilder_ == null) {
        return inputGroupingExpressions_.size();
      } else {
        return inputGroupingExpressionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public org.apache.spark.connect.proto.Expression getInputGroupingExpressions(int index) {
      if (inputGroupingExpressionsBuilder_ == null) {
        return inputGroupingExpressions_.get(index);
      } else {
        return inputGroupingExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public Builder setInputGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (inputGroupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputGroupingExpressionsIsMutable();
        inputGroupingExpressions_.set(index, value);
        onChanged();
      } else {
        inputGroupingExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public Builder setInputGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (inputGroupingExpressionsBuilder_ == null) {
        ensureInputGroupingExpressionsIsMutable();
        inputGroupingExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        inputGroupingExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public Builder addInputGroupingExpressions(org.apache.spark.connect.proto.Expression value) {
      if (inputGroupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputGroupingExpressionsIsMutable();
        inputGroupingExpressions_.add(value);
        onChanged();
      } else {
        inputGroupingExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public Builder addInputGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (inputGroupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputGroupingExpressionsIsMutable();
        inputGroupingExpressions_.add(index, value);
        onChanged();
      } else {
        inputGroupingExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public Builder addInputGroupingExpressions(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (inputGroupingExpressionsBuilder_ == null) {
        ensureInputGroupingExpressionsIsMutable();
        inputGroupingExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        inputGroupingExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public Builder addInputGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (inputGroupingExpressionsBuilder_ == null) {
        ensureInputGroupingExpressionsIsMutable();
        inputGroupingExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        inputGroupingExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public Builder addAllInputGroupingExpressions(
        Iterable<? extends org.apache.spark.connect.proto.Expression> values) {
      if (inputGroupingExpressionsBuilder_ == null) {
        ensureInputGroupingExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, inputGroupingExpressions_);
        onChanged();
      } else {
        inputGroupingExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public Builder clearInputGroupingExpressions() {
      if (inputGroupingExpressionsBuilder_ == null) {
        inputGroupingExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        inputGroupingExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public Builder removeInputGroupingExpressions(int index) {
      if (inputGroupingExpressionsBuilder_ == null) {
        ensureInputGroupingExpressionsIsMutable();
        inputGroupingExpressions_.remove(index);
        onChanged();
      } else {
        inputGroupingExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getInputGroupingExpressionsBuilder(
        int index) {
      return getInputGroupingExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getInputGroupingExpressionsOrBuilder(
        int index) {
      if (inputGroupingExpressionsBuilder_ == null) {
        return inputGroupingExpressions_.get(index);  } else {
        return inputGroupingExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
         getInputGroupingExpressionsOrBuilderList() {
      if (inputGroupingExpressionsBuilder_ != null) {
        return inputGroupingExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(inputGroupingExpressions_);
      }
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addInputGroupingExpressionsBuilder() {
      return getInputGroupingExpressionsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addInputGroupingExpressionsBuilder(
        int index) {
      return getInputGroupingExpressionsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * Expressions for grouping keys of the first input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_grouping_expressions = 2;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression.Builder> 
         getInputGroupingExpressionsBuilderList() {
      return getInputGroupingExpressionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getInputGroupingExpressionsFieldBuilder() {
      if (inputGroupingExpressionsBuilder_ == null) {
        inputGroupingExpressionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                inputGroupingExpressions_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        inputGroupingExpressions_ = null;
      }
      return inputGroupingExpressionsBuilder_;
    }

    private org.apache.spark.connect.proto.Relation other_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> otherBuilder_;
    /**
     * <pre>
     * (Required) The other input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation other = 3;</code>
     * @return Whether the other field is set.
     */
    public boolean hasOther() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * (Required) The other input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation other = 3;</code>
     * @return The other.
     */
    public org.apache.spark.connect.proto.Relation getOther() {
      if (otherBuilder_ == null) {
        return other_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : other_;
      } else {
        return otherBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) The other input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation other = 3;</code>
     */
    public Builder setOther(org.apache.spark.connect.proto.Relation value) {
      if (otherBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        other_ = value;
      } else {
        otherBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The other input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation other = 3;</code>
     */
    public Builder setOther(
        org.apache.spark.connect.proto.Relation.Builder builderForValue) {
      if (otherBuilder_ == null) {
        other_ = builderForValue.build();
      } else {
        otherBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The other input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation other = 3;</code>
     */
    public Builder mergeOther(org.apache.spark.connect.proto.Relation value) {
      if (otherBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          other_ != null &&
          other_ != org.apache.spark.connect.proto.Relation.getDefaultInstance()) {
          getOtherBuilder().mergeFrom(value);
        } else {
          other_ = value;
        }
      } else {
        otherBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The other input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation other = 3;</code>
     */
    public Builder clearOther() {
      bitField0_ = (bitField0_ & ~0x00000004);
      other_ = null;
      if (otherBuilder_ != null) {
        otherBuilder_.dispose();
        otherBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The other input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation other = 3;</code>
     */
    public org.apache.spark.connect.proto.Relation.Builder getOtherBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getOtherFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) The other input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation other = 3;</code>
     */
    public org.apache.spark.connect.proto.RelationOrBuilder getOtherOrBuilder() {
      if (otherBuilder_ != null) {
        return otherBuilder_.getMessageOrBuilder();
      } else {
        return other_ == null ?
            org.apache.spark.connect.proto.Relation.getDefaultInstance() : other_;
      }
    }
    /**
     * <pre>
     * (Required) The other input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation other = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> 
        getOtherFieldBuilder() {
      if (otherBuilder_ == null) {
        otherBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder>(
                getOther(),
                getParentForChildren(),
                isClean());
        other_ = null;
      }
      return otherBuilder_;
    }

    private java.util.List<org.apache.spark.connect.proto.Expression> otherGroupingExpressions_ =
      java.util.Collections.emptyList();
    private void ensureOtherGroupingExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        otherGroupingExpressions_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression>(otherGroupingExpressions_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> otherGroupingExpressionsBuilder_;

    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression> getOtherGroupingExpressionsList() {
      if (otherGroupingExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(otherGroupingExpressions_);
      } else {
        return otherGroupingExpressionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public int getOtherGroupingExpressionsCount() {
      if (otherGroupingExpressionsBuilder_ == null) {
        return otherGroupingExpressions_.size();
      } else {
        return otherGroupingExpressionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression getOtherGroupingExpressions(int index) {
      if (otherGroupingExpressionsBuilder_ == null) {
        return otherGroupingExpressions_.get(index);
      } else {
        return otherGroupingExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public Builder setOtherGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (otherGroupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOtherGroupingExpressionsIsMutable();
        otherGroupingExpressions_.set(index, value);
        onChanged();
      } else {
        otherGroupingExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public Builder setOtherGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (otherGroupingExpressionsBuilder_ == null) {
        ensureOtherGroupingExpressionsIsMutable();
        otherGroupingExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        otherGroupingExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public Builder addOtherGroupingExpressions(org.apache.spark.connect.proto.Expression value) {
      if (otherGroupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOtherGroupingExpressionsIsMutable();
        otherGroupingExpressions_.add(value);
        onChanged();
      } else {
        otherGroupingExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public Builder addOtherGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (otherGroupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOtherGroupingExpressionsIsMutable();
        otherGroupingExpressions_.add(index, value);
        onChanged();
      } else {
        otherGroupingExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public Builder addOtherGroupingExpressions(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (otherGroupingExpressionsBuilder_ == null) {
        ensureOtherGroupingExpressionsIsMutable();
        otherGroupingExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        otherGroupingExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public Builder addOtherGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (otherGroupingExpressionsBuilder_ == null) {
        ensureOtherGroupingExpressionsIsMutable();
        otherGroupingExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        otherGroupingExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public Builder addAllOtherGroupingExpressions(
        Iterable<? extends org.apache.spark.connect.proto.Expression> values) {
      if (otherGroupingExpressionsBuilder_ == null) {
        ensureOtherGroupingExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, otherGroupingExpressions_);
        onChanged();
      } else {
        otherGroupingExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public Builder clearOtherGroupingExpressions() {
      if (otherGroupingExpressionsBuilder_ == null) {
        otherGroupingExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        otherGroupingExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public Builder removeOtherGroupingExpressions(int index) {
      if (otherGroupingExpressionsBuilder_ == null) {
        ensureOtherGroupingExpressionsIsMutable();
        otherGroupingExpressions_.remove(index);
        onChanged();
      } else {
        otherGroupingExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getOtherGroupingExpressionsBuilder(
        int index) {
      return getOtherGroupingExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getOtherGroupingExpressionsOrBuilder(
        int index) {
      if (otherGroupingExpressionsBuilder_ == null) {
        return otherGroupingExpressions_.get(index);  } else {
        return otherGroupingExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
         getOtherGroupingExpressionsOrBuilderList() {
      if (otherGroupingExpressionsBuilder_ != null) {
        return otherGroupingExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(otherGroupingExpressions_);
      }
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addOtherGroupingExpressionsBuilder() {
      return getOtherGroupingExpressionsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addOtherGroupingExpressionsBuilder(
        int index) {
      return getOtherGroupingExpressionsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * Expressions for grouping keys of the other input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_grouping_expressions = 4;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression.Builder> 
         getOtherGroupingExpressionsBuilderList() {
      return getOtherGroupingExpressionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getOtherGroupingExpressionsFieldBuilder() {
      if (otherGroupingExpressionsBuilder_ == null) {
        otherGroupingExpressionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                otherGroupingExpressions_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        otherGroupingExpressions_ = null;
      }
      return otherGroupingExpressionsBuilder_;
    }

    private org.apache.spark.connect.proto.CommonInlineUserDefinedFunction func_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder> funcBuilder_;
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
     * @return Whether the func field is set.
     */
    public boolean hasFunc() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
     * @return The func.
     */
    public org.apache.spark.connect.proto.CommonInlineUserDefinedFunction getFunc() {
      if (funcBuilder_ == null) {
        return func_ == null ? org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance() : func_;
      } else {
        return funcBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
     */
    public Builder setFunc(org.apache.spark.connect.proto.CommonInlineUserDefinedFunction value) {
      if (funcBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        func_ = value;
      } else {
        funcBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
     */
    public Builder setFunc(
        org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.Builder builderForValue) {
      if (funcBuilder_ == null) {
        func_ = builderForValue.build();
      } else {
        funcBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
     */
    public Builder mergeFunc(org.apache.spark.connect.proto.CommonInlineUserDefinedFunction value) {
      if (funcBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          func_ != null &&
          func_ != org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance()) {
          getFuncBuilder().mergeFrom(value);
        } else {
          func_ = value;
        }
      } else {
        funcBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
     */
    public Builder clearFunc() {
      bitField0_ = (bitField0_ & ~0x00000010);
      func_ = null;
      if (funcBuilder_ != null) {
        funcBuilder_.dispose();
        funcBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
     */
    public org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.Builder getFuncBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getFuncFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
     */
    public org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder getFuncOrBuilder() {
      if (funcBuilder_ != null) {
        return funcBuilder_.getMessageOrBuilder();
      } else {
        return func_ == null ?
            org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance() : func_;
      }
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder> 
        getFuncFieldBuilder() {
      if (funcBuilder_ == null) {
        funcBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder>(
                getFunc(),
                getParentForChildren(),
                isClean());
        func_ = null;
      }
      return funcBuilder_;
    }

    private java.util.List<org.apache.spark.connect.proto.Expression> inputSortingExpressions_ =
      java.util.Collections.emptyList();
    private void ensureInputSortingExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        inputSortingExpressions_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression>(inputSortingExpressions_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> inputSortingExpressionsBuilder_;

    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression> getInputSortingExpressionsList() {
      if (inputSortingExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(inputSortingExpressions_);
      } else {
        return inputSortingExpressionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public int getInputSortingExpressionsCount() {
      if (inputSortingExpressionsBuilder_ == null) {
        return inputSortingExpressions_.size();
      } else {
        return inputSortingExpressionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public org.apache.spark.connect.proto.Expression getInputSortingExpressions(int index) {
      if (inputSortingExpressionsBuilder_ == null) {
        return inputSortingExpressions_.get(index);
      } else {
        return inputSortingExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public Builder setInputSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (inputSortingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputSortingExpressionsIsMutable();
        inputSortingExpressions_.set(index, value);
        onChanged();
      } else {
        inputSortingExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public Builder setInputSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (inputSortingExpressionsBuilder_ == null) {
        ensureInputSortingExpressionsIsMutable();
        inputSortingExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        inputSortingExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public Builder addInputSortingExpressions(org.apache.spark.connect.proto.Expression value) {
      if (inputSortingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputSortingExpressionsIsMutable();
        inputSortingExpressions_.add(value);
        onChanged();
      } else {
        inputSortingExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public Builder addInputSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (inputSortingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputSortingExpressionsIsMutable();
        inputSortingExpressions_.add(index, value);
        onChanged();
      } else {
        inputSortingExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public Builder addInputSortingExpressions(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (inputSortingExpressionsBuilder_ == null) {
        ensureInputSortingExpressionsIsMutable();
        inputSortingExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        inputSortingExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public Builder addInputSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (inputSortingExpressionsBuilder_ == null) {
        ensureInputSortingExpressionsIsMutable();
        inputSortingExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        inputSortingExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public Builder addAllInputSortingExpressions(
        Iterable<? extends org.apache.spark.connect.proto.Expression> values) {
      if (inputSortingExpressionsBuilder_ == null) {
        ensureInputSortingExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, inputSortingExpressions_);
        onChanged();
      } else {
        inputSortingExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public Builder clearInputSortingExpressions() {
      if (inputSortingExpressionsBuilder_ == null) {
        inputSortingExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        inputSortingExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public Builder removeInputSortingExpressions(int index) {
      if (inputSortingExpressionsBuilder_ == null) {
        ensureInputSortingExpressionsIsMutable();
        inputSortingExpressions_.remove(index);
        onChanged();
      } else {
        inputSortingExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getInputSortingExpressionsBuilder(
        int index) {
      return getInputSortingExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getInputSortingExpressionsOrBuilder(
        int index) {
      if (inputSortingExpressionsBuilder_ == null) {
        return inputSortingExpressions_.get(index);  } else {
        return inputSortingExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
         getInputSortingExpressionsOrBuilderList() {
      if (inputSortingExpressionsBuilder_ != null) {
        return inputSortingExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(inputSortingExpressions_);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addInputSortingExpressionsBuilder() {
      return getInputSortingExpressionsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addInputSortingExpressionsBuilder(
        int index) {
      return getInputSortingExpressionsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression input_sorting_expressions = 6;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression.Builder> 
         getInputSortingExpressionsBuilderList() {
      return getInputSortingExpressionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getInputSortingExpressionsFieldBuilder() {
      if (inputSortingExpressionsBuilder_ == null) {
        inputSortingExpressionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                inputSortingExpressions_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        inputSortingExpressions_ = null;
      }
      return inputSortingExpressionsBuilder_;
    }

    private java.util.List<org.apache.spark.connect.proto.Expression> otherSortingExpressions_ =
      java.util.Collections.emptyList();
    private void ensureOtherSortingExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        otherSortingExpressions_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression>(otherSortingExpressions_);
        bitField0_ |= 0x00000040;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> otherSortingExpressionsBuilder_;

    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression> getOtherSortingExpressionsList() {
      if (otherSortingExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(otherSortingExpressions_);
      } else {
        return otherSortingExpressionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public int getOtherSortingExpressionsCount() {
      if (otherSortingExpressionsBuilder_ == null) {
        return otherSortingExpressions_.size();
      } else {
        return otherSortingExpressionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public org.apache.spark.connect.proto.Expression getOtherSortingExpressions(int index) {
      if (otherSortingExpressionsBuilder_ == null) {
        return otherSortingExpressions_.get(index);
      } else {
        return otherSortingExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public Builder setOtherSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (otherSortingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOtherSortingExpressionsIsMutable();
        otherSortingExpressions_.set(index, value);
        onChanged();
      } else {
        otherSortingExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public Builder setOtherSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (otherSortingExpressionsBuilder_ == null) {
        ensureOtherSortingExpressionsIsMutable();
        otherSortingExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        otherSortingExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public Builder addOtherSortingExpressions(org.apache.spark.connect.proto.Expression value) {
      if (otherSortingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOtherSortingExpressionsIsMutable();
        otherSortingExpressions_.add(value);
        onChanged();
      } else {
        otherSortingExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public Builder addOtherSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (otherSortingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOtherSortingExpressionsIsMutable();
        otherSortingExpressions_.add(index, value);
        onChanged();
      } else {
        otherSortingExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public Builder addOtherSortingExpressions(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (otherSortingExpressionsBuilder_ == null) {
        ensureOtherSortingExpressionsIsMutable();
        otherSortingExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        otherSortingExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public Builder addOtherSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (otherSortingExpressionsBuilder_ == null) {
        ensureOtherSortingExpressionsIsMutable();
        otherSortingExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        otherSortingExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public Builder addAllOtherSortingExpressions(
        Iterable<? extends org.apache.spark.connect.proto.Expression> values) {
      if (otherSortingExpressionsBuilder_ == null) {
        ensureOtherSortingExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, otherSortingExpressions_);
        onChanged();
      } else {
        otherSortingExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public Builder clearOtherSortingExpressions() {
      if (otherSortingExpressionsBuilder_ == null) {
        otherSortingExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
      } else {
        otherSortingExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public Builder removeOtherSortingExpressions(int index) {
      if (otherSortingExpressionsBuilder_ == null) {
        ensureOtherSortingExpressionsIsMutable();
        otherSortingExpressions_.remove(index);
        onChanged();
      } else {
        otherSortingExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getOtherSortingExpressionsBuilder(
        int index) {
      return getOtherSortingExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getOtherSortingExpressionsOrBuilder(
        int index) {
      if (otherSortingExpressionsBuilder_ == null) {
        return otherSortingExpressions_.get(index);  } else {
        return otherSortingExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
         getOtherSortingExpressionsOrBuilderList() {
      if (otherSortingExpressionsBuilder_ != null) {
        return otherSortingExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(otherSortingExpressions_);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addOtherSortingExpressionsBuilder() {
      return getOtherSortingExpressionsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addOtherSortingExpressionsBuilder(
        int index) {
      return getOtherSortingExpressionsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted CoGroup Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression other_sorting_expressions = 7;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression.Builder> 
         getOtherSortingExpressionsBuilderList() {
      return getOtherSortingExpressionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getOtherSortingExpressionsFieldBuilder() {
      if (otherSortingExpressionsBuilder_ == null) {
        otherSortingExpressionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                otherSortingExpressions_,
                ((bitField0_ & 0x00000040) != 0),
                getParentForChildren(),
                isClean());
        otherSortingExpressions_ = null;
      }
      return otherSortingExpressionsBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.CoGroupMap)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.CoGroupMap)
  private static final org.apache.spark.connect.proto.CoGroupMap DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.CoGroupMap();
  }

  public static org.apache.spark.connect.proto.CoGroupMap getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CoGroupMap>
      PARSER = new com.google.protobuf.AbstractParser<CoGroupMap>() {
    @Override
    public CoGroupMap parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CoGroupMap> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<CoGroupMap> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.CoGroupMap getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

