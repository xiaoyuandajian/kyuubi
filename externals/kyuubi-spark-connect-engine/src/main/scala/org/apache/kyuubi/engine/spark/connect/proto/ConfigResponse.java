// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Response to the config request.
 * </pre>
 *
 * Protobuf type {@code spark.connect.ConfigResponse}
 */
public final class ConfigResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.ConfigResponse)
    ConfigResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConfigResponse.newBuilder() to construct.
  private ConfigResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConfigResponse() {
    sessionId_ = "";
    pairs_ = java.util.Collections.emptyList();
    warnings_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConfigResponse();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ConfigResponse_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ConfigResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.ConfigResponse.class, org.apache.spark.connect.proto.ConfigResponse.Builder.class);
  }

  public static final int SESSION_ID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile Object sessionId_ = "";
  /**
   * <code>string session_id = 1;</code>
   * @return The sessionId.
   */
  @Override
  public String getSessionId() {
    Object ref = sessionId_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      sessionId_ = s;
      return s;
    }
  }
  /**
   * <code>string session_id = 1;</code>
   * @return The bytes for sessionId.
   */
  @Override
  public com.google.protobuf.ByteString
      getSessionIdBytes() {
    Object ref = sessionId_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      sessionId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PAIRS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.KeyValue> pairs_;
  /**
   * <pre>
   * (Optional) The result key-value pairs.
   *
   * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
   * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
   * </pre>
   *
   * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.KeyValue> getPairsList() {
    return pairs_;
  }
  /**
   * <pre>
   * (Optional) The result key-value pairs.
   *
   * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
   * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
   * </pre>
   *
   * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.KeyValueOrBuilder> 
      getPairsOrBuilderList() {
    return pairs_;
  }
  /**
   * <pre>
   * (Optional) The result key-value pairs.
   *
   * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
   * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
   * </pre>
   *
   * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
   */
  @Override
  public int getPairsCount() {
    return pairs_.size();
  }
  /**
   * <pre>
   * (Optional) The result key-value pairs.
   *
   * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
   * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
   * </pre>
   *
   * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.KeyValue getPairs(int index) {
    return pairs_.get(index);
  }
  /**
   * <pre>
   * (Optional) The result key-value pairs.
   *
   * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
   * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
   * </pre>
   *
   * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.KeyValueOrBuilder getPairsOrBuilder(
      int index) {
    return pairs_.get(index);
  }

  public static final int WARNINGS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList warnings_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * (Optional)
   *
   * Warning messages for deprecated or unsupported configurations.
   * </pre>
   *
   * <code>repeated string warnings = 3;</code>
   * @return A list containing the warnings.
   */
  public com.google.protobuf.ProtocolStringList
      getWarningsList() {
    return warnings_;
  }
  /**
   * <pre>
   * (Optional)
   *
   * Warning messages for deprecated or unsupported configurations.
   * </pre>
   *
   * <code>repeated string warnings = 3;</code>
   * @return The count of warnings.
   */
  public int getWarningsCount() {
    return warnings_.size();
  }
  /**
   * <pre>
   * (Optional)
   *
   * Warning messages for deprecated or unsupported configurations.
   * </pre>
   *
   * <code>repeated string warnings = 3;</code>
   * @param index The index of the element to return.
   * @return The warnings at the given index.
   */
  public String getWarnings(int index) {
    return warnings_.get(index);
  }
  /**
   * <pre>
   * (Optional)
   *
   * Warning messages for deprecated or unsupported configurations.
   * </pre>
   *
   * <code>repeated string warnings = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the warnings at the given index.
   */
  public com.google.protobuf.ByteString
      getWarningsBytes(int index) {
    return warnings_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sessionId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sessionId_);
    }
    for (int i = 0; i < pairs_.size(); i++) {
      output.writeMessage(2, pairs_.get(i));
    }
    for (int i = 0; i < warnings_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, warnings_.getRaw(i));
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sessionId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sessionId_);
    }
    for (int i = 0; i < pairs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, pairs_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < warnings_.size(); i++) {
        dataSize += computeStringSizeNoTag(warnings_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getWarningsList().size();
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.ConfigResponse)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.ConfigResponse other = (org.apache.spark.connect.proto.ConfigResponse) obj;

    if (!getSessionId()
        .equals(other.getSessionId())) return false;
    if (!getPairsList()
        .equals(other.getPairsList())) return false;
    if (!getWarningsList()
        .equals(other.getWarningsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SESSION_ID_FIELD_NUMBER;
    hash = (53 * hash) + getSessionId().hashCode();
    if (getPairsCount() > 0) {
      hash = (37 * hash) + PAIRS_FIELD_NUMBER;
      hash = (53 * hash) + getPairsList().hashCode();
    }
    if (getWarningsCount() > 0) {
      hash = (37 * hash) + WARNINGS_FIELD_NUMBER;
      hash = (53 * hash) + getWarningsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.ConfigResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ConfigResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ConfigResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ConfigResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ConfigResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.ConfigResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ConfigResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.ConfigResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.ConfigResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.ConfigResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.ConfigResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.ConfigResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.ConfigResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Response to the config request.
   * </pre>
   *
   * Protobuf type {@code spark.connect.ConfigResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.ConfigResponse)
      org.apache.spark.connect.proto.ConfigResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ConfigResponse_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ConfigResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.ConfigResponse.class, org.apache.spark.connect.proto.ConfigResponse.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.ConfigResponse.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      sessionId_ = "";
      if (pairsBuilder_ == null) {
        pairs_ = java.util.Collections.emptyList();
      } else {
        pairs_ = null;
        pairsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      warnings_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_ConfigResponse_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.ConfigResponse getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.ConfigResponse.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.ConfigResponse build() {
      org.apache.spark.connect.proto.ConfigResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.ConfigResponse buildPartial() {
      org.apache.spark.connect.proto.ConfigResponse result = new org.apache.spark.connect.proto.ConfigResponse(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.apache.spark.connect.proto.ConfigResponse result) {
      if (pairsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          pairs_ = java.util.Collections.unmodifiableList(pairs_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.pairs_ = pairs_;
      } else {
        result.pairs_ = pairsBuilder_.build();
      }
    }

    private void buildPartial0(org.apache.spark.connect.proto.ConfigResponse result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.sessionId_ = sessionId_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        warnings_.makeImmutable();
        result.warnings_ = warnings_;
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.ConfigResponse) {
        return mergeFrom((org.apache.spark.connect.proto.ConfigResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.ConfigResponse other) {
      if (other == org.apache.spark.connect.proto.ConfigResponse.getDefaultInstance()) return this;
      if (!other.getSessionId().isEmpty()) {
        sessionId_ = other.sessionId_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (pairsBuilder_ == null) {
        if (!other.pairs_.isEmpty()) {
          if (pairs_.isEmpty()) {
            pairs_ = other.pairs_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensurePairsIsMutable();
            pairs_.addAll(other.pairs_);
          }
          onChanged();
        }
      } else {
        if (!other.pairs_.isEmpty()) {
          if (pairsBuilder_.isEmpty()) {
            pairsBuilder_.dispose();
            pairsBuilder_ = null;
            pairs_ = other.pairs_;
            bitField0_ = (bitField0_ & ~0x00000002);
            pairsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPairsFieldBuilder() : null;
          } else {
            pairsBuilder_.addAllMessages(other.pairs_);
          }
        }
      }
      if (!other.warnings_.isEmpty()) {
        if (warnings_.isEmpty()) {
          warnings_ = other.warnings_;
          bitField0_ |= 0x00000004;
        } else {
          ensureWarningsIsMutable();
          warnings_.addAll(other.warnings_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              sessionId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              org.apache.spark.connect.proto.KeyValue m =
                  input.readMessage(
                      org.apache.spark.connect.proto.KeyValue.parser(),
                      extensionRegistry);
              if (pairsBuilder_ == null) {
                ensurePairsIsMutable();
                pairs_.add(m);
              } else {
                pairsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              String s = input.readStringRequireUtf8();
              ensureWarningsIsMutable();
              warnings_.add(s);
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private Object sessionId_ = "";
    /**
     * <code>string session_id = 1;</code>
     * @return The sessionId.
     */
    public String getSessionId() {
      Object ref = sessionId_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        sessionId_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <code>string session_id = 1;</code>
     * @return The bytes for sessionId.
     */
    public com.google.protobuf.ByteString
        getSessionIdBytes() {
      Object ref = sessionId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        sessionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string session_id = 1;</code>
     * @param value The sessionId to set.
     * @return This builder for chaining.
     */
    public Builder setSessionId(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      sessionId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>string session_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSessionId() {
      sessionId_ = getDefaultInstance().getSessionId();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>string session_id = 1;</code>
     * @param value The bytes for sessionId to set.
     * @return This builder for chaining.
     */
    public Builder setSessionIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      sessionId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<org.apache.spark.connect.proto.KeyValue> pairs_ =
      java.util.Collections.emptyList();
    private void ensurePairsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        pairs_ = new java.util.ArrayList<org.apache.spark.connect.proto.KeyValue>(pairs_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.KeyValue, org.apache.spark.connect.proto.KeyValue.Builder, org.apache.spark.connect.proto.KeyValueOrBuilder> pairsBuilder_;

    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.KeyValue> getPairsList() {
      if (pairsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(pairs_);
      } else {
        return pairsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public int getPairsCount() {
      if (pairsBuilder_ == null) {
        return pairs_.size();
      } else {
        return pairsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public org.apache.spark.connect.proto.KeyValue getPairs(int index) {
      if (pairsBuilder_ == null) {
        return pairs_.get(index);
      } else {
        return pairsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public Builder setPairs(
        int index, org.apache.spark.connect.proto.KeyValue value) {
      if (pairsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePairsIsMutable();
        pairs_.set(index, value);
        onChanged();
      } else {
        pairsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public Builder setPairs(
        int index, org.apache.spark.connect.proto.KeyValue.Builder builderForValue) {
      if (pairsBuilder_ == null) {
        ensurePairsIsMutable();
        pairs_.set(index, builderForValue.build());
        onChanged();
      } else {
        pairsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public Builder addPairs(org.apache.spark.connect.proto.KeyValue value) {
      if (pairsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePairsIsMutable();
        pairs_.add(value);
        onChanged();
      } else {
        pairsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public Builder addPairs(
        int index, org.apache.spark.connect.proto.KeyValue value) {
      if (pairsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePairsIsMutable();
        pairs_.add(index, value);
        onChanged();
      } else {
        pairsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public Builder addPairs(
        org.apache.spark.connect.proto.KeyValue.Builder builderForValue) {
      if (pairsBuilder_ == null) {
        ensurePairsIsMutable();
        pairs_.add(builderForValue.build());
        onChanged();
      } else {
        pairsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public Builder addPairs(
        int index, org.apache.spark.connect.proto.KeyValue.Builder builderForValue) {
      if (pairsBuilder_ == null) {
        ensurePairsIsMutable();
        pairs_.add(index, builderForValue.build());
        onChanged();
      } else {
        pairsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public Builder addAllPairs(
        Iterable<? extends org.apache.spark.connect.proto.KeyValue> values) {
      if (pairsBuilder_ == null) {
        ensurePairsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pairs_);
        onChanged();
      } else {
        pairsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public Builder clearPairs() {
      if (pairsBuilder_ == null) {
        pairs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        pairsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public Builder removePairs(int index) {
      if (pairsBuilder_ == null) {
        ensurePairsIsMutable();
        pairs_.remove(index);
        onChanged();
      } else {
        pairsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public org.apache.spark.connect.proto.KeyValue.Builder getPairsBuilder(
        int index) {
      return getPairsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public org.apache.spark.connect.proto.KeyValueOrBuilder getPairsOrBuilder(
        int index) {
      if (pairsBuilder_ == null) {
        return pairs_.get(index);  } else {
        return pairsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.KeyValueOrBuilder> 
         getPairsOrBuilderList() {
      if (pairsBuilder_ != null) {
        return pairsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(pairs_);
      }
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public org.apache.spark.connect.proto.KeyValue.Builder addPairsBuilder() {
      return getPairsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.KeyValue.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public org.apache.spark.connect.proto.KeyValue.Builder addPairsBuilder(
        int index) {
      return getPairsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.KeyValue.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) The result key-value pairs.
     *
     * Available when the operation is 'Get', 'GetWithDefault', 'GetOption', 'GetAll'.
     * Also available for the operation 'IsModifiable' with boolean string "true" and "false".
     * </pre>
     *
     * <code>repeated .spark.connect.KeyValue pairs = 2;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.KeyValue.Builder> 
         getPairsBuilderList() {
      return getPairsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.KeyValue, org.apache.spark.connect.proto.KeyValue.Builder, org.apache.spark.connect.proto.KeyValueOrBuilder> 
        getPairsFieldBuilder() {
      if (pairsBuilder_ == null) {
        pairsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.KeyValue, org.apache.spark.connect.proto.KeyValue.Builder, org.apache.spark.connect.proto.KeyValueOrBuilder>(
                pairs_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        pairs_ = null;
      }
      return pairsBuilder_;
    }

    private com.google.protobuf.LazyStringArrayList warnings_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureWarningsIsMutable() {
      if (!warnings_.isModifiable()) {
        warnings_ = new com.google.protobuf.LazyStringArrayList(warnings_);
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * (Optional)
     *
     * Warning messages for deprecated or unsupported configurations.
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @return A list containing the warnings.
     */
    public com.google.protobuf.ProtocolStringList
        getWarningsList() {
      warnings_.makeImmutable();
      return warnings_;
    }
    /**
     * <pre>
     * (Optional)
     *
     * Warning messages for deprecated or unsupported configurations.
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @return The count of warnings.
     */
    public int getWarningsCount() {
      return warnings_.size();
    }
    /**
     * <pre>
     * (Optional)
     *
     * Warning messages for deprecated or unsupported configurations.
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @param index The index of the element to return.
     * @return The warnings at the given index.
     */
    public String getWarnings(int index) {
      return warnings_.get(index);
    }
    /**
     * <pre>
     * (Optional)
     *
     * Warning messages for deprecated or unsupported configurations.
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the warnings at the given index.
     */
    public com.google.protobuf.ByteString
        getWarningsBytes(int index) {
      return warnings_.getByteString(index);
    }
    /**
     * <pre>
     * (Optional)
     *
     * Warning messages for deprecated or unsupported configurations.
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @param index The index to set the value at.
     * @param value The warnings to set.
     * @return This builder for chaining.
     */
    public Builder setWarnings(
        int index, String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureWarningsIsMutable();
      warnings_.set(index, value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional)
     *
     * Warning messages for deprecated or unsupported configurations.
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @param value The warnings to add.
     * @return This builder for chaining.
     */
    public Builder addWarnings(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureWarningsIsMutable();
      warnings_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional)
     *
     * Warning messages for deprecated or unsupported configurations.
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @param values The warnings to add.
     * @return This builder for chaining.
     */
    public Builder addAllWarnings(
        Iterable<String> values) {
      ensureWarningsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, warnings_);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional)
     *
     * Warning messages for deprecated or unsupported configurations.
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearWarnings() {
      warnings_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional)
     *
     * Warning messages for deprecated or unsupported configurations.
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @param value The bytes of the warnings to add.
     * @return This builder for chaining.
     */
    public Builder addWarningsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureWarningsIsMutable();
      warnings_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.ConfigResponse)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.ConfigResponse)
  private static final org.apache.spark.connect.proto.ConfigResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.ConfigResponse();
  }

  public static org.apache.spark.connect.proto.ConfigResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConfigResponse>
      PARSER = new com.google.protobuf.AbstractParser<ConfigResponse>() {
    @Override
    public ConfigResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ConfigResponse> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<ConfigResponse> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.ConfigResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

