// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * Protobuf type {@code spark.connect.GroupMap}
 */
public final class GroupMap extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.GroupMap)
    GroupMapOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GroupMap.newBuilder() to construct.
  private GroupMap(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GroupMap() {
    groupingExpressions_ = java.util.Collections.emptyList();
    sortingExpressions_ = java.util.Collections.emptyList();
    initialGroupingExpressions_ = java.util.Collections.emptyList();
    outputMode_ = "";
    timeoutConf_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new GroupMap();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_GroupMap_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_GroupMap_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.GroupMap.class, org.apache.spark.connect.proto.GroupMap.Builder.class);
  }

  private int bitField0_;
  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.spark.connect.proto.Relation input_;
  /**
   * <pre>
   * (Required) Input relation for Group Map API: apply, applyInPandas.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  @Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   * <pre>
   * (Required) Input relation for Group Map API: apply, applyInPandas.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  @Override
  public org.apache.spark.connect.proto.Relation getInput() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }
  /**
   * <pre>
   * (Required) Input relation for Group Map API: apply, applyInPandas.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }

  public static final int GROUPING_EXPRESSIONS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.Expression> groupingExpressions_;
  /**
   * <pre>
   * (Required) Expressions for grouping keys.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.Expression> getGroupingExpressionsList() {
    return groupingExpressions_;
  }
  /**
   * <pre>
   * (Required) Expressions for grouping keys.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
      getGroupingExpressionsOrBuilderList() {
    return groupingExpressions_;
  }
  /**
   * <pre>
   * (Required) Expressions for grouping keys.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
   */
  @Override
  public int getGroupingExpressionsCount() {
    return groupingExpressions_.size();
  }
  /**
   * <pre>
   * (Required) Expressions for grouping keys.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Expression getGroupingExpressions(int index) {
    return groupingExpressions_.get(index);
  }
  /**
   * <pre>
   * (Required) Expressions for grouping keys.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getGroupingExpressionsOrBuilder(
      int index) {
    return groupingExpressions_.get(index);
  }

  public static final int FUNC_FIELD_NUMBER = 3;
  private org.apache.spark.connect.proto.CommonInlineUserDefinedFunction func_;
  /**
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
   * @return Whether the func field is set.
   */
  @Override
  public boolean hasFunc() {
    return func_ != null;
  }
  /**
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
   * @return The func.
   */
  @Override
  public org.apache.spark.connect.proto.CommonInlineUserDefinedFunction getFunc() {
    return func_ == null ? org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance() : func_;
  }
  /**
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
   */
  @Override
  public org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder getFuncOrBuilder() {
    return func_ == null ? org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance() : func_;
  }

  public static final int SORTING_EXPRESSIONS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.Expression> sortingExpressions_;
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.Expression> getSortingExpressionsList() {
    return sortingExpressions_;
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
      getSortingExpressionsOrBuilderList() {
    return sortingExpressions_;
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
   */
  @Override
  public int getSortingExpressionsCount() {
    return sortingExpressions_.size();
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Expression getSortingExpressions(int index) {
    return sortingExpressions_.get(index);
  }
  /**
   * <pre>
   * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getSortingExpressionsOrBuilder(
      int index) {
    return sortingExpressions_.get(index);
  }

  public static final int INITIAL_INPUT_FIELD_NUMBER = 5;
  private org.apache.spark.connect.proto.Relation initialInput_;
  /**
   * <pre>
   * Below fields are only used by (Flat)MapGroupsWithState
   * (Optional) Input relation for initial State.
   * </pre>
   *
   * <code>.spark.connect.Relation initial_input = 5;</code>
   * @return Whether the initialInput field is set.
   */
  @Override
  public boolean hasInitialInput() {
    return initialInput_ != null;
  }
  /**
   * <pre>
   * Below fields are only used by (Flat)MapGroupsWithState
   * (Optional) Input relation for initial State.
   * </pre>
   *
   * <code>.spark.connect.Relation initial_input = 5;</code>
   * @return The initialInput.
   */
  @Override
  public org.apache.spark.connect.proto.Relation getInitialInput() {
    return initialInput_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : initialInput_;
  }
  /**
   * <pre>
   * Below fields are only used by (Flat)MapGroupsWithState
   * (Optional) Input relation for initial State.
   * </pre>
   *
   * <code>.spark.connect.Relation initial_input = 5;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationOrBuilder getInitialInputOrBuilder() {
    return initialInput_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : initialInput_;
  }

  public static final int INITIAL_GROUPING_EXPRESSIONS_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.Expression> initialGroupingExpressions_;
  /**
   * <pre>
   * (Optional) Expressions for grouping keys of the initial state input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.Expression> getInitialGroupingExpressionsList() {
    return initialGroupingExpressions_;
  }
  /**
   * <pre>
   * (Optional) Expressions for grouping keys of the initial state input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
      getInitialGroupingExpressionsOrBuilderList() {
    return initialGroupingExpressions_;
  }
  /**
   * <pre>
   * (Optional) Expressions for grouping keys of the initial state input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
   */
  @Override
  public int getInitialGroupingExpressionsCount() {
    return initialGroupingExpressions_.size();
  }
  /**
   * <pre>
   * (Optional) Expressions for grouping keys of the initial state input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Expression getInitialGroupingExpressions(int index) {
    return initialGroupingExpressions_.get(index);
  }
  /**
   * <pre>
   * (Optional) Expressions for grouping keys of the initial state input relation.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getInitialGroupingExpressionsOrBuilder(
      int index) {
    return initialGroupingExpressions_.get(index);
  }

  public static final int IS_MAP_GROUPS_WITH_STATE_FIELD_NUMBER = 7;
  private boolean isMapGroupsWithState_ = false;
  /**
   * <pre>
   * (Optional) True if MapGroupsWithState, false if FlatMapGroupsWithState.
   * </pre>
   *
   * <code>optional bool is_map_groups_with_state = 7;</code>
   * @return Whether the isMapGroupsWithState field is set.
   */
  @Override
  public boolean hasIsMapGroupsWithState() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * (Optional) True if MapGroupsWithState, false if FlatMapGroupsWithState.
   * </pre>
   *
   * <code>optional bool is_map_groups_with_state = 7;</code>
   * @return The isMapGroupsWithState.
   */
  @Override
  public boolean getIsMapGroupsWithState() {
    return isMapGroupsWithState_;
  }

  public static final int OUTPUT_MODE_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private volatile Object outputMode_ = "";
  /**
   * <pre>
   * (Optional) The output mode of the function.
   * </pre>
   *
   * <code>optional string output_mode = 8;</code>
   * @return Whether the outputMode field is set.
   */
  @Override
  public boolean hasOutputMode() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * (Optional) The output mode of the function.
   * </pre>
   *
   * <code>optional string output_mode = 8;</code>
   * @return The outputMode.
   */
  @Override
  public String getOutputMode() {
    Object ref = outputMode_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      outputMode_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Optional) The output mode of the function.
   * </pre>
   *
   * <code>optional string output_mode = 8;</code>
   * @return The bytes for outputMode.
   */
  @Override
  public com.google.protobuf.ByteString
      getOutputModeBytes() {
    Object ref = outputMode_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      outputMode_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TIMEOUT_CONF_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private volatile Object timeoutConf_ = "";
  /**
   * <pre>
   * (Optional) Timeout configuration for groups that do not receive data for a while.
   * </pre>
   *
   * <code>optional string timeout_conf = 9;</code>
   * @return Whether the timeoutConf field is set.
   */
  @Override
  public boolean hasTimeoutConf() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * (Optional) Timeout configuration for groups that do not receive data for a while.
   * </pre>
   *
   * <code>optional string timeout_conf = 9;</code>
   * @return The timeoutConf.
   */
  @Override
  public String getTimeoutConf() {
    Object ref = timeoutConf_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      timeoutConf_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Optional) Timeout configuration for groups that do not receive data for a while.
   * </pre>
   *
   * <code>optional string timeout_conf = 9;</code>
   * @return The bytes for timeoutConf.
   */
  @Override
  public com.google.protobuf.ByteString
      getTimeoutConfBytes() {
    Object ref = timeoutConf_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      timeoutConf_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    for (int i = 0; i < groupingExpressions_.size(); i++) {
      output.writeMessage(2, groupingExpressions_.get(i));
    }
    if (func_ != null) {
      output.writeMessage(3, getFunc());
    }
    for (int i = 0; i < sortingExpressions_.size(); i++) {
      output.writeMessage(4, sortingExpressions_.get(i));
    }
    if (initialInput_ != null) {
      output.writeMessage(5, getInitialInput());
    }
    for (int i = 0; i < initialGroupingExpressions_.size(); i++) {
      output.writeMessage(6, initialGroupingExpressions_.get(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeBool(7, isMapGroupsWithState_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, outputMode_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, timeoutConf_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInput());
    }
    for (int i = 0; i < groupingExpressions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, groupingExpressions_.get(i));
    }
    if (func_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getFunc());
    }
    for (int i = 0; i < sortingExpressions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, sortingExpressions_.get(i));
    }
    if (initialInput_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getInitialInput());
    }
    for (int i = 0; i < initialGroupingExpressions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, initialGroupingExpressions_.get(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, isMapGroupsWithState_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, outputMode_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, timeoutConf_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.GroupMap)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.GroupMap other = (org.apache.spark.connect.proto.GroupMap) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput()
          .equals(other.getInput())) return false;
    }
    if (!getGroupingExpressionsList()
        .equals(other.getGroupingExpressionsList())) return false;
    if (hasFunc() != other.hasFunc()) return false;
    if (hasFunc()) {
      if (!getFunc()
          .equals(other.getFunc())) return false;
    }
    if (!getSortingExpressionsList()
        .equals(other.getSortingExpressionsList())) return false;
    if (hasInitialInput() != other.hasInitialInput()) return false;
    if (hasInitialInput()) {
      if (!getInitialInput()
          .equals(other.getInitialInput())) return false;
    }
    if (!getInitialGroupingExpressionsList()
        .equals(other.getInitialGroupingExpressionsList())) return false;
    if (hasIsMapGroupsWithState() != other.hasIsMapGroupsWithState()) return false;
    if (hasIsMapGroupsWithState()) {
      if (getIsMapGroupsWithState()
          != other.getIsMapGroupsWithState()) return false;
    }
    if (hasOutputMode() != other.hasOutputMode()) return false;
    if (hasOutputMode()) {
      if (!getOutputMode()
          .equals(other.getOutputMode())) return false;
    }
    if (hasTimeoutConf() != other.hasTimeoutConf()) return false;
    if (hasTimeoutConf()) {
      if (!getTimeoutConf()
          .equals(other.getTimeoutConf())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    if (getGroupingExpressionsCount() > 0) {
      hash = (37 * hash) + GROUPING_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getGroupingExpressionsList().hashCode();
    }
    if (hasFunc()) {
      hash = (37 * hash) + FUNC_FIELD_NUMBER;
      hash = (53 * hash) + getFunc().hashCode();
    }
    if (getSortingExpressionsCount() > 0) {
      hash = (37 * hash) + SORTING_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getSortingExpressionsList().hashCode();
    }
    if (hasInitialInput()) {
      hash = (37 * hash) + INITIAL_INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInitialInput().hashCode();
    }
    if (getInitialGroupingExpressionsCount() > 0) {
      hash = (37 * hash) + INITIAL_GROUPING_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getInitialGroupingExpressionsList().hashCode();
    }
    if (hasIsMapGroupsWithState()) {
      hash = (37 * hash) + IS_MAP_GROUPS_WITH_STATE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsMapGroupsWithState());
    }
    if (hasOutputMode()) {
      hash = (37 * hash) + OUTPUT_MODE_FIELD_NUMBER;
      hash = (53 * hash) + getOutputMode().hashCode();
    }
    if (hasTimeoutConf()) {
      hash = (37 * hash) + TIMEOUT_CONF_FIELD_NUMBER;
      hash = (53 * hash) + getTimeoutConf().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.GroupMap parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.GroupMap parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.GroupMap parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.GroupMap parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.GroupMap parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.GroupMap parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.GroupMap parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.GroupMap parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.GroupMap parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.GroupMap parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.GroupMap parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.GroupMap parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.GroupMap prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code spark.connect.GroupMap}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.GroupMap)
      org.apache.spark.connect.proto.GroupMapOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_GroupMap_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_GroupMap_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.GroupMap.class, org.apache.spark.connect.proto.GroupMap.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.GroupMap.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      if (groupingExpressionsBuilder_ == null) {
        groupingExpressions_ = java.util.Collections.emptyList();
      } else {
        groupingExpressions_ = null;
        groupingExpressionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      func_ = null;
      if (funcBuilder_ != null) {
        funcBuilder_.dispose();
        funcBuilder_ = null;
      }
      if (sortingExpressionsBuilder_ == null) {
        sortingExpressions_ = java.util.Collections.emptyList();
      } else {
        sortingExpressions_ = null;
        sortingExpressionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      initialInput_ = null;
      if (initialInputBuilder_ != null) {
        initialInputBuilder_.dispose();
        initialInputBuilder_ = null;
      }
      if (initialGroupingExpressionsBuilder_ == null) {
        initialGroupingExpressions_ = java.util.Collections.emptyList();
      } else {
        initialGroupingExpressions_ = null;
        initialGroupingExpressionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      isMapGroupsWithState_ = false;
      outputMode_ = "";
      timeoutConf_ = "";
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_GroupMap_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.GroupMap getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.GroupMap.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.GroupMap build() {
      org.apache.spark.connect.proto.GroupMap result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.GroupMap buildPartial() {
      org.apache.spark.connect.proto.GroupMap result = new org.apache.spark.connect.proto.GroupMap(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.apache.spark.connect.proto.GroupMap result) {
      if (groupingExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          groupingExpressions_ = java.util.Collections.unmodifiableList(groupingExpressions_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.groupingExpressions_ = groupingExpressions_;
      } else {
        result.groupingExpressions_ = groupingExpressionsBuilder_.build();
      }
      if (sortingExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          sortingExpressions_ = java.util.Collections.unmodifiableList(sortingExpressions_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.sortingExpressions_ = sortingExpressions_;
      } else {
        result.sortingExpressions_ = sortingExpressionsBuilder_.build();
      }
      if (initialGroupingExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          initialGroupingExpressions_ = java.util.Collections.unmodifiableList(initialGroupingExpressions_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.initialGroupingExpressions_ = initialGroupingExpressions_;
      } else {
        result.initialGroupingExpressions_ = initialGroupingExpressionsBuilder_.build();
      }
    }

    private void buildPartial0(org.apache.spark.connect.proto.GroupMap result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.input_ = inputBuilder_ == null
            ? input_
            : inputBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.func_ = funcBuilder_ == null
            ? func_
            : funcBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.initialInput_ = initialInputBuilder_ == null
            ? initialInput_
            : initialInputBuilder_.build();
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.isMapGroupsWithState_ = isMapGroupsWithState_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.outputMode_ = outputMode_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.timeoutConf_ = timeoutConf_;
        to_bitField0_ |= 0x00000004;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.GroupMap) {
        return mergeFrom((org.apache.spark.connect.proto.GroupMap)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.GroupMap other) {
      if (other == org.apache.spark.connect.proto.GroupMap.getDefaultInstance()) return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      if (groupingExpressionsBuilder_ == null) {
        if (!other.groupingExpressions_.isEmpty()) {
          if (groupingExpressions_.isEmpty()) {
            groupingExpressions_ = other.groupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureGroupingExpressionsIsMutable();
            groupingExpressions_.addAll(other.groupingExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.groupingExpressions_.isEmpty()) {
          if (groupingExpressionsBuilder_.isEmpty()) {
            groupingExpressionsBuilder_.dispose();
            groupingExpressionsBuilder_ = null;
            groupingExpressions_ = other.groupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000002);
            groupingExpressionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getGroupingExpressionsFieldBuilder() : null;
          } else {
            groupingExpressionsBuilder_.addAllMessages(other.groupingExpressions_);
          }
        }
      }
      if (other.hasFunc()) {
        mergeFunc(other.getFunc());
      }
      if (sortingExpressionsBuilder_ == null) {
        if (!other.sortingExpressions_.isEmpty()) {
          if (sortingExpressions_.isEmpty()) {
            sortingExpressions_ = other.sortingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureSortingExpressionsIsMutable();
            sortingExpressions_.addAll(other.sortingExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.sortingExpressions_.isEmpty()) {
          if (sortingExpressionsBuilder_.isEmpty()) {
            sortingExpressionsBuilder_.dispose();
            sortingExpressionsBuilder_ = null;
            sortingExpressions_ = other.sortingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000008);
            sortingExpressionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSortingExpressionsFieldBuilder() : null;
          } else {
            sortingExpressionsBuilder_.addAllMessages(other.sortingExpressions_);
          }
        }
      }
      if (other.hasInitialInput()) {
        mergeInitialInput(other.getInitialInput());
      }
      if (initialGroupingExpressionsBuilder_ == null) {
        if (!other.initialGroupingExpressions_.isEmpty()) {
          if (initialGroupingExpressions_.isEmpty()) {
            initialGroupingExpressions_ = other.initialGroupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureInitialGroupingExpressionsIsMutable();
            initialGroupingExpressions_.addAll(other.initialGroupingExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.initialGroupingExpressions_.isEmpty()) {
          if (initialGroupingExpressionsBuilder_.isEmpty()) {
            initialGroupingExpressionsBuilder_.dispose();
            initialGroupingExpressionsBuilder_ = null;
            initialGroupingExpressions_ = other.initialGroupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000020);
            initialGroupingExpressionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInitialGroupingExpressionsFieldBuilder() : null;
          } else {
            initialGroupingExpressionsBuilder_.addAllMessages(other.initialGroupingExpressions_);
          }
        }
      }
      if (other.hasIsMapGroupsWithState()) {
        setIsMapGroupsWithState(other.getIsMapGroupsWithState());
      }
      if (other.hasOutputMode()) {
        outputMode_ = other.outputMode_;
        bitField0_ |= 0x00000080;
        onChanged();
      }
      if (other.hasTimeoutConf()) {
        timeoutConf_ = other.timeoutConf_;
        bitField0_ |= 0x00000100;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getInputFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              org.apache.spark.connect.proto.Expression m =
                  input.readMessage(
                      org.apache.spark.connect.proto.Expression.parser(),
                      extensionRegistry);
              if (groupingExpressionsBuilder_ == null) {
                ensureGroupingExpressionsIsMutable();
                groupingExpressions_.add(m);
              } else {
                groupingExpressionsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getFuncFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              org.apache.spark.connect.proto.Expression m =
                  input.readMessage(
                      org.apache.spark.connect.proto.Expression.parser(),
                      extensionRegistry);
              if (sortingExpressionsBuilder_ == null) {
                ensureSortingExpressionsIsMutable();
                sortingExpressions_.add(m);
              } else {
                sortingExpressionsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getInitialInputFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              org.apache.spark.connect.proto.Expression m =
                  input.readMessage(
                      org.apache.spark.connect.proto.Expression.parser(),
                      extensionRegistry);
              if (initialGroupingExpressionsBuilder_ == null) {
                ensureInitialGroupingExpressionsIsMutable();
                initialGroupingExpressions_.add(m);
              } else {
                initialGroupingExpressionsBuilder_.addMessage(m);
              }
              break;
            } // case 50
            case 56: {
              isMapGroupsWithState_ = input.readBool();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 66: {
              outputMode_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000080;
              break;
            } // case 66
            case 74: {
              timeoutConf_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000100;
              break;
            } // case 74
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.apache.spark.connect.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> inputBuilder_;
    /**
     * <pre>
     * (Required) Input relation for Group Map API: apply, applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Required) Input relation for Group Map API: apply, applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return The input.
     */
    public org.apache.spark.connect.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Input relation for Group Map API: apply, applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
      } else {
        inputBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input relation for Group Map API: apply, applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.spark.connect.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input relation for Group Map API: apply, applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          input_ != null &&
          input_ != org.apache.spark.connect.proto.Relation.getDefaultInstance()) {
          getInputBuilder().mergeFrom(value);
        } else {
          input_ = value;
        }
      } else {
        inputBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input relation for Group Map API: apply, applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      bitField0_ = (bitField0_ & ~0x00000001);
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input relation for Group Map API: apply, applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.Relation.Builder getInputBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Input relation for Group Map API: apply, applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null ?
            org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      }
    }
    /**
     * <pre>
     * (Required) Input relation for Group Map API: apply, applyInPandas.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> 
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder>(
                getInput(),
                getParentForChildren(),
                isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private java.util.List<org.apache.spark.connect.proto.Expression> groupingExpressions_ =
      java.util.Collections.emptyList();
    private void ensureGroupingExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        groupingExpressions_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression>(groupingExpressions_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> groupingExpressionsBuilder_;

    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression> getGroupingExpressionsList() {
      if (groupingExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(groupingExpressions_);
      } else {
        return groupingExpressionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public int getGroupingExpressionsCount() {
      if (groupingExpressionsBuilder_ == null) {
        return groupingExpressions_.size();
      } else {
        return groupingExpressionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public org.apache.spark.connect.proto.Expression getGroupingExpressions(int index) {
      if (groupingExpressionsBuilder_ == null) {
        return groupingExpressions_.get(index);
      } else {
        return groupingExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder setGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (groupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.set(index, value);
        onChanged();
      } else {
        groupingExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder setGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        groupingExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder addGroupingExpressions(org.apache.spark.connect.proto.Expression value) {
      if (groupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(value);
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder addGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (groupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(index, value);
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder addGroupingExpressions(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder addGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder addAllGroupingExpressions(
        Iterable<? extends org.apache.spark.connect.proto.Expression> values) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, groupingExpressions_);
        onChanged();
      } else {
        groupingExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder clearGroupingExpressions() {
      if (groupingExpressionsBuilder_ == null) {
        groupingExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        groupingExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder removeGroupingExpressions(int index) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.remove(index);
        onChanged();
      } else {
        groupingExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getGroupingExpressionsBuilder(
        int index) {
      return getGroupingExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getGroupingExpressionsOrBuilder(
        int index) {
      if (groupingExpressionsBuilder_ == null) {
        return groupingExpressions_.get(index);  } else {
        return groupingExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
         getGroupingExpressionsOrBuilderList() {
      if (groupingExpressionsBuilder_ != null) {
        return groupingExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(groupingExpressions_);
      }
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addGroupingExpressionsBuilder() {
      return getGroupingExpressionsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addGroupingExpressionsBuilder(
        int index) {
      return getGroupingExpressionsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression.Builder> 
         getGroupingExpressionsBuilderList() {
      return getGroupingExpressionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getGroupingExpressionsFieldBuilder() {
      if (groupingExpressionsBuilder_ == null) {
        groupingExpressionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                groupingExpressions_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        groupingExpressions_ = null;
      }
      return groupingExpressionsBuilder_;
    }

    private org.apache.spark.connect.proto.CommonInlineUserDefinedFunction func_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder> funcBuilder_;
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     * @return Whether the func field is set.
     */
    public boolean hasFunc() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     * @return The func.
     */
    public org.apache.spark.connect.proto.CommonInlineUserDefinedFunction getFunc() {
      if (funcBuilder_ == null) {
        return func_ == null ? org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance() : func_;
      } else {
        return funcBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public Builder setFunc(org.apache.spark.connect.proto.CommonInlineUserDefinedFunction value) {
      if (funcBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        func_ = value;
      } else {
        funcBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public Builder setFunc(
        org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.Builder builderForValue) {
      if (funcBuilder_ == null) {
        func_ = builderForValue.build();
      } else {
        funcBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public Builder mergeFunc(org.apache.spark.connect.proto.CommonInlineUserDefinedFunction value) {
      if (funcBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          func_ != null &&
          func_ != org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance()) {
          getFuncBuilder().mergeFrom(value);
        } else {
          func_ = value;
        }
      } else {
        funcBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public Builder clearFunc() {
      bitField0_ = (bitField0_ & ~0x00000004);
      func_ = null;
      if (funcBuilder_ != null) {
        funcBuilder_.dispose();
        funcBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.Builder getFuncBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getFuncFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder getFuncOrBuilder() {
      if (funcBuilder_ != null) {
        return funcBuilder_.getMessageOrBuilder();
      } else {
        return func_ == null ?
            org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance() : func_;
      }
    }
    /**
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder> 
        getFuncFieldBuilder() {
      if (funcBuilder_ == null) {
        funcBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder>(
                getFunc(),
                getParentForChildren(),
                isClean());
        func_ = null;
      }
      return funcBuilder_;
    }

    private java.util.List<org.apache.spark.connect.proto.Expression> sortingExpressions_ =
      java.util.Collections.emptyList();
    private void ensureSortingExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        sortingExpressions_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression>(sortingExpressions_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> sortingExpressionsBuilder_;

    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression> getSortingExpressionsList() {
      if (sortingExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(sortingExpressions_);
      } else {
        return sortingExpressionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public int getSortingExpressionsCount() {
      if (sortingExpressionsBuilder_ == null) {
        return sortingExpressions_.size();
      } else {
        return sortingExpressionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression getSortingExpressions(int index) {
      if (sortingExpressionsBuilder_ == null) {
        return sortingExpressions_.get(index);
      } else {
        return sortingExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public Builder setSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (sortingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSortingExpressionsIsMutable();
        sortingExpressions_.set(index, value);
        onChanged();
      } else {
        sortingExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public Builder setSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (sortingExpressionsBuilder_ == null) {
        ensureSortingExpressionsIsMutable();
        sortingExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        sortingExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public Builder addSortingExpressions(org.apache.spark.connect.proto.Expression value) {
      if (sortingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSortingExpressionsIsMutable();
        sortingExpressions_.add(value);
        onChanged();
      } else {
        sortingExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public Builder addSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (sortingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSortingExpressionsIsMutable();
        sortingExpressions_.add(index, value);
        onChanged();
      } else {
        sortingExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public Builder addSortingExpressions(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (sortingExpressionsBuilder_ == null) {
        ensureSortingExpressionsIsMutable();
        sortingExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        sortingExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public Builder addSortingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (sortingExpressionsBuilder_ == null) {
        ensureSortingExpressionsIsMutable();
        sortingExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        sortingExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public Builder addAllSortingExpressions(
        Iterable<? extends org.apache.spark.connect.proto.Expression> values) {
      if (sortingExpressionsBuilder_ == null) {
        ensureSortingExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sortingExpressions_);
        onChanged();
      } else {
        sortingExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public Builder clearSortingExpressions() {
      if (sortingExpressionsBuilder_ == null) {
        sortingExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        sortingExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public Builder removeSortingExpressions(int index) {
      if (sortingExpressionsBuilder_ == null) {
        ensureSortingExpressionsIsMutable();
        sortingExpressions_.remove(index);
        onChanged();
      } else {
        sortingExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getSortingExpressionsBuilder(
        int index) {
      return getSortingExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getSortingExpressionsOrBuilder(
        int index) {
      if (sortingExpressionsBuilder_ == null) {
        return sortingExpressions_.get(index);  } else {
        return sortingExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
         getSortingExpressionsOrBuilderList() {
      if (sortingExpressionsBuilder_ != null) {
        return sortingExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(sortingExpressions_);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addSortingExpressionsBuilder() {
      return getSortingExpressionsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addSortingExpressionsBuilder(
        int index) {
      return getSortingExpressionsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) Expressions for sorting. Only used by Scala Sorted Group Map API.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression sorting_expressions = 4;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression.Builder> 
         getSortingExpressionsBuilderList() {
      return getSortingExpressionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getSortingExpressionsFieldBuilder() {
      if (sortingExpressionsBuilder_ == null) {
        sortingExpressionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                sortingExpressions_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        sortingExpressions_ = null;
      }
      return sortingExpressionsBuilder_;
    }

    private org.apache.spark.connect.proto.Relation initialInput_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> initialInputBuilder_;
    /**
     * <pre>
     * Below fields are only used by (Flat)MapGroupsWithState
     * (Optional) Input relation for initial State.
     * </pre>
     *
     * <code>.spark.connect.Relation initial_input = 5;</code>
     * @return Whether the initialInput field is set.
     */
    public boolean hasInitialInput() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Below fields are only used by (Flat)MapGroupsWithState
     * (Optional) Input relation for initial State.
     * </pre>
     *
     * <code>.spark.connect.Relation initial_input = 5;</code>
     * @return The initialInput.
     */
    public org.apache.spark.connect.proto.Relation getInitialInput() {
      if (initialInputBuilder_ == null) {
        return initialInput_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : initialInput_;
      } else {
        return initialInputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Below fields are only used by (Flat)MapGroupsWithState
     * (Optional) Input relation for initial State.
     * </pre>
     *
     * <code>.spark.connect.Relation initial_input = 5;</code>
     */
    public Builder setInitialInput(org.apache.spark.connect.proto.Relation value) {
      if (initialInputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        initialInput_ = value;
      } else {
        initialInputBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Below fields are only used by (Flat)MapGroupsWithState
     * (Optional) Input relation for initial State.
     * </pre>
     *
     * <code>.spark.connect.Relation initial_input = 5;</code>
     */
    public Builder setInitialInput(
        org.apache.spark.connect.proto.Relation.Builder builderForValue) {
      if (initialInputBuilder_ == null) {
        initialInput_ = builderForValue.build();
      } else {
        initialInputBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Below fields are only used by (Flat)MapGroupsWithState
     * (Optional) Input relation for initial State.
     * </pre>
     *
     * <code>.spark.connect.Relation initial_input = 5;</code>
     */
    public Builder mergeInitialInput(org.apache.spark.connect.proto.Relation value) {
      if (initialInputBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          initialInput_ != null &&
          initialInput_ != org.apache.spark.connect.proto.Relation.getDefaultInstance()) {
          getInitialInputBuilder().mergeFrom(value);
        } else {
          initialInput_ = value;
        }
      } else {
        initialInputBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Below fields are only used by (Flat)MapGroupsWithState
     * (Optional) Input relation for initial State.
     * </pre>
     *
     * <code>.spark.connect.Relation initial_input = 5;</code>
     */
    public Builder clearInitialInput() {
      bitField0_ = (bitField0_ & ~0x00000010);
      initialInput_ = null;
      if (initialInputBuilder_ != null) {
        initialInputBuilder_.dispose();
        initialInputBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Below fields are only used by (Flat)MapGroupsWithState
     * (Optional) Input relation for initial State.
     * </pre>
     *
     * <code>.spark.connect.Relation initial_input = 5;</code>
     */
    public org.apache.spark.connect.proto.Relation.Builder getInitialInputBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getInitialInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Below fields are only used by (Flat)MapGroupsWithState
     * (Optional) Input relation for initial State.
     * </pre>
     *
     * <code>.spark.connect.Relation initial_input = 5;</code>
     */
    public org.apache.spark.connect.proto.RelationOrBuilder getInitialInputOrBuilder() {
      if (initialInputBuilder_ != null) {
        return initialInputBuilder_.getMessageOrBuilder();
      } else {
        return initialInput_ == null ?
            org.apache.spark.connect.proto.Relation.getDefaultInstance() : initialInput_;
      }
    }
    /**
     * <pre>
     * Below fields are only used by (Flat)MapGroupsWithState
     * (Optional) Input relation for initial State.
     * </pre>
     *
     * <code>.spark.connect.Relation initial_input = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> 
        getInitialInputFieldBuilder() {
      if (initialInputBuilder_ == null) {
        initialInputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder>(
                getInitialInput(),
                getParentForChildren(),
                isClean());
        initialInput_ = null;
      }
      return initialInputBuilder_;
    }

    private java.util.List<org.apache.spark.connect.proto.Expression> initialGroupingExpressions_ =
      java.util.Collections.emptyList();
    private void ensureInitialGroupingExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        initialGroupingExpressions_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression>(initialGroupingExpressions_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> initialGroupingExpressionsBuilder_;

    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression> getInitialGroupingExpressionsList() {
      if (initialGroupingExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(initialGroupingExpressions_);
      } else {
        return initialGroupingExpressionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public int getInitialGroupingExpressionsCount() {
      if (initialGroupingExpressionsBuilder_ == null) {
        return initialGroupingExpressions_.size();
      } else {
        return initialGroupingExpressionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public org.apache.spark.connect.proto.Expression getInitialGroupingExpressions(int index) {
      if (initialGroupingExpressionsBuilder_ == null) {
        return initialGroupingExpressions_.get(index);
      } else {
        return initialGroupingExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public Builder setInitialGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (initialGroupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInitialGroupingExpressionsIsMutable();
        initialGroupingExpressions_.set(index, value);
        onChanged();
      } else {
        initialGroupingExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public Builder setInitialGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (initialGroupingExpressionsBuilder_ == null) {
        ensureInitialGroupingExpressionsIsMutable();
        initialGroupingExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        initialGroupingExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public Builder addInitialGroupingExpressions(org.apache.spark.connect.proto.Expression value) {
      if (initialGroupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInitialGroupingExpressionsIsMutable();
        initialGroupingExpressions_.add(value);
        onChanged();
      } else {
        initialGroupingExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public Builder addInitialGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (initialGroupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInitialGroupingExpressionsIsMutable();
        initialGroupingExpressions_.add(index, value);
        onChanged();
      } else {
        initialGroupingExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public Builder addInitialGroupingExpressions(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (initialGroupingExpressionsBuilder_ == null) {
        ensureInitialGroupingExpressionsIsMutable();
        initialGroupingExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        initialGroupingExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public Builder addInitialGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (initialGroupingExpressionsBuilder_ == null) {
        ensureInitialGroupingExpressionsIsMutable();
        initialGroupingExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        initialGroupingExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public Builder addAllInitialGroupingExpressions(
        Iterable<? extends org.apache.spark.connect.proto.Expression> values) {
      if (initialGroupingExpressionsBuilder_ == null) {
        ensureInitialGroupingExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, initialGroupingExpressions_);
        onChanged();
      } else {
        initialGroupingExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public Builder clearInitialGroupingExpressions() {
      if (initialGroupingExpressionsBuilder_ == null) {
        initialGroupingExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        initialGroupingExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public Builder removeInitialGroupingExpressions(int index) {
      if (initialGroupingExpressionsBuilder_ == null) {
        ensureInitialGroupingExpressionsIsMutable();
        initialGroupingExpressions_.remove(index);
        onChanged();
      } else {
        initialGroupingExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getInitialGroupingExpressionsBuilder(
        int index) {
      return getInitialGroupingExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getInitialGroupingExpressionsOrBuilder(
        int index) {
      if (initialGroupingExpressionsBuilder_ == null) {
        return initialGroupingExpressions_.get(index);  } else {
        return initialGroupingExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
         getInitialGroupingExpressionsOrBuilderList() {
      if (initialGroupingExpressionsBuilder_ != null) {
        return initialGroupingExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(initialGroupingExpressions_);
      }
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addInitialGroupingExpressionsBuilder() {
      return getInitialGroupingExpressionsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addInitialGroupingExpressionsBuilder(
        int index) {
      return getInitialGroupingExpressionsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) Expressions for grouping keys of the initial state input relation.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression initial_grouping_expressions = 6;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression.Builder> 
         getInitialGroupingExpressionsBuilderList() {
      return getInitialGroupingExpressionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getInitialGroupingExpressionsFieldBuilder() {
      if (initialGroupingExpressionsBuilder_ == null) {
        initialGroupingExpressionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                initialGroupingExpressions_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        initialGroupingExpressions_ = null;
      }
      return initialGroupingExpressionsBuilder_;
    }

    private boolean isMapGroupsWithState_ ;
    /**
     * <pre>
     * (Optional) True if MapGroupsWithState, false if FlatMapGroupsWithState.
     * </pre>
     *
     * <code>optional bool is_map_groups_with_state = 7;</code>
     * @return Whether the isMapGroupsWithState field is set.
     */
    @Override
    public boolean hasIsMapGroupsWithState() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * (Optional) True if MapGroupsWithState, false if FlatMapGroupsWithState.
     * </pre>
     *
     * <code>optional bool is_map_groups_with_state = 7;</code>
     * @return The isMapGroupsWithState.
     */
    @Override
    public boolean getIsMapGroupsWithState() {
      return isMapGroupsWithState_;
    }
    /**
     * <pre>
     * (Optional) True if MapGroupsWithState, false if FlatMapGroupsWithState.
     * </pre>
     *
     * <code>optional bool is_map_groups_with_state = 7;</code>
     * @param value The isMapGroupsWithState to set.
     * @return This builder for chaining.
     */
    public Builder setIsMapGroupsWithState(boolean value) {

      isMapGroupsWithState_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) True if MapGroupsWithState, false if FlatMapGroupsWithState.
     * </pre>
     *
     * <code>optional bool is_map_groups_with_state = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsMapGroupsWithState() {
      bitField0_ = (bitField0_ & ~0x00000040);
      isMapGroupsWithState_ = false;
      onChanged();
      return this;
    }

    private Object outputMode_ = "";
    /**
     * <pre>
     * (Optional) The output mode of the function.
     * </pre>
     *
     * <code>optional string output_mode = 8;</code>
     * @return Whether the outputMode field is set.
     */
    public boolean hasOutputMode() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * (Optional) The output mode of the function.
     * </pre>
     *
     * <code>optional string output_mode = 8;</code>
     * @return The outputMode.
     */
    public String getOutputMode() {
      Object ref = outputMode_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        outputMode_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * (Optional) The output mode of the function.
     * </pre>
     *
     * <code>optional string output_mode = 8;</code>
     * @return The bytes for outputMode.
     */
    public com.google.protobuf.ByteString
        getOutputModeBytes() {
      Object ref = outputMode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        outputMode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Optional) The output mode of the function.
     * </pre>
     *
     * <code>optional string output_mode = 8;</code>
     * @param value The outputMode to set.
     * @return This builder for chaining.
     */
    public Builder setOutputMode(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      outputMode_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) The output mode of the function.
     * </pre>
     *
     * <code>optional string output_mode = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearOutputMode() {
      outputMode_ = getDefaultInstance().getOutputMode();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) The output mode of the function.
     * </pre>
     *
     * <code>optional string output_mode = 8;</code>
     * @param value The bytes for outputMode to set.
     * @return This builder for chaining.
     */
    public Builder setOutputModeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      outputMode_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    private Object timeoutConf_ = "";
    /**
     * <pre>
     * (Optional) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>optional string timeout_conf = 9;</code>
     * @return Whether the timeoutConf field is set.
     */
    public boolean hasTimeoutConf() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * (Optional) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>optional string timeout_conf = 9;</code>
     * @return The timeoutConf.
     */
    public String getTimeoutConf() {
      Object ref = timeoutConf_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        timeoutConf_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * (Optional) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>optional string timeout_conf = 9;</code>
     * @return The bytes for timeoutConf.
     */
    public com.google.protobuf.ByteString
        getTimeoutConfBytes() {
      Object ref = timeoutConf_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        timeoutConf_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Optional) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>optional string timeout_conf = 9;</code>
     * @param value The timeoutConf to set.
     * @return This builder for chaining.
     */
    public Builder setTimeoutConf(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      timeoutConf_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>optional string timeout_conf = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimeoutConf() {
      timeoutConf_ = getDefaultInstance().getTimeoutConf();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>optional string timeout_conf = 9;</code>
     * @param value The bytes for timeoutConf to set.
     * @return This builder for chaining.
     */
    public Builder setTimeoutConfBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      timeoutConf_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.GroupMap)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.GroupMap)
  private static final org.apache.spark.connect.proto.GroupMap DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.GroupMap();
  }

  public static org.apache.spark.connect.proto.GroupMap getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GroupMap>
      PARSER = new com.google.protobuf.AbstractParser<GroupMap>() {
    @Override
    public GroupMap parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<GroupMap> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<GroupMap> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.GroupMap getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

