// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/commands.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * As writes are not directly handled during analysis and planning, they are modeled as commands.
 * </pre>
 *
 * Protobuf type {@code spark.connect.WriteOperationV2}
 */
public final class WriteOperationV2 extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.WriteOperationV2)
    WriteOperationV2OrBuilder {
private static final long serialVersionUID = 0L;
  // Use WriteOperationV2.newBuilder() to construct.
  private WriteOperationV2(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WriteOperationV2() {
    tableName_ = "";
    provider_ = "";
    partitioningColumns_ = java.util.Collections.emptyList();
    mode_ = 0;
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new WriteOperationV2();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperationV2_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 5:
        return internalGetOptions();
      case 6:
        return internalGetTableProperties();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperationV2_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.WriteOperationV2.class, org.apache.spark.connect.proto.WriteOperationV2.Builder.class);
  }

  /**
   * Protobuf enum {@code spark.connect.WriteOperationV2.Mode}
   */
  public enum Mode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MODE_UNSPECIFIED = 0;</code>
     */
    MODE_UNSPECIFIED(0),
    /**
     * <code>MODE_CREATE = 1;</code>
     */
    MODE_CREATE(1),
    /**
     * <code>MODE_OVERWRITE = 2;</code>
     */
    MODE_OVERWRITE(2),
    /**
     * <code>MODE_OVERWRITE_PARTITIONS = 3;</code>
     */
    MODE_OVERWRITE_PARTITIONS(3),
    /**
     * <code>MODE_APPEND = 4;</code>
     */
    MODE_APPEND(4),
    /**
     * <code>MODE_REPLACE = 5;</code>
     */
    MODE_REPLACE(5),
    /**
     * <code>MODE_CREATE_OR_REPLACE = 6;</code>
     */
    MODE_CREATE_OR_REPLACE(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>MODE_UNSPECIFIED = 0;</code>
     */
    public static final int MODE_UNSPECIFIED_VALUE = 0;
    /**
     * <code>MODE_CREATE = 1;</code>
     */
    public static final int MODE_CREATE_VALUE = 1;
    /**
     * <code>MODE_OVERWRITE = 2;</code>
     */
    public static final int MODE_OVERWRITE_VALUE = 2;
    /**
     * <code>MODE_OVERWRITE_PARTITIONS = 3;</code>
     */
    public static final int MODE_OVERWRITE_PARTITIONS_VALUE = 3;
    /**
     * <code>MODE_APPEND = 4;</code>
     */
    public static final int MODE_APPEND_VALUE = 4;
    /**
     * <code>MODE_REPLACE = 5;</code>
     */
    public static final int MODE_REPLACE_VALUE = 5;
    /**
     * <code>MODE_CREATE_OR_REPLACE = 6;</code>
     */
    public static final int MODE_CREATE_OR_REPLACE_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static Mode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Mode forNumber(int value) {
      switch (value) {
        case 0: return MODE_UNSPECIFIED;
        case 1: return MODE_CREATE;
        case 2: return MODE_OVERWRITE;
        case 3: return MODE_OVERWRITE_PARTITIONS;
        case 4: return MODE_APPEND;
        case 5: return MODE_REPLACE;
        case 6: return MODE_CREATE_OR_REPLACE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Mode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Mode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Mode>() {
            public Mode findValueByNumber(int number) {
              return Mode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.WriteOperationV2.getDescriptor().getEnumTypes().get(0);
    }

    private static final Mode[] VALUES = values();

    public static Mode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Mode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:spark.connect.WriteOperationV2.Mode)
  }

  private int bitField0_;
  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.spark.connect.proto.Relation input_;
  /**
   * <pre>
   * (Required) The output of the `input` relation will be persisted according to the options.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  @Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   * <pre>
   * (Required) The output of the `input` relation will be persisted according to the options.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  @Override
  public org.apache.spark.connect.proto.Relation getInput() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }
  /**
   * <pre>
   * (Required) The output of the `input` relation will be persisted according to the options.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }

  public static final int TABLE_NAME_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile Object tableName_ = "";
  /**
   * <pre>
   * (Required) The destination of the write operation must be either a path or a table.
   * </pre>
   *
   * <code>string table_name = 2;</code>
   * @return The tableName.
   */
  @Override
  public String getTableName() {
    Object ref = tableName_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      tableName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Required) The destination of the write operation must be either a path or a table.
   * </pre>
   *
   * <code>string table_name = 2;</code>
   * @return The bytes for tableName.
   */
  @Override
  public com.google.protobuf.ByteString
      getTableNameBytes() {
    Object ref = tableName_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      tableName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PROVIDER_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile Object provider_ = "";
  /**
   * <pre>
   * (Optional) A provider for the underlying output data source. Spark's default catalog supports
   * "parquet", "json", etc.
   * </pre>
   *
   * <code>optional string provider = 3;</code>
   * @return Whether the provider field is set.
   */
  @Override
  public boolean hasProvider() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * (Optional) A provider for the underlying output data source. Spark's default catalog supports
   * "parquet", "json", etc.
   * </pre>
   *
   * <code>optional string provider = 3;</code>
   * @return The provider.
   */
  @Override
  public String getProvider() {
    Object ref = provider_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      provider_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Optional) A provider for the underlying output data source. Spark's default catalog supports
   * "parquet", "json", etc.
   * </pre>
   *
   * <code>optional string provider = 3;</code>
   * @return The bytes for provider.
   */
  @Override
  public com.google.protobuf.ByteString
      getProviderBytes() {
    Object ref = provider_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      provider_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PARTITIONING_COLUMNS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.Expression> partitioningColumns_;
  /**
   * <pre>
   * (Optional) List of columns for partitioning for output table created by `create`,
   * `createOrReplace`, or `replace`
   * </pre>
   *
   * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.Expression> getPartitioningColumnsList() {
    return partitioningColumns_;
  }
  /**
   * <pre>
   * (Optional) List of columns for partitioning for output table created by `create`,
   * `createOrReplace`, or `replace`
   * </pre>
   *
   * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
      getPartitioningColumnsOrBuilderList() {
    return partitioningColumns_;
  }
  /**
   * <pre>
   * (Optional) List of columns for partitioning for output table created by `create`,
   * `createOrReplace`, or `replace`
   * </pre>
   *
   * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
   */
  @Override
  public int getPartitioningColumnsCount() {
    return partitioningColumns_.size();
  }
  /**
   * <pre>
   * (Optional) List of columns for partitioning for output table created by `create`,
   * `createOrReplace`, or `replace`
   * </pre>
   *
   * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Expression getPartitioningColumns(int index) {
    return partitioningColumns_.get(index);
  }
  /**
   * <pre>
   * (Optional) List of columns for partitioning for output table created by `create`,
   * `createOrReplace`, or `replace`
   * </pre>
   *
   * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getPartitioningColumnsOrBuilder(
      int index) {
    return partitioningColumns_.get(index);
  }

  public static final int OPTIONS_FIELD_NUMBER = 5;
  private static final class OptionsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        String, String> defaultEntry =
            com.google.protobuf.MapEntry
            .<String, String>newDefaultInstance(
                org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperationV2_OptionsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      String, String> options_;
  private com.google.protobuf.MapField<String, String>
  internalGetOptions() {
    if (options_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          OptionsDefaultEntryHolder.defaultEntry);
    }
    return options_;
  }
  public int getOptionsCount() {
    return internalGetOptions().getMap().size();
  }
  /**
   * <pre>
   * (Optional) A list of configuration options.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 5;</code>
   */
  @Override
  public boolean containsOptions(
      String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetOptions().getMap().containsKey(key);
  }
  /**
   * Use {@link #getOptionsMap()} instead.
   */
  @Override
  @Deprecated
  public java.util.Map<String, String> getOptions() {
    return getOptionsMap();
  }
  /**
   * <pre>
   * (Optional) A list of configuration options.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 5;</code>
   */
  @Override
  public java.util.Map<String, String> getOptionsMap() {
    return internalGetOptions().getMap();
  }
  /**
   * <pre>
   * (Optional) A list of configuration options.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 5;</code>
   */
  @Override
  public /* nullable */
String getOptionsOrDefault(
      String key,
      /* nullable */
String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<String, String> map =
        internalGetOptions().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * (Optional) A list of configuration options.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 5;</code>
   */
  @Override
  public String getOptionsOrThrow(
      String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<String, String> map =
        internalGetOptions().getMap();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int TABLE_PROPERTIES_FIELD_NUMBER = 6;
  private static final class TablePropertiesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        String, String> defaultEntry =
            com.google.protobuf.MapEntry
            .<String, String>newDefaultInstance(
                org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperationV2_TablePropertiesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      String, String> tableProperties_;
  private com.google.protobuf.MapField<String, String>
  internalGetTableProperties() {
    if (tableProperties_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          TablePropertiesDefaultEntryHolder.defaultEntry);
    }
    return tableProperties_;
  }
  public int getTablePropertiesCount() {
    return internalGetTableProperties().getMap().size();
  }
  /**
   * <pre>
   * (Optional) A list of table properties.
   * </pre>
   *
   * <code>map&lt;string, string&gt; table_properties = 6;</code>
   */
  @Override
  public boolean containsTableProperties(
      String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetTableProperties().getMap().containsKey(key);
  }
  /**
   * Use {@link #getTablePropertiesMap()} instead.
   */
  @Override
  @Deprecated
  public java.util.Map<String, String> getTableProperties() {
    return getTablePropertiesMap();
  }
  /**
   * <pre>
   * (Optional) A list of table properties.
   * </pre>
   *
   * <code>map&lt;string, string&gt; table_properties = 6;</code>
   */
  @Override
  public java.util.Map<String, String> getTablePropertiesMap() {
    return internalGetTableProperties().getMap();
  }
  /**
   * <pre>
   * (Optional) A list of table properties.
   * </pre>
   *
   * <code>map&lt;string, string&gt; table_properties = 6;</code>
   */
  @Override
  public /* nullable */
String getTablePropertiesOrDefault(
      String key,
      /* nullable */
String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<String, String> map =
        internalGetTableProperties().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * (Optional) A list of table properties.
   * </pre>
   *
   * <code>map&lt;string, string&gt; table_properties = 6;</code>
   */
  @Override
  public String getTablePropertiesOrThrow(
      String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<String, String> map =
        internalGetTableProperties().getMap();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int MODE_FIELD_NUMBER = 7;
  private int mode_ = 0;
  /**
   * <pre>
   * (Required) Write mode.
   * </pre>
   *
   * <code>.spark.connect.WriteOperationV2.Mode mode = 7;</code>
   * @return The enum numeric value on the wire for mode.
   */
  @Override public int getModeValue() {
    return mode_;
  }
  /**
   * <pre>
   * (Required) Write mode.
   * </pre>
   *
   * <code>.spark.connect.WriteOperationV2.Mode mode = 7;</code>
   * @return The mode.
   */
  @Override public org.apache.spark.connect.proto.WriteOperationV2.Mode getMode() {
    org.apache.spark.connect.proto.WriteOperationV2.Mode result = org.apache.spark.connect.proto.WriteOperationV2.Mode.forNumber(mode_);
    return result == null ? org.apache.spark.connect.proto.WriteOperationV2.Mode.UNRECOGNIZED : result;
  }

  public static final int OVERWRITE_CONDITION_FIELD_NUMBER = 8;
  private org.apache.spark.connect.proto.Expression overwriteCondition_;
  /**
   * <pre>
   * (Optional) A condition for overwrite saving mode
   * </pre>
   *
   * <code>.spark.connect.Expression overwrite_condition = 8;</code>
   * @return Whether the overwriteCondition field is set.
   */
  @Override
  public boolean hasOverwriteCondition() {
    return overwriteCondition_ != null;
  }
  /**
   * <pre>
   * (Optional) A condition for overwrite saving mode
   * </pre>
   *
   * <code>.spark.connect.Expression overwrite_condition = 8;</code>
   * @return The overwriteCondition.
   */
  @Override
  public org.apache.spark.connect.proto.Expression getOverwriteCondition() {
    return overwriteCondition_ == null ? org.apache.spark.connect.proto.Expression.getDefaultInstance() : overwriteCondition_;
  }
  /**
   * <pre>
   * (Optional) A condition for overwrite saving mode
   * </pre>
   *
   * <code>.spark.connect.Expression overwrite_condition = 8;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getOverwriteConditionOrBuilder() {
    return overwriteCondition_ == null ? org.apache.spark.connect.proto.Expression.getDefaultInstance() : overwriteCondition_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tableName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, tableName_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, provider_);
    }
    for (int i = 0; i < partitioningColumns_.size(); i++) {
      output.writeMessage(4, partitioningColumns_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetOptions(),
        OptionsDefaultEntryHolder.defaultEntry,
        5);
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetTableProperties(),
        TablePropertiesDefaultEntryHolder.defaultEntry,
        6);
    if (mode_ != org.apache.spark.connect.proto.WriteOperationV2.Mode.MODE_UNSPECIFIED.getNumber()) {
      output.writeEnum(7, mode_);
    }
    if (overwriteCondition_ != null) {
      output.writeMessage(8, getOverwriteCondition());
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInput());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tableName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, tableName_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, provider_);
    }
    for (int i = 0; i < partitioningColumns_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, partitioningColumns_.get(i));
    }
    for (java.util.Map.Entry<String, String> entry
         : internalGetOptions().getMap().entrySet()) {
      com.google.protobuf.MapEntry<String, String>
      options__ = OptionsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, options__);
    }
    for (java.util.Map.Entry<String, String> entry
         : internalGetTableProperties().getMap().entrySet()) {
      com.google.protobuf.MapEntry<String, String>
      tableProperties__ = TablePropertiesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, tableProperties__);
    }
    if (mode_ != org.apache.spark.connect.proto.WriteOperationV2.Mode.MODE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, mode_);
    }
    if (overwriteCondition_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getOverwriteCondition());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.WriteOperationV2)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.WriteOperationV2 other = (org.apache.spark.connect.proto.WriteOperationV2) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput()
          .equals(other.getInput())) return false;
    }
    if (!getTableName()
        .equals(other.getTableName())) return false;
    if (hasProvider() != other.hasProvider()) return false;
    if (hasProvider()) {
      if (!getProvider()
          .equals(other.getProvider())) return false;
    }
    if (!getPartitioningColumnsList()
        .equals(other.getPartitioningColumnsList())) return false;
    if (!internalGetOptions().equals(
        other.internalGetOptions())) return false;
    if (!internalGetTableProperties().equals(
        other.internalGetTableProperties())) return false;
    if (mode_ != other.mode_) return false;
    if (hasOverwriteCondition() != other.hasOverwriteCondition()) return false;
    if (hasOverwriteCondition()) {
      if (!getOverwriteCondition()
          .equals(other.getOverwriteCondition())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    hash = (37 * hash) + TABLE_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getTableName().hashCode();
    if (hasProvider()) {
      hash = (37 * hash) + PROVIDER_FIELD_NUMBER;
      hash = (53 * hash) + getProvider().hashCode();
    }
    if (getPartitioningColumnsCount() > 0) {
      hash = (37 * hash) + PARTITIONING_COLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + getPartitioningColumnsList().hashCode();
    }
    if (!internalGetOptions().getMap().isEmpty()) {
      hash = (37 * hash) + OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetOptions().hashCode();
    }
    if (!internalGetTableProperties().getMap().isEmpty()) {
      hash = (37 * hash) + TABLE_PROPERTIES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetTableProperties().hashCode();
    }
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + mode_;
    if (hasOverwriteCondition()) {
      hash = (37 * hash) + OVERWRITE_CONDITION_FIELD_NUMBER;
      hash = (53 * hash) + getOverwriteCondition().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.WriteOperationV2 parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.WriteOperationV2 parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteOperationV2 parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.WriteOperationV2 parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteOperationV2 parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.WriteOperationV2 parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteOperationV2 parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.WriteOperationV2 parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.WriteOperationV2 parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.WriteOperationV2 parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteOperationV2 parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.WriteOperationV2 parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.WriteOperationV2 prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * As writes are not directly handled during analysis and planning, they are modeled as commands.
   * </pre>
   *
   * Protobuf type {@code spark.connect.WriteOperationV2}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.WriteOperationV2)
      org.apache.spark.connect.proto.WriteOperationV2OrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperationV2_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetOptions();
        case 6:
          return internalGetTableProperties();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetMutableOptions();
        case 6:
          return internalGetMutableTableProperties();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperationV2_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.WriteOperationV2.class, org.apache.spark.connect.proto.WriteOperationV2.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.WriteOperationV2.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      tableName_ = "";
      provider_ = "";
      if (partitioningColumnsBuilder_ == null) {
        partitioningColumns_ = java.util.Collections.emptyList();
      } else {
        partitioningColumns_ = null;
        partitioningColumnsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      internalGetMutableOptions().clear();
      internalGetMutableTableProperties().clear();
      mode_ = 0;
      overwriteCondition_ = null;
      if (overwriteConditionBuilder_ != null) {
        overwriteConditionBuilder_.dispose();
        overwriteConditionBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperationV2_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.WriteOperationV2 getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.WriteOperationV2.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.WriteOperationV2 build() {
      org.apache.spark.connect.proto.WriteOperationV2 result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.WriteOperationV2 buildPartial() {
      org.apache.spark.connect.proto.WriteOperationV2 result = new org.apache.spark.connect.proto.WriteOperationV2(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.apache.spark.connect.proto.WriteOperationV2 result) {
      if (partitioningColumnsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          partitioningColumns_ = java.util.Collections.unmodifiableList(partitioningColumns_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.partitioningColumns_ = partitioningColumns_;
      } else {
        result.partitioningColumns_ = partitioningColumnsBuilder_.build();
      }
    }

    private void buildPartial0(org.apache.spark.connect.proto.WriteOperationV2 result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.input_ = inputBuilder_ == null
            ? input_
            : inputBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.tableName_ = tableName_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.provider_ = provider_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.options_ = internalGetOptions();
        result.options_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.tableProperties_ = internalGetTableProperties();
        result.tableProperties_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.mode_ = mode_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.overwriteCondition_ = overwriteConditionBuilder_ == null
            ? overwriteCondition_
            : overwriteConditionBuilder_.build();
      }
      result.bitField0_ |= to_bitField0_;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.WriteOperationV2) {
        return mergeFrom((org.apache.spark.connect.proto.WriteOperationV2)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.WriteOperationV2 other) {
      if (other == org.apache.spark.connect.proto.WriteOperationV2.getDefaultInstance()) return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      if (!other.getTableName().isEmpty()) {
        tableName_ = other.tableName_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasProvider()) {
        provider_ = other.provider_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (partitioningColumnsBuilder_ == null) {
        if (!other.partitioningColumns_.isEmpty()) {
          if (partitioningColumns_.isEmpty()) {
            partitioningColumns_ = other.partitioningColumns_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensurePartitioningColumnsIsMutable();
            partitioningColumns_.addAll(other.partitioningColumns_);
          }
          onChanged();
        }
      } else {
        if (!other.partitioningColumns_.isEmpty()) {
          if (partitioningColumnsBuilder_.isEmpty()) {
            partitioningColumnsBuilder_.dispose();
            partitioningColumnsBuilder_ = null;
            partitioningColumns_ = other.partitioningColumns_;
            bitField0_ = (bitField0_ & ~0x00000008);
            partitioningColumnsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPartitioningColumnsFieldBuilder() : null;
          } else {
            partitioningColumnsBuilder_.addAllMessages(other.partitioningColumns_);
          }
        }
      }
      internalGetMutableOptions().mergeFrom(
          other.internalGetOptions());
      bitField0_ |= 0x00000010;
      internalGetMutableTableProperties().mergeFrom(
          other.internalGetTableProperties());
      bitField0_ |= 0x00000020;
      if (other.mode_ != 0) {
        setModeValue(other.getModeValue());
      }
      if (other.hasOverwriteCondition()) {
        mergeOverwriteCondition(other.getOverwriteCondition());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getInputFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              tableName_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              provider_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              org.apache.spark.connect.proto.Expression m =
                  input.readMessage(
                      org.apache.spark.connect.proto.Expression.parser(),
                      extensionRegistry);
              if (partitioningColumnsBuilder_ == null) {
                ensurePartitioningColumnsIsMutable();
                partitioningColumns_.add(m);
              } else {
                partitioningColumnsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              com.google.protobuf.MapEntry<String, String>
              options__ = input.readMessage(
                  OptionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableOptions().getMutableMap().put(
                  options__.getKey(), options__.getValue());
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              com.google.protobuf.MapEntry<String, String>
              tableProperties__ = input.readMessage(
                  TablePropertiesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableTableProperties().getMutableMap().put(
                  tableProperties__.getKey(), tableProperties__.getValue());
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 56: {
              mode_ = input.readEnum();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 66: {
              input.readMessage(
                  getOverwriteConditionFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000080;
              break;
            } // case 66
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.apache.spark.connect.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> inputBuilder_;
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return The input.
     */
    public org.apache.spark.connect.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
      } else {
        inputBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.spark.connect.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          input_ != null &&
          input_ != org.apache.spark.connect.proto.Relation.getDefaultInstance()) {
          getInputBuilder().mergeFrom(value);
        } else {
          input_ = value;
        }
      } else {
        inputBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      bitField0_ = (bitField0_ & ~0x00000001);
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.Relation.Builder getInputBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null ?
            org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      }
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> 
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder>(
                getInput(),
                getParentForChildren(),
                isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private Object tableName_ = "";
    /**
     * <pre>
     * (Required) The destination of the write operation must be either a path or a table.
     * </pre>
     *
     * <code>string table_name = 2;</code>
     * @return The tableName.
     */
    public String getTableName() {
      Object ref = tableName_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        tableName_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * (Required) The destination of the write operation must be either a path or a table.
     * </pre>
     *
     * <code>string table_name = 2;</code>
     * @return The bytes for tableName.
     */
    public com.google.protobuf.ByteString
        getTableNameBytes() {
      Object ref = tableName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        tableName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Required) The destination of the write operation must be either a path or a table.
     * </pre>
     *
     * <code>string table_name = 2;</code>
     * @param value The tableName to set.
     * @return This builder for chaining.
     */
    public Builder setTableName(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      tableName_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The destination of the write operation must be either a path or a table.
     * </pre>
     *
     * <code>string table_name = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearTableName() {
      tableName_ = getDefaultInstance().getTableName();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The destination of the write operation must be either a path or a table.
     * </pre>
     *
     * <code>string table_name = 2;</code>
     * @param value The bytes for tableName to set.
     * @return This builder for chaining.
     */
    public Builder setTableNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      tableName_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private Object provider_ = "";
    /**
     * <pre>
     * (Optional) A provider for the underlying output data source. Spark's default catalog supports
     * "parquet", "json", etc.
     * </pre>
     *
     * <code>optional string provider = 3;</code>
     * @return Whether the provider field is set.
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * (Optional) A provider for the underlying output data source. Spark's default catalog supports
     * "parquet", "json", etc.
     * </pre>
     *
     * <code>optional string provider = 3;</code>
     * @return The provider.
     */
    public String getProvider() {
      Object ref = provider_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        provider_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * (Optional) A provider for the underlying output data source. Spark's default catalog supports
     * "parquet", "json", etc.
     * </pre>
     *
     * <code>optional string provider = 3;</code>
     * @return The bytes for provider.
     */
    public com.google.protobuf.ByteString
        getProviderBytes() {
      Object ref = provider_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        provider_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Optional) A provider for the underlying output data source. Spark's default catalog supports
     * "parquet", "json", etc.
     * </pre>
     *
     * <code>optional string provider = 3;</code>
     * @param value The provider to set.
     * @return This builder for chaining.
     */
    public Builder setProvider(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      provider_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) A provider for the underlying output data source. Spark's default catalog supports
     * "parquet", "json", etc.
     * </pre>
     *
     * <code>optional string provider = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearProvider() {
      provider_ = getDefaultInstance().getProvider();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) A provider for the underlying output data source. Spark's default catalog supports
     * "parquet", "json", etc.
     * </pre>
     *
     * <code>optional string provider = 3;</code>
     * @param value The bytes for provider to set.
     * @return This builder for chaining.
     */
    public Builder setProviderBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      provider_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private java.util.List<org.apache.spark.connect.proto.Expression> partitioningColumns_ =
      java.util.Collections.emptyList();
    private void ensurePartitioningColumnsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        partitioningColumns_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression>(partitioningColumns_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> partitioningColumnsBuilder_;

    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression> getPartitioningColumnsList() {
      if (partitioningColumnsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(partitioningColumns_);
      } else {
        return partitioningColumnsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public int getPartitioningColumnsCount() {
      if (partitioningColumnsBuilder_ == null) {
        return partitioningColumns_.size();
      } else {
        return partitioningColumnsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression getPartitioningColumns(int index) {
      if (partitioningColumnsBuilder_ == null) {
        return partitioningColumns_.get(index);
      } else {
        return partitioningColumnsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public Builder setPartitioningColumns(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (partitioningColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePartitioningColumnsIsMutable();
        partitioningColumns_.set(index, value);
        onChanged();
      } else {
        partitioningColumnsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public Builder setPartitioningColumns(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (partitioningColumnsBuilder_ == null) {
        ensurePartitioningColumnsIsMutable();
        partitioningColumns_.set(index, builderForValue.build());
        onChanged();
      } else {
        partitioningColumnsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public Builder addPartitioningColumns(org.apache.spark.connect.proto.Expression value) {
      if (partitioningColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePartitioningColumnsIsMutable();
        partitioningColumns_.add(value);
        onChanged();
      } else {
        partitioningColumnsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public Builder addPartitioningColumns(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (partitioningColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePartitioningColumnsIsMutable();
        partitioningColumns_.add(index, value);
        onChanged();
      } else {
        partitioningColumnsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public Builder addPartitioningColumns(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (partitioningColumnsBuilder_ == null) {
        ensurePartitioningColumnsIsMutable();
        partitioningColumns_.add(builderForValue.build());
        onChanged();
      } else {
        partitioningColumnsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public Builder addPartitioningColumns(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (partitioningColumnsBuilder_ == null) {
        ensurePartitioningColumnsIsMutable();
        partitioningColumns_.add(index, builderForValue.build());
        onChanged();
      } else {
        partitioningColumnsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public Builder addAllPartitioningColumns(
        Iterable<? extends org.apache.spark.connect.proto.Expression> values) {
      if (partitioningColumnsBuilder_ == null) {
        ensurePartitioningColumnsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, partitioningColumns_);
        onChanged();
      } else {
        partitioningColumnsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public Builder clearPartitioningColumns() {
      if (partitioningColumnsBuilder_ == null) {
        partitioningColumns_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        partitioningColumnsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public Builder removePartitioningColumns(int index) {
      if (partitioningColumnsBuilder_ == null) {
        ensurePartitioningColumnsIsMutable();
        partitioningColumns_.remove(index);
        onChanged();
      } else {
        partitioningColumnsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getPartitioningColumnsBuilder(
        int index) {
      return getPartitioningColumnsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getPartitioningColumnsOrBuilder(
        int index) {
      if (partitioningColumnsBuilder_ == null) {
        return partitioningColumns_.get(index);  } else {
        return partitioningColumnsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
         getPartitioningColumnsOrBuilderList() {
      if (partitioningColumnsBuilder_ != null) {
        return partitioningColumnsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(partitioningColumns_);
      }
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addPartitioningColumnsBuilder() {
      return getPartitioningColumnsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addPartitioningColumnsBuilder(
        int index) {
      return getPartitioningColumnsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning for output table created by `create`,
     * `createOrReplace`, or `replace`
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partitioning_columns = 4;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression.Builder> 
         getPartitioningColumnsBuilderList() {
      return getPartitioningColumnsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getPartitioningColumnsFieldBuilder() {
      if (partitioningColumnsBuilder_ == null) {
        partitioningColumnsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                partitioningColumns_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        partitioningColumns_ = null;
      }
      return partitioningColumnsBuilder_;
    }

    private com.google.protobuf.MapField<
        String, String> options_;
    private com.google.protobuf.MapField<String, String>
        internalGetOptions() {
      if (options_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            OptionsDefaultEntryHolder.defaultEntry);
      }
      return options_;
    }
    private com.google.protobuf.MapField<String, String>
        internalGetMutableOptions() {
      if (options_ == null) {
        options_ = com.google.protobuf.MapField.newMapField(
            OptionsDefaultEntryHolder.defaultEntry);
      }
      if (!options_.isMutable()) {
        options_ = options_.copy();
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return options_;
    }
    public int getOptionsCount() {
      return internalGetOptions().getMap().size();
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 5;</code>
     */
    @Override
    public boolean containsOptions(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetOptions().getMap().containsKey(key);
    }
    /**
     * Use {@link #getOptionsMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, String> getOptions() {
      return getOptionsMap();
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 5;</code>
     */
    @Override
    public java.util.Map<String, String> getOptionsMap() {
      return internalGetOptions().getMap();
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 5;</code>
     */
    @Override
    public /* nullable */
String getOptionsOrDefault(
        String key,
        /* nullable */
String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetOptions().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 5;</code>
     */
    @Override
    public String getOptionsOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetOptions().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearOptions() {
      bitField0_ = (bitField0_ & ~0x00000010);
      internalGetMutableOptions().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 5;</code>
     */
    public Builder removeOptions(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableOptions().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @Deprecated
    public java.util.Map<String, String>
        getMutableOptions() {
      bitField0_ |= 0x00000010;
      return internalGetMutableOptions().getMutableMap();
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 5;</code>
     */
    public Builder putOptions(
        String key,
        String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableOptions().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 5;</code>
     */
    public Builder putAllOptions(
        java.util.Map<String, String> values) {
      internalGetMutableOptions().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000010;
      return this;
    }

    private com.google.protobuf.MapField<
        String, String> tableProperties_;
    private com.google.protobuf.MapField<String, String>
        internalGetTableProperties() {
      if (tableProperties_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TablePropertiesDefaultEntryHolder.defaultEntry);
      }
      return tableProperties_;
    }
    private com.google.protobuf.MapField<String, String>
        internalGetMutableTableProperties() {
      if (tableProperties_ == null) {
        tableProperties_ = com.google.protobuf.MapField.newMapField(
            TablePropertiesDefaultEntryHolder.defaultEntry);
      }
      if (!tableProperties_.isMutable()) {
        tableProperties_ = tableProperties_.copy();
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return tableProperties_;
    }
    public int getTablePropertiesCount() {
      return internalGetTableProperties().getMap().size();
    }
    /**
     * <pre>
     * (Optional) A list of table properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; table_properties = 6;</code>
     */
    @Override
    public boolean containsTableProperties(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetTableProperties().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTablePropertiesMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, String> getTableProperties() {
      return getTablePropertiesMap();
    }
    /**
     * <pre>
     * (Optional) A list of table properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; table_properties = 6;</code>
     */
    @Override
    public java.util.Map<String, String> getTablePropertiesMap() {
      return internalGetTableProperties().getMap();
    }
    /**
     * <pre>
     * (Optional) A list of table properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; table_properties = 6;</code>
     */
    @Override
    public /* nullable */
String getTablePropertiesOrDefault(
        String key,
        /* nullable */
String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetTableProperties().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (Optional) A list of table properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; table_properties = 6;</code>
     */
    @Override
    public String getTablePropertiesOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetTableProperties().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearTableProperties() {
      bitField0_ = (bitField0_ & ~0x00000020);
      internalGetMutableTableProperties().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * (Optional) A list of table properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; table_properties = 6;</code>
     */
    public Builder removeTableProperties(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableTableProperties().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @Deprecated
    public java.util.Map<String, String>
        getMutableTableProperties() {
      bitField0_ |= 0x00000020;
      return internalGetMutableTableProperties().getMutableMap();
    }
    /**
     * <pre>
     * (Optional) A list of table properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; table_properties = 6;</code>
     */
    public Builder putTableProperties(
        String key,
        String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableTableProperties().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000020;
      return this;
    }
    /**
     * <pre>
     * (Optional) A list of table properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; table_properties = 6;</code>
     */
    public Builder putAllTableProperties(
        java.util.Map<String, String> values) {
      internalGetMutableTableProperties().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000020;
      return this;
    }

    private int mode_ = 0;
    /**
     * <pre>
     * (Required) Write mode.
     * </pre>
     *
     * <code>.spark.connect.WriteOperationV2.Mode mode = 7;</code>
     * @return The enum numeric value on the wire for mode.
     */
    @Override public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     * (Required) Write mode.
     * </pre>
     *
     * <code>.spark.connect.WriteOperationV2.Mode mode = 7;</code>
     * @param value The enum numeric value on the wire for mode to set.
     * @return This builder for chaining.
     */
    public Builder setModeValue(int value) {
      mode_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Write mode.
     * </pre>
     *
     * <code>.spark.connect.WriteOperationV2.Mode mode = 7;</code>
     * @return The mode.
     */
    @Override
    public org.apache.spark.connect.proto.WriteOperationV2.Mode getMode() {
      org.apache.spark.connect.proto.WriteOperationV2.Mode result = org.apache.spark.connect.proto.WriteOperationV2.Mode.forNumber(mode_);
      return result == null ? org.apache.spark.connect.proto.WriteOperationV2.Mode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * (Required) Write mode.
     * </pre>
     *
     * <code>.spark.connect.WriteOperationV2.Mode mode = 7;</code>
     * @param value The mode to set.
     * @return This builder for chaining.
     */
    public Builder setMode(org.apache.spark.connect.proto.WriteOperationV2.Mode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000040;
      mode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Write mode.
     * </pre>
     *
     * <code>.spark.connect.WriteOperationV2.Mode mode = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearMode() {
      bitField0_ = (bitField0_ & ~0x00000040);
      mode_ = 0;
      onChanged();
      return this;
    }

    private org.apache.spark.connect.proto.Expression overwriteCondition_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> overwriteConditionBuilder_;
    /**
     * <pre>
     * (Optional) A condition for overwrite saving mode
     * </pre>
     *
     * <code>.spark.connect.Expression overwrite_condition = 8;</code>
     * @return Whether the overwriteCondition field is set.
     */
    public boolean hasOverwriteCondition() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * (Optional) A condition for overwrite saving mode
     * </pre>
     *
     * <code>.spark.connect.Expression overwrite_condition = 8;</code>
     * @return The overwriteCondition.
     */
    public org.apache.spark.connect.proto.Expression getOverwriteCondition() {
      if (overwriteConditionBuilder_ == null) {
        return overwriteCondition_ == null ? org.apache.spark.connect.proto.Expression.getDefaultInstance() : overwriteCondition_;
      } else {
        return overwriteConditionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Optional) A condition for overwrite saving mode
     * </pre>
     *
     * <code>.spark.connect.Expression overwrite_condition = 8;</code>
     */
    public Builder setOverwriteCondition(org.apache.spark.connect.proto.Expression value) {
      if (overwriteConditionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        overwriteCondition_ = value;
      } else {
        overwriteConditionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) A condition for overwrite saving mode
     * </pre>
     *
     * <code>.spark.connect.Expression overwrite_condition = 8;</code>
     */
    public Builder setOverwriteCondition(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (overwriteConditionBuilder_ == null) {
        overwriteCondition_ = builderForValue.build();
      } else {
        overwriteConditionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) A condition for overwrite saving mode
     * </pre>
     *
     * <code>.spark.connect.Expression overwrite_condition = 8;</code>
     */
    public Builder mergeOverwriteCondition(org.apache.spark.connect.proto.Expression value) {
      if (overwriteConditionBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0) &&
          overwriteCondition_ != null &&
          overwriteCondition_ != org.apache.spark.connect.proto.Expression.getDefaultInstance()) {
          getOverwriteConditionBuilder().mergeFrom(value);
        } else {
          overwriteCondition_ = value;
        }
      } else {
        overwriteConditionBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) A condition for overwrite saving mode
     * </pre>
     *
     * <code>.spark.connect.Expression overwrite_condition = 8;</code>
     */
    public Builder clearOverwriteCondition() {
      bitField0_ = (bitField0_ & ~0x00000080);
      overwriteCondition_ = null;
      if (overwriteConditionBuilder_ != null) {
        overwriteConditionBuilder_.dispose();
        overwriteConditionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) A condition for overwrite saving mode
     * </pre>
     *
     * <code>.spark.connect.Expression overwrite_condition = 8;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getOverwriteConditionBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getOverwriteConditionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Optional) A condition for overwrite saving mode
     * </pre>
     *
     * <code>.spark.connect.Expression overwrite_condition = 8;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getOverwriteConditionOrBuilder() {
      if (overwriteConditionBuilder_ != null) {
        return overwriteConditionBuilder_.getMessageOrBuilder();
      } else {
        return overwriteCondition_ == null ?
            org.apache.spark.connect.proto.Expression.getDefaultInstance() : overwriteCondition_;
      }
    }
    /**
     * <pre>
     * (Optional) A condition for overwrite saving mode
     * </pre>
     *
     * <code>.spark.connect.Expression overwrite_condition = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getOverwriteConditionFieldBuilder() {
      if (overwriteConditionBuilder_ == null) {
        overwriteConditionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                getOverwriteCondition(),
                getParentForChildren(),
                isClean());
        overwriteCondition_ = null;
      }
      return overwriteConditionBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.WriteOperationV2)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.WriteOperationV2)
  private static final org.apache.spark.connect.proto.WriteOperationV2 DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.WriteOperationV2();
  }

  public static org.apache.spark.connect.proto.WriteOperationV2 getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WriteOperationV2>
      PARSER = new com.google.protobuf.AbstractParser<WriteOperationV2>() {
    @Override
    public WriteOperationV2 parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<WriteOperationV2> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<WriteOperationV2> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.WriteOperationV2 getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

