// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Relation of type [[Aggregate]].
 * </pre>
 *
 * Protobuf type {@code spark.connect.Aggregate}
 */
public final class Aggregate extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.Aggregate)
    AggregateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Aggregate.newBuilder() to construct.
  private Aggregate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Aggregate() {
    groupType_ = 0;
    groupingExpressions_ = java.util.Collections.emptyList();
    aggregateExpressions_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new Aggregate();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Aggregate_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Aggregate_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.Aggregate.class, org.apache.spark.connect.proto.Aggregate.Builder.class);
  }

  /**
   * Protobuf enum {@code spark.connect.Aggregate.GroupType}
   */
  public enum GroupType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>GROUP_TYPE_UNSPECIFIED = 0;</code>
     */
    GROUP_TYPE_UNSPECIFIED(0),
    /**
     * <code>GROUP_TYPE_GROUPBY = 1;</code>
     */
    GROUP_TYPE_GROUPBY(1),
    /**
     * <code>GROUP_TYPE_ROLLUP = 2;</code>
     */
    GROUP_TYPE_ROLLUP(2),
    /**
     * <code>GROUP_TYPE_CUBE = 3;</code>
     */
    GROUP_TYPE_CUBE(3),
    /**
     * <code>GROUP_TYPE_PIVOT = 4;</code>
     */
    GROUP_TYPE_PIVOT(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>GROUP_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int GROUP_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <code>GROUP_TYPE_GROUPBY = 1;</code>
     */
    public static final int GROUP_TYPE_GROUPBY_VALUE = 1;
    /**
     * <code>GROUP_TYPE_ROLLUP = 2;</code>
     */
    public static final int GROUP_TYPE_ROLLUP_VALUE = 2;
    /**
     * <code>GROUP_TYPE_CUBE = 3;</code>
     */
    public static final int GROUP_TYPE_CUBE_VALUE = 3;
    /**
     * <code>GROUP_TYPE_PIVOT = 4;</code>
     */
    public static final int GROUP_TYPE_PIVOT_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static GroupType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GroupType forNumber(int value) {
      switch (value) {
        case 0: return GROUP_TYPE_UNSPECIFIED;
        case 1: return GROUP_TYPE_GROUPBY;
        case 2: return GROUP_TYPE_ROLLUP;
        case 3: return GROUP_TYPE_CUBE;
        case 4: return GROUP_TYPE_PIVOT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GroupType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GroupType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GroupType>() {
            public GroupType findValueByNumber(int number) {
              return GroupType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Aggregate.getDescriptor().getEnumTypes().get(0);
    }

    private static final GroupType[] VALUES = values();

    public static GroupType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GroupType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:spark.connect.Aggregate.GroupType)
  }

  public interface PivotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Aggregate.Pivot)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The column to pivot
     * </pre>
     *
     * <code>.spark.connect.Expression col = 1;</code>
     * @return Whether the col field is set.
     */
    boolean hasCol();
    /**
     * <pre>
     * (Required) The column to pivot
     * </pre>
     *
     * <code>.spark.connect.Expression col = 1;</code>
     * @return The col.
     */
    org.apache.spark.connect.proto.Expression getCol();
    /**
     * <pre>
     * (Required) The column to pivot
     * </pre>
     *
     * <code>.spark.connect.Expression col = 1;</code>
     */
    org.apache.spark.connect.proto.ExpressionOrBuilder getColOrBuilder();

    /**
     * <pre>
     * (Optional) List of values that will be translated to columns in the output DataFrame.
     *
     * Note that if it is empty, the server side will immediately trigger a job to collect
     * the distinct values of the column.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
     */
    java.util.List<org.apache.spark.connect.proto.Expression.Literal> 
        getValuesList();
    /**
     * <pre>
     * (Optional) List of values that will be translated to columns in the output DataFrame.
     *
     * Note that if it is empty, the server side will immediately trigger a job to collect
     * the distinct values of the column.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
     */
    org.apache.spark.connect.proto.Expression.Literal getValues(int index);
    /**
     * <pre>
     * (Optional) List of values that will be translated to columns in the output DataFrame.
     *
     * Note that if it is empty, the server side will immediately trigger a job to collect
     * the distinct values of the column.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
     */
    int getValuesCount();
    /**
     * <pre>
     * (Optional) List of values that will be translated to columns in the output DataFrame.
     *
     * Note that if it is empty, the server side will immediately trigger a job to collect
     * the distinct values of the column.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
     */
    java.util.List<? extends org.apache.spark.connect.proto.Expression.LiteralOrBuilder> 
        getValuesOrBuilderList();
    /**
     * <pre>
     * (Optional) List of values that will be translated to columns in the output DataFrame.
     *
     * Note that if it is empty, the server side will immediately trigger a job to collect
     * the distinct values of the column.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
     */
    org.apache.spark.connect.proto.Expression.LiteralOrBuilder getValuesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code spark.connect.Aggregate.Pivot}
   */
  public static final class Pivot extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Aggregate.Pivot)
      PivotOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Pivot.newBuilder() to construct.
    private Pivot(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Pivot() {
      values_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Pivot();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Aggregate_Pivot_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Aggregate_Pivot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.Aggregate.Pivot.class, org.apache.spark.connect.proto.Aggregate.Pivot.Builder.class);
    }

    public static final int COL_FIELD_NUMBER = 1;
    private org.apache.spark.connect.proto.Expression col_;
    /**
     * <pre>
     * (Required) The column to pivot
     * </pre>
     *
     * <code>.spark.connect.Expression col = 1;</code>
     * @return Whether the col field is set.
     */
    @Override
    public boolean hasCol() {
      return col_ != null;
    }
    /**
     * <pre>
     * (Required) The column to pivot
     * </pre>
     *
     * <code>.spark.connect.Expression col = 1;</code>
     * @return The col.
     */
    @Override
    public org.apache.spark.connect.proto.Expression getCol() {
      return col_ == null ? org.apache.spark.connect.proto.Expression.getDefaultInstance() : col_;
    }
    /**
     * <pre>
     * (Required) The column to pivot
     * </pre>
     *
     * <code>.spark.connect.Expression col = 1;</code>
     */
    @Override
    public org.apache.spark.connect.proto.ExpressionOrBuilder getColOrBuilder() {
      return col_ == null ? org.apache.spark.connect.proto.Expression.getDefaultInstance() : col_;
    }

    public static final int VALUES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.apache.spark.connect.proto.Expression.Literal> values_;
    /**
     * <pre>
     * (Optional) List of values that will be translated to columns in the output DataFrame.
     *
     * Note that if it is empty, the server side will immediately trigger a job to collect
     * the distinct values of the column.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
     */
    @Override
    public java.util.List<org.apache.spark.connect.proto.Expression.Literal> getValuesList() {
      return values_;
    }
    /**
     * <pre>
     * (Optional) List of values that will be translated to columns in the output DataFrame.
     *
     * Note that if it is empty, the server side will immediately trigger a job to collect
     * the distinct values of the column.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
     */
    @Override
    public java.util.List<? extends org.apache.spark.connect.proto.Expression.LiteralOrBuilder> 
        getValuesOrBuilderList() {
      return values_;
    }
    /**
     * <pre>
     * (Optional) List of values that will be translated to columns in the output DataFrame.
     *
     * Note that if it is empty, the server side will immediately trigger a job to collect
     * the distinct values of the column.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
     */
    @Override
    public int getValuesCount() {
      return values_.size();
    }
    /**
     * <pre>
     * (Optional) List of values that will be translated to columns in the output DataFrame.
     *
     * Note that if it is empty, the server side will immediately trigger a job to collect
     * the distinct values of the column.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
     */
    @Override
    public org.apache.spark.connect.proto.Expression.Literal getValues(int index) {
      return values_.get(index);
    }
    /**
     * <pre>
     * (Optional) List of values that will be translated to columns in the output DataFrame.
     *
     * Note that if it is empty, the server side will immediately trigger a job to collect
     * the distinct values of the column.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
     */
    @Override
    public org.apache.spark.connect.proto.Expression.LiteralOrBuilder getValuesOrBuilder(
        int index) {
      return values_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (col_ != null) {
        output.writeMessage(1, getCol());
      }
      for (int i = 0; i < values_.size(); i++) {
        output.writeMessage(2, values_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (col_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCol());
      }
      for (int i = 0; i < values_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, values_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.Aggregate.Pivot)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.Aggregate.Pivot other = (org.apache.spark.connect.proto.Aggregate.Pivot) obj;

      if (hasCol() != other.hasCol()) return false;
      if (hasCol()) {
        if (!getCol()
            .equals(other.getCol())) return false;
      }
      if (!getValuesList()
          .equals(other.getValuesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCol()) {
        hash = (37 * hash) + COL_FIELD_NUMBER;
        hash = (53 * hash) + getCol().hashCode();
      }
      if (getValuesCount() > 0) {
        hash = (37 * hash) + VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getValuesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.Aggregate.Pivot parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.Aggregate.Pivot parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Aggregate.Pivot parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.Aggregate.Pivot parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Aggregate.Pivot parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.Aggregate.Pivot parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Aggregate.Pivot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.Aggregate.Pivot parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.Aggregate.Pivot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.Aggregate.Pivot parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Aggregate.Pivot parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.Aggregate.Pivot parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.Aggregate.Pivot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.Aggregate.Pivot}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Aggregate.Pivot)
        org.apache.spark.connect.proto.Aggregate.PivotOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Aggregate_Pivot_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Aggregate_Pivot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.Aggregate.Pivot.class, org.apache.spark.connect.proto.Aggregate.Pivot.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.Aggregate.Pivot.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        col_ = null;
        if (colBuilder_ != null) {
          colBuilder_.dispose();
          colBuilder_ = null;
        }
        if (valuesBuilder_ == null) {
          values_ = java.util.Collections.emptyList();
        } else {
          values_ = null;
          valuesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Aggregate_Pivot_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.Aggregate.Pivot getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.Aggregate.Pivot.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.Aggregate.Pivot build() {
        org.apache.spark.connect.proto.Aggregate.Pivot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.Aggregate.Pivot buildPartial() {
        org.apache.spark.connect.proto.Aggregate.Pivot result = new org.apache.spark.connect.proto.Aggregate.Pivot(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.apache.spark.connect.proto.Aggregate.Pivot result) {
        if (valuesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            values_ = java.util.Collections.unmodifiableList(values_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.values_ = values_;
        } else {
          result.values_ = valuesBuilder_.build();
        }
      }

      private void buildPartial0(org.apache.spark.connect.proto.Aggregate.Pivot result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.col_ = colBuilder_ == null
              ? col_
              : colBuilder_.build();
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.Aggregate.Pivot) {
          return mergeFrom((org.apache.spark.connect.proto.Aggregate.Pivot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.Aggregate.Pivot other) {
        if (other == org.apache.spark.connect.proto.Aggregate.Pivot.getDefaultInstance()) return this;
        if (other.hasCol()) {
          mergeCol(other.getCol());
        }
        if (valuesBuilder_ == null) {
          if (!other.values_.isEmpty()) {
            if (values_.isEmpty()) {
              values_ = other.values_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureValuesIsMutable();
              values_.addAll(other.values_);
            }
            onChanged();
          }
        } else {
          if (!other.values_.isEmpty()) {
            if (valuesBuilder_.isEmpty()) {
              valuesBuilder_.dispose();
              valuesBuilder_ = null;
              values_ = other.values_;
              bitField0_ = (bitField0_ & ~0x00000002);
              valuesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getValuesFieldBuilder() : null;
            } else {
              valuesBuilder_.addAllMessages(other.values_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getColFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                org.apache.spark.connect.proto.Expression.Literal m =
                    input.readMessage(
                        org.apache.spark.connect.proto.Expression.Literal.parser(),
                        extensionRegistry);
                if (valuesBuilder_ == null) {
                  ensureValuesIsMutable();
                  values_.add(m);
                } else {
                  valuesBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.spark.connect.proto.Expression col_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> colBuilder_;
      /**
       * <pre>
       * (Required) The column to pivot
       * </pre>
       *
       * <code>.spark.connect.Expression col = 1;</code>
       * @return Whether the col field is set.
       */
      public boolean hasCol() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * (Required) The column to pivot
       * </pre>
       *
       * <code>.spark.connect.Expression col = 1;</code>
       * @return The col.
       */
      public org.apache.spark.connect.proto.Expression getCol() {
        if (colBuilder_ == null) {
          return col_ == null ? org.apache.spark.connect.proto.Expression.getDefaultInstance() : col_;
        } else {
          return colBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The column to pivot
       * </pre>
       *
       * <code>.spark.connect.Expression col = 1;</code>
       */
      public Builder setCol(org.apache.spark.connect.proto.Expression value) {
        if (colBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          col_ = value;
        } else {
          colBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The column to pivot
       * </pre>
       *
       * <code>.spark.connect.Expression col = 1;</code>
       */
      public Builder setCol(
          org.apache.spark.connect.proto.Expression.Builder builderForValue) {
        if (colBuilder_ == null) {
          col_ = builderForValue.build();
        } else {
          colBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The column to pivot
       * </pre>
       *
       * <code>.spark.connect.Expression col = 1;</code>
       */
      public Builder mergeCol(org.apache.spark.connect.proto.Expression value) {
        if (colBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            col_ != null &&
            col_ != org.apache.spark.connect.proto.Expression.getDefaultInstance()) {
            getColBuilder().mergeFrom(value);
          } else {
            col_ = value;
          }
        } else {
          colBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The column to pivot
       * </pre>
       *
       * <code>.spark.connect.Expression col = 1;</code>
       */
      public Builder clearCol() {
        bitField0_ = (bitField0_ & ~0x00000001);
        col_ = null;
        if (colBuilder_ != null) {
          colBuilder_.dispose();
          colBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The column to pivot
       * </pre>
       *
       * <code>.spark.connect.Expression col = 1;</code>
       */
      public org.apache.spark.connect.proto.Expression.Builder getColBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getColFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The column to pivot
       * </pre>
       *
       * <code>.spark.connect.Expression col = 1;</code>
       */
      public org.apache.spark.connect.proto.ExpressionOrBuilder getColOrBuilder() {
        if (colBuilder_ != null) {
          return colBuilder_.getMessageOrBuilder();
        } else {
          return col_ == null ?
              org.apache.spark.connect.proto.Expression.getDefaultInstance() : col_;
        }
      }
      /**
       * <pre>
       * (Required) The column to pivot
       * </pre>
       *
       * <code>.spark.connect.Expression col = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
          getColFieldBuilder() {
        if (colBuilder_ == null) {
          colBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                  getCol(),
                  getParentForChildren(),
                  isClean());
          col_ = null;
        }
        return colBuilder_;
      }

      private java.util.List<org.apache.spark.connect.proto.Expression.Literal> values_ =
        java.util.Collections.emptyList();
      private void ensureValuesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          values_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression.Literal>(values_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.spark.connect.proto.Expression.Literal, org.apache.spark.connect.proto.Expression.Literal.Builder, org.apache.spark.connect.proto.Expression.LiteralOrBuilder> valuesBuilder_;

      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public java.util.List<org.apache.spark.connect.proto.Expression.Literal> getValuesList() {
        if (valuesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(values_);
        } else {
          return valuesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public int getValuesCount() {
        if (valuesBuilder_ == null) {
          return values_.size();
        } else {
          return valuesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public org.apache.spark.connect.proto.Expression.Literal getValues(int index) {
        if (valuesBuilder_ == null) {
          return values_.get(index);
        } else {
          return valuesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public Builder setValues(
          int index, org.apache.spark.connect.proto.Expression.Literal value) {
        if (valuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValuesIsMutable();
          values_.set(index, value);
          onChanged();
        } else {
          valuesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public Builder setValues(
          int index, org.apache.spark.connect.proto.Expression.Literal.Builder builderForValue) {
        if (valuesBuilder_ == null) {
          ensureValuesIsMutable();
          values_.set(index, builderForValue.build());
          onChanged();
        } else {
          valuesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public Builder addValues(org.apache.spark.connect.proto.Expression.Literal value) {
        if (valuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValuesIsMutable();
          values_.add(value);
          onChanged();
        } else {
          valuesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public Builder addValues(
          int index, org.apache.spark.connect.proto.Expression.Literal value) {
        if (valuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValuesIsMutable();
          values_.add(index, value);
          onChanged();
        } else {
          valuesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public Builder addValues(
          org.apache.spark.connect.proto.Expression.Literal.Builder builderForValue) {
        if (valuesBuilder_ == null) {
          ensureValuesIsMutable();
          values_.add(builderForValue.build());
          onChanged();
        } else {
          valuesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public Builder addValues(
          int index, org.apache.spark.connect.proto.Expression.Literal.Builder builderForValue) {
        if (valuesBuilder_ == null) {
          ensureValuesIsMutable();
          values_.add(index, builderForValue.build());
          onChanged();
        } else {
          valuesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public Builder addAllValues(
          Iterable<? extends org.apache.spark.connect.proto.Expression.Literal> values) {
        if (valuesBuilder_ == null) {
          ensureValuesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, values_);
          onChanged();
        } else {
          valuesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public Builder clearValues() {
        if (valuesBuilder_ == null) {
          values_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          valuesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public Builder removeValues(int index) {
        if (valuesBuilder_ == null) {
          ensureValuesIsMutable();
          values_.remove(index);
          onChanged();
        } else {
          valuesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public org.apache.spark.connect.proto.Expression.Literal.Builder getValuesBuilder(
          int index) {
        return getValuesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public org.apache.spark.connect.proto.Expression.LiteralOrBuilder getValuesOrBuilder(
          int index) {
        if (valuesBuilder_ == null) {
          return values_.get(index);  } else {
          return valuesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public java.util.List<? extends org.apache.spark.connect.proto.Expression.LiteralOrBuilder> 
           getValuesOrBuilderList() {
        if (valuesBuilder_ != null) {
          return valuesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(values_);
        }
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public org.apache.spark.connect.proto.Expression.Literal.Builder addValuesBuilder() {
        return getValuesFieldBuilder().addBuilder(
            org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public org.apache.spark.connect.proto.Expression.Literal.Builder addValuesBuilder(
          int index) {
        return getValuesFieldBuilder().addBuilder(
            index, org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) List of values that will be translated to columns in the output DataFrame.
       *
       * Note that if it is empty, the server side will immediately trigger a job to collect
       * the distinct values of the column.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.Literal values = 2;</code>
       */
      public java.util.List<org.apache.spark.connect.proto.Expression.Literal.Builder> 
           getValuesBuilderList() {
        return getValuesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.spark.connect.proto.Expression.Literal, org.apache.spark.connect.proto.Expression.Literal.Builder, org.apache.spark.connect.proto.Expression.LiteralOrBuilder> 
          getValuesFieldBuilder() {
        if (valuesBuilder_ == null) {
          valuesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.spark.connect.proto.Expression.Literal, org.apache.spark.connect.proto.Expression.Literal.Builder, org.apache.spark.connect.proto.Expression.LiteralOrBuilder>(
                  values_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          values_ = null;
        }
        return valuesBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Aggregate.Pivot)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Aggregate.Pivot)
    private static final org.apache.spark.connect.proto.Aggregate.Pivot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.Aggregate.Pivot();
    }

    public static org.apache.spark.connect.proto.Aggregate.Pivot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Pivot>
        PARSER = new com.google.protobuf.AbstractParser<Pivot>() {
      @Override
      public Pivot parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Pivot> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Pivot> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.Aggregate.Pivot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.spark.connect.proto.Relation input_;
  /**
   * <pre>
   * (Required) Input relation for a RelationalGroupedDataset.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  @Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   * <pre>
   * (Required) Input relation for a RelationalGroupedDataset.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  @Override
  public org.apache.spark.connect.proto.Relation getInput() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }
  /**
   * <pre>
   * (Required) Input relation for a RelationalGroupedDataset.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }

  public static final int GROUP_TYPE_FIELD_NUMBER = 2;
  private int groupType_ = 0;
  /**
   * <pre>
   * (Required) How the RelationalGroupedDataset was built.
   * </pre>
   *
   * <code>.spark.connect.Aggregate.GroupType group_type = 2;</code>
   * @return The enum numeric value on the wire for groupType.
   */
  @Override public int getGroupTypeValue() {
    return groupType_;
  }
  /**
   * <pre>
   * (Required) How the RelationalGroupedDataset was built.
   * </pre>
   *
   * <code>.spark.connect.Aggregate.GroupType group_type = 2;</code>
   * @return The groupType.
   */
  @Override public org.apache.spark.connect.proto.Aggregate.GroupType getGroupType() {
    org.apache.spark.connect.proto.Aggregate.GroupType result = org.apache.spark.connect.proto.Aggregate.GroupType.forNumber(groupType_);
    return result == null ? org.apache.spark.connect.proto.Aggregate.GroupType.UNRECOGNIZED : result;
  }

  public static final int GROUPING_EXPRESSIONS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.Expression> groupingExpressions_;
  /**
   * <pre>
   * (Required) Expressions for grouping keys
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.Expression> getGroupingExpressionsList() {
    return groupingExpressions_;
  }
  /**
   * <pre>
   * (Required) Expressions for grouping keys
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
      getGroupingExpressionsOrBuilderList() {
    return groupingExpressions_;
  }
  /**
   * <pre>
   * (Required) Expressions for grouping keys
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
   */
  @Override
  public int getGroupingExpressionsCount() {
    return groupingExpressions_.size();
  }
  /**
   * <pre>
   * (Required) Expressions for grouping keys
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Expression getGroupingExpressions(int index) {
    return groupingExpressions_.get(index);
  }
  /**
   * <pre>
   * (Required) Expressions for grouping keys
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getGroupingExpressionsOrBuilder(
      int index) {
    return groupingExpressions_.get(index);
  }

  public static final int AGGREGATE_EXPRESSIONS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.Expression> aggregateExpressions_;
  /**
   * <pre>
   * (Required) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.Expression> getAggregateExpressionsList() {
    return aggregateExpressions_;
  }
  /**
   * <pre>
   * (Required) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
      getAggregateExpressionsOrBuilderList() {
    return aggregateExpressions_;
  }
  /**
   * <pre>
   * (Required) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
   */
  @Override
  public int getAggregateExpressionsCount() {
    return aggregateExpressions_.size();
  }
  /**
   * <pre>
   * (Required) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Expression getAggregateExpressions(int index) {
    return aggregateExpressions_.get(index);
  }
  /**
   * <pre>
   * (Required) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.ExpressionOrBuilder getAggregateExpressionsOrBuilder(
      int index) {
    return aggregateExpressions_.get(index);
  }

  public static final int PIVOT_FIELD_NUMBER = 5;
  private org.apache.spark.connect.proto.Aggregate.Pivot pivot_;
  /**
   * <pre>
   * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
   * </pre>
   *
   * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
   * @return Whether the pivot field is set.
   */
  @Override
  public boolean hasPivot() {
    return pivot_ != null;
  }
  /**
   * <pre>
   * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
   * </pre>
   *
   * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
   * @return The pivot.
   */
  @Override
  public org.apache.spark.connect.proto.Aggregate.Pivot getPivot() {
    return pivot_ == null ? org.apache.spark.connect.proto.Aggregate.Pivot.getDefaultInstance() : pivot_;
  }
  /**
   * <pre>
   * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
   * </pre>
   *
   * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Aggregate.PivotOrBuilder getPivotOrBuilder() {
    return pivot_ == null ? org.apache.spark.connect.proto.Aggregate.Pivot.getDefaultInstance() : pivot_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    if (groupType_ != org.apache.spark.connect.proto.Aggregate.GroupType.GROUP_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(2, groupType_);
    }
    for (int i = 0; i < groupingExpressions_.size(); i++) {
      output.writeMessage(3, groupingExpressions_.get(i));
    }
    for (int i = 0; i < aggregateExpressions_.size(); i++) {
      output.writeMessage(4, aggregateExpressions_.get(i));
    }
    if (pivot_ != null) {
      output.writeMessage(5, getPivot());
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInput());
    }
    if (groupType_ != org.apache.spark.connect.proto.Aggregate.GroupType.GROUP_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, groupType_);
    }
    for (int i = 0; i < groupingExpressions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, groupingExpressions_.get(i));
    }
    for (int i = 0; i < aggregateExpressions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, aggregateExpressions_.get(i));
    }
    if (pivot_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getPivot());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.Aggregate)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.Aggregate other = (org.apache.spark.connect.proto.Aggregate) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput()
          .equals(other.getInput())) return false;
    }
    if (groupType_ != other.groupType_) return false;
    if (!getGroupingExpressionsList()
        .equals(other.getGroupingExpressionsList())) return false;
    if (!getAggregateExpressionsList()
        .equals(other.getAggregateExpressionsList())) return false;
    if (hasPivot() != other.hasPivot()) return false;
    if (hasPivot()) {
      if (!getPivot()
          .equals(other.getPivot())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    hash = (37 * hash) + GROUP_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + groupType_;
    if (getGroupingExpressionsCount() > 0) {
      hash = (37 * hash) + GROUPING_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getGroupingExpressionsList().hashCode();
    }
    if (getAggregateExpressionsCount() > 0) {
      hash = (37 * hash) + AGGREGATE_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getAggregateExpressionsList().hashCode();
    }
    if (hasPivot()) {
      hash = (37 * hash) + PIVOT_FIELD_NUMBER;
      hash = (53 * hash) + getPivot().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.Aggregate parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.Aggregate parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Aggregate parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.Aggregate parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Aggregate parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.Aggregate parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Aggregate parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.Aggregate parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.Aggregate parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.Aggregate parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Aggregate parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.Aggregate parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.Aggregate prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Relation of type [[Aggregate]].
   * </pre>
   *
   * Protobuf type {@code spark.connect.Aggregate}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.Aggregate)
      org.apache.spark.connect.proto.AggregateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Aggregate_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Aggregate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.Aggregate.class, org.apache.spark.connect.proto.Aggregate.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.Aggregate.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      groupType_ = 0;
      if (groupingExpressionsBuilder_ == null) {
        groupingExpressions_ = java.util.Collections.emptyList();
      } else {
        groupingExpressions_ = null;
        groupingExpressionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (aggregateExpressionsBuilder_ == null) {
        aggregateExpressions_ = java.util.Collections.emptyList();
      } else {
        aggregateExpressions_ = null;
        aggregateExpressionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      pivot_ = null;
      if (pivotBuilder_ != null) {
        pivotBuilder_.dispose();
        pivotBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Aggregate_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.Aggregate getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.Aggregate.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.Aggregate build() {
      org.apache.spark.connect.proto.Aggregate result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.Aggregate buildPartial() {
      org.apache.spark.connect.proto.Aggregate result = new org.apache.spark.connect.proto.Aggregate(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.apache.spark.connect.proto.Aggregate result) {
      if (groupingExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          groupingExpressions_ = java.util.Collections.unmodifiableList(groupingExpressions_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.groupingExpressions_ = groupingExpressions_;
      } else {
        result.groupingExpressions_ = groupingExpressionsBuilder_.build();
      }
      if (aggregateExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          aggregateExpressions_ = java.util.Collections.unmodifiableList(aggregateExpressions_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.aggregateExpressions_ = aggregateExpressions_;
      } else {
        result.aggregateExpressions_ = aggregateExpressionsBuilder_.build();
      }
    }

    private void buildPartial0(org.apache.spark.connect.proto.Aggregate result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.input_ = inputBuilder_ == null
            ? input_
            : inputBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.groupType_ = groupType_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.pivot_ = pivotBuilder_ == null
            ? pivot_
            : pivotBuilder_.build();
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.Aggregate) {
        return mergeFrom((org.apache.spark.connect.proto.Aggregate)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.Aggregate other) {
      if (other == org.apache.spark.connect.proto.Aggregate.getDefaultInstance()) return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      if (other.groupType_ != 0) {
        setGroupTypeValue(other.getGroupTypeValue());
      }
      if (groupingExpressionsBuilder_ == null) {
        if (!other.groupingExpressions_.isEmpty()) {
          if (groupingExpressions_.isEmpty()) {
            groupingExpressions_ = other.groupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureGroupingExpressionsIsMutable();
            groupingExpressions_.addAll(other.groupingExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.groupingExpressions_.isEmpty()) {
          if (groupingExpressionsBuilder_.isEmpty()) {
            groupingExpressionsBuilder_.dispose();
            groupingExpressionsBuilder_ = null;
            groupingExpressions_ = other.groupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000004);
            groupingExpressionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getGroupingExpressionsFieldBuilder() : null;
          } else {
            groupingExpressionsBuilder_.addAllMessages(other.groupingExpressions_);
          }
        }
      }
      if (aggregateExpressionsBuilder_ == null) {
        if (!other.aggregateExpressions_.isEmpty()) {
          if (aggregateExpressions_.isEmpty()) {
            aggregateExpressions_ = other.aggregateExpressions_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureAggregateExpressionsIsMutable();
            aggregateExpressions_.addAll(other.aggregateExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.aggregateExpressions_.isEmpty()) {
          if (aggregateExpressionsBuilder_.isEmpty()) {
            aggregateExpressionsBuilder_.dispose();
            aggregateExpressionsBuilder_ = null;
            aggregateExpressions_ = other.aggregateExpressions_;
            bitField0_ = (bitField0_ & ~0x00000008);
            aggregateExpressionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAggregateExpressionsFieldBuilder() : null;
          } else {
            aggregateExpressionsBuilder_.addAllMessages(other.aggregateExpressions_);
          }
        }
      }
      if (other.hasPivot()) {
        mergePivot(other.getPivot());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getInputFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              groupType_ = input.readEnum();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              org.apache.spark.connect.proto.Expression m =
                  input.readMessage(
                      org.apache.spark.connect.proto.Expression.parser(),
                      extensionRegistry);
              if (groupingExpressionsBuilder_ == null) {
                ensureGroupingExpressionsIsMutable();
                groupingExpressions_.add(m);
              } else {
                groupingExpressionsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              org.apache.spark.connect.proto.Expression m =
                  input.readMessage(
                      org.apache.spark.connect.proto.Expression.parser(),
                      extensionRegistry);
              if (aggregateExpressionsBuilder_ == null) {
                ensureAggregateExpressionsIsMutable();
                aggregateExpressions_.add(m);
              } else {
                aggregateExpressionsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getPivotFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.apache.spark.connect.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> inputBuilder_;
    /**
     * <pre>
     * (Required) Input relation for a RelationalGroupedDataset.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Required) Input relation for a RelationalGroupedDataset.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return The input.
     */
    public org.apache.spark.connect.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Input relation for a RelationalGroupedDataset.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
      } else {
        inputBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input relation for a RelationalGroupedDataset.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.spark.connect.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input relation for a RelationalGroupedDataset.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          input_ != null &&
          input_ != org.apache.spark.connect.proto.Relation.getDefaultInstance()) {
          getInputBuilder().mergeFrom(value);
        } else {
          input_ = value;
        }
      } else {
        inputBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input relation for a RelationalGroupedDataset.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      bitField0_ = (bitField0_ & ~0x00000001);
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Input relation for a RelationalGroupedDataset.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.Relation.Builder getInputBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Input relation for a RelationalGroupedDataset.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null ?
            org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      }
    }
    /**
     * <pre>
     * (Required) Input relation for a RelationalGroupedDataset.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> 
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder>(
                getInput(),
                getParentForChildren(),
                isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private int groupType_ = 0;
    /**
     * <pre>
     * (Required) How the RelationalGroupedDataset was built.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.GroupType group_type = 2;</code>
     * @return The enum numeric value on the wire for groupType.
     */
    @Override public int getGroupTypeValue() {
      return groupType_;
    }
    /**
     * <pre>
     * (Required) How the RelationalGroupedDataset was built.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.GroupType group_type = 2;</code>
     * @param value The enum numeric value on the wire for groupType to set.
     * @return This builder for chaining.
     */
    public Builder setGroupTypeValue(int value) {
      groupType_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) How the RelationalGroupedDataset was built.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.GroupType group_type = 2;</code>
     * @return The groupType.
     */
    @Override
    public org.apache.spark.connect.proto.Aggregate.GroupType getGroupType() {
      org.apache.spark.connect.proto.Aggregate.GroupType result = org.apache.spark.connect.proto.Aggregate.GroupType.forNumber(groupType_);
      return result == null ? org.apache.spark.connect.proto.Aggregate.GroupType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * (Required) How the RelationalGroupedDataset was built.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.GroupType group_type = 2;</code>
     * @param value The groupType to set.
     * @return This builder for chaining.
     */
    public Builder setGroupType(org.apache.spark.connect.proto.Aggregate.GroupType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      groupType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) How the RelationalGroupedDataset was built.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.GroupType group_type = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearGroupType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      groupType_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<org.apache.spark.connect.proto.Expression> groupingExpressions_ =
      java.util.Collections.emptyList();
    private void ensureGroupingExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        groupingExpressions_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression>(groupingExpressions_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> groupingExpressionsBuilder_;

    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression> getGroupingExpressionsList() {
      if (groupingExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(groupingExpressions_);
      } else {
        return groupingExpressionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public int getGroupingExpressionsCount() {
      if (groupingExpressionsBuilder_ == null) {
        return groupingExpressions_.size();
      } else {
        return groupingExpressionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public org.apache.spark.connect.proto.Expression getGroupingExpressions(int index) {
      if (groupingExpressionsBuilder_ == null) {
        return groupingExpressions_.get(index);
      } else {
        return groupingExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public Builder setGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (groupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.set(index, value);
        onChanged();
      } else {
        groupingExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public Builder setGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        groupingExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public Builder addGroupingExpressions(org.apache.spark.connect.proto.Expression value) {
      if (groupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(value);
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public Builder addGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (groupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(index, value);
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public Builder addGroupingExpressions(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public Builder addGroupingExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public Builder addAllGroupingExpressions(
        Iterable<? extends org.apache.spark.connect.proto.Expression> values) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, groupingExpressions_);
        onChanged();
      } else {
        groupingExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public Builder clearGroupingExpressions() {
      if (groupingExpressionsBuilder_ == null) {
        groupingExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        groupingExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public Builder removeGroupingExpressions(int index) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.remove(index);
        onChanged();
      } else {
        groupingExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getGroupingExpressionsBuilder(
        int index) {
      return getGroupingExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getGroupingExpressionsOrBuilder(
        int index) {
      if (groupingExpressionsBuilder_ == null) {
        return groupingExpressions_.get(index);  } else {
        return groupingExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
         getGroupingExpressionsOrBuilderList() {
      if (groupingExpressionsBuilder_ != null) {
        return groupingExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(groupingExpressions_);
      }
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addGroupingExpressionsBuilder() {
      return getGroupingExpressionsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addGroupingExpressionsBuilder(
        int index) {
      return getGroupingExpressionsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Required) Expressions for grouping keys
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression.Builder> 
         getGroupingExpressionsBuilderList() {
      return getGroupingExpressionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getGroupingExpressionsFieldBuilder() {
      if (groupingExpressionsBuilder_ == null) {
        groupingExpressionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                groupingExpressions_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        groupingExpressions_ = null;
      }
      return groupingExpressionsBuilder_;
    }

    private java.util.List<org.apache.spark.connect.proto.Expression> aggregateExpressions_ =
      java.util.Collections.emptyList();
    private void ensureAggregateExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        aggregateExpressions_ = new java.util.ArrayList<org.apache.spark.connect.proto.Expression>(aggregateExpressions_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> aggregateExpressionsBuilder_;

    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression> getAggregateExpressionsList() {
      if (aggregateExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(aggregateExpressions_);
      } else {
        return aggregateExpressionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public int getAggregateExpressionsCount() {
      if (aggregateExpressionsBuilder_ == null) {
        return aggregateExpressions_.size();
      } else {
        return aggregateExpressionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression getAggregateExpressions(int index) {
      if (aggregateExpressionsBuilder_ == null) {
        return aggregateExpressions_.get(index);
      } else {
        return aggregateExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public Builder setAggregateExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (aggregateExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAggregateExpressionsIsMutable();
        aggregateExpressions_.set(index, value);
        onChanged();
      } else {
        aggregateExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public Builder setAggregateExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (aggregateExpressionsBuilder_ == null) {
        ensureAggregateExpressionsIsMutable();
        aggregateExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        aggregateExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public Builder addAggregateExpressions(org.apache.spark.connect.proto.Expression value) {
      if (aggregateExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAggregateExpressionsIsMutable();
        aggregateExpressions_.add(value);
        onChanged();
      } else {
        aggregateExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public Builder addAggregateExpressions(
        int index, org.apache.spark.connect.proto.Expression value) {
      if (aggregateExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAggregateExpressionsIsMutable();
        aggregateExpressions_.add(index, value);
        onChanged();
      } else {
        aggregateExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public Builder addAggregateExpressions(
        org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (aggregateExpressionsBuilder_ == null) {
        ensureAggregateExpressionsIsMutable();
        aggregateExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        aggregateExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public Builder addAggregateExpressions(
        int index, org.apache.spark.connect.proto.Expression.Builder builderForValue) {
      if (aggregateExpressionsBuilder_ == null) {
        ensureAggregateExpressionsIsMutable();
        aggregateExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        aggregateExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public Builder addAllAggregateExpressions(
        Iterable<? extends org.apache.spark.connect.proto.Expression> values) {
      if (aggregateExpressionsBuilder_ == null) {
        ensureAggregateExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aggregateExpressions_);
        onChanged();
      } else {
        aggregateExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public Builder clearAggregateExpressions() {
      if (aggregateExpressionsBuilder_ == null) {
        aggregateExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        aggregateExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public Builder removeAggregateExpressions(int index) {
      if (aggregateExpressionsBuilder_ == null) {
        ensureAggregateExpressionsIsMutable();
        aggregateExpressions_.remove(index);
        onChanged();
      } else {
        aggregateExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder getAggregateExpressionsBuilder(
        int index) {
      return getAggregateExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.ExpressionOrBuilder getAggregateExpressionsOrBuilder(
        int index) {
      if (aggregateExpressionsBuilder_ == null) {
        return aggregateExpressions_.get(index);  } else {
        return aggregateExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.ExpressionOrBuilder> 
         getAggregateExpressionsOrBuilderList() {
      if (aggregateExpressionsBuilder_ != null) {
        return aggregateExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(aggregateExpressions_);
      }
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addAggregateExpressionsBuilder() {
      return getAggregateExpressionsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public org.apache.spark.connect.proto.Expression.Builder addAggregateExpressionsBuilder(
        int index) {
      return getAggregateExpressionsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.Expression.getDefaultInstance());
    }
    /**
     * <pre>
     * (Required) List of values that will be translated to columns in the output DataFrame.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.Expression.Builder> 
         getAggregateExpressionsBuilderList() {
      return getAggregateExpressionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder> 
        getAggregateExpressionsFieldBuilder() {
      if (aggregateExpressionsBuilder_ == null) {
        aggregateExpressionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.Expression, org.apache.spark.connect.proto.Expression.Builder, org.apache.spark.connect.proto.ExpressionOrBuilder>(
                aggregateExpressions_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        aggregateExpressions_ = null;
      }
      return aggregateExpressionsBuilder_;
    }

    private org.apache.spark.connect.proto.Aggregate.Pivot pivot_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Aggregate.Pivot, org.apache.spark.connect.proto.Aggregate.Pivot.Builder, org.apache.spark.connect.proto.Aggregate.PivotOrBuilder> pivotBuilder_;
    /**
     * <pre>
     * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
     * @return Whether the pivot field is set.
     */
    public boolean hasPivot() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
     * @return The pivot.
     */
    public org.apache.spark.connect.proto.Aggregate.Pivot getPivot() {
      if (pivotBuilder_ == null) {
        return pivot_ == null ? org.apache.spark.connect.proto.Aggregate.Pivot.getDefaultInstance() : pivot_;
      } else {
        return pivotBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
     */
    public Builder setPivot(org.apache.spark.connect.proto.Aggregate.Pivot value) {
      if (pivotBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pivot_ = value;
      } else {
        pivotBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
     */
    public Builder setPivot(
        org.apache.spark.connect.proto.Aggregate.Pivot.Builder builderForValue) {
      if (pivotBuilder_ == null) {
        pivot_ = builderForValue.build();
      } else {
        pivotBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
     */
    public Builder mergePivot(org.apache.spark.connect.proto.Aggregate.Pivot value) {
      if (pivotBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          pivot_ != null &&
          pivot_ != org.apache.spark.connect.proto.Aggregate.Pivot.getDefaultInstance()) {
          getPivotBuilder().mergeFrom(value);
        } else {
          pivot_ = value;
        }
      } else {
        pivotBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
     */
    public Builder clearPivot() {
      bitField0_ = (bitField0_ & ~0x00000010);
      pivot_ = null;
      if (pivotBuilder_ != null) {
        pivotBuilder_.dispose();
        pivotBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
     */
    public org.apache.spark.connect.proto.Aggregate.Pivot.Builder getPivotBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getPivotFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
     */
    public org.apache.spark.connect.proto.Aggregate.PivotOrBuilder getPivotOrBuilder() {
      if (pivotBuilder_ != null) {
        return pivotBuilder_.getMessageOrBuilder();
      } else {
        return pivot_ == null ?
            org.apache.spark.connect.proto.Aggregate.Pivot.getDefaultInstance() : pivot_;
      }
    }
    /**
     * <pre>
     * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
     * </pre>
     *
     * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Aggregate.Pivot, org.apache.spark.connect.proto.Aggregate.Pivot.Builder, org.apache.spark.connect.proto.Aggregate.PivotOrBuilder> 
        getPivotFieldBuilder() {
      if (pivotBuilder_ == null) {
        pivotBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Aggregate.Pivot, org.apache.spark.connect.proto.Aggregate.Pivot.Builder, org.apache.spark.connect.proto.Aggregate.PivotOrBuilder>(
                getPivot(),
                getParentForChildren(),
                isClean());
        pivot_ = null;
      }
      return pivotBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.Aggregate)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.Aggregate)
  private static final org.apache.spark.connect.proto.Aggregate DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.Aggregate();
  }

  public static org.apache.spark.connect.proto.Aggregate getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Aggregate>
      PARSER = new com.google.protobuf.AbstractParser<Aggregate>() {
    @Override
    public Aggregate parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Aggregate> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<Aggregate> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.Aggregate getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

