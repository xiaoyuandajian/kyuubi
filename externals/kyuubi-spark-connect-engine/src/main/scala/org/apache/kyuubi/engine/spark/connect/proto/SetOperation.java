// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Relation of type [[SetOperation]]
 * </pre>
 *
 * Protobuf type {@code spark.connect.SetOperation}
 */
public final class SetOperation extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.SetOperation)
    SetOperationOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SetOperation.newBuilder() to construct.
  private SetOperation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SetOperation() {
    setOpType_ = 0;
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new SetOperation();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_SetOperation_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_SetOperation_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.SetOperation.class, org.apache.spark.connect.proto.SetOperation.Builder.class);
  }

  /**
   * Protobuf enum {@code spark.connect.SetOperation.SetOpType}
   */
  public enum SetOpType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SET_OP_TYPE_UNSPECIFIED = 0;</code>
     */
    SET_OP_TYPE_UNSPECIFIED(0),
    /**
     * <code>SET_OP_TYPE_INTERSECT = 1;</code>
     */
    SET_OP_TYPE_INTERSECT(1),
    /**
     * <code>SET_OP_TYPE_UNION = 2;</code>
     */
    SET_OP_TYPE_UNION(2),
    /**
     * <code>SET_OP_TYPE_EXCEPT = 3;</code>
     */
    SET_OP_TYPE_EXCEPT(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SET_OP_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int SET_OP_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <code>SET_OP_TYPE_INTERSECT = 1;</code>
     */
    public static final int SET_OP_TYPE_INTERSECT_VALUE = 1;
    /**
     * <code>SET_OP_TYPE_UNION = 2;</code>
     */
    public static final int SET_OP_TYPE_UNION_VALUE = 2;
    /**
     * <code>SET_OP_TYPE_EXCEPT = 3;</code>
     */
    public static final int SET_OP_TYPE_EXCEPT_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static SetOpType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SetOpType forNumber(int value) {
      switch (value) {
        case 0: return SET_OP_TYPE_UNSPECIFIED;
        case 1: return SET_OP_TYPE_INTERSECT;
        case 2: return SET_OP_TYPE_UNION;
        case 3: return SET_OP_TYPE_EXCEPT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SetOpType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SetOpType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SetOpType>() {
            public SetOpType findValueByNumber(int number) {
              return SetOpType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.SetOperation.getDescriptor().getEnumTypes().get(0);
    }

    private static final SetOpType[] VALUES = values();

    public static SetOpType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SetOpType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:spark.connect.SetOperation.SetOpType)
  }

  private int bitField0_;
  public static final int LEFT_INPUT_FIELD_NUMBER = 1;
  private org.apache.spark.connect.proto.Relation leftInput_;
  /**
   * <pre>
   * (Required) Left input relation for a Set operation.
   * </pre>
   *
   * <code>.spark.connect.Relation left_input = 1;</code>
   * @return Whether the leftInput field is set.
   */
  @Override
  public boolean hasLeftInput() {
    return leftInput_ != null;
  }
  /**
   * <pre>
   * (Required) Left input relation for a Set operation.
   * </pre>
   *
   * <code>.spark.connect.Relation left_input = 1;</code>
   * @return The leftInput.
   */
  @Override
  public org.apache.spark.connect.proto.Relation getLeftInput() {
    return leftInput_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : leftInput_;
  }
  /**
   * <pre>
   * (Required) Left input relation for a Set operation.
   * </pre>
   *
   * <code>.spark.connect.Relation left_input = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationOrBuilder getLeftInputOrBuilder() {
    return leftInput_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : leftInput_;
  }

  public static final int RIGHT_INPUT_FIELD_NUMBER = 2;
  private org.apache.spark.connect.proto.Relation rightInput_;
  /**
   * <pre>
   * (Required) Right input relation for a Set operation.
   * </pre>
   *
   * <code>.spark.connect.Relation right_input = 2;</code>
   * @return Whether the rightInput field is set.
   */
  @Override
  public boolean hasRightInput() {
    return rightInput_ != null;
  }
  /**
   * <pre>
   * (Required) Right input relation for a Set operation.
   * </pre>
   *
   * <code>.spark.connect.Relation right_input = 2;</code>
   * @return The rightInput.
   */
  @Override
  public org.apache.spark.connect.proto.Relation getRightInput() {
    return rightInput_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : rightInput_;
  }
  /**
   * <pre>
   * (Required) Right input relation for a Set operation.
   * </pre>
   *
   * <code>.spark.connect.Relation right_input = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationOrBuilder getRightInputOrBuilder() {
    return rightInput_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : rightInput_;
  }

  public static final int SET_OP_TYPE_FIELD_NUMBER = 3;
  private int setOpType_ = 0;
  /**
   * <pre>
   * (Required) The Set operation type.
   * </pre>
   *
   * <code>.spark.connect.SetOperation.SetOpType set_op_type = 3;</code>
   * @return The enum numeric value on the wire for setOpType.
   */
  @Override public int getSetOpTypeValue() {
    return setOpType_;
  }
  /**
   * <pre>
   * (Required) The Set operation type.
   * </pre>
   *
   * <code>.spark.connect.SetOperation.SetOpType set_op_type = 3;</code>
   * @return The setOpType.
   */
  @Override public org.apache.spark.connect.proto.SetOperation.SetOpType getSetOpType() {
    org.apache.spark.connect.proto.SetOperation.SetOpType result = org.apache.spark.connect.proto.SetOperation.SetOpType.forNumber(setOpType_);
    return result == null ? org.apache.spark.connect.proto.SetOperation.SetOpType.UNRECOGNIZED : result;
  }

  public static final int IS_ALL_FIELD_NUMBER = 4;
  private boolean isAll_ = false;
  /**
   * <pre>
   * (Optional) If to remove duplicate rows.
   *
   * True to preserve all results.
   * False to remove duplicate rows.
   * </pre>
   *
   * <code>optional bool is_all = 4;</code>
   * @return Whether the isAll field is set.
   */
  @Override
  public boolean hasIsAll() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * (Optional) If to remove duplicate rows.
   *
   * True to preserve all results.
   * False to remove duplicate rows.
   * </pre>
   *
   * <code>optional bool is_all = 4;</code>
   * @return The isAll.
   */
  @Override
  public boolean getIsAll() {
    return isAll_;
  }

  public static final int BY_NAME_FIELD_NUMBER = 5;
  private boolean byName_ = false;
  /**
   * <pre>
   * (Optional) If to perform the Set operation based on name resolution.
   *
   * Only UNION supports this option.
   * </pre>
   *
   * <code>optional bool by_name = 5;</code>
   * @return Whether the byName field is set.
   */
  @Override
  public boolean hasByName() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * (Optional) If to perform the Set operation based on name resolution.
   *
   * Only UNION supports this option.
   * </pre>
   *
   * <code>optional bool by_name = 5;</code>
   * @return The byName.
   */
  @Override
  public boolean getByName() {
    return byName_;
  }

  public static final int ALLOW_MISSING_COLUMNS_FIELD_NUMBER = 6;
  private boolean allowMissingColumns_ = false;
  /**
   * <pre>
   * (Optional) If to perform the Set operation and allow missing columns.
   *
   * Only UNION supports this option.
   * </pre>
   *
   * <code>optional bool allow_missing_columns = 6;</code>
   * @return Whether the allowMissingColumns field is set.
   */
  @Override
  public boolean hasAllowMissingColumns() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * (Optional) If to perform the Set operation and allow missing columns.
   *
   * Only UNION supports this option.
   * </pre>
   *
   * <code>optional bool allow_missing_columns = 6;</code>
   * @return The allowMissingColumns.
   */
  @Override
  public boolean getAllowMissingColumns() {
    return allowMissingColumns_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (leftInput_ != null) {
      output.writeMessage(1, getLeftInput());
    }
    if (rightInput_ != null) {
      output.writeMessage(2, getRightInput());
    }
    if (setOpType_ != org.apache.spark.connect.proto.SetOperation.SetOpType.SET_OP_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(3, setOpType_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeBool(4, isAll_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeBool(5, byName_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeBool(6, allowMissingColumns_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (leftInput_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getLeftInput());
    }
    if (rightInput_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getRightInput());
    }
    if (setOpType_ != org.apache.spark.connect.proto.SetOperation.SetOpType.SET_OP_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, setOpType_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, isAll_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, byName_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, allowMissingColumns_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.SetOperation)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.SetOperation other = (org.apache.spark.connect.proto.SetOperation) obj;

    if (hasLeftInput() != other.hasLeftInput()) return false;
    if (hasLeftInput()) {
      if (!getLeftInput()
          .equals(other.getLeftInput())) return false;
    }
    if (hasRightInput() != other.hasRightInput()) return false;
    if (hasRightInput()) {
      if (!getRightInput()
          .equals(other.getRightInput())) return false;
    }
    if (setOpType_ != other.setOpType_) return false;
    if (hasIsAll() != other.hasIsAll()) return false;
    if (hasIsAll()) {
      if (getIsAll()
          != other.getIsAll()) return false;
    }
    if (hasByName() != other.hasByName()) return false;
    if (hasByName()) {
      if (getByName()
          != other.getByName()) return false;
    }
    if (hasAllowMissingColumns() != other.hasAllowMissingColumns()) return false;
    if (hasAllowMissingColumns()) {
      if (getAllowMissingColumns()
          != other.getAllowMissingColumns()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasLeftInput()) {
      hash = (37 * hash) + LEFT_INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getLeftInput().hashCode();
    }
    if (hasRightInput()) {
      hash = (37 * hash) + RIGHT_INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getRightInput().hashCode();
    }
    hash = (37 * hash) + SET_OP_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + setOpType_;
    if (hasIsAll()) {
      hash = (37 * hash) + IS_ALL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsAll());
    }
    if (hasByName()) {
      hash = (37 * hash) + BY_NAME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getByName());
    }
    if (hasAllowMissingColumns()) {
      hash = (37 * hash) + ALLOW_MISSING_COLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getAllowMissingColumns());
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.SetOperation parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.SetOperation parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.SetOperation parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.SetOperation parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.SetOperation parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.SetOperation parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.SetOperation parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.SetOperation parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.SetOperation parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.SetOperation parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.SetOperation parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.SetOperation parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.SetOperation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Relation of type [[SetOperation]]
   * </pre>
   *
   * Protobuf type {@code spark.connect.SetOperation}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.SetOperation)
      org.apache.spark.connect.proto.SetOperationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_SetOperation_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_SetOperation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.SetOperation.class, org.apache.spark.connect.proto.SetOperation.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.SetOperation.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      leftInput_ = null;
      if (leftInputBuilder_ != null) {
        leftInputBuilder_.dispose();
        leftInputBuilder_ = null;
      }
      rightInput_ = null;
      if (rightInputBuilder_ != null) {
        rightInputBuilder_.dispose();
        rightInputBuilder_ = null;
      }
      setOpType_ = 0;
      isAll_ = false;
      byName_ = false;
      allowMissingColumns_ = false;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_SetOperation_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.SetOperation getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.SetOperation.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.SetOperation build() {
      org.apache.spark.connect.proto.SetOperation result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.SetOperation buildPartial() {
      org.apache.spark.connect.proto.SetOperation result = new org.apache.spark.connect.proto.SetOperation(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.spark.connect.proto.SetOperation result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.leftInput_ = leftInputBuilder_ == null
            ? leftInput_
            : leftInputBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.rightInput_ = rightInputBuilder_ == null
            ? rightInput_
            : rightInputBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.setOpType_ = setOpType_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.isAll_ = isAll_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.byName_ = byName_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.allowMissingColumns_ = allowMissingColumns_;
        to_bitField0_ |= 0x00000004;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.SetOperation) {
        return mergeFrom((org.apache.spark.connect.proto.SetOperation)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.SetOperation other) {
      if (other == org.apache.spark.connect.proto.SetOperation.getDefaultInstance()) return this;
      if (other.hasLeftInput()) {
        mergeLeftInput(other.getLeftInput());
      }
      if (other.hasRightInput()) {
        mergeRightInput(other.getRightInput());
      }
      if (other.setOpType_ != 0) {
        setSetOpTypeValue(other.getSetOpTypeValue());
      }
      if (other.hasIsAll()) {
        setIsAll(other.getIsAll());
      }
      if (other.hasByName()) {
        setByName(other.getByName());
      }
      if (other.hasAllowMissingColumns()) {
        setAllowMissingColumns(other.getAllowMissingColumns());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getLeftInputFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getRightInputFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              setOpType_ = input.readEnum();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              isAll_ = input.readBool();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              byName_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              allowMissingColumns_ = input.readBool();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.apache.spark.connect.proto.Relation leftInput_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> leftInputBuilder_;
    /**
     * <pre>
     * (Required) Left input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation left_input = 1;</code>
     * @return Whether the leftInput field is set.
     */
    public boolean hasLeftInput() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Required) Left input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation left_input = 1;</code>
     * @return The leftInput.
     */
    public org.apache.spark.connect.proto.Relation getLeftInput() {
      if (leftInputBuilder_ == null) {
        return leftInput_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : leftInput_;
      } else {
        return leftInputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Left input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation left_input = 1;</code>
     */
    public Builder setLeftInput(org.apache.spark.connect.proto.Relation value) {
      if (leftInputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        leftInput_ = value;
      } else {
        leftInputBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Left input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation left_input = 1;</code>
     */
    public Builder setLeftInput(
        org.apache.spark.connect.proto.Relation.Builder builderForValue) {
      if (leftInputBuilder_ == null) {
        leftInput_ = builderForValue.build();
      } else {
        leftInputBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Left input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation left_input = 1;</code>
     */
    public Builder mergeLeftInput(org.apache.spark.connect.proto.Relation value) {
      if (leftInputBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          leftInput_ != null &&
          leftInput_ != org.apache.spark.connect.proto.Relation.getDefaultInstance()) {
          getLeftInputBuilder().mergeFrom(value);
        } else {
          leftInput_ = value;
        }
      } else {
        leftInputBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Left input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation left_input = 1;</code>
     */
    public Builder clearLeftInput() {
      bitField0_ = (bitField0_ & ~0x00000001);
      leftInput_ = null;
      if (leftInputBuilder_ != null) {
        leftInputBuilder_.dispose();
        leftInputBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Left input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation left_input = 1;</code>
     */
    public org.apache.spark.connect.proto.Relation.Builder getLeftInputBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getLeftInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Left input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation left_input = 1;</code>
     */
    public org.apache.spark.connect.proto.RelationOrBuilder getLeftInputOrBuilder() {
      if (leftInputBuilder_ != null) {
        return leftInputBuilder_.getMessageOrBuilder();
      } else {
        return leftInput_ == null ?
            org.apache.spark.connect.proto.Relation.getDefaultInstance() : leftInput_;
      }
    }
    /**
     * <pre>
     * (Required) Left input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation left_input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> 
        getLeftInputFieldBuilder() {
      if (leftInputBuilder_ == null) {
        leftInputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder>(
                getLeftInput(),
                getParentForChildren(),
                isClean());
        leftInput_ = null;
      }
      return leftInputBuilder_;
    }

    private org.apache.spark.connect.proto.Relation rightInput_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> rightInputBuilder_;
    /**
     * <pre>
     * (Required) Right input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation right_input = 2;</code>
     * @return Whether the rightInput field is set.
     */
    public boolean hasRightInput() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * (Required) Right input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation right_input = 2;</code>
     * @return The rightInput.
     */
    public org.apache.spark.connect.proto.Relation getRightInput() {
      if (rightInputBuilder_ == null) {
        return rightInput_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : rightInput_;
      } else {
        return rightInputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Right input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation right_input = 2;</code>
     */
    public Builder setRightInput(org.apache.spark.connect.proto.Relation value) {
      if (rightInputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rightInput_ = value;
      } else {
        rightInputBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Right input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation right_input = 2;</code>
     */
    public Builder setRightInput(
        org.apache.spark.connect.proto.Relation.Builder builderForValue) {
      if (rightInputBuilder_ == null) {
        rightInput_ = builderForValue.build();
      } else {
        rightInputBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Right input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation right_input = 2;</code>
     */
    public Builder mergeRightInput(org.apache.spark.connect.proto.Relation value) {
      if (rightInputBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          rightInput_ != null &&
          rightInput_ != org.apache.spark.connect.proto.Relation.getDefaultInstance()) {
          getRightInputBuilder().mergeFrom(value);
        } else {
          rightInput_ = value;
        }
      } else {
        rightInputBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Right input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation right_input = 2;</code>
     */
    public Builder clearRightInput() {
      bitField0_ = (bitField0_ & ~0x00000002);
      rightInput_ = null;
      if (rightInputBuilder_ != null) {
        rightInputBuilder_.dispose();
        rightInputBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Right input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation right_input = 2;</code>
     */
    public org.apache.spark.connect.proto.Relation.Builder getRightInputBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getRightInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Right input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation right_input = 2;</code>
     */
    public org.apache.spark.connect.proto.RelationOrBuilder getRightInputOrBuilder() {
      if (rightInputBuilder_ != null) {
        return rightInputBuilder_.getMessageOrBuilder();
      } else {
        return rightInput_ == null ?
            org.apache.spark.connect.proto.Relation.getDefaultInstance() : rightInput_;
      }
    }
    /**
     * <pre>
     * (Required) Right input relation for a Set operation.
     * </pre>
     *
     * <code>.spark.connect.Relation right_input = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> 
        getRightInputFieldBuilder() {
      if (rightInputBuilder_ == null) {
        rightInputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder>(
                getRightInput(),
                getParentForChildren(),
                isClean());
        rightInput_ = null;
      }
      return rightInputBuilder_;
    }

    private int setOpType_ = 0;
    /**
     * <pre>
     * (Required) The Set operation type.
     * </pre>
     *
     * <code>.spark.connect.SetOperation.SetOpType set_op_type = 3;</code>
     * @return The enum numeric value on the wire for setOpType.
     */
    @Override public int getSetOpTypeValue() {
      return setOpType_;
    }
    /**
     * <pre>
     * (Required) The Set operation type.
     * </pre>
     *
     * <code>.spark.connect.SetOperation.SetOpType set_op_type = 3;</code>
     * @param value The enum numeric value on the wire for setOpType to set.
     * @return This builder for chaining.
     */
    public Builder setSetOpTypeValue(int value) {
      setOpType_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The Set operation type.
     * </pre>
     *
     * <code>.spark.connect.SetOperation.SetOpType set_op_type = 3;</code>
     * @return The setOpType.
     */
    @Override
    public org.apache.spark.connect.proto.SetOperation.SetOpType getSetOpType() {
      org.apache.spark.connect.proto.SetOperation.SetOpType result = org.apache.spark.connect.proto.SetOperation.SetOpType.forNumber(setOpType_);
      return result == null ? org.apache.spark.connect.proto.SetOperation.SetOpType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * (Required) The Set operation type.
     * </pre>
     *
     * <code>.spark.connect.SetOperation.SetOpType set_op_type = 3;</code>
     * @param value The setOpType to set.
     * @return This builder for chaining.
     */
    public Builder setSetOpType(org.apache.spark.connect.proto.SetOperation.SetOpType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      setOpType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The Set operation type.
     * </pre>
     *
     * <code>.spark.connect.SetOperation.SetOpType set_op_type = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSetOpType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      setOpType_ = 0;
      onChanged();
      return this;
    }

    private boolean isAll_ ;
    /**
     * <pre>
     * (Optional) If to remove duplicate rows.
     *
     * True to preserve all results.
     * False to remove duplicate rows.
     * </pre>
     *
     * <code>optional bool is_all = 4;</code>
     * @return Whether the isAll field is set.
     */
    @Override
    public boolean hasIsAll() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * (Optional) If to remove duplicate rows.
     *
     * True to preserve all results.
     * False to remove duplicate rows.
     * </pre>
     *
     * <code>optional bool is_all = 4;</code>
     * @return The isAll.
     */
    @Override
    public boolean getIsAll() {
      return isAll_;
    }
    /**
     * <pre>
     * (Optional) If to remove duplicate rows.
     *
     * True to preserve all results.
     * False to remove duplicate rows.
     * </pre>
     *
     * <code>optional bool is_all = 4;</code>
     * @param value The isAll to set.
     * @return This builder for chaining.
     */
    public Builder setIsAll(boolean value) {

      isAll_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) If to remove duplicate rows.
     *
     * True to preserve all results.
     * False to remove duplicate rows.
     * </pre>
     *
     * <code>optional bool is_all = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsAll() {
      bitField0_ = (bitField0_ & ~0x00000008);
      isAll_ = false;
      onChanged();
      return this;
    }

    private boolean byName_ ;
    /**
     * <pre>
     * (Optional) If to perform the Set operation based on name resolution.
     *
     * Only UNION supports this option.
     * </pre>
     *
     * <code>optional bool by_name = 5;</code>
     * @return Whether the byName field is set.
     */
    @Override
    public boolean hasByName() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * (Optional) If to perform the Set operation based on name resolution.
     *
     * Only UNION supports this option.
     * </pre>
     *
     * <code>optional bool by_name = 5;</code>
     * @return The byName.
     */
    @Override
    public boolean getByName() {
      return byName_;
    }
    /**
     * <pre>
     * (Optional) If to perform the Set operation based on name resolution.
     *
     * Only UNION supports this option.
     * </pre>
     *
     * <code>optional bool by_name = 5;</code>
     * @param value The byName to set.
     * @return This builder for chaining.
     */
    public Builder setByName(boolean value) {

      byName_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) If to perform the Set operation based on name resolution.
     *
     * Only UNION supports this option.
     * </pre>
     *
     * <code>optional bool by_name = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearByName() {
      bitField0_ = (bitField0_ & ~0x00000010);
      byName_ = false;
      onChanged();
      return this;
    }

    private boolean allowMissingColumns_ ;
    /**
     * <pre>
     * (Optional) If to perform the Set operation and allow missing columns.
     *
     * Only UNION supports this option.
     * </pre>
     *
     * <code>optional bool allow_missing_columns = 6;</code>
     * @return Whether the allowMissingColumns field is set.
     */
    @Override
    public boolean hasAllowMissingColumns() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * (Optional) If to perform the Set operation and allow missing columns.
     *
     * Only UNION supports this option.
     * </pre>
     *
     * <code>optional bool allow_missing_columns = 6;</code>
     * @return The allowMissingColumns.
     */
    @Override
    public boolean getAllowMissingColumns() {
      return allowMissingColumns_;
    }
    /**
     * <pre>
     * (Optional) If to perform the Set operation and allow missing columns.
     *
     * Only UNION supports this option.
     * </pre>
     *
     * <code>optional bool allow_missing_columns = 6;</code>
     * @param value The allowMissingColumns to set.
     * @return This builder for chaining.
     */
    public Builder setAllowMissingColumns(boolean value) {

      allowMissingColumns_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) If to perform the Set operation and allow missing columns.
     *
     * Only UNION supports this option.
     * </pre>
     *
     * <code>optional bool allow_missing_columns = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearAllowMissingColumns() {
      bitField0_ = (bitField0_ & ~0x00000020);
      allowMissingColumns_ = false;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.SetOperation)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.SetOperation)
  private static final org.apache.spark.connect.proto.SetOperation DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.SetOperation();
  }

  public static org.apache.spark.connect.proto.SetOperation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SetOperation>
      PARSER = new com.google.protobuf.AbstractParser<SetOperation>() {
    @Override
    public SetOperation parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SetOperation> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<SetOperation> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.SetOperation getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

