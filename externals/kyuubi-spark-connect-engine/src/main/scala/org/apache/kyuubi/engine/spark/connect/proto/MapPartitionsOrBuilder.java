// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface MapPartitionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.MapPartitions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Required) Input relation for a mapPartitions-equivalent API: mapInPandas, mapInArrow.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   * <pre>
   * (Required) Input relation for a mapPartitions-equivalent API: mapInPandas, mapInArrow.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  org.apache.spark.connect.proto.Relation getInput();
  /**
   * <pre>
   * (Required) Input relation for a mapPartitions-equivalent API: mapInPandas, mapInArrow.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder();

  /**
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 2;</code>
   * @return Whether the func field is set.
   */
  boolean hasFunc();
  /**
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 2;</code>
   * @return The func.
   */
  org.apache.spark.connect.proto.CommonInlineUserDefinedFunction getFunc();
  /**
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 2;</code>
   */
  org.apache.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder getFuncOrBuilder();

  /**
   * <pre>
   * (Optional) Whether to use barrier mode execution or not.
   * </pre>
   *
   * <code>optional bool is_barrier = 3;</code>
   * @return Whether the isBarrier field is set.
   */
  boolean hasIsBarrier();
  /**
   * <pre>
   * (Optional) Whether to use barrier mode execution or not.
   * </pre>
   *
   * <code>optional bool is_barrier = 3;</code>
   * @return The isBarrier.
   */
  boolean getIsBarrier();
}
