// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/commands.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * As writes are not directly handled during analysis and planning, they are modeled as commands.
 * </pre>
 *
 * Protobuf type {@code spark.connect.WriteOperation}
 */
public final class WriteOperation extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.WriteOperation)
    WriteOperationOrBuilder {
private static final long serialVersionUID = 0L;
  // Use WriteOperation.newBuilder() to construct.
  private WriteOperation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WriteOperation() {
    source_ = "";
    mode_ = 0;
    sortColumnNames_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    partitioningColumns_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new WriteOperation();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 9:
        return internalGetOptions();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.WriteOperation.class, org.apache.spark.connect.proto.WriteOperation.Builder.class);
  }

  /**
   * Protobuf enum {@code spark.connect.WriteOperation.SaveMode}
   */
  public enum SaveMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SAVE_MODE_UNSPECIFIED = 0;</code>
     */
    SAVE_MODE_UNSPECIFIED(0),
    /**
     * <code>SAVE_MODE_APPEND = 1;</code>
     */
    SAVE_MODE_APPEND(1),
    /**
     * <code>SAVE_MODE_OVERWRITE = 2;</code>
     */
    SAVE_MODE_OVERWRITE(2),
    /**
     * <code>SAVE_MODE_ERROR_IF_EXISTS = 3;</code>
     */
    SAVE_MODE_ERROR_IF_EXISTS(3),
    /**
     * <code>SAVE_MODE_IGNORE = 4;</code>
     */
    SAVE_MODE_IGNORE(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SAVE_MODE_UNSPECIFIED = 0;</code>
     */
    public static final int SAVE_MODE_UNSPECIFIED_VALUE = 0;
    /**
     * <code>SAVE_MODE_APPEND = 1;</code>
     */
    public static final int SAVE_MODE_APPEND_VALUE = 1;
    /**
     * <code>SAVE_MODE_OVERWRITE = 2;</code>
     */
    public static final int SAVE_MODE_OVERWRITE_VALUE = 2;
    /**
     * <code>SAVE_MODE_ERROR_IF_EXISTS = 3;</code>
     */
    public static final int SAVE_MODE_ERROR_IF_EXISTS_VALUE = 3;
    /**
     * <code>SAVE_MODE_IGNORE = 4;</code>
     */
    public static final int SAVE_MODE_IGNORE_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static SaveMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SaveMode forNumber(int value) {
      switch (value) {
        case 0: return SAVE_MODE_UNSPECIFIED;
        case 1: return SAVE_MODE_APPEND;
        case 2: return SAVE_MODE_OVERWRITE;
        case 3: return SAVE_MODE_ERROR_IF_EXISTS;
        case 4: return SAVE_MODE_IGNORE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SaveMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SaveMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SaveMode>() {
            public SaveMode findValueByNumber(int number) {
              return SaveMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.WriteOperation.getDescriptor().getEnumTypes().get(0);
    }

    private static final SaveMode[] VALUES = values();

    public static SaveMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SaveMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:spark.connect.WriteOperation.SaveMode)
  }

  public interface SaveTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.WriteOperation.SaveTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The table name.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     * @return The tableName.
     */
    String getTableName();
    /**
     * <pre>
     * (Required) The table name.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     * @return The bytes for tableName.
     */
    com.google.protobuf.ByteString
        getTableNameBytes();

    /**
     * <pre>
     * (Required) The method to be called to write to the table.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.SaveTable.TableSaveMethod save_method = 2;</code>
     * @return The enum numeric value on the wire for saveMethod.
     */
    int getSaveMethodValue();
    /**
     * <pre>
     * (Required) The method to be called to write to the table.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.SaveTable.TableSaveMethod save_method = 2;</code>
     * @return The saveMethod.
     */
    org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod getSaveMethod();
  }
  /**
   * Protobuf type {@code spark.connect.WriteOperation.SaveTable}
   */
  public static final class SaveTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.WriteOperation.SaveTable)
      SaveTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SaveTable.newBuilder() to construct.
    private SaveTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SaveTable() {
      tableName_ = "";
      saveMethod_ = 0;
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new SaveTable();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_SaveTable_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_SaveTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.WriteOperation.SaveTable.class, org.apache.spark.connect.proto.WriteOperation.SaveTable.Builder.class);
    }

    /**
     * Protobuf enum {@code spark.connect.WriteOperation.SaveTable.TableSaveMethod}
     */
    public enum TableSaveMethod
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TABLE_SAVE_METHOD_UNSPECIFIED = 0;</code>
       */
      TABLE_SAVE_METHOD_UNSPECIFIED(0),
      /**
       * <code>TABLE_SAVE_METHOD_SAVE_AS_TABLE = 1;</code>
       */
      TABLE_SAVE_METHOD_SAVE_AS_TABLE(1),
      /**
       * <code>TABLE_SAVE_METHOD_INSERT_INTO = 2;</code>
       */
      TABLE_SAVE_METHOD_INSERT_INTO(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>TABLE_SAVE_METHOD_UNSPECIFIED = 0;</code>
       */
      public static final int TABLE_SAVE_METHOD_UNSPECIFIED_VALUE = 0;
      /**
       * <code>TABLE_SAVE_METHOD_SAVE_AS_TABLE = 1;</code>
       */
      public static final int TABLE_SAVE_METHOD_SAVE_AS_TABLE_VALUE = 1;
      /**
       * <code>TABLE_SAVE_METHOD_INSERT_INTO = 2;</code>
       */
      public static final int TABLE_SAVE_METHOD_INSERT_INTO_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static TableSaveMethod valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TableSaveMethod forNumber(int value) {
        switch (value) {
          case 0: return TABLE_SAVE_METHOD_UNSPECIFIED;
          case 1: return TABLE_SAVE_METHOD_SAVE_AS_TABLE;
          case 2: return TABLE_SAVE_METHOD_INSERT_INTO;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TableSaveMethod>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TableSaveMethod> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TableSaveMethod>() {
              public TableSaveMethod findValueByNumber(int number) {
                return TableSaveMethod.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.WriteOperation.SaveTable.getDescriptor().getEnumTypes().get(0);
      }

      private static final TableSaveMethod[] VALUES = values();

      public static TableSaveMethod valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TableSaveMethod(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:spark.connect.WriteOperation.SaveTable.TableSaveMethod)
    }

    public static final int TABLE_NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile Object tableName_ = "";
    /**
     * <pre>
     * (Required) The table name.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     * @return The tableName.
     */
    @Override
    public String getTableName() {
      Object ref = tableName_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        tableName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) The table name.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     * @return The bytes for tableName.
     */
    @Override
    public com.google.protobuf.ByteString
        getTableNameBytes() {
      Object ref = tableName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        tableName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SAVE_METHOD_FIELD_NUMBER = 2;
    private int saveMethod_ = 0;
    /**
     * <pre>
     * (Required) The method to be called to write to the table.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.SaveTable.TableSaveMethod save_method = 2;</code>
     * @return The enum numeric value on the wire for saveMethod.
     */
    @Override public int getSaveMethodValue() {
      return saveMethod_;
    }
    /**
     * <pre>
     * (Required) The method to be called to write to the table.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.SaveTable.TableSaveMethod save_method = 2;</code>
     * @return The saveMethod.
     */
    @Override public org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod getSaveMethod() {
      org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod result = org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod.forNumber(saveMethod_);
      return result == null ? org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tableName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tableName_);
      }
      if (saveMethod_ != org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod.TABLE_SAVE_METHOD_UNSPECIFIED.getNumber()) {
        output.writeEnum(2, saveMethod_);
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tableName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tableName_);
      }
      if (saveMethod_ != org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod.TABLE_SAVE_METHOD_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, saveMethod_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.WriteOperation.SaveTable)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.WriteOperation.SaveTable other = (org.apache.spark.connect.proto.WriteOperation.SaveTable) obj;

      if (!getTableName()
          .equals(other.getTableName())) return false;
      if (saveMethod_ != other.saveMethod_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TABLE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getTableName().hashCode();
      hash = (37 * hash) + SAVE_METHOD_FIELD_NUMBER;
      hash = (53 * hash) + saveMethod_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.WriteOperation.SaveTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.WriteOperation.SaveTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.WriteOperation.SaveTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.WriteOperation.SaveTable)
        org.apache.spark.connect.proto.WriteOperation.SaveTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_SaveTable_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_SaveTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.WriteOperation.SaveTable.class, org.apache.spark.connect.proto.WriteOperation.SaveTable.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.WriteOperation.SaveTable.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tableName_ = "";
        saveMethod_ = 0;
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_SaveTable_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.WriteOperation.SaveTable getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.WriteOperation.SaveTable.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.WriteOperation.SaveTable build() {
        org.apache.spark.connect.proto.WriteOperation.SaveTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.WriteOperation.SaveTable buildPartial() {
        org.apache.spark.connect.proto.WriteOperation.SaveTable result = new org.apache.spark.connect.proto.WriteOperation.SaveTable(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.WriteOperation.SaveTable result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tableName_ = tableName_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.saveMethod_ = saveMethod_;
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.WriteOperation.SaveTable) {
          return mergeFrom((org.apache.spark.connect.proto.WriteOperation.SaveTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.WriteOperation.SaveTable other) {
        if (other == org.apache.spark.connect.proto.WriteOperation.SaveTable.getDefaultInstance()) return this;
        if (!other.getTableName().isEmpty()) {
          tableName_ = other.tableName_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.saveMethod_ != 0) {
          setSaveMethodValue(other.getSaveMethodValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                tableName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                saveMethod_ = input.readEnum();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private Object tableName_ = "";
      /**
       * <pre>
       * (Required) The table name.
       * </pre>
       *
       * <code>string table_name = 1;</code>
       * @return The tableName.
       */
      public String getTableName() {
        Object ref = tableName_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          tableName_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * (Required) The table name.
       * </pre>
       *
       * <code>string table_name = 1;</code>
       * @return The bytes for tableName.
       */
      public com.google.protobuf.ByteString
          getTableNameBytes() {
        Object ref = tableName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          tableName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) The table name.
       * </pre>
       *
       * <code>string table_name = 1;</code>
       * @param value The tableName to set.
       * @return This builder for chaining.
       */
      public Builder setTableName(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        tableName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The table name.
       * </pre>
       *
       * <code>string table_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTableName() {
        tableName_ = getDefaultInstance().getTableName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The table name.
       * </pre>
       *
       * <code>string table_name = 1;</code>
       * @param value The bytes for tableName to set.
       * @return This builder for chaining.
       */
      public Builder setTableNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        tableName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private int saveMethod_ = 0;
      /**
       * <pre>
       * (Required) The method to be called to write to the table.
       * </pre>
       *
       * <code>.spark.connect.WriteOperation.SaveTable.TableSaveMethod save_method = 2;</code>
       * @return The enum numeric value on the wire for saveMethod.
       */
      @Override public int getSaveMethodValue() {
        return saveMethod_;
      }
      /**
       * <pre>
       * (Required) The method to be called to write to the table.
       * </pre>
       *
       * <code>.spark.connect.WriteOperation.SaveTable.TableSaveMethod save_method = 2;</code>
       * @param value The enum numeric value on the wire for saveMethod to set.
       * @return This builder for chaining.
       */
      public Builder setSaveMethodValue(int value) {
        saveMethod_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The method to be called to write to the table.
       * </pre>
       *
       * <code>.spark.connect.WriteOperation.SaveTable.TableSaveMethod save_method = 2;</code>
       * @return The saveMethod.
       */
      @Override
      public org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod getSaveMethod() {
        org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod result = org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod.forNumber(saveMethod_);
        return result == null ? org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * (Required) The method to be called to write to the table.
       * </pre>
       *
       * <code>.spark.connect.WriteOperation.SaveTable.TableSaveMethod save_method = 2;</code>
       * @param value The saveMethod to set.
       * @return This builder for chaining.
       */
      public Builder setSaveMethod(org.apache.spark.connect.proto.WriteOperation.SaveTable.TableSaveMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        saveMethod_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The method to be called to write to the table.
       * </pre>
       *
       * <code>.spark.connect.WriteOperation.SaveTable.TableSaveMethod save_method = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSaveMethod() {
        bitField0_ = (bitField0_ & ~0x00000002);
        saveMethod_ = 0;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.WriteOperation.SaveTable)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.WriteOperation.SaveTable)
    private static final org.apache.spark.connect.proto.WriteOperation.SaveTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.WriteOperation.SaveTable();
    }

    public static org.apache.spark.connect.proto.WriteOperation.SaveTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SaveTable>
        PARSER = new com.google.protobuf.AbstractParser<SaveTable>() {
      @Override
      public SaveTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SaveTable> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<SaveTable> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.WriteOperation.SaveTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BucketByOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.WriteOperation.BucketBy)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated string bucket_column_names = 1;</code>
     * @return A list containing the bucketColumnNames.
     */
    java.util.List<String>
        getBucketColumnNamesList();
    /**
     * <code>repeated string bucket_column_names = 1;</code>
     * @return The count of bucketColumnNames.
     */
    int getBucketColumnNamesCount();
    /**
     * <code>repeated string bucket_column_names = 1;</code>
     * @param index The index of the element to return.
     * @return The bucketColumnNames at the given index.
     */
    String getBucketColumnNames(int index);
    /**
     * <code>repeated string bucket_column_names = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the bucketColumnNames at the given index.
     */
    com.google.protobuf.ByteString
        getBucketColumnNamesBytes(int index);

    /**
     * <code>int32 num_buckets = 2;</code>
     * @return The numBuckets.
     */
    int getNumBuckets();
  }
  /**
   * Protobuf type {@code spark.connect.WriteOperation.BucketBy}
   */
  public static final class BucketBy extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.WriteOperation.BucketBy)
      BucketByOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BucketBy.newBuilder() to construct.
    private BucketBy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BucketBy() {
      bucketColumnNames_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new BucketBy();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_BucketBy_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_BucketBy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.WriteOperation.BucketBy.class, org.apache.spark.connect.proto.WriteOperation.BucketBy.Builder.class);
    }

    public static final int BUCKET_COLUMN_NAMES_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList bucketColumnNames_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string bucket_column_names = 1;</code>
     * @return A list containing the bucketColumnNames.
     */
    public com.google.protobuf.ProtocolStringList
        getBucketColumnNamesList() {
      return bucketColumnNames_;
    }
    /**
     * <code>repeated string bucket_column_names = 1;</code>
     * @return The count of bucketColumnNames.
     */
    public int getBucketColumnNamesCount() {
      return bucketColumnNames_.size();
    }
    /**
     * <code>repeated string bucket_column_names = 1;</code>
     * @param index The index of the element to return.
     * @return The bucketColumnNames at the given index.
     */
    public String getBucketColumnNames(int index) {
      return bucketColumnNames_.get(index);
    }
    /**
     * <code>repeated string bucket_column_names = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the bucketColumnNames at the given index.
     */
    public com.google.protobuf.ByteString
        getBucketColumnNamesBytes(int index) {
      return bucketColumnNames_.getByteString(index);
    }

    public static final int NUM_BUCKETS_FIELD_NUMBER = 2;
    private int numBuckets_ = 0;
    /**
     * <code>int32 num_buckets = 2;</code>
     * @return The numBuckets.
     */
    @Override
    public int getNumBuckets() {
      return numBuckets_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < bucketColumnNames_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, bucketColumnNames_.getRaw(i));
      }
      if (numBuckets_ != 0) {
        output.writeInt32(2, numBuckets_);
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < bucketColumnNames_.size(); i++) {
          dataSize += computeStringSizeNoTag(bucketColumnNames_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getBucketColumnNamesList().size();
      }
      if (numBuckets_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, numBuckets_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.WriteOperation.BucketBy)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.WriteOperation.BucketBy other = (org.apache.spark.connect.proto.WriteOperation.BucketBy) obj;

      if (!getBucketColumnNamesList()
          .equals(other.getBucketColumnNamesList())) return false;
      if (getNumBuckets()
          != other.getNumBuckets()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getBucketColumnNamesCount() > 0) {
        hash = (37 * hash) + BUCKET_COLUMN_NAMES_FIELD_NUMBER;
        hash = (53 * hash) + getBucketColumnNamesList().hashCode();
      }
      hash = (37 * hash) + NUM_BUCKETS_FIELD_NUMBER;
      hash = (53 * hash) + getNumBuckets();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.WriteOperation.BucketBy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.WriteOperation.BucketBy prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.WriteOperation.BucketBy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.WriteOperation.BucketBy)
        org.apache.spark.connect.proto.WriteOperation.BucketByOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_BucketBy_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_BucketBy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.WriteOperation.BucketBy.class, org.apache.spark.connect.proto.WriteOperation.BucketBy.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.WriteOperation.BucketBy.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        bucketColumnNames_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        numBuckets_ = 0;
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_BucketBy_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.WriteOperation.BucketBy getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.WriteOperation.BucketBy.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.WriteOperation.BucketBy build() {
        org.apache.spark.connect.proto.WriteOperation.BucketBy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.WriteOperation.BucketBy buildPartial() {
        org.apache.spark.connect.proto.WriteOperation.BucketBy result = new org.apache.spark.connect.proto.WriteOperation.BucketBy(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.WriteOperation.BucketBy result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          bucketColumnNames_.makeImmutable();
          result.bucketColumnNames_ = bucketColumnNames_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.numBuckets_ = numBuckets_;
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.WriteOperation.BucketBy) {
          return mergeFrom((org.apache.spark.connect.proto.WriteOperation.BucketBy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.WriteOperation.BucketBy other) {
        if (other == org.apache.spark.connect.proto.WriteOperation.BucketBy.getDefaultInstance()) return this;
        if (!other.bucketColumnNames_.isEmpty()) {
          if (bucketColumnNames_.isEmpty()) {
            bucketColumnNames_ = other.bucketColumnNames_;
            bitField0_ |= 0x00000001;
          } else {
            ensureBucketColumnNamesIsMutable();
            bucketColumnNames_.addAll(other.bucketColumnNames_);
          }
          onChanged();
        }
        if (other.getNumBuckets() != 0) {
          setNumBuckets(other.getNumBuckets());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                String s = input.readStringRequireUtf8();
                ensureBucketColumnNamesIsMutable();
                bucketColumnNames_.add(s);
                break;
              } // case 10
              case 16: {
                numBuckets_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringArrayList bucketColumnNames_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureBucketColumnNamesIsMutable() {
        if (!bucketColumnNames_.isModifiable()) {
          bucketColumnNames_ = new com.google.protobuf.LazyStringArrayList(bucketColumnNames_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <code>repeated string bucket_column_names = 1;</code>
       * @return A list containing the bucketColumnNames.
       */
      public com.google.protobuf.ProtocolStringList
          getBucketColumnNamesList() {
        bucketColumnNames_.makeImmutable();
        return bucketColumnNames_;
      }
      /**
       * <code>repeated string bucket_column_names = 1;</code>
       * @return The count of bucketColumnNames.
       */
      public int getBucketColumnNamesCount() {
        return bucketColumnNames_.size();
      }
      /**
       * <code>repeated string bucket_column_names = 1;</code>
       * @param index The index of the element to return.
       * @return The bucketColumnNames at the given index.
       */
      public String getBucketColumnNames(int index) {
        return bucketColumnNames_.get(index);
      }
      /**
       * <code>repeated string bucket_column_names = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the bucketColumnNames at the given index.
       */
      public com.google.protobuf.ByteString
          getBucketColumnNamesBytes(int index) {
        return bucketColumnNames_.getByteString(index);
      }
      /**
       * <code>repeated string bucket_column_names = 1;</code>
       * @param index The index to set the value at.
       * @param value The bucketColumnNames to set.
       * @return This builder for chaining.
       */
      public Builder setBucketColumnNames(
          int index, String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureBucketColumnNamesIsMutable();
        bucketColumnNames_.set(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bucket_column_names = 1;</code>
       * @param value The bucketColumnNames to add.
       * @return This builder for chaining.
       */
      public Builder addBucketColumnNames(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureBucketColumnNamesIsMutable();
        bucketColumnNames_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bucket_column_names = 1;</code>
       * @param values The bucketColumnNames to add.
       * @return This builder for chaining.
       */
      public Builder addAllBucketColumnNames(
          Iterable<String> values) {
        ensureBucketColumnNamesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bucketColumnNames_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bucket_column_names = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearBucketColumnNames() {
        bucketColumnNames_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bucket_column_names = 1;</code>
       * @param value The bytes of the bucketColumnNames to add.
       * @return This builder for chaining.
       */
      public Builder addBucketColumnNamesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureBucketColumnNamesIsMutable();
        bucketColumnNames_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private int numBuckets_ ;
      /**
       * <code>int32 num_buckets = 2;</code>
       * @return The numBuckets.
       */
      @Override
      public int getNumBuckets() {
        return numBuckets_;
      }
      /**
       * <code>int32 num_buckets = 2;</code>
       * @param value The numBuckets to set.
       * @return This builder for chaining.
       */
      public Builder setNumBuckets(int value) {

        numBuckets_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 num_buckets = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumBuckets() {
        bitField0_ = (bitField0_ & ~0x00000002);
        numBuckets_ = 0;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.WriteOperation.BucketBy)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.WriteOperation.BucketBy)
    private static final org.apache.spark.connect.proto.WriteOperation.BucketBy DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.WriteOperation.BucketBy();
    }

    public static org.apache.spark.connect.proto.WriteOperation.BucketBy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BucketBy>
        PARSER = new com.google.protobuf.AbstractParser<BucketBy>() {
      @Override
      public BucketBy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BucketBy> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<BucketBy> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.WriteOperation.BucketBy getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  private int saveTypeCase_ = 0;
  @SuppressWarnings("serial")
  private Object saveType_;
  public enum SaveTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          InternalOneOfEnum {
    PATH(3),
    TABLE(4),
    SAVETYPE_NOT_SET(0);
    private final int value;
    private SaveTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static SaveTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static SaveTypeCase forNumber(int value) {
      switch (value) {
        case 3: return PATH;
        case 4: return TABLE;
        case 0: return SAVETYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public SaveTypeCase
  getSaveTypeCase() {
    return SaveTypeCase.forNumber(
        saveTypeCase_);
  }

  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.spark.connect.proto.Relation input_;
  /**
   * <pre>
   * (Required) The output of the `input` relation will be persisted according to the options.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  @Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   * <pre>
   * (Required) The output of the `input` relation will be persisted according to the options.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  @Override
  public org.apache.spark.connect.proto.Relation getInput() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }
  /**
   * <pre>
   * (Required) The output of the `input` relation will be persisted according to the options.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }

  public static final int SOURCE_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile Object source_ = "";
  /**
   * <pre>
   * (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
   * </pre>
   *
   * <code>optional string source = 2;</code>
   * @return Whether the source field is set.
   */
  @Override
  public boolean hasSource() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
   * </pre>
   *
   * <code>optional string source = 2;</code>
   * @return The source.
   */
  @Override
  public String getSource() {
    Object ref = source_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      source_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
   * </pre>
   *
   * <code>optional string source = 2;</code>
   * @return The bytes for source.
   */
  @Override
  public com.google.protobuf.ByteString
      getSourceBytes() {
    Object ref = source_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      source_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PATH_FIELD_NUMBER = 3;
  /**
   * <code>string path = 3;</code>
   * @return Whether the path field is set.
   */
  public boolean hasPath() {
    return saveTypeCase_ == 3;
  }
  /**
   * <code>string path = 3;</code>
   * @return The path.
   */
  public String getPath() {
    Object ref = "";
    if (saveTypeCase_ == 3) {
      ref = saveType_;
    }
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      if (saveTypeCase_ == 3) {
        saveType_ = s;
      }
      return s;
    }
  }
  /**
   * <code>string path = 3;</code>
   * @return The bytes for path.
   */
  public com.google.protobuf.ByteString
      getPathBytes() {
    Object ref = "";
    if (saveTypeCase_ == 3) {
      ref = saveType_;
    }
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      if (saveTypeCase_ == 3) {
        saveType_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TABLE_FIELD_NUMBER = 4;
  /**
   * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
   * @return Whether the table field is set.
   */
  @Override
  public boolean hasTable() {
    return saveTypeCase_ == 4;
  }
  /**
   * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
   * @return The table.
   */
  @Override
  public org.apache.spark.connect.proto.WriteOperation.SaveTable getTable() {
    if (saveTypeCase_ == 4) {
       return (org.apache.spark.connect.proto.WriteOperation.SaveTable) saveType_;
    }
    return org.apache.spark.connect.proto.WriteOperation.SaveTable.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
   */
  @Override
  public org.apache.spark.connect.proto.WriteOperation.SaveTableOrBuilder getTableOrBuilder() {
    if (saveTypeCase_ == 4) {
       return (org.apache.spark.connect.proto.WriteOperation.SaveTable) saveType_;
    }
    return org.apache.spark.connect.proto.WriteOperation.SaveTable.getDefaultInstance();
  }

  public static final int MODE_FIELD_NUMBER = 5;
  private int mode_ = 0;
  /**
   * <pre>
   * (Required) the save mode.
   * </pre>
   *
   * <code>.spark.connect.WriteOperation.SaveMode mode = 5;</code>
   * @return The enum numeric value on the wire for mode.
   */
  @Override public int getModeValue() {
    return mode_;
  }
  /**
   * <pre>
   * (Required) the save mode.
   * </pre>
   *
   * <code>.spark.connect.WriteOperation.SaveMode mode = 5;</code>
   * @return The mode.
   */
  @Override public org.apache.spark.connect.proto.WriteOperation.SaveMode getMode() {
    org.apache.spark.connect.proto.WriteOperation.SaveMode result = org.apache.spark.connect.proto.WriteOperation.SaveMode.forNumber(mode_);
    return result == null ? org.apache.spark.connect.proto.WriteOperation.SaveMode.UNRECOGNIZED : result;
  }

  public static final int SORT_COLUMN_NAMES_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList sortColumnNames_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * (Optional) List of columns to sort the output by.
   * </pre>
   *
   * <code>repeated string sort_column_names = 6;</code>
   * @return A list containing the sortColumnNames.
   */
  public com.google.protobuf.ProtocolStringList
      getSortColumnNamesList() {
    return sortColumnNames_;
  }
  /**
   * <pre>
   * (Optional) List of columns to sort the output by.
   * </pre>
   *
   * <code>repeated string sort_column_names = 6;</code>
   * @return The count of sortColumnNames.
   */
  public int getSortColumnNamesCount() {
    return sortColumnNames_.size();
  }
  /**
   * <pre>
   * (Optional) List of columns to sort the output by.
   * </pre>
   *
   * <code>repeated string sort_column_names = 6;</code>
   * @param index The index of the element to return.
   * @return The sortColumnNames at the given index.
   */
  public String getSortColumnNames(int index) {
    return sortColumnNames_.get(index);
  }
  /**
   * <pre>
   * (Optional) List of columns to sort the output by.
   * </pre>
   *
   * <code>repeated string sort_column_names = 6;</code>
   * @param index The index of the value to return.
   * @return The bytes of the sortColumnNames at the given index.
   */
  public com.google.protobuf.ByteString
      getSortColumnNamesBytes(int index) {
    return sortColumnNames_.getByteString(index);
  }

  public static final int PARTITIONING_COLUMNS_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList partitioningColumns_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * (Optional) List of columns for partitioning.
   * </pre>
   *
   * <code>repeated string partitioning_columns = 7;</code>
   * @return A list containing the partitioningColumns.
   */
  public com.google.protobuf.ProtocolStringList
      getPartitioningColumnsList() {
    return partitioningColumns_;
  }
  /**
   * <pre>
   * (Optional) List of columns for partitioning.
   * </pre>
   *
   * <code>repeated string partitioning_columns = 7;</code>
   * @return The count of partitioningColumns.
   */
  public int getPartitioningColumnsCount() {
    return partitioningColumns_.size();
  }
  /**
   * <pre>
   * (Optional) List of columns for partitioning.
   * </pre>
   *
   * <code>repeated string partitioning_columns = 7;</code>
   * @param index The index of the element to return.
   * @return The partitioningColumns at the given index.
   */
  public String getPartitioningColumns(int index) {
    return partitioningColumns_.get(index);
  }
  /**
   * <pre>
   * (Optional) List of columns for partitioning.
   * </pre>
   *
   * <code>repeated string partitioning_columns = 7;</code>
   * @param index The index of the value to return.
   * @return The bytes of the partitioningColumns at the given index.
   */
  public com.google.protobuf.ByteString
      getPartitioningColumnsBytes(int index) {
    return partitioningColumns_.getByteString(index);
  }

  public static final int BUCKET_BY_FIELD_NUMBER = 8;
  private org.apache.spark.connect.proto.WriteOperation.BucketBy bucketBy_;
  /**
   * <pre>
   * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
   * to bucket by.
   * </pre>
   *
   * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
   * @return Whether the bucketBy field is set.
   */
  @Override
  public boolean hasBucketBy() {
    return bucketBy_ != null;
  }
  /**
   * <pre>
   * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
   * to bucket by.
   * </pre>
   *
   * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
   * @return The bucketBy.
   */
  @Override
  public org.apache.spark.connect.proto.WriteOperation.BucketBy getBucketBy() {
    return bucketBy_ == null ? org.apache.spark.connect.proto.WriteOperation.BucketBy.getDefaultInstance() : bucketBy_;
  }
  /**
   * <pre>
   * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
   * to bucket by.
   * </pre>
   *
   * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
   */
  @Override
  public org.apache.spark.connect.proto.WriteOperation.BucketByOrBuilder getBucketByOrBuilder() {
    return bucketBy_ == null ? org.apache.spark.connect.proto.WriteOperation.BucketBy.getDefaultInstance() : bucketBy_;
  }

  public static final int OPTIONS_FIELD_NUMBER = 9;
  private static final class OptionsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        String, String> defaultEntry =
            com.google.protobuf.MapEntry
            .<String, String>newDefaultInstance(
                org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_OptionsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      String, String> options_;
  private com.google.protobuf.MapField<String, String>
  internalGetOptions() {
    if (options_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          OptionsDefaultEntryHolder.defaultEntry);
    }
    return options_;
  }
  public int getOptionsCount() {
    return internalGetOptions().getMap().size();
  }
  /**
   * <pre>
   * (Optional) A list of configuration options.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 9;</code>
   */
  @Override
  public boolean containsOptions(
      String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetOptions().getMap().containsKey(key);
  }
  /**
   * Use {@link #getOptionsMap()} instead.
   */
  @Override
  @Deprecated
  public java.util.Map<String, String> getOptions() {
    return getOptionsMap();
  }
  /**
   * <pre>
   * (Optional) A list of configuration options.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 9;</code>
   */
  @Override
  public java.util.Map<String, String> getOptionsMap() {
    return internalGetOptions().getMap();
  }
  /**
   * <pre>
   * (Optional) A list of configuration options.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 9;</code>
   */
  @Override
  public /* nullable */
String getOptionsOrDefault(
      String key,
      /* nullable */
String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<String, String> map =
        internalGetOptions().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * (Optional) A list of configuration options.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 9;</code>
   */
  @Override
  public String getOptionsOrThrow(
      String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<String, String> map =
        internalGetOptions().getMap();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, source_);
    }
    if (saveTypeCase_ == 3) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, saveType_);
    }
    if (saveTypeCase_ == 4) {
      output.writeMessage(4, (org.apache.spark.connect.proto.WriteOperation.SaveTable) saveType_);
    }
    if (mode_ != org.apache.spark.connect.proto.WriteOperation.SaveMode.SAVE_MODE_UNSPECIFIED.getNumber()) {
      output.writeEnum(5, mode_);
    }
    for (int i = 0; i < sortColumnNames_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, sortColumnNames_.getRaw(i));
    }
    for (int i = 0; i < partitioningColumns_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, partitioningColumns_.getRaw(i));
    }
    if (bucketBy_ != null) {
      output.writeMessage(8, getBucketBy());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetOptions(),
        OptionsDefaultEntryHolder.defaultEntry,
        9);
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInput());
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, source_);
    }
    if (saveTypeCase_ == 3) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, saveType_);
    }
    if (saveTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.apache.spark.connect.proto.WriteOperation.SaveTable) saveType_);
    }
    if (mode_ != org.apache.spark.connect.proto.WriteOperation.SaveMode.SAVE_MODE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(5, mode_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < sortColumnNames_.size(); i++) {
        dataSize += computeStringSizeNoTag(sortColumnNames_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getSortColumnNamesList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < partitioningColumns_.size(); i++) {
        dataSize += computeStringSizeNoTag(partitioningColumns_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getPartitioningColumnsList().size();
    }
    if (bucketBy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getBucketBy());
    }
    for (java.util.Map.Entry<String, String> entry
         : internalGetOptions().getMap().entrySet()) {
      com.google.protobuf.MapEntry<String, String>
      options__ = OptionsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, options__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.WriteOperation)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.WriteOperation other = (org.apache.spark.connect.proto.WriteOperation) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput()
          .equals(other.getInput())) return false;
    }
    if (hasSource() != other.hasSource()) return false;
    if (hasSource()) {
      if (!getSource()
          .equals(other.getSource())) return false;
    }
    if (mode_ != other.mode_) return false;
    if (!getSortColumnNamesList()
        .equals(other.getSortColumnNamesList())) return false;
    if (!getPartitioningColumnsList()
        .equals(other.getPartitioningColumnsList())) return false;
    if (hasBucketBy() != other.hasBucketBy()) return false;
    if (hasBucketBy()) {
      if (!getBucketBy()
          .equals(other.getBucketBy())) return false;
    }
    if (!internalGetOptions().equals(
        other.internalGetOptions())) return false;
    if (!getSaveTypeCase().equals(other.getSaveTypeCase())) return false;
    switch (saveTypeCase_) {
      case 3:
        if (!getPath()
            .equals(other.getPath())) return false;
        break;
      case 4:
        if (!getTable()
            .equals(other.getTable())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    if (hasSource()) {
      hash = (37 * hash) + SOURCE_FIELD_NUMBER;
      hash = (53 * hash) + getSource().hashCode();
    }
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + mode_;
    if (getSortColumnNamesCount() > 0) {
      hash = (37 * hash) + SORT_COLUMN_NAMES_FIELD_NUMBER;
      hash = (53 * hash) + getSortColumnNamesList().hashCode();
    }
    if (getPartitioningColumnsCount() > 0) {
      hash = (37 * hash) + PARTITIONING_COLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + getPartitioningColumnsList().hashCode();
    }
    if (hasBucketBy()) {
      hash = (37 * hash) + BUCKET_BY_FIELD_NUMBER;
      hash = (53 * hash) + getBucketBy().hashCode();
    }
    if (!internalGetOptions().getMap().isEmpty()) {
      hash = (37 * hash) + OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetOptions().hashCode();
    }
    switch (saveTypeCase_) {
      case 3:
        hash = (37 * hash) + PATH_FIELD_NUMBER;
        hash = (53 * hash) + getPath().hashCode();
        break;
      case 4:
        hash = (37 * hash) + TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getTable().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.WriteOperation parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.WriteOperation parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteOperation parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.WriteOperation parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteOperation parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.WriteOperation parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteOperation parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.WriteOperation parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.WriteOperation parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.WriteOperation parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteOperation parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.WriteOperation parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.WriteOperation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * As writes are not directly handled during analysis and planning, they are modeled as commands.
   * </pre>
   *
   * Protobuf type {@code spark.connect.WriteOperation}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.WriteOperation)
      org.apache.spark.connect.proto.WriteOperationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 9:
          return internalGetOptions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 9:
          return internalGetMutableOptions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.WriteOperation.class, org.apache.spark.connect.proto.WriteOperation.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.WriteOperation.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      source_ = "";
      if (tableBuilder_ != null) {
        tableBuilder_.clear();
      }
      mode_ = 0;
      sortColumnNames_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      partitioningColumns_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      bucketBy_ = null;
      if (bucketByBuilder_ != null) {
        bucketByBuilder_.dispose();
        bucketByBuilder_ = null;
      }
      internalGetMutableOptions().clear();
      saveTypeCase_ = 0;
      saveType_ = null;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteOperation_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.WriteOperation getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.WriteOperation.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.WriteOperation build() {
      org.apache.spark.connect.proto.WriteOperation result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.WriteOperation buildPartial() {
      org.apache.spark.connect.proto.WriteOperation result = new org.apache.spark.connect.proto.WriteOperation(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.spark.connect.proto.WriteOperation result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.input_ = inputBuilder_ == null
            ? input_
            : inputBuilder_.build();
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.source_ = source_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.mode_ = mode_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        sortColumnNames_.makeImmutable();
        result.sortColumnNames_ = sortColumnNames_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        partitioningColumns_.makeImmutable();
        result.partitioningColumns_ = partitioningColumns_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.bucketBy_ = bucketByBuilder_ == null
            ? bucketBy_
            : bucketByBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.options_ = internalGetOptions();
        result.options_.makeImmutable();
      }
      result.bitField0_ |= to_bitField0_;
    }

    private void buildPartialOneofs(org.apache.spark.connect.proto.WriteOperation result) {
      result.saveTypeCase_ = saveTypeCase_;
      result.saveType_ = this.saveType_;
      if (saveTypeCase_ == 4 &&
          tableBuilder_ != null) {
        result.saveType_ = tableBuilder_.build();
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.WriteOperation) {
        return mergeFrom((org.apache.spark.connect.proto.WriteOperation)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.WriteOperation other) {
      if (other == org.apache.spark.connect.proto.WriteOperation.getDefaultInstance()) return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      if (other.hasSource()) {
        source_ = other.source_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.mode_ != 0) {
        setModeValue(other.getModeValue());
      }
      if (!other.sortColumnNames_.isEmpty()) {
        if (sortColumnNames_.isEmpty()) {
          sortColumnNames_ = other.sortColumnNames_;
          bitField0_ |= 0x00000020;
        } else {
          ensureSortColumnNamesIsMutable();
          sortColumnNames_.addAll(other.sortColumnNames_);
        }
        onChanged();
      }
      if (!other.partitioningColumns_.isEmpty()) {
        if (partitioningColumns_.isEmpty()) {
          partitioningColumns_ = other.partitioningColumns_;
          bitField0_ |= 0x00000040;
        } else {
          ensurePartitioningColumnsIsMutable();
          partitioningColumns_.addAll(other.partitioningColumns_);
        }
        onChanged();
      }
      if (other.hasBucketBy()) {
        mergeBucketBy(other.getBucketBy());
      }
      internalGetMutableOptions().mergeFrom(
          other.internalGetOptions());
      bitField0_ |= 0x00000100;
      switch (other.getSaveTypeCase()) {
        case PATH: {
          saveTypeCase_ = 3;
          saveType_ = other.saveType_;
          onChanged();
          break;
        }
        case TABLE: {
          mergeTable(other.getTable());
          break;
        }
        case SAVETYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getInputFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              source_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              String s = input.readStringRequireUtf8();
              saveTypeCase_ = 3;
              saveType_ = s;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getTableFieldBuilder().getBuilder(),
                  extensionRegistry);
              saveTypeCase_ = 4;
              break;
            } // case 34
            case 40: {
              mode_ = input.readEnum();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 50: {
              String s = input.readStringRequireUtf8();
              ensureSortColumnNamesIsMutable();
              sortColumnNames_.add(s);
              break;
            } // case 50
            case 58: {
              String s = input.readStringRequireUtf8();
              ensurePartitioningColumnsIsMutable();
              partitioningColumns_.add(s);
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getBucketByFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000080;
              break;
            } // case 66
            case 74: {
              com.google.protobuf.MapEntry<String, String>
              options__ = input.readMessage(
                  OptionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableOptions().getMutableMap().put(
                  options__.getKey(), options__.getValue());
              bitField0_ |= 0x00000100;
              break;
            } // case 74
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int saveTypeCase_ = 0;
    private Object saveType_;
    public SaveTypeCase
        getSaveTypeCase() {
      return SaveTypeCase.forNumber(
          saveTypeCase_);
    }

    public Builder clearSaveType() {
      saveTypeCase_ = 0;
      saveType_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private org.apache.spark.connect.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> inputBuilder_;
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return The input.
     */
    public org.apache.spark.connect.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
      } else {
        inputBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.spark.connect.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          input_ != null &&
          input_ != org.apache.spark.connect.proto.Relation.getDefaultInstance()) {
          getInputBuilder().mergeFrom(value);
        } else {
          input_ = value;
        }
      } else {
        inputBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      bitField0_ = (bitField0_ & ~0x00000001);
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.Relation.Builder getInputBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null ?
            org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      }
    }
    /**
     * <pre>
     * (Required) The output of the `input` relation will be persisted according to the options.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> 
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder>(
                getInput(),
                getParentForChildren(),
                isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private Object source_ = "";
    /**
     * <pre>
     * (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
     * </pre>
     *
     * <code>optional string source = 2;</code>
     * @return Whether the source field is set.
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
     * </pre>
     *
     * <code>optional string source = 2;</code>
     * @return The source.
     */
    public String getSource() {
      Object ref = source_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        source_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
     * </pre>
     *
     * <code>optional string source = 2;</code>
     * @return The bytes for source.
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      Object ref = source_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
     * </pre>
     *
     * <code>optional string source = 2;</code>
     * @param value The source to set.
     * @return This builder for chaining.
     */
    public Builder setSource(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      source_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
     * </pre>
     *
     * <code>optional string source = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearSource() {
      source_ = getDefaultInstance().getSource();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
     * </pre>
     *
     * <code>optional string source = 2;</code>
     * @param value The bytes for source to set.
     * @return This builder for chaining.
     */
    public Builder setSourceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      source_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    /**
     * <code>string path = 3;</code>
     * @return Whether the path field is set.
     */
    @Override
    public boolean hasPath() {
      return saveTypeCase_ == 3;
    }
    /**
     * <code>string path = 3;</code>
     * @return The path.
     */
    @Override
    public String getPath() {
      Object ref = "";
      if (saveTypeCase_ == 3) {
        ref = saveType_;
      }
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (saveTypeCase_ == 3) {
          saveType_ = s;
        }
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <code>string path = 3;</code>
     * @return The bytes for path.
     */
    @Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      Object ref = "";
      if (saveTypeCase_ == 3) {
        ref = saveType_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        if (saveTypeCase_ == 3) {
          saveType_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string path = 3;</code>
     * @param value The path to set.
     * @return This builder for chaining.
     */
    public Builder setPath(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      saveTypeCase_ = 3;
      saveType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string path = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearPath() {
      if (saveTypeCase_ == 3) {
        saveTypeCase_ = 0;
        saveType_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <code>string path = 3;</code>
     * @param value The bytes for path to set.
     * @return This builder for chaining.
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      saveTypeCase_ = 3;
      saveType_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.WriteOperation.SaveTable, org.apache.spark.connect.proto.WriteOperation.SaveTable.Builder, org.apache.spark.connect.proto.WriteOperation.SaveTableOrBuilder> tableBuilder_;
    /**
     * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
     * @return Whether the table field is set.
     */
    @Override
    public boolean hasTable() {
      return saveTypeCase_ == 4;
    }
    /**
     * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
     * @return The table.
     */
    @Override
    public org.apache.spark.connect.proto.WriteOperation.SaveTable getTable() {
      if (tableBuilder_ == null) {
        if (saveTypeCase_ == 4) {
          return (org.apache.spark.connect.proto.WriteOperation.SaveTable) saveType_;
        }
        return org.apache.spark.connect.proto.WriteOperation.SaveTable.getDefaultInstance();
      } else {
        if (saveTypeCase_ == 4) {
          return tableBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.WriteOperation.SaveTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
     */
    public Builder setTable(org.apache.spark.connect.proto.WriteOperation.SaveTable value) {
      if (tableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        saveType_ = value;
        onChanged();
      } else {
        tableBuilder_.setMessage(value);
      }
      saveTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
     */
    public Builder setTable(
        org.apache.spark.connect.proto.WriteOperation.SaveTable.Builder builderForValue) {
      if (tableBuilder_ == null) {
        saveType_ = builderForValue.build();
        onChanged();
      } else {
        tableBuilder_.setMessage(builderForValue.build());
      }
      saveTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
     */
    public Builder mergeTable(org.apache.spark.connect.proto.WriteOperation.SaveTable value) {
      if (tableBuilder_ == null) {
        if (saveTypeCase_ == 4 &&
            saveType_ != org.apache.spark.connect.proto.WriteOperation.SaveTable.getDefaultInstance()) {
          saveType_ = org.apache.spark.connect.proto.WriteOperation.SaveTable.newBuilder((org.apache.spark.connect.proto.WriteOperation.SaveTable) saveType_)
              .mergeFrom(value).buildPartial();
        } else {
          saveType_ = value;
        }
        onChanged();
      } else {
        if (saveTypeCase_ == 4) {
          tableBuilder_.mergeFrom(value);
        } else {
          tableBuilder_.setMessage(value);
        }
      }
      saveTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
     */
    public Builder clearTable() {
      if (tableBuilder_ == null) {
        if (saveTypeCase_ == 4) {
          saveTypeCase_ = 0;
          saveType_ = null;
          onChanged();
        }
      } else {
        if (saveTypeCase_ == 4) {
          saveTypeCase_ = 0;
          saveType_ = null;
        }
        tableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
     */
    public org.apache.spark.connect.proto.WriteOperation.SaveTable.Builder getTableBuilder() {
      return getTableFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
     */
    @Override
    public org.apache.spark.connect.proto.WriteOperation.SaveTableOrBuilder getTableOrBuilder() {
      if ((saveTypeCase_ == 4) && (tableBuilder_ != null)) {
        return tableBuilder_.getMessageOrBuilder();
      } else {
        if (saveTypeCase_ == 4) {
          return (org.apache.spark.connect.proto.WriteOperation.SaveTable) saveType_;
        }
        return org.apache.spark.connect.proto.WriteOperation.SaveTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WriteOperation.SaveTable table = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.WriteOperation.SaveTable, org.apache.spark.connect.proto.WriteOperation.SaveTable.Builder, org.apache.spark.connect.proto.WriteOperation.SaveTableOrBuilder> 
        getTableFieldBuilder() {
      if (tableBuilder_ == null) {
        if (!(saveTypeCase_ == 4)) {
          saveType_ = org.apache.spark.connect.proto.WriteOperation.SaveTable.getDefaultInstance();
        }
        tableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.WriteOperation.SaveTable, org.apache.spark.connect.proto.WriteOperation.SaveTable.Builder, org.apache.spark.connect.proto.WriteOperation.SaveTableOrBuilder>(
                (org.apache.spark.connect.proto.WriteOperation.SaveTable) saveType_,
                getParentForChildren(),
                isClean());
        saveType_ = null;
      }
      saveTypeCase_ = 4;
      onChanged();
      return tableBuilder_;
    }

    private int mode_ = 0;
    /**
     * <pre>
     * (Required) the save mode.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.SaveMode mode = 5;</code>
     * @return The enum numeric value on the wire for mode.
     */
    @Override public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     * (Required) the save mode.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.SaveMode mode = 5;</code>
     * @param value The enum numeric value on the wire for mode to set.
     * @return This builder for chaining.
     */
    public Builder setModeValue(int value) {
      mode_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) the save mode.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.SaveMode mode = 5;</code>
     * @return The mode.
     */
    @Override
    public org.apache.spark.connect.proto.WriteOperation.SaveMode getMode() {
      org.apache.spark.connect.proto.WriteOperation.SaveMode result = org.apache.spark.connect.proto.WriteOperation.SaveMode.forNumber(mode_);
      return result == null ? org.apache.spark.connect.proto.WriteOperation.SaveMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * (Required) the save mode.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.SaveMode mode = 5;</code>
     * @param value The mode to set.
     * @return This builder for chaining.
     */
    public Builder setMode(org.apache.spark.connect.proto.WriteOperation.SaveMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000010;
      mode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) the save mode.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.SaveMode mode = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearMode() {
      bitField0_ = (bitField0_ & ~0x00000010);
      mode_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList sortColumnNames_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureSortColumnNamesIsMutable() {
      if (!sortColumnNames_.isModifiable()) {
        sortColumnNames_ = new com.google.protobuf.LazyStringArrayList(sortColumnNames_);
      }
      bitField0_ |= 0x00000020;
    }
    /**
     * <pre>
     * (Optional) List of columns to sort the output by.
     * </pre>
     *
     * <code>repeated string sort_column_names = 6;</code>
     * @return A list containing the sortColumnNames.
     */
    public com.google.protobuf.ProtocolStringList
        getSortColumnNamesList() {
      sortColumnNames_.makeImmutable();
      return sortColumnNames_;
    }
    /**
     * <pre>
     * (Optional) List of columns to sort the output by.
     * </pre>
     *
     * <code>repeated string sort_column_names = 6;</code>
     * @return The count of sortColumnNames.
     */
    public int getSortColumnNamesCount() {
      return sortColumnNames_.size();
    }
    /**
     * <pre>
     * (Optional) List of columns to sort the output by.
     * </pre>
     *
     * <code>repeated string sort_column_names = 6;</code>
     * @param index The index of the element to return.
     * @return The sortColumnNames at the given index.
     */
    public String getSortColumnNames(int index) {
      return sortColumnNames_.get(index);
    }
    /**
     * <pre>
     * (Optional) List of columns to sort the output by.
     * </pre>
     *
     * <code>repeated string sort_column_names = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the sortColumnNames at the given index.
     */
    public com.google.protobuf.ByteString
        getSortColumnNamesBytes(int index) {
      return sortColumnNames_.getByteString(index);
    }
    /**
     * <pre>
     * (Optional) List of columns to sort the output by.
     * </pre>
     *
     * <code>repeated string sort_column_names = 6;</code>
     * @param index The index to set the value at.
     * @param value The sortColumnNames to set.
     * @return This builder for chaining.
     */
    public Builder setSortColumnNames(
        int index, String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureSortColumnNamesIsMutable();
      sortColumnNames_.set(index, value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns to sort the output by.
     * </pre>
     *
     * <code>repeated string sort_column_names = 6;</code>
     * @param value The sortColumnNames to add.
     * @return This builder for chaining.
     */
    public Builder addSortColumnNames(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureSortColumnNamesIsMutable();
      sortColumnNames_.add(value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns to sort the output by.
     * </pre>
     *
     * <code>repeated string sort_column_names = 6;</code>
     * @param values The sortColumnNames to add.
     * @return This builder for chaining.
     */
    public Builder addAllSortColumnNames(
        Iterable<String> values) {
      ensureSortColumnNamesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, sortColumnNames_);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns to sort the output by.
     * </pre>
     *
     * <code>repeated string sort_column_names = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearSortColumnNames() {
      sortColumnNames_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns to sort the output by.
     * </pre>
     *
     * <code>repeated string sort_column_names = 6;</code>
     * @param value The bytes of the sortColumnNames to add.
     * @return This builder for chaining.
     */
    public Builder addSortColumnNamesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureSortColumnNamesIsMutable();
      sortColumnNames_.add(value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList partitioningColumns_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensurePartitioningColumnsIsMutable() {
      if (!partitioningColumns_.isModifiable()) {
        partitioningColumns_ = new com.google.protobuf.LazyStringArrayList(partitioningColumns_);
      }
      bitField0_ |= 0x00000040;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning.
     * </pre>
     *
     * <code>repeated string partitioning_columns = 7;</code>
     * @return A list containing the partitioningColumns.
     */
    public com.google.protobuf.ProtocolStringList
        getPartitioningColumnsList() {
      partitioningColumns_.makeImmutable();
      return partitioningColumns_;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning.
     * </pre>
     *
     * <code>repeated string partitioning_columns = 7;</code>
     * @return The count of partitioningColumns.
     */
    public int getPartitioningColumnsCount() {
      return partitioningColumns_.size();
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning.
     * </pre>
     *
     * <code>repeated string partitioning_columns = 7;</code>
     * @param index The index of the element to return.
     * @return The partitioningColumns at the given index.
     */
    public String getPartitioningColumns(int index) {
      return partitioningColumns_.get(index);
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning.
     * </pre>
     *
     * <code>repeated string partitioning_columns = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the partitioningColumns at the given index.
     */
    public com.google.protobuf.ByteString
        getPartitioningColumnsBytes(int index) {
      return partitioningColumns_.getByteString(index);
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning.
     * </pre>
     *
     * <code>repeated string partitioning_columns = 7;</code>
     * @param index The index to set the value at.
     * @param value The partitioningColumns to set.
     * @return This builder for chaining.
     */
    public Builder setPartitioningColumns(
        int index, String value) {
      if (value == null) { throw new NullPointerException(); }
      ensurePartitioningColumnsIsMutable();
      partitioningColumns_.set(index, value);
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning.
     * </pre>
     *
     * <code>repeated string partitioning_columns = 7;</code>
     * @param value The partitioningColumns to add.
     * @return This builder for chaining.
     */
    public Builder addPartitioningColumns(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      ensurePartitioningColumnsIsMutable();
      partitioningColumns_.add(value);
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning.
     * </pre>
     *
     * <code>repeated string partitioning_columns = 7;</code>
     * @param values The partitioningColumns to add.
     * @return This builder for chaining.
     */
    public Builder addAllPartitioningColumns(
        Iterable<String> values) {
      ensurePartitioningColumnsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, partitioningColumns_);
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning.
     * </pre>
     *
     * <code>repeated string partitioning_columns = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearPartitioningColumns() {
      partitioningColumns_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000040);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of columns for partitioning.
     * </pre>
     *
     * <code>repeated string partitioning_columns = 7;</code>
     * @param value The bytes of the partitioningColumns to add.
     * @return This builder for chaining.
     */
    public Builder addPartitioningColumnsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensurePartitioningColumnsIsMutable();
      partitioningColumns_.add(value);
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }

    private org.apache.spark.connect.proto.WriteOperation.BucketBy bucketBy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.WriteOperation.BucketBy, org.apache.spark.connect.proto.WriteOperation.BucketBy.Builder, org.apache.spark.connect.proto.WriteOperation.BucketByOrBuilder> bucketByBuilder_;
    /**
     * <pre>
     * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
     * to bucket by.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
     * @return Whether the bucketBy field is set.
     */
    public boolean hasBucketBy() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
     * to bucket by.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
     * @return The bucketBy.
     */
    public org.apache.spark.connect.proto.WriteOperation.BucketBy getBucketBy() {
      if (bucketByBuilder_ == null) {
        return bucketBy_ == null ? org.apache.spark.connect.proto.WriteOperation.BucketBy.getDefaultInstance() : bucketBy_;
      } else {
        return bucketByBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
     * to bucket by.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
     */
    public Builder setBucketBy(org.apache.spark.connect.proto.WriteOperation.BucketBy value) {
      if (bucketByBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        bucketBy_ = value;
      } else {
        bucketByBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
     * to bucket by.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
     */
    public Builder setBucketBy(
        org.apache.spark.connect.proto.WriteOperation.BucketBy.Builder builderForValue) {
      if (bucketByBuilder_ == null) {
        bucketBy_ = builderForValue.build();
      } else {
        bucketByBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
     * to bucket by.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
     */
    public Builder mergeBucketBy(org.apache.spark.connect.proto.WriteOperation.BucketBy value) {
      if (bucketByBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0) &&
          bucketBy_ != null &&
          bucketBy_ != org.apache.spark.connect.proto.WriteOperation.BucketBy.getDefaultInstance()) {
          getBucketByBuilder().mergeFrom(value);
        } else {
          bucketBy_ = value;
        }
      } else {
        bucketByBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
     * to bucket by.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
     */
    public Builder clearBucketBy() {
      bitField0_ = (bitField0_ & ~0x00000080);
      bucketBy_ = null;
      if (bucketByBuilder_ != null) {
        bucketByBuilder_.dispose();
        bucketByBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
     * to bucket by.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
     */
    public org.apache.spark.connect.proto.WriteOperation.BucketBy.Builder getBucketByBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getBucketByFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
     * to bucket by.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
     */
    public org.apache.spark.connect.proto.WriteOperation.BucketByOrBuilder getBucketByOrBuilder() {
      if (bucketByBuilder_ != null) {
        return bucketByBuilder_.getMessageOrBuilder();
      } else {
        return bucketBy_ == null ?
            org.apache.spark.connect.proto.WriteOperation.BucketBy.getDefaultInstance() : bucketBy_;
      }
    }
    /**
     * <pre>
     * (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
     * to bucket by.
     * </pre>
     *
     * <code>.spark.connect.WriteOperation.BucketBy bucket_by = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.WriteOperation.BucketBy, org.apache.spark.connect.proto.WriteOperation.BucketBy.Builder, org.apache.spark.connect.proto.WriteOperation.BucketByOrBuilder> 
        getBucketByFieldBuilder() {
      if (bucketByBuilder_ == null) {
        bucketByBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.WriteOperation.BucketBy, org.apache.spark.connect.proto.WriteOperation.BucketBy.Builder, org.apache.spark.connect.proto.WriteOperation.BucketByOrBuilder>(
                getBucketBy(),
                getParentForChildren(),
                isClean());
        bucketBy_ = null;
      }
      return bucketByBuilder_;
    }

    private com.google.protobuf.MapField<
        String, String> options_;
    private com.google.protobuf.MapField<String, String>
        internalGetOptions() {
      if (options_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            OptionsDefaultEntryHolder.defaultEntry);
      }
      return options_;
    }
    private com.google.protobuf.MapField<String, String>
        internalGetMutableOptions() {
      if (options_ == null) {
        options_ = com.google.protobuf.MapField.newMapField(
            OptionsDefaultEntryHolder.defaultEntry);
      }
      if (!options_.isMutable()) {
        options_ = options_.copy();
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return options_;
    }
    public int getOptionsCount() {
      return internalGetOptions().getMap().size();
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 9;</code>
     */
    @Override
    public boolean containsOptions(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetOptions().getMap().containsKey(key);
    }
    /**
     * Use {@link #getOptionsMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, String> getOptions() {
      return getOptionsMap();
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 9;</code>
     */
    @Override
    public java.util.Map<String, String> getOptionsMap() {
      return internalGetOptions().getMap();
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 9;</code>
     */
    @Override
    public /* nullable */
String getOptionsOrDefault(
        String key,
        /* nullable */
String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetOptions().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 9;</code>
     */
    @Override
    public String getOptionsOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetOptions().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearOptions() {
      bitField0_ = (bitField0_ & ~0x00000100);
      internalGetMutableOptions().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 9;</code>
     */
    public Builder removeOptions(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableOptions().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @Deprecated
    public java.util.Map<String, String>
        getMutableOptions() {
      bitField0_ |= 0x00000100;
      return internalGetMutableOptions().getMutableMap();
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 9;</code>
     */
    public Builder putOptions(
        String key,
        String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableOptions().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000100;
      return this;
    }
    /**
     * <pre>
     * (Optional) A list of configuration options.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 9;</code>
     */
    public Builder putAllOptions(
        java.util.Map<String, String> values) {
      internalGetMutableOptions().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000100;
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.WriteOperation)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.WriteOperation)
  private static final org.apache.spark.connect.proto.WriteOperation DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.WriteOperation();
  }

  public static org.apache.spark.connect.proto.WriteOperation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WriteOperation>
      PARSER = new com.google.protobuf.AbstractParser<WriteOperation>() {
    @Override
    public WriteOperation parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<WriteOperation> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<WriteOperation> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.WriteOperation getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

