// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface SampleOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.Sample)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Required) Input relation for a Sample.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   * <pre>
   * (Required) Input relation for a Sample.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  org.apache.spark.connect.proto.Relation getInput();
  /**
   * <pre>
   * (Required) Input relation for a Sample.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder();

  /**
   * <pre>
   * (Required) lower bound.
   * </pre>
   *
   * <code>double lower_bound = 2;</code>
   * @return The lowerBound.
   */
  double getLowerBound();

  /**
   * <pre>
   * (Required) upper bound.
   * </pre>
   *
   * <code>double upper_bound = 3;</code>
   * @return The upperBound.
   */
  double getUpperBound();

  /**
   * <pre>
   * (Optional) Whether to sample with replacement.
   * </pre>
   *
   * <code>optional bool with_replacement = 4;</code>
   * @return Whether the withReplacement field is set.
   */
  boolean hasWithReplacement();
  /**
   * <pre>
   * (Optional) Whether to sample with replacement.
   * </pre>
   *
   * <code>optional bool with_replacement = 4;</code>
   * @return The withReplacement.
   */
  boolean getWithReplacement();

  /**
   * <pre>
   * (Optional) The random seed.
   * </pre>
   *
   * <code>optional int64 seed = 5;</code>
   * @return Whether the seed field is set.
   */
  boolean hasSeed();
  /**
   * <pre>
   * (Optional) The random seed.
   * </pre>
   *
   * <code>optional int64 seed = 5;</code>
   * @return The seed.
   */
  long getSeed();

  /**
   * <pre>
   * (Required) Explicitly sort the underlying plan to make the ordering deterministic or cache it.
   * This flag is true when invoking `dataframe.randomSplit` to randomly splits DataFrame with the
   * provided weights. Otherwise, it is false.
   * </pre>
   *
   * <code>bool deterministic_order = 6;</code>
   * @return The deterministicOrder.
   */
  boolean getDeterministicOrder();
}
