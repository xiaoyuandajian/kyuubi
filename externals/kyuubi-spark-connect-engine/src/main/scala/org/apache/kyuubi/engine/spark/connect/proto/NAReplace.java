// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Replaces old values with the corresponding values.
 * It will invoke 'Dataset.na.replace' (same as 'DataFrameNaFunctions.replace')
 * to compute the results.
 * </pre>
 *
 * Protobuf type {@code spark.connect.NAReplace}
 */
public final class NAReplace extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.NAReplace)
    NAReplaceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NAReplace.newBuilder() to construct.
  private NAReplace(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NAReplace() {
    cols_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    replacements_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new NAReplace();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_NAReplace_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_NAReplace_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.NAReplace.class, org.apache.spark.connect.proto.NAReplace.Builder.class);
  }

  public interface ReplacementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.NAReplace.Replacement)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The old value.
     *
     * Only 4 data types are supported now: null, bool, double, string.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal old_value = 1;</code>
     * @return Whether the oldValue field is set.
     */
    boolean hasOldValue();
    /**
     * <pre>
     * (Required) The old value.
     *
     * Only 4 data types are supported now: null, bool, double, string.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal old_value = 1;</code>
     * @return The oldValue.
     */
    org.apache.spark.connect.proto.Expression.Literal getOldValue();
    /**
     * <pre>
     * (Required) The old value.
     *
     * Only 4 data types are supported now: null, bool, double, string.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal old_value = 1;</code>
     */
    org.apache.spark.connect.proto.Expression.LiteralOrBuilder getOldValueOrBuilder();

    /**
     * <pre>
     * (Required) The new value.
     *
     * Should be of the same data type with the old value.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal new_value = 2;</code>
     * @return Whether the newValue field is set.
     */
    boolean hasNewValue();
    /**
     * <pre>
     * (Required) The new value.
     *
     * Should be of the same data type with the old value.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal new_value = 2;</code>
     * @return The newValue.
     */
    org.apache.spark.connect.proto.Expression.Literal getNewValue();
    /**
     * <pre>
     * (Required) The new value.
     *
     * Should be of the same data type with the old value.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal new_value = 2;</code>
     */
    org.apache.spark.connect.proto.Expression.LiteralOrBuilder getNewValueOrBuilder();
  }
  /**
   * Protobuf type {@code spark.connect.NAReplace.Replacement}
   */
  public static final class Replacement extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.NAReplace.Replacement)
      ReplacementOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Replacement.newBuilder() to construct.
    private Replacement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Replacement() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Replacement();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_NAReplace_Replacement_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_NAReplace_Replacement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.NAReplace.Replacement.class, org.apache.spark.connect.proto.NAReplace.Replacement.Builder.class);
    }

    public static final int OLD_VALUE_FIELD_NUMBER = 1;
    private org.apache.spark.connect.proto.Expression.Literal oldValue_;
    /**
     * <pre>
     * (Required) The old value.
     *
     * Only 4 data types are supported now: null, bool, double, string.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal old_value = 1;</code>
     * @return Whether the oldValue field is set.
     */
    @Override
    public boolean hasOldValue() {
      return oldValue_ != null;
    }
    /**
     * <pre>
     * (Required) The old value.
     *
     * Only 4 data types are supported now: null, bool, double, string.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal old_value = 1;</code>
     * @return The oldValue.
     */
    @Override
    public org.apache.spark.connect.proto.Expression.Literal getOldValue() {
      return oldValue_ == null ? org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance() : oldValue_;
    }
    /**
     * <pre>
     * (Required) The old value.
     *
     * Only 4 data types are supported now: null, bool, double, string.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal old_value = 1;</code>
     */
    @Override
    public org.apache.spark.connect.proto.Expression.LiteralOrBuilder getOldValueOrBuilder() {
      return oldValue_ == null ? org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance() : oldValue_;
    }

    public static final int NEW_VALUE_FIELD_NUMBER = 2;
    private org.apache.spark.connect.proto.Expression.Literal newValue_;
    /**
     * <pre>
     * (Required) The new value.
     *
     * Should be of the same data type with the old value.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal new_value = 2;</code>
     * @return Whether the newValue field is set.
     */
    @Override
    public boolean hasNewValue() {
      return newValue_ != null;
    }
    /**
     * <pre>
     * (Required) The new value.
     *
     * Should be of the same data type with the old value.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal new_value = 2;</code>
     * @return The newValue.
     */
    @Override
    public org.apache.spark.connect.proto.Expression.Literal getNewValue() {
      return newValue_ == null ? org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance() : newValue_;
    }
    /**
     * <pre>
     * (Required) The new value.
     *
     * Should be of the same data type with the old value.
     * </pre>
     *
     * <code>.spark.connect.Expression.Literal new_value = 2;</code>
     */
    @Override
    public org.apache.spark.connect.proto.Expression.LiteralOrBuilder getNewValueOrBuilder() {
      return newValue_ == null ? org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance() : newValue_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (oldValue_ != null) {
        output.writeMessage(1, getOldValue());
      }
      if (newValue_ != null) {
        output.writeMessage(2, getNewValue());
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (oldValue_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getOldValue());
      }
      if (newValue_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getNewValue());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.NAReplace.Replacement)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.NAReplace.Replacement other = (org.apache.spark.connect.proto.NAReplace.Replacement) obj;

      if (hasOldValue() != other.hasOldValue()) return false;
      if (hasOldValue()) {
        if (!getOldValue()
            .equals(other.getOldValue())) return false;
      }
      if (hasNewValue() != other.hasNewValue()) return false;
      if (hasNewValue()) {
        if (!getNewValue()
            .equals(other.getNewValue())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOldValue()) {
        hash = (37 * hash) + OLD_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getOldValue().hashCode();
      }
      if (hasNewValue()) {
        hash = (37 * hash) + NEW_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getNewValue().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.NAReplace.Replacement parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.NAReplace.Replacement parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.NAReplace.Replacement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.NAReplace.Replacement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.NAReplace.Replacement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.NAReplace.Replacement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.NAReplace.Replacement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.NAReplace.Replacement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.NAReplace.Replacement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.NAReplace.Replacement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.NAReplace.Replacement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.NAReplace.Replacement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.NAReplace.Replacement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.NAReplace.Replacement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.NAReplace.Replacement)
        org.apache.spark.connect.proto.NAReplace.ReplacementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_NAReplace_Replacement_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_NAReplace_Replacement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.NAReplace.Replacement.class, org.apache.spark.connect.proto.NAReplace.Replacement.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.NAReplace.Replacement.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        oldValue_ = null;
        if (oldValueBuilder_ != null) {
          oldValueBuilder_.dispose();
          oldValueBuilder_ = null;
        }
        newValue_ = null;
        if (newValueBuilder_ != null) {
          newValueBuilder_.dispose();
          newValueBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_NAReplace_Replacement_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.NAReplace.Replacement getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.NAReplace.Replacement.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.NAReplace.Replacement build() {
        org.apache.spark.connect.proto.NAReplace.Replacement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.NAReplace.Replacement buildPartial() {
        org.apache.spark.connect.proto.NAReplace.Replacement result = new org.apache.spark.connect.proto.NAReplace.Replacement(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.NAReplace.Replacement result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.oldValue_ = oldValueBuilder_ == null
              ? oldValue_
              : oldValueBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.newValue_ = newValueBuilder_ == null
              ? newValue_
              : newValueBuilder_.build();
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.NAReplace.Replacement) {
          return mergeFrom((org.apache.spark.connect.proto.NAReplace.Replacement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.NAReplace.Replacement other) {
        if (other == org.apache.spark.connect.proto.NAReplace.Replacement.getDefaultInstance()) return this;
        if (other.hasOldValue()) {
          mergeOldValue(other.getOldValue());
        }
        if (other.hasNewValue()) {
          mergeNewValue(other.getNewValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getOldValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getNewValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.spark.connect.proto.Expression.Literal oldValue_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.Expression.Literal, org.apache.spark.connect.proto.Expression.Literal.Builder, org.apache.spark.connect.proto.Expression.LiteralOrBuilder> oldValueBuilder_;
      /**
       * <pre>
       * (Required) The old value.
       *
       * Only 4 data types are supported now: null, bool, double, string.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal old_value = 1;</code>
       * @return Whether the oldValue field is set.
       */
      public boolean hasOldValue() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * (Required) The old value.
       *
       * Only 4 data types are supported now: null, bool, double, string.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal old_value = 1;</code>
       * @return The oldValue.
       */
      public org.apache.spark.connect.proto.Expression.Literal getOldValue() {
        if (oldValueBuilder_ == null) {
          return oldValue_ == null ? org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance() : oldValue_;
        } else {
          return oldValueBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The old value.
       *
       * Only 4 data types are supported now: null, bool, double, string.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal old_value = 1;</code>
       */
      public Builder setOldValue(org.apache.spark.connect.proto.Expression.Literal value) {
        if (oldValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          oldValue_ = value;
        } else {
          oldValueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The old value.
       *
       * Only 4 data types are supported now: null, bool, double, string.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal old_value = 1;</code>
       */
      public Builder setOldValue(
          org.apache.spark.connect.proto.Expression.Literal.Builder builderForValue) {
        if (oldValueBuilder_ == null) {
          oldValue_ = builderForValue.build();
        } else {
          oldValueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The old value.
       *
       * Only 4 data types are supported now: null, bool, double, string.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal old_value = 1;</code>
       */
      public Builder mergeOldValue(org.apache.spark.connect.proto.Expression.Literal value) {
        if (oldValueBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            oldValue_ != null &&
            oldValue_ != org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance()) {
            getOldValueBuilder().mergeFrom(value);
          } else {
            oldValue_ = value;
          }
        } else {
          oldValueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The old value.
       *
       * Only 4 data types are supported now: null, bool, double, string.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal old_value = 1;</code>
       */
      public Builder clearOldValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        oldValue_ = null;
        if (oldValueBuilder_ != null) {
          oldValueBuilder_.dispose();
          oldValueBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The old value.
       *
       * Only 4 data types are supported now: null, bool, double, string.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal old_value = 1;</code>
       */
      public org.apache.spark.connect.proto.Expression.Literal.Builder getOldValueBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getOldValueFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The old value.
       *
       * Only 4 data types are supported now: null, bool, double, string.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal old_value = 1;</code>
       */
      public org.apache.spark.connect.proto.Expression.LiteralOrBuilder getOldValueOrBuilder() {
        if (oldValueBuilder_ != null) {
          return oldValueBuilder_.getMessageOrBuilder();
        } else {
          return oldValue_ == null ?
              org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance() : oldValue_;
        }
      }
      /**
       * <pre>
       * (Required) The old value.
       *
       * Only 4 data types are supported now: null, bool, double, string.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal old_value = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.Expression.Literal, org.apache.spark.connect.proto.Expression.Literal.Builder, org.apache.spark.connect.proto.Expression.LiteralOrBuilder> 
          getOldValueFieldBuilder() {
        if (oldValueBuilder_ == null) {
          oldValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.connect.proto.Expression.Literal, org.apache.spark.connect.proto.Expression.Literal.Builder, org.apache.spark.connect.proto.Expression.LiteralOrBuilder>(
                  getOldValue(),
                  getParentForChildren(),
                  isClean());
          oldValue_ = null;
        }
        return oldValueBuilder_;
      }

      private org.apache.spark.connect.proto.Expression.Literal newValue_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.Expression.Literal, org.apache.spark.connect.proto.Expression.Literal.Builder, org.apache.spark.connect.proto.Expression.LiteralOrBuilder> newValueBuilder_;
      /**
       * <pre>
       * (Required) The new value.
       *
       * Should be of the same data type with the old value.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal new_value = 2;</code>
       * @return Whether the newValue field is set.
       */
      public boolean hasNewValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * (Required) The new value.
       *
       * Should be of the same data type with the old value.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal new_value = 2;</code>
       * @return The newValue.
       */
      public org.apache.spark.connect.proto.Expression.Literal getNewValue() {
        if (newValueBuilder_ == null) {
          return newValue_ == null ? org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance() : newValue_;
        } else {
          return newValueBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The new value.
       *
       * Should be of the same data type with the old value.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal new_value = 2;</code>
       */
      public Builder setNewValue(org.apache.spark.connect.proto.Expression.Literal value) {
        if (newValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          newValue_ = value;
        } else {
          newValueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The new value.
       *
       * Should be of the same data type with the old value.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal new_value = 2;</code>
       */
      public Builder setNewValue(
          org.apache.spark.connect.proto.Expression.Literal.Builder builderForValue) {
        if (newValueBuilder_ == null) {
          newValue_ = builderForValue.build();
        } else {
          newValueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The new value.
       *
       * Should be of the same data type with the old value.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal new_value = 2;</code>
       */
      public Builder mergeNewValue(org.apache.spark.connect.proto.Expression.Literal value) {
        if (newValueBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            newValue_ != null &&
            newValue_ != org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance()) {
            getNewValueBuilder().mergeFrom(value);
          } else {
            newValue_ = value;
          }
        } else {
          newValueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The new value.
       *
       * Should be of the same data type with the old value.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal new_value = 2;</code>
       */
      public Builder clearNewValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        newValue_ = null;
        if (newValueBuilder_ != null) {
          newValueBuilder_.dispose();
          newValueBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The new value.
       *
       * Should be of the same data type with the old value.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal new_value = 2;</code>
       */
      public org.apache.spark.connect.proto.Expression.Literal.Builder getNewValueBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getNewValueFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The new value.
       *
       * Should be of the same data type with the old value.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal new_value = 2;</code>
       */
      public org.apache.spark.connect.proto.Expression.LiteralOrBuilder getNewValueOrBuilder() {
        if (newValueBuilder_ != null) {
          return newValueBuilder_.getMessageOrBuilder();
        } else {
          return newValue_ == null ?
              org.apache.spark.connect.proto.Expression.Literal.getDefaultInstance() : newValue_;
        }
      }
      /**
       * <pre>
       * (Required) The new value.
       *
       * Should be of the same data type with the old value.
       * </pre>
       *
       * <code>.spark.connect.Expression.Literal new_value = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.connect.proto.Expression.Literal, org.apache.spark.connect.proto.Expression.Literal.Builder, org.apache.spark.connect.proto.Expression.LiteralOrBuilder> 
          getNewValueFieldBuilder() {
        if (newValueBuilder_ == null) {
          newValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.connect.proto.Expression.Literal, org.apache.spark.connect.proto.Expression.Literal.Builder, org.apache.spark.connect.proto.Expression.LiteralOrBuilder>(
                  getNewValue(),
                  getParentForChildren(),
                  isClean());
          newValue_ = null;
        }
        return newValueBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.NAReplace.Replacement)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.NAReplace.Replacement)
    private static final org.apache.spark.connect.proto.NAReplace.Replacement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.NAReplace.Replacement();
    }

    public static org.apache.spark.connect.proto.NAReplace.Replacement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Replacement>
        PARSER = new com.google.protobuf.AbstractParser<Replacement>() {
      @Override
      public Replacement parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Replacement> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Replacement> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.NAReplace.Replacement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.spark.connect.proto.Relation input_;
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  @Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  @Override
  public org.apache.spark.connect.proto.Relation getInput() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
    return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }

  public static final int COLS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList cols_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * (Optional) List of column names to consider.
   *
   * When it is empty, all the type-compatible columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @return A list containing the cols.
   */
  public com.google.protobuf.ProtocolStringList
      getColsList() {
    return cols_;
  }
  /**
   * <pre>
   * (Optional) List of column names to consider.
   *
   * When it is empty, all the type-compatible columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @return The count of cols.
   */
  public int getColsCount() {
    return cols_.size();
  }
  /**
   * <pre>
   * (Optional) List of column names to consider.
   *
   * When it is empty, all the type-compatible columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @param index The index of the element to return.
   * @return The cols at the given index.
   */
  public String getCols(int index) {
    return cols_.get(index);
  }
  /**
   * <pre>
   * (Optional) List of column names to consider.
   *
   * When it is empty, all the type-compatible columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the cols at the given index.
   */
  public com.google.protobuf.ByteString
      getColsBytes(int index) {
    return cols_.getByteString(index);
  }

  public static final int REPLACEMENTS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<org.apache.spark.connect.proto.NAReplace.Replacement> replacements_;
  /**
   * <pre>
   * (Optional) The value replacement mapping.
   * </pre>
   *
   * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
   */
  @Override
  public java.util.List<org.apache.spark.connect.proto.NAReplace.Replacement> getReplacementsList() {
    return replacements_;
  }
  /**
   * <pre>
   * (Optional) The value replacement mapping.
   * </pre>
   *
   * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
   */
  @Override
  public java.util.List<? extends org.apache.spark.connect.proto.NAReplace.ReplacementOrBuilder> 
      getReplacementsOrBuilderList() {
    return replacements_;
  }
  /**
   * <pre>
   * (Optional) The value replacement mapping.
   * </pre>
   *
   * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
   */
  @Override
  public int getReplacementsCount() {
    return replacements_.size();
  }
  /**
   * <pre>
   * (Optional) The value replacement mapping.
   * </pre>
   *
   * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
   */
  @Override
  public org.apache.spark.connect.proto.NAReplace.Replacement getReplacements(int index) {
    return replacements_.get(index);
  }
  /**
   * <pre>
   * (Optional) The value replacement mapping.
   * </pre>
   *
   * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
   */
  @Override
  public org.apache.spark.connect.proto.NAReplace.ReplacementOrBuilder getReplacementsOrBuilder(
      int index) {
    return replacements_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    for (int i = 0; i < cols_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, cols_.getRaw(i));
    }
    for (int i = 0; i < replacements_.size(); i++) {
      output.writeMessage(3, replacements_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInput());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < cols_.size(); i++) {
        dataSize += computeStringSizeNoTag(cols_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getColsList().size();
    }
    for (int i = 0; i < replacements_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, replacements_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.NAReplace)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.NAReplace other = (org.apache.spark.connect.proto.NAReplace) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput()
          .equals(other.getInput())) return false;
    }
    if (!getColsList()
        .equals(other.getColsList())) return false;
    if (!getReplacementsList()
        .equals(other.getReplacementsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    if (getColsCount() > 0) {
      hash = (37 * hash) + COLS_FIELD_NUMBER;
      hash = (53 * hash) + getColsList().hashCode();
    }
    if (getReplacementsCount() > 0) {
      hash = (37 * hash) + REPLACEMENTS_FIELD_NUMBER;
      hash = (53 * hash) + getReplacementsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.NAReplace parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.NAReplace parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.NAReplace parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.NAReplace parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.NAReplace parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.NAReplace parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.NAReplace parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.NAReplace parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.NAReplace parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.NAReplace parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.NAReplace parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.NAReplace parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.NAReplace prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Replaces old values with the corresponding values.
   * It will invoke 'Dataset.na.replace' (same as 'DataFrameNaFunctions.replace')
   * to compute the results.
   * </pre>
   *
   * Protobuf type {@code spark.connect.NAReplace}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.NAReplace)
      org.apache.spark.connect.proto.NAReplaceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_NAReplace_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_NAReplace_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.NAReplace.class, org.apache.spark.connect.proto.NAReplace.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.NAReplace.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      cols_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      if (replacementsBuilder_ == null) {
        replacements_ = java.util.Collections.emptyList();
      } else {
        replacements_ = null;
        replacementsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_NAReplace_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.NAReplace getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.NAReplace.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.NAReplace build() {
      org.apache.spark.connect.proto.NAReplace result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.NAReplace buildPartial() {
      org.apache.spark.connect.proto.NAReplace result = new org.apache.spark.connect.proto.NAReplace(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.apache.spark.connect.proto.NAReplace result) {
      if (replacementsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          replacements_ = java.util.Collections.unmodifiableList(replacements_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.replacements_ = replacements_;
      } else {
        result.replacements_ = replacementsBuilder_.build();
      }
    }

    private void buildPartial0(org.apache.spark.connect.proto.NAReplace result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.input_ = inputBuilder_ == null
            ? input_
            : inputBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        cols_.makeImmutable();
        result.cols_ = cols_;
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.NAReplace) {
        return mergeFrom((org.apache.spark.connect.proto.NAReplace)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.NAReplace other) {
      if (other == org.apache.spark.connect.proto.NAReplace.getDefaultInstance()) return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      if (!other.cols_.isEmpty()) {
        if (cols_.isEmpty()) {
          cols_ = other.cols_;
          bitField0_ |= 0x00000002;
        } else {
          ensureColsIsMutable();
          cols_.addAll(other.cols_);
        }
        onChanged();
      }
      if (replacementsBuilder_ == null) {
        if (!other.replacements_.isEmpty()) {
          if (replacements_.isEmpty()) {
            replacements_ = other.replacements_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureReplacementsIsMutable();
            replacements_.addAll(other.replacements_);
          }
          onChanged();
        }
      } else {
        if (!other.replacements_.isEmpty()) {
          if (replacementsBuilder_.isEmpty()) {
            replacementsBuilder_.dispose();
            replacementsBuilder_ = null;
            replacements_ = other.replacements_;
            bitField0_ = (bitField0_ & ~0x00000004);
            replacementsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getReplacementsFieldBuilder() : null;
          } else {
            replacementsBuilder_.addAllMessages(other.replacements_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getInputFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              String s = input.readStringRequireUtf8();
              ensureColsIsMutable();
              cols_.add(s);
              break;
            } // case 18
            case 26: {
              org.apache.spark.connect.proto.NAReplace.Replacement m =
                  input.readMessage(
                      org.apache.spark.connect.proto.NAReplace.Replacement.parser(),
                      extensionRegistry);
              if (replacementsBuilder_ == null) {
                ensureReplacementsIsMutable();
                replacements_.add(m);
              } else {
                replacementsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.apache.spark.connect.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> inputBuilder_;
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return The input.
     */
    public org.apache.spark.connect.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null ? org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
      } else {
        inputBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.spark.connect.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          input_ != null &&
          input_ != org.apache.spark.connect.proto.Relation.getDefaultInstance()) {
          getInputBuilder().mergeFrom(value);
        } else {
          input_ = value;
        }
      } else {
        inputBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      bitField0_ = (bitField0_ & ~0x00000001);
      input_ = null;
      if (inputBuilder_ != null) {
        inputBuilder_.dispose();
        inputBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.Relation.Builder getInputBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null ?
            org.apache.spark.connect.proto.Relation.getDefaultInstance() : input_;
      }
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder> 
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Relation, org.apache.spark.connect.proto.Relation.Builder, org.apache.spark.connect.proto.RelationOrBuilder>(
                getInput(),
                getParentForChildren(),
                isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private com.google.protobuf.LazyStringArrayList cols_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureColsIsMutable() {
      if (!cols_.isModifiable()) {
        cols_ = new com.google.protobuf.LazyStringArrayList(cols_);
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * (Optional) List of column names to consider.
     *
     * When it is empty, all the type-compatible columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @return A list containing the cols.
     */
    public com.google.protobuf.ProtocolStringList
        getColsList() {
      cols_.makeImmutable();
      return cols_;
    }
    /**
     * <pre>
     * (Optional) List of column names to consider.
     *
     * When it is empty, all the type-compatible columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @return The count of cols.
     */
    public int getColsCount() {
      return cols_.size();
    }
    /**
     * <pre>
     * (Optional) List of column names to consider.
     *
     * When it is empty, all the type-compatible columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param index The index of the element to return.
     * @return The cols at the given index.
     */
    public String getCols(int index) {
      return cols_.get(index);
    }
    /**
     * <pre>
     * (Optional) List of column names to consider.
     *
     * When it is empty, all the type-compatible columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the cols at the given index.
     */
    public com.google.protobuf.ByteString
        getColsBytes(int index) {
      return cols_.getByteString(index);
    }
    /**
     * <pre>
     * (Optional) List of column names to consider.
     *
     * When it is empty, all the type-compatible columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param index The index to set the value at.
     * @param value The cols to set.
     * @return This builder for chaining.
     */
    public Builder setCols(
        int index, String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureColsIsMutable();
      cols_.set(index, value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of column names to consider.
     *
     * When it is empty, all the type-compatible columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param value The cols to add.
     * @return This builder for chaining.
     */
    public Builder addCols(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureColsIsMutable();
      cols_.add(value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of column names to consider.
     *
     * When it is empty, all the type-compatible columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param values The cols to add.
     * @return This builder for chaining.
     */
    public Builder addAllCols(
        Iterable<String> values) {
      ensureColsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, cols_);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of column names to consider.
     *
     * When it is empty, all the type-compatible columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearCols() {
      cols_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) List of column names to consider.
     *
     * When it is empty, all the type-compatible columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param value The bytes of the cols to add.
     * @return This builder for chaining.
     */
    public Builder addColsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureColsIsMutable();
      cols_.add(value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.util.List<org.apache.spark.connect.proto.NAReplace.Replacement> replacements_ =
      java.util.Collections.emptyList();
    private void ensureReplacementsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        replacements_ = new java.util.ArrayList<org.apache.spark.connect.proto.NAReplace.Replacement>(replacements_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.NAReplace.Replacement, org.apache.spark.connect.proto.NAReplace.Replacement.Builder, org.apache.spark.connect.proto.NAReplace.ReplacementOrBuilder> replacementsBuilder_;

    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.NAReplace.Replacement> getReplacementsList() {
      if (replacementsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(replacements_);
      } else {
        return replacementsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public int getReplacementsCount() {
      if (replacementsBuilder_ == null) {
        return replacements_.size();
      } else {
        return replacementsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public org.apache.spark.connect.proto.NAReplace.Replacement getReplacements(int index) {
      if (replacementsBuilder_ == null) {
        return replacements_.get(index);
      } else {
        return replacementsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public Builder setReplacements(
        int index, org.apache.spark.connect.proto.NAReplace.Replacement value) {
      if (replacementsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReplacementsIsMutable();
        replacements_.set(index, value);
        onChanged();
      } else {
        replacementsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public Builder setReplacements(
        int index, org.apache.spark.connect.proto.NAReplace.Replacement.Builder builderForValue) {
      if (replacementsBuilder_ == null) {
        ensureReplacementsIsMutable();
        replacements_.set(index, builderForValue.build());
        onChanged();
      } else {
        replacementsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public Builder addReplacements(org.apache.spark.connect.proto.NAReplace.Replacement value) {
      if (replacementsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReplacementsIsMutable();
        replacements_.add(value);
        onChanged();
      } else {
        replacementsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public Builder addReplacements(
        int index, org.apache.spark.connect.proto.NAReplace.Replacement value) {
      if (replacementsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReplacementsIsMutable();
        replacements_.add(index, value);
        onChanged();
      } else {
        replacementsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public Builder addReplacements(
        org.apache.spark.connect.proto.NAReplace.Replacement.Builder builderForValue) {
      if (replacementsBuilder_ == null) {
        ensureReplacementsIsMutable();
        replacements_.add(builderForValue.build());
        onChanged();
      } else {
        replacementsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public Builder addReplacements(
        int index, org.apache.spark.connect.proto.NAReplace.Replacement.Builder builderForValue) {
      if (replacementsBuilder_ == null) {
        ensureReplacementsIsMutable();
        replacements_.add(index, builderForValue.build());
        onChanged();
      } else {
        replacementsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public Builder addAllReplacements(
        Iterable<? extends org.apache.spark.connect.proto.NAReplace.Replacement> values) {
      if (replacementsBuilder_ == null) {
        ensureReplacementsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, replacements_);
        onChanged();
      } else {
        replacementsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public Builder clearReplacements() {
      if (replacementsBuilder_ == null) {
        replacements_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        replacementsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public Builder removeReplacements(int index) {
      if (replacementsBuilder_ == null) {
        ensureReplacementsIsMutable();
        replacements_.remove(index);
        onChanged();
      } else {
        replacementsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public org.apache.spark.connect.proto.NAReplace.Replacement.Builder getReplacementsBuilder(
        int index) {
      return getReplacementsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public org.apache.spark.connect.proto.NAReplace.ReplacementOrBuilder getReplacementsOrBuilder(
        int index) {
      if (replacementsBuilder_ == null) {
        return replacements_.get(index);  } else {
        return replacementsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public java.util.List<? extends org.apache.spark.connect.proto.NAReplace.ReplacementOrBuilder> 
         getReplacementsOrBuilderList() {
      if (replacementsBuilder_ != null) {
        return replacementsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(replacements_);
      }
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public org.apache.spark.connect.proto.NAReplace.Replacement.Builder addReplacementsBuilder() {
      return getReplacementsFieldBuilder().addBuilder(
          org.apache.spark.connect.proto.NAReplace.Replacement.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public org.apache.spark.connect.proto.NAReplace.Replacement.Builder addReplacementsBuilder(
        int index) {
      return getReplacementsFieldBuilder().addBuilder(
          index, org.apache.spark.connect.proto.NAReplace.Replacement.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) The value replacement mapping.
     * </pre>
     *
     * <code>repeated .spark.connect.NAReplace.Replacement replacements = 3;</code>
     */
    public java.util.List<org.apache.spark.connect.proto.NAReplace.Replacement.Builder> 
         getReplacementsBuilderList() {
      return getReplacementsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.spark.connect.proto.NAReplace.Replacement, org.apache.spark.connect.proto.NAReplace.Replacement.Builder, org.apache.spark.connect.proto.NAReplace.ReplacementOrBuilder> 
        getReplacementsFieldBuilder() {
      if (replacementsBuilder_ == null) {
        replacementsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.spark.connect.proto.NAReplace.Replacement, org.apache.spark.connect.proto.NAReplace.Replacement.Builder, org.apache.spark.connect.proto.NAReplace.ReplacementOrBuilder>(
                replacements_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        replacements_ = null;
      }
      return replacementsBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.NAReplace)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.NAReplace)
  private static final org.apache.spark.connect.proto.NAReplace DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.NAReplace();
  }

  public static org.apache.spark.connect.proto.NAReplace getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<NAReplace>
      PARSER = new com.google.protobuf.AbstractParser<NAReplace>() {
    @Override
    public NAReplace parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<NAReplace> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<NAReplace> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.NAReplace getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

