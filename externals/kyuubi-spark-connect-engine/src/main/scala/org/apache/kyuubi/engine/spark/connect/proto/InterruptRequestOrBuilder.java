// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface InterruptRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.InterruptRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Required)
   *
   * The session_id specifies a spark session for a user id (which is specified
   * by user_context.user_id). The session_id is set by the client to be able to
   * collate streaming responses from different queries within the dedicated session.
   * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
   * </pre>
   *
   * <code>string session_id = 1;</code>
   * @return The sessionId.
   */
  String getSessionId();
  /**
   * <pre>
   * (Required)
   *
   * The session_id specifies a spark session for a user id (which is specified
   * by user_context.user_id). The session_id is set by the client to be able to
   * collate streaming responses from different queries within the dedicated session.
   * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
   * </pre>
   *
   * <code>string session_id = 1;</code>
   * @return The bytes for sessionId.
   */
  com.google.protobuf.ByteString
      getSessionIdBytes();

  /**
   * <pre>
   * (Required) User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   * @return Whether the userContext field is set.
   */
  boolean hasUserContext();
  /**
   * <pre>
   * (Required) User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   * @return The userContext.
   */
  org.apache.spark.connect.proto.UserContext getUserContext();
  /**
   * <pre>
   * (Required) User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   */
  org.apache.spark.connect.proto.UserContextOrBuilder getUserContextOrBuilder();

  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 3;</code>
   * @return Whether the clientType field is set.
   */
  boolean hasClientType();
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 3;</code>
   * @return The clientType.
   */
  String getClientType();
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 3;</code>
   * @return The bytes for clientType.
   */
  com.google.protobuf.ByteString
      getClientTypeBytes();

  /**
   * <pre>
   * (Required) The type of interrupt to execute.
   * </pre>
   *
   * <code>.spark.connect.InterruptRequest.InterruptType interrupt_type = 4;</code>
   * @return The enum numeric value on the wire for interruptType.
   */
  int getInterruptTypeValue();
  /**
   * <pre>
   * (Required) The type of interrupt to execute.
   * </pre>
   *
   * <code>.spark.connect.InterruptRequest.InterruptType interrupt_type = 4;</code>
   * @return The interruptType.
   */
  org.apache.spark.connect.proto.InterruptRequest.InterruptType getInterruptType();

  /**
   * <pre>
   * if interrupt_tag == INTERRUPT_TYPE_TAG, interrupt operation with this tag.
   * </pre>
   *
   * <code>string operation_tag = 5;</code>
   * @return Whether the operationTag field is set.
   */
  boolean hasOperationTag();
  /**
   * <pre>
   * if interrupt_tag == INTERRUPT_TYPE_TAG, interrupt operation with this tag.
   * </pre>
   *
   * <code>string operation_tag = 5;</code>
   * @return The operationTag.
   */
  String getOperationTag();
  /**
   * <pre>
   * if interrupt_tag == INTERRUPT_TYPE_TAG, interrupt operation with this tag.
   * </pre>
   *
   * <code>string operation_tag = 5;</code>
   * @return The bytes for operationTag.
   */
  com.google.protobuf.ByteString
      getOperationTagBytes();

  /**
   * <pre>
   * if interrupt_tag == INTERRUPT_TYPE_OPERATION_ID, interrupt operation with this operation_id.
   * </pre>
   *
   * <code>string operation_id = 6;</code>
   * @return Whether the operationId field is set.
   */
  boolean hasOperationId();
  /**
   * <pre>
   * if interrupt_tag == INTERRUPT_TYPE_OPERATION_ID, interrupt operation with this operation_id.
   * </pre>
   *
   * <code>string operation_id = 6;</code>
   * @return The operationId.
   */
  String getOperationId();
  /**
   * <pre>
   * if interrupt_tag == INTERRUPT_TYPE_OPERATION_ID, interrupt operation with this operation_id.
   * </pre>
   *
   * <code>string operation_id = 6;</code>
   * @return The bytes for operationId.
   */
  com.google.protobuf.ByteString
      getOperationIdBytes();

  org.apache.spark.connect.proto.InterruptRequest.InterruptCase getInterruptCase();
}
