// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * Protobuf type {@code spark.connect.FetchErrorDetailsRequest}
 */
public final class FetchErrorDetailsRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.FetchErrorDetailsRequest)
    FetchErrorDetailsRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FetchErrorDetailsRequest.newBuilder() to construct.
  private FetchErrorDetailsRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FetchErrorDetailsRequest() {
    sessionId_ = "";
    errorId_ = "";
    clientType_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new FetchErrorDetailsRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsRequest_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.FetchErrorDetailsRequest.class, org.apache.spark.connect.proto.FetchErrorDetailsRequest.Builder.class);
  }

  private int bitField0_;
  public static final int SESSION_ID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile Object sessionId_ = "";
  /**
   * <pre>
   * (Required)
   * The session_id specifies a Spark session for a user identified by user_context.user_id.
   * The id should be a UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`.
   * </pre>
   *
   * <code>string session_id = 1;</code>
   * @return The sessionId.
   */
  @Override
  public String getSessionId() {
    Object ref = sessionId_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      sessionId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Required)
   * The session_id specifies a Spark session for a user identified by user_context.user_id.
   * The id should be a UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`.
   * </pre>
   *
   * <code>string session_id = 1;</code>
   * @return The bytes for sessionId.
   */
  @Override
  public com.google.protobuf.ByteString
      getSessionIdBytes() {
    Object ref = sessionId_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      sessionId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int USER_CONTEXT_FIELD_NUMBER = 2;
  private org.apache.spark.connect.proto.UserContext userContext_;
  /**
   * <pre>
   * User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   * @return Whether the userContext field is set.
   */
  @Override
  public boolean hasUserContext() {
    return userContext_ != null;
  }
  /**
   * <pre>
   * User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   * @return The userContext.
   */
  @Override
  public org.apache.spark.connect.proto.UserContext getUserContext() {
    return userContext_ == null ? org.apache.spark.connect.proto.UserContext.getDefaultInstance() : userContext_;
  }
  /**
   * <pre>
   * User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.UserContextOrBuilder getUserContextOrBuilder() {
    return userContext_ == null ? org.apache.spark.connect.proto.UserContext.getDefaultInstance() : userContext_;
  }

  public static final int ERROR_ID_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile Object errorId_ = "";
  /**
   * <pre>
   * (Required)
   * The id of the error.
   * </pre>
   *
   * <code>string error_id = 3;</code>
   * @return The errorId.
   */
  @Override
  public String getErrorId() {
    Object ref = errorId_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      errorId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Required)
   * The id of the error.
   * </pre>
   *
   * <code>string error_id = 3;</code>
   * @return The bytes for errorId.
   */
  @Override
  public com.google.protobuf.ByteString
      getErrorIdBytes() {
    Object ref = errorId_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      errorId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CLIENT_TYPE_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private volatile Object clientType_ = "";
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 4;</code>
   * @return Whether the clientType field is set.
   */
  @Override
  public boolean hasClientType() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 4;</code>
   * @return The clientType.
   */
  @Override
  public String getClientType() {
    Object ref = clientType_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      clientType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 4;</code>
   * @return The bytes for clientType.
   */
  @Override
  public com.google.protobuf.ByteString
      getClientTypeBytes() {
    Object ref = clientType_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      clientType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sessionId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sessionId_);
    }
    if (userContext_ != null) {
      output.writeMessage(2, getUserContext());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(errorId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, errorId_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, clientType_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sessionId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sessionId_);
    }
    if (userContext_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getUserContext());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(errorId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, errorId_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, clientType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.FetchErrorDetailsRequest)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.FetchErrorDetailsRequest other = (org.apache.spark.connect.proto.FetchErrorDetailsRequest) obj;

    if (!getSessionId()
        .equals(other.getSessionId())) return false;
    if (hasUserContext() != other.hasUserContext()) return false;
    if (hasUserContext()) {
      if (!getUserContext()
          .equals(other.getUserContext())) return false;
    }
    if (!getErrorId()
        .equals(other.getErrorId())) return false;
    if (hasClientType() != other.hasClientType()) return false;
    if (hasClientType()) {
      if (!getClientType()
          .equals(other.getClientType())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SESSION_ID_FIELD_NUMBER;
    hash = (53 * hash) + getSessionId().hashCode();
    if (hasUserContext()) {
      hash = (37 * hash) + USER_CONTEXT_FIELD_NUMBER;
      hash = (53 * hash) + getUserContext().hashCode();
    }
    hash = (37 * hash) + ERROR_ID_FIELD_NUMBER;
    hash = (53 * hash) + getErrorId().hashCode();
    if (hasClientType()) {
      hash = (37 * hash) + CLIENT_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getClientType().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.FetchErrorDetailsRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code spark.connect.FetchErrorDetailsRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.FetchErrorDetailsRequest)
      org.apache.spark.connect.proto.FetchErrorDetailsRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsRequest_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.FetchErrorDetailsRequest.class, org.apache.spark.connect.proto.FetchErrorDetailsRequest.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.FetchErrorDetailsRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      sessionId_ = "";
      userContext_ = null;
      if (userContextBuilder_ != null) {
        userContextBuilder_.dispose();
        userContextBuilder_ = null;
      }
      errorId_ = "";
      clientType_ = "";
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Base.internal_static_spark_connect_FetchErrorDetailsRequest_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsRequest getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.FetchErrorDetailsRequest.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsRequest build() {
      org.apache.spark.connect.proto.FetchErrorDetailsRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.FetchErrorDetailsRequest buildPartial() {
      org.apache.spark.connect.proto.FetchErrorDetailsRequest result = new org.apache.spark.connect.proto.FetchErrorDetailsRequest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.spark.connect.proto.FetchErrorDetailsRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.sessionId_ = sessionId_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.userContext_ = userContextBuilder_ == null
            ? userContext_
            : userContextBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.errorId_ = errorId_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.clientType_ = clientType_;
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.FetchErrorDetailsRequest) {
        return mergeFrom((org.apache.spark.connect.proto.FetchErrorDetailsRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.FetchErrorDetailsRequest other) {
      if (other == org.apache.spark.connect.proto.FetchErrorDetailsRequest.getDefaultInstance()) return this;
      if (!other.getSessionId().isEmpty()) {
        sessionId_ = other.sessionId_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.hasUserContext()) {
        mergeUserContext(other.getUserContext());
      }
      if (!other.getErrorId().isEmpty()) {
        errorId_ = other.errorId_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (other.hasClientType()) {
        clientType_ = other.clientType_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              sessionId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getUserContextFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              errorId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              clientType_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private Object sessionId_ = "";
    /**
     * <pre>
     * (Required)
     * The session_id specifies a Spark session for a user identified by user_context.user_id.
     * The id should be a UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`.
     * </pre>
     *
     * <code>string session_id = 1;</code>
     * @return The sessionId.
     */
    public String getSessionId() {
      Object ref = sessionId_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        sessionId_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * (Required)
     * The session_id specifies a Spark session for a user identified by user_context.user_id.
     * The id should be a UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`.
     * </pre>
     *
     * <code>string session_id = 1;</code>
     * @return The bytes for sessionId.
     */
    public com.google.protobuf.ByteString
        getSessionIdBytes() {
      Object ref = sessionId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        sessionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Required)
     * The session_id specifies a Spark session for a user identified by user_context.user_id.
     * The id should be a UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`.
     * </pre>
     *
     * <code>string session_id = 1;</code>
     * @param value The sessionId to set.
     * @return This builder for chaining.
     */
    public Builder setSessionId(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      sessionId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required)
     * The session_id specifies a Spark session for a user identified by user_context.user_id.
     * The id should be a UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`.
     * </pre>
     *
     * <code>string session_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSessionId() {
      sessionId_ = getDefaultInstance().getSessionId();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required)
     * The session_id specifies a Spark session for a user identified by user_context.user_id.
     * The id should be a UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`.
     * </pre>
     *
     * <code>string session_id = 1;</code>
     * @param value The bytes for sessionId to set.
     * @return This builder for chaining.
     */
    public Builder setSessionIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      sessionId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private org.apache.spark.connect.proto.UserContext userContext_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.UserContext, org.apache.spark.connect.proto.UserContext.Builder, org.apache.spark.connect.proto.UserContextOrBuilder> userContextBuilder_;
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     * @return Whether the userContext field is set.
     */
    public boolean hasUserContext() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     * @return The userContext.
     */
    public org.apache.spark.connect.proto.UserContext getUserContext() {
      if (userContextBuilder_ == null) {
        return userContext_ == null ? org.apache.spark.connect.proto.UserContext.getDefaultInstance() : userContext_;
      } else {
        return userContextBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public Builder setUserContext(org.apache.spark.connect.proto.UserContext value) {
      if (userContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        userContext_ = value;
      } else {
        userContextBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public Builder setUserContext(
        org.apache.spark.connect.proto.UserContext.Builder builderForValue) {
      if (userContextBuilder_ == null) {
        userContext_ = builderForValue.build();
      } else {
        userContextBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public Builder mergeUserContext(org.apache.spark.connect.proto.UserContext value) {
      if (userContextBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          userContext_ != null &&
          userContext_ != org.apache.spark.connect.proto.UserContext.getDefaultInstance()) {
          getUserContextBuilder().mergeFrom(value);
        } else {
          userContext_ = value;
        }
      } else {
        userContextBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public Builder clearUserContext() {
      bitField0_ = (bitField0_ & ~0x00000002);
      userContext_ = null;
      if (userContextBuilder_ != null) {
        userContextBuilder_.dispose();
        userContextBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public org.apache.spark.connect.proto.UserContext.Builder getUserContextBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getUserContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    public org.apache.spark.connect.proto.UserContextOrBuilder getUserContextOrBuilder() {
      if (userContextBuilder_ != null) {
        return userContextBuilder_.getMessageOrBuilder();
      } else {
        return userContext_ == null ?
            org.apache.spark.connect.proto.UserContext.getDefaultInstance() : userContext_;
      }
    }
    /**
     * <pre>
     * User context
     * </pre>
     *
     * <code>.spark.connect.UserContext user_context = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.UserContext, org.apache.spark.connect.proto.UserContext.Builder, org.apache.spark.connect.proto.UserContextOrBuilder> 
        getUserContextFieldBuilder() {
      if (userContextBuilder_ == null) {
        userContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.UserContext, org.apache.spark.connect.proto.UserContext.Builder, org.apache.spark.connect.proto.UserContextOrBuilder>(
                getUserContext(),
                getParentForChildren(),
                isClean());
        userContext_ = null;
      }
      return userContextBuilder_;
    }

    private Object errorId_ = "";
    /**
     * <pre>
     * (Required)
     * The id of the error.
     * </pre>
     *
     * <code>string error_id = 3;</code>
     * @return The errorId.
     */
    public String getErrorId() {
      Object ref = errorId_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        errorId_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * (Required)
     * The id of the error.
     * </pre>
     *
     * <code>string error_id = 3;</code>
     * @return The bytes for errorId.
     */
    public com.google.protobuf.ByteString
        getErrorIdBytes() {
      Object ref = errorId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        errorId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Required)
     * The id of the error.
     * </pre>
     *
     * <code>string error_id = 3;</code>
     * @param value The errorId to set.
     * @return This builder for chaining.
     */
    public Builder setErrorId(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      errorId_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required)
     * The id of the error.
     * </pre>
     *
     * <code>string error_id = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearErrorId() {
      errorId_ = getDefaultInstance().getErrorId();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required)
     * The id of the error.
     * </pre>
     *
     * <code>string error_id = 3;</code>
     * @param value The bytes for errorId to set.
     * @return This builder for chaining.
     */
    public Builder setErrorIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      errorId_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private Object clientType_ = "";
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 4;</code>
     * @return Whether the clientType field is set.
     */
    public boolean hasClientType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 4;</code>
     * @return The clientType.
     */
    public String getClientType() {
      Object ref = clientType_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        clientType_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 4;</code>
     * @return The bytes for clientType.
     */
    public com.google.protobuf.ByteString
        getClientTypeBytes() {
      Object ref = clientType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        clientType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 4;</code>
     * @param value The clientType to set.
     * @return This builder for chaining.
     */
    public Builder setClientType(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      clientType_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearClientType() {
      clientType_ = getDefaultInstance().getClientType();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Provides optional information about the client sending the request. This field
     * can be used for language or version specific information and is only intended for
     * logging purposes and will not be interpreted by the server.
     * </pre>
     *
     * <code>optional string client_type = 4;</code>
     * @param value The bytes for clientType to set.
     * @return This builder for chaining.
     */
    public Builder setClientTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      clientType_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.FetchErrorDetailsRequest)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.FetchErrorDetailsRequest)
  private static final org.apache.spark.connect.proto.FetchErrorDetailsRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.FetchErrorDetailsRequest();
  }

  public static org.apache.spark.connect.proto.FetchErrorDetailsRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FetchErrorDetailsRequest>
      PARSER = new com.google.protobuf.AbstractParser<FetchErrorDetailsRequest>() {
    @Override
    public FetchErrorDetailsRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<FetchErrorDetailsRequest> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<FetchErrorDetailsRequest> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.FetchErrorDetailsRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

