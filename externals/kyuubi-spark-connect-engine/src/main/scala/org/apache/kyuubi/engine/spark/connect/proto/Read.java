// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Relation that reads from a file / table or other data source. Does not have additional
 * inputs.
 * </pre>
 *
 * Protobuf type {@code spark.connect.Read}
 */
public final class Read extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.Read)
    ReadOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Read.newBuilder() to construct.
  private Read(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Read() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new Read();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.Read.class, org.apache.spark.connect.proto.Read.Builder.class);
  }

  public interface NamedTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Read.NamedTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) Unparsed identifier for the table.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     * @return The unparsedIdentifier.
     */
    String getUnparsedIdentifier();
    /**
     * <pre>
     * (Required) Unparsed identifier for the table.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     * @return The bytes for unparsedIdentifier.
     */
    com.google.protobuf.ByteString
        getUnparsedIdentifierBytes();

    /**
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    int getOptionsCount();
    /**
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    boolean containsOptions(
        String key);
    /**
     * Use {@link #getOptionsMap()} instead.
     */
    @Deprecated
    java.util.Map<String, String>
    getOptions();
    /**
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    java.util.Map<String, String>
    getOptionsMap();
    /**
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    /* nullable */
String getOptionsOrDefault(
        String key,
        /* nullable */
String defaultValue);
    /**
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    String getOptionsOrThrow(
        String key);
  }
  /**
   * Protobuf type {@code spark.connect.Read.NamedTable}
   */
  public static final class NamedTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Read.NamedTable)
      NamedTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NamedTable.newBuilder() to construct.
    private NamedTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NamedTable() {
      unparsedIdentifier_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new NamedTable();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_NamedTable_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetOptions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_NamedTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.Read.NamedTable.class, org.apache.spark.connect.proto.Read.NamedTable.Builder.class);
    }

    public static final int UNPARSED_IDENTIFIER_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile Object unparsedIdentifier_ = "";
    /**
     * <pre>
     * (Required) Unparsed identifier for the table.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     * @return The unparsedIdentifier.
     */
    @Override
    public String getUnparsedIdentifier() {
      Object ref = unparsedIdentifier_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        unparsedIdentifier_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) Unparsed identifier for the table.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     * @return The bytes for unparsedIdentifier.
     */
    @Override
    public com.google.protobuf.ByteString
        getUnparsedIdentifierBytes() {
      Object ref = unparsedIdentifier_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        unparsedIdentifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPTIONS_FIELD_NUMBER = 2;
    private static final class OptionsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, String> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, String>newDefaultInstance(
                  org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_NamedTable_OptionsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        String, String> options_;
    private com.google.protobuf.MapField<String, String>
    internalGetOptions() {
      if (options_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            OptionsDefaultEntryHolder.defaultEntry);
      }
      return options_;
    }
    public int getOptionsCount() {
      return internalGetOptions().getMap().size();
    }
    /**
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    @Override
    public boolean containsOptions(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetOptions().getMap().containsKey(key);
    }
    /**
     * Use {@link #getOptionsMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, String> getOptions() {
      return getOptionsMap();
    }
    /**
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    @Override
    public java.util.Map<String, String> getOptionsMap() {
      return internalGetOptions().getMap();
    }
    /**
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    @Override
    public /* nullable */
String getOptionsOrDefault(
        String key,
        /* nullable */
String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetOptions().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    @Override
    public String getOptionsOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetOptions().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(unparsedIdentifier_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, unparsedIdentifier_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetOptions(),
          OptionsDefaultEntryHolder.defaultEntry,
          2);
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(unparsedIdentifier_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, unparsedIdentifier_);
      }
      for (java.util.Map.Entry<String, String> entry
           : internalGetOptions().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, String>
        options__ = OptionsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, options__);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.Read.NamedTable)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.Read.NamedTable other = (org.apache.spark.connect.proto.Read.NamedTable) obj;

      if (!getUnparsedIdentifier()
          .equals(other.getUnparsedIdentifier())) return false;
      if (!internalGetOptions().equals(
          other.internalGetOptions())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UNPARSED_IDENTIFIER_FIELD_NUMBER;
      hash = (53 * hash) + getUnparsedIdentifier().hashCode();
      if (!internalGetOptions().getMap().isEmpty()) {
        hash = (37 * hash) + OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetOptions().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.Read.NamedTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.Read.NamedTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Read.NamedTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.Read.NamedTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Read.NamedTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.Read.NamedTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Read.NamedTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.Read.NamedTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.Read.NamedTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.Read.NamedTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Read.NamedTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.Read.NamedTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.Read.NamedTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.Read.NamedTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Read.NamedTable)
        org.apache.spark.connect.proto.Read.NamedTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_NamedTable_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetOptions();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMutableOptions();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_NamedTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.Read.NamedTable.class, org.apache.spark.connect.proto.Read.NamedTable.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.Read.NamedTable.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        unparsedIdentifier_ = "";
        internalGetMutableOptions().clear();
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_NamedTable_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.Read.NamedTable getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.Read.NamedTable.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.Read.NamedTable build() {
        org.apache.spark.connect.proto.Read.NamedTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.Read.NamedTable buildPartial() {
        org.apache.spark.connect.proto.Read.NamedTable result = new org.apache.spark.connect.proto.Read.NamedTable(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.Read.NamedTable result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.unparsedIdentifier_ = unparsedIdentifier_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.options_ = internalGetOptions();
          result.options_.makeImmutable();
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.Read.NamedTable) {
          return mergeFrom((org.apache.spark.connect.proto.Read.NamedTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.Read.NamedTable other) {
        if (other == org.apache.spark.connect.proto.Read.NamedTable.getDefaultInstance()) return this;
        if (!other.getUnparsedIdentifier().isEmpty()) {
          unparsedIdentifier_ = other.unparsedIdentifier_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        internalGetMutableOptions().mergeFrom(
            other.internalGetOptions());
        bitField0_ |= 0x00000002;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                unparsedIdentifier_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.google.protobuf.MapEntry<String, String>
                options__ = input.readMessage(
                    OptionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableOptions().getMutableMap().put(
                    options__.getKey(), options__.getValue());
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private Object unparsedIdentifier_ = "";
      /**
       * <pre>
       * (Required) Unparsed identifier for the table.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       * @return The unparsedIdentifier.
       */
      public String getUnparsedIdentifier() {
        Object ref = unparsedIdentifier_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          unparsedIdentifier_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * (Required) Unparsed identifier for the table.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       * @return The bytes for unparsedIdentifier.
       */
      public com.google.protobuf.ByteString
          getUnparsedIdentifierBytes() {
        Object ref = unparsedIdentifier_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          unparsedIdentifier_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) Unparsed identifier for the table.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       * @param value The unparsedIdentifier to set.
       * @return This builder for chaining.
       */
      public Builder setUnparsedIdentifier(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        unparsedIdentifier_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Unparsed identifier for the table.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnparsedIdentifier() {
        unparsedIdentifier_ = getDefaultInstance().getUnparsedIdentifier();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Unparsed identifier for the table.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       * @param value The bytes for unparsedIdentifier to set.
       * @return This builder for chaining.
       */
      public Builder setUnparsedIdentifierBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        unparsedIdentifier_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          String, String> options_;
      private com.google.protobuf.MapField<String, String>
          internalGetOptions() {
        if (options_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              OptionsDefaultEntryHolder.defaultEntry);
        }
        return options_;
      }
      private com.google.protobuf.MapField<String, String>
          internalGetMutableOptions() {
        if (options_ == null) {
          options_ = com.google.protobuf.MapField.newMapField(
              OptionsDefaultEntryHolder.defaultEntry);
        }
        if (!options_.isMutable()) {
          options_ = options_.copy();
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return options_;
      }
      public int getOptionsCount() {
        return internalGetOptions().getMap().size();
      }
      /**
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      @Override
      public boolean containsOptions(
          String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetOptions().getMap().containsKey(key);
      }
      /**
       * Use {@link #getOptionsMap()} instead.
       */
      @Override
      @Deprecated
      public java.util.Map<String, String> getOptions() {
        return getOptionsMap();
      }
      /**
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      @Override
      public java.util.Map<String, String> getOptionsMap() {
        return internalGetOptions().getMap();
      }
      /**
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      @Override
      public /* nullable */
String getOptionsOrDefault(
          String key,
          /* nullable */
String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<String, String> map =
            internalGetOptions().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      @Override
      public String getOptionsOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<String, String> map =
            internalGetOptions().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearOptions() {
        bitField0_ = (bitField0_ & ~0x00000002);
        internalGetMutableOptions().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      public Builder removeOptions(
          String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableOptions().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, String>
          getMutableOptions() {
        bitField0_ |= 0x00000002;
        return internalGetMutableOptions().getMutableMap();
      }
      /**
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      public Builder putOptions(
          String key,
          String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableOptions().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      public Builder putAllOptions(
          java.util.Map<String, String> values) {
        internalGetMutableOptions().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000002;
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Read.NamedTable)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Read.NamedTable)
    private static final org.apache.spark.connect.proto.Read.NamedTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.Read.NamedTable();
    }

    public static org.apache.spark.connect.proto.Read.NamedTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NamedTable>
        PARSER = new com.google.protobuf.AbstractParser<NamedTable>() {
      @Override
      public NamedTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<NamedTable> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<NamedTable> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.Read.NamedTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DataSourceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Read.DataSource)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     *
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     * @return Whether the format field is set.
     */
    boolean hasFormat();
    /**
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     *
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     * @return The format.
     */
    String getFormat();
    /**
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     *
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     * @return The bytes for format.
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    /**
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     *
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     * @return Whether the schema field is set.
     */
    boolean hasSchema();
    /**
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     *
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     * @return The schema.
     */
    String getSchema();
    /**
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     *
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     * @return The bytes for schema.
     */
    com.google.protobuf.ByteString
        getSchemaBytes();

    /**
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    int getOptionsCount();
    /**
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    boolean containsOptions(
        String key);
    /**
     * Use {@link #getOptionsMap()} instead.
     */
    @Deprecated
    java.util.Map<String, String>
    getOptions();
    /**
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    java.util.Map<String, String>
    getOptionsMap();
    /**
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    /* nullable */
String getOptionsOrDefault(
        String key,
        /* nullable */
String defaultValue);
    /**
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    String getOptionsOrThrow(
        String key);

    /**
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     * @return A list containing the paths.
     */
    java.util.List<String>
        getPathsList();
    /**
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     * @return The count of paths.
     */
    int getPathsCount();
    /**
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     * @param index The index of the element to return.
     * @return The paths at the given index.
     */
    String getPaths(int index);
    /**
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the paths at the given index.
     */
    com.google.protobuf.ByteString
        getPathsBytes(int index);

    /**
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     *
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     * @return A list containing the predicates.
     */
    java.util.List<String>
        getPredicatesList();
    /**
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     *
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     * @return The count of predicates.
     */
    int getPredicatesCount();
    /**
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     *
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     * @param index The index of the element to return.
     * @return The predicates at the given index.
     */
    String getPredicates(int index);
    /**
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     *
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the predicates at the given index.
     */
    com.google.protobuf.ByteString
        getPredicatesBytes(int index);
  }
  /**
   * Protobuf type {@code spark.connect.Read.DataSource}
   */
  public static final class DataSource extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Read.DataSource)
      DataSourceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DataSource.newBuilder() to construct.
    private DataSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DataSource() {
      format_ = "";
      schema_ = "";
      paths_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      predicates_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new DataSource();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_DataSource_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetOptions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_DataSource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.Read.DataSource.class, org.apache.spark.connect.proto.Read.DataSource.Builder.class);
    }

    private int bitField0_;
    public static final int FORMAT_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile Object format_ = "";
    /**
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     *
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     * @return Whether the format field is set.
     */
    @Override
    public boolean hasFormat() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     *
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     * @return The format.
     */
    @Override
    public String getFormat() {
      Object ref = format_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     *
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     * @return The bytes for format.
     */
    @Override
    public com.google.protobuf.ByteString
        getFormatBytes() {
      Object ref = format_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCHEMA_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile Object schema_ = "";
    /**
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     *
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     * @return Whether the schema field is set.
     */
    @Override
    public boolean hasSchema() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     *
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     * @return The schema.
     */
    @Override
    public String getSchema() {
      Object ref = schema_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        schema_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     *
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     * @return The bytes for schema.
     */
    @Override
    public com.google.protobuf.ByteString
        getSchemaBytes() {
      Object ref = schema_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        schema_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPTIONS_FIELD_NUMBER = 3;
    private static final class OptionsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, String> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, String>newDefaultInstance(
                  org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_DataSource_OptionsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        String, String> options_;
    private com.google.protobuf.MapField<String, String>
    internalGetOptions() {
      if (options_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            OptionsDefaultEntryHolder.defaultEntry);
      }
      return options_;
    }
    public int getOptionsCount() {
      return internalGetOptions().getMap().size();
    }
    /**
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @Override
    public boolean containsOptions(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetOptions().getMap().containsKey(key);
    }
    /**
     * Use {@link #getOptionsMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, String> getOptions() {
      return getOptionsMap();
    }
    /**
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @Override
    public java.util.Map<String, String> getOptionsMap() {
      return internalGetOptions().getMap();
    }
    /**
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @Override
    public /* nullable */
String getOptionsOrDefault(
        String key,
        /* nullable */
String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetOptions().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @Override
    public String getOptionsOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<String, String> map =
          internalGetOptions().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int PATHS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList paths_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     * @return A list containing the paths.
     */
    public com.google.protobuf.ProtocolStringList
        getPathsList() {
      return paths_;
    }
    /**
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     * @return The count of paths.
     */
    public int getPathsCount() {
      return paths_.size();
    }
    /**
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     * @param index The index of the element to return.
     * @return The paths at the given index.
     */
    public String getPaths(int index) {
      return paths_.get(index);
    }
    /**
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the paths at the given index.
     */
    public com.google.protobuf.ByteString
        getPathsBytes(int index) {
      return paths_.getByteString(index);
    }

    public static final int PREDICATES_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList predicates_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     *
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     * @return A list containing the predicates.
     */
    public com.google.protobuf.ProtocolStringList
        getPredicatesList() {
      return predicates_;
    }
    /**
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     *
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     * @return The count of predicates.
     */
    public int getPredicatesCount() {
      return predicates_.size();
    }
    /**
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     *
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     * @param index The index of the element to return.
     * @return The predicates at the given index.
     */
    public String getPredicates(int index) {
      return predicates_.get(index);
    }
    /**
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     *
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the predicates at the given index.
     */
    public com.google.protobuf.ByteString
        getPredicatesBytes(int index) {
      return predicates_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, format_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, schema_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetOptions(),
          OptionsDefaultEntryHolder.defaultEntry,
          3);
      for (int i = 0; i < paths_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, paths_.getRaw(i));
      }
      for (int i = 0; i < predicates_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, predicates_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, format_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, schema_);
      }
      for (java.util.Map.Entry<String, String> entry
           : internalGetOptions().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, String>
        options__ = OptionsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, options__);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < paths_.size(); i++) {
          dataSize += computeStringSizeNoTag(paths_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getPathsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < predicates_.size(); i++) {
          dataSize += computeStringSizeNoTag(predicates_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getPredicatesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.connect.proto.Read.DataSource)) {
        return super.equals(obj);
      }
      org.apache.spark.connect.proto.Read.DataSource other = (org.apache.spark.connect.proto.Read.DataSource) obj;

      if (hasFormat() != other.hasFormat()) return false;
      if (hasFormat()) {
        if (!getFormat()
            .equals(other.getFormat())) return false;
      }
      if (hasSchema() != other.hasSchema()) return false;
      if (hasSchema()) {
        if (!getSchema()
            .equals(other.getSchema())) return false;
      }
      if (!internalGetOptions().equals(
          other.internalGetOptions())) return false;
      if (!getPathsList()
          .equals(other.getPathsList())) return false;
      if (!getPredicatesList()
          .equals(other.getPredicatesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFormat()) {
        hash = (37 * hash) + FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + getFormat().hashCode();
      }
      if (hasSchema()) {
        hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
        hash = (53 * hash) + getSchema().hashCode();
      }
      if (!internalGetOptions().getMap().isEmpty()) {
        hash = (37 * hash) + OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetOptions().hashCode();
      }
      if (getPathsCount() > 0) {
        hash = (37 * hash) + PATHS_FIELD_NUMBER;
        hash = (53 * hash) + getPathsList().hashCode();
      }
      if (getPredicatesCount() > 0) {
        hash = (37 * hash) + PREDICATES_FIELD_NUMBER;
        hash = (53 * hash) + getPredicatesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.connect.proto.Read.DataSource parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.Read.DataSource parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Read.DataSource parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.Read.DataSource parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Read.DataSource parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.connect.proto.Read.DataSource parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Read.DataSource parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.Read.DataSource parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.connect.proto.Read.DataSource parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.connect.proto.Read.DataSource parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.connect.proto.Read.DataSource parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.connect.proto.Read.DataSource parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.connect.proto.Read.DataSource prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.Read.DataSource}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Read.DataSource)
        org.apache.spark.connect.proto.Read.DataSourceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_DataSource_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetOptions();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetMutableOptions();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_DataSource_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.connect.proto.Read.DataSource.class, org.apache.spark.connect.proto.Read.DataSource.Builder.class);
      }

      // Construct using org.apache.spark.connect.proto.Read.DataSource.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        format_ = "";
        schema_ = "";
        internalGetMutableOptions().clear();
        paths_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        predicates_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_DataSource_descriptor;
      }

      @Override
      public org.apache.spark.connect.proto.Read.DataSource getDefaultInstanceForType() {
        return org.apache.spark.connect.proto.Read.DataSource.getDefaultInstance();
      }

      @Override
      public org.apache.spark.connect.proto.Read.DataSource build() {
        org.apache.spark.connect.proto.Read.DataSource result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public org.apache.spark.connect.proto.Read.DataSource buildPartial() {
        org.apache.spark.connect.proto.Read.DataSource result = new org.apache.spark.connect.proto.Read.DataSource(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.connect.proto.Read.DataSource result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.format_ = format_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.schema_ = schema_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.options_ = internalGetOptions();
          result.options_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          paths_.makeImmutable();
          result.paths_ = paths_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          predicates_.makeImmutable();
          result.predicates_ = predicates_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.connect.proto.Read.DataSource) {
          return mergeFrom((org.apache.spark.connect.proto.Read.DataSource)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.connect.proto.Read.DataSource other) {
        if (other == org.apache.spark.connect.proto.Read.DataSource.getDefaultInstance()) return this;
        if (other.hasFormat()) {
          format_ = other.format_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasSchema()) {
          schema_ = other.schema_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        internalGetMutableOptions().mergeFrom(
            other.internalGetOptions());
        bitField0_ |= 0x00000004;
        if (!other.paths_.isEmpty()) {
          if (paths_.isEmpty()) {
            paths_ = other.paths_;
            bitField0_ |= 0x00000008;
          } else {
            ensurePathsIsMutable();
            paths_.addAll(other.paths_);
          }
          onChanged();
        }
        if (!other.predicates_.isEmpty()) {
          if (predicates_.isEmpty()) {
            predicates_ = other.predicates_;
            bitField0_ |= 0x00000010;
          } else {
            ensurePredicatesIsMutable();
            predicates_.addAll(other.predicates_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                format_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                schema_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                com.google.protobuf.MapEntry<String, String>
                options__ = input.readMessage(
                    OptionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableOptions().getMutableMap().put(
                    options__.getKey(), options__.getValue());
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                String s = input.readStringRequireUtf8();
                ensurePathsIsMutable();
                paths_.add(s);
                break;
              } // case 34
              case 42: {
                String s = input.readStringRequireUtf8();
                ensurePredicatesIsMutable();
                predicates_.add(s);
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private Object format_ = "";
      /**
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       *
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       * @return Whether the format field is set.
       */
      public boolean hasFormat() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       *
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       * @return The format.
       */
      public String getFormat() {
        Object ref = format_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       *
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       * @return The bytes for format.
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       *
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       * @param value The format to set.
       * @return This builder for chaining.
       */
      public Builder setFormat(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        format_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       *
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFormat() {
        format_ = getDefaultInstance().getFormat();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       *
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       * @param value The bytes for format to set.
       * @return This builder for chaining.
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        format_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private Object schema_ = "";
      /**
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       *
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       * @return Whether the schema field is set.
       */
      public boolean hasSchema() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       *
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       * @return The schema.
       */
      public String getSchema() {
        Object ref = schema_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          schema_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       *
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       * @return The bytes for schema.
       */
      public com.google.protobuf.ByteString
          getSchemaBytes() {
        Object ref = schema_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          schema_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       *
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       * @param value The schema to set.
       * @return This builder for chaining.
       */
      public Builder setSchema(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        schema_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       *
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSchema() {
        schema_ = getDefaultInstance().getSchema();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       *
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       * @param value The bytes for schema to set.
       * @return This builder for chaining.
       */
      public Builder setSchemaBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        schema_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          String, String> options_;
      private com.google.protobuf.MapField<String, String>
          internalGetOptions() {
        if (options_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              OptionsDefaultEntryHolder.defaultEntry);
        }
        return options_;
      }
      private com.google.protobuf.MapField<String, String>
          internalGetMutableOptions() {
        if (options_ == null) {
          options_ = com.google.protobuf.MapField.newMapField(
              OptionsDefaultEntryHolder.defaultEntry);
        }
        if (!options_.isMutable()) {
          options_ = options_.copy();
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return options_;
      }
      public int getOptionsCount() {
        return internalGetOptions().getMap().size();
      }
      /**
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      @Override
      public boolean containsOptions(
          String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetOptions().getMap().containsKey(key);
      }
      /**
       * Use {@link #getOptionsMap()} instead.
       */
      @Override
      @Deprecated
      public java.util.Map<String, String> getOptions() {
        return getOptionsMap();
      }
      /**
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      @Override
      public java.util.Map<String, String> getOptionsMap() {
        return internalGetOptions().getMap();
      }
      /**
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      @Override
      public /* nullable */
String getOptionsOrDefault(
          String key,
          /* nullable */
String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<String, String> map =
            internalGetOptions().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      @Override
      public String getOptionsOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<String, String> map =
            internalGetOptions().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearOptions() {
        bitField0_ = (bitField0_ & ~0x00000004);
        internalGetMutableOptions().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      public Builder removeOptions(
          String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableOptions().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, String>
          getMutableOptions() {
        bitField0_ |= 0x00000004;
        return internalGetMutableOptions().getMutableMap();
      }
      /**
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      public Builder putOptions(
          String key,
          String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableOptions().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      public Builder putAllOptions(
          java.util.Map<String, String> values) {
        internalGetMutableOptions().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000004;
        return this;
      }

      private com.google.protobuf.LazyStringArrayList paths_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensurePathsIsMutable() {
        if (!paths_.isModifiable()) {
          paths_ = new com.google.protobuf.LazyStringArrayList(paths_);
        }
        bitField0_ |= 0x00000008;
      }
      /**
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       * @return A list containing the paths.
       */
      public com.google.protobuf.ProtocolStringList
          getPathsList() {
        paths_.makeImmutable();
        return paths_;
      }
      /**
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       * @return The count of paths.
       */
      public int getPathsCount() {
        return paths_.size();
      }
      /**
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       * @param index The index of the element to return.
       * @return The paths at the given index.
       */
      public String getPaths(int index) {
        return paths_.get(index);
      }
      /**
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       * @param index The index of the value to return.
       * @return The bytes of the paths at the given index.
       */
      public com.google.protobuf.ByteString
          getPathsBytes(int index) {
        return paths_.getByteString(index);
      }
      /**
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       * @param index The index to set the value at.
       * @param value The paths to set.
       * @return This builder for chaining.
       */
      public Builder setPaths(
          int index, String value) {
        if (value == null) { throw new NullPointerException(); }
        ensurePathsIsMutable();
        paths_.set(index, value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       * @param value The paths to add.
       * @return This builder for chaining.
       */
      public Builder addPaths(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        ensurePathsIsMutable();
        paths_.add(value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       * @param values The paths to add.
       * @return This builder for chaining.
       */
      public Builder addAllPaths(
          Iterable<String> values) {
        ensurePathsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, paths_);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearPaths() {
        paths_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       * @param value The bytes of the paths to add.
       * @return This builder for chaining.
       */
      public Builder addPathsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensurePathsIsMutable();
        paths_.add(value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList predicates_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensurePredicatesIsMutable() {
        if (!predicates_.isModifiable()) {
          predicates_ = new com.google.protobuf.LazyStringArrayList(predicates_);
        }
        bitField0_ |= 0x00000010;
      }
      /**
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       *
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       * @return A list containing the predicates.
       */
      public com.google.protobuf.ProtocolStringList
          getPredicatesList() {
        predicates_.makeImmutable();
        return predicates_;
      }
      /**
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       *
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       * @return The count of predicates.
       */
      public int getPredicatesCount() {
        return predicates_.size();
      }
      /**
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       *
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       * @param index The index of the element to return.
       * @return The predicates at the given index.
       */
      public String getPredicates(int index) {
        return predicates_.get(index);
      }
      /**
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       *
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       * @param index The index of the value to return.
       * @return The bytes of the predicates at the given index.
       */
      public com.google.protobuf.ByteString
          getPredicatesBytes(int index) {
        return predicates_.getByteString(index);
      }
      /**
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       *
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       * @param index The index to set the value at.
       * @param value The predicates to set.
       * @return This builder for chaining.
       */
      public Builder setPredicates(
          int index, String value) {
        if (value == null) { throw new NullPointerException(); }
        ensurePredicatesIsMutable();
        predicates_.set(index, value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       *
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       * @param value The predicates to add.
       * @return This builder for chaining.
       */
      public Builder addPredicates(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        ensurePredicatesIsMutable();
        predicates_.add(value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       *
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       * @param values The predicates to add.
       * @return This builder for chaining.
       */
      public Builder addAllPredicates(
          Iterable<String> values) {
        ensurePredicatesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, predicates_);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       *
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearPredicates() {
        predicates_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       *
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       * @param value The bytes of the predicates to add.
       * @return This builder for chaining.
       */
      public Builder addPredicatesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensurePredicatesIsMutable();
        predicates_.add(value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Read.DataSource)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Read.DataSource)
    private static final org.apache.spark.connect.proto.Read.DataSource DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.connect.proto.Read.DataSource();
    }

    public static org.apache.spark.connect.proto.Read.DataSource getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DataSource>
        PARSER = new com.google.protobuf.AbstractParser<DataSource>() {
      @Override
      public DataSource parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<DataSource> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<DataSource> getParserForType() {
      return PARSER;
    }

    @Override
    public org.apache.spark.connect.proto.Read.DataSource getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int readTypeCase_ = 0;
  @SuppressWarnings("serial")
  private Object readType_;
  public enum ReadTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          InternalOneOfEnum {
    NAMED_TABLE(1),
    DATA_SOURCE(2),
    READTYPE_NOT_SET(0);
    private final int value;
    private ReadTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static ReadTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static ReadTypeCase forNumber(int value) {
      switch (value) {
        case 1: return NAMED_TABLE;
        case 2: return DATA_SOURCE;
        case 0: return READTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ReadTypeCase
  getReadTypeCase() {
    return ReadTypeCase.forNumber(
        readTypeCase_);
  }

  public static final int NAMED_TABLE_FIELD_NUMBER = 1;
  /**
   * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
   * @return Whether the namedTable field is set.
   */
  @Override
  public boolean hasNamedTable() {
    return readTypeCase_ == 1;
  }
  /**
   * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
   * @return The namedTable.
   */
  @Override
  public org.apache.spark.connect.proto.Read.NamedTable getNamedTable() {
    if (readTypeCase_ == 1) {
       return (org.apache.spark.connect.proto.Read.NamedTable) readType_;
    }
    return org.apache.spark.connect.proto.Read.NamedTable.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Read.NamedTableOrBuilder getNamedTableOrBuilder() {
    if (readTypeCase_ == 1) {
       return (org.apache.spark.connect.proto.Read.NamedTable) readType_;
    }
    return org.apache.spark.connect.proto.Read.NamedTable.getDefaultInstance();
  }

  public static final int DATA_SOURCE_FIELD_NUMBER = 2;
  /**
   * <code>.spark.connect.Read.DataSource data_source = 2;</code>
   * @return Whether the dataSource field is set.
   */
  @Override
  public boolean hasDataSource() {
    return readTypeCase_ == 2;
  }
  /**
   * <code>.spark.connect.Read.DataSource data_source = 2;</code>
   * @return The dataSource.
   */
  @Override
  public org.apache.spark.connect.proto.Read.DataSource getDataSource() {
    if (readTypeCase_ == 2) {
       return (org.apache.spark.connect.proto.Read.DataSource) readType_;
    }
    return org.apache.spark.connect.proto.Read.DataSource.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Read.DataSource data_source = 2;</code>
   */
  @Override
  public org.apache.spark.connect.proto.Read.DataSourceOrBuilder getDataSourceOrBuilder() {
    if (readTypeCase_ == 2) {
       return (org.apache.spark.connect.proto.Read.DataSource) readType_;
    }
    return org.apache.spark.connect.proto.Read.DataSource.getDefaultInstance();
  }

  public static final int IS_STREAMING_FIELD_NUMBER = 3;
  private boolean isStreaming_ = false;
  /**
   * <pre>
   * (Optional) Indicates if this is a streaming read.
   * </pre>
   *
   * <code>bool is_streaming = 3;</code>
   * @return The isStreaming.
   */
  @Override
  public boolean getIsStreaming() {
    return isStreaming_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (readTypeCase_ == 1) {
      output.writeMessage(1, (org.apache.spark.connect.proto.Read.NamedTable) readType_);
    }
    if (readTypeCase_ == 2) {
      output.writeMessage(2, (org.apache.spark.connect.proto.Read.DataSource) readType_);
    }
    if (isStreaming_ != false) {
      output.writeBool(3, isStreaming_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (readTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.apache.spark.connect.proto.Read.NamedTable) readType_);
    }
    if (readTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.apache.spark.connect.proto.Read.DataSource) readType_);
    }
    if (isStreaming_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, isStreaming_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.Read)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.Read other = (org.apache.spark.connect.proto.Read) obj;

    if (getIsStreaming()
        != other.getIsStreaming()) return false;
    if (!getReadTypeCase().equals(other.getReadTypeCase())) return false;
    switch (readTypeCase_) {
      case 1:
        if (!getNamedTable()
            .equals(other.getNamedTable())) return false;
        break;
      case 2:
        if (!getDataSource()
            .equals(other.getDataSource())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + IS_STREAMING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIsStreaming());
    switch (readTypeCase_) {
      case 1:
        hash = (37 * hash) + NAMED_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getNamedTable().hashCode();
        break;
      case 2:
        hash = (37 * hash) + DATA_SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getDataSource().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.Read parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.Read parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Read parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.Read parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Read parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.Read parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Read parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.Read parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.Read parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.Read parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.Read parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.Read parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.Read prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Relation that reads from a file / table or other data source. Does not have additional
   * inputs.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Read}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.Read)
      org.apache.spark.connect.proto.ReadOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.Read.class, org.apache.spark.connect.proto.Read.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.Read.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (namedTableBuilder_ != null) {
        namedTableBuilder_.clear();
      }
      if (dataSourceBuilder_ != null) {
        dataSourceBuilder_.clear();
      }
      isStreaming_ = false;
      readTypeCase_ = 0;
      readType_ = null;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Relations.internal_static_spark_connect_Read_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.Read getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.Read.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.Read build() {
      org.apache.spark.connect.proto.Read result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.Read buildPartial() {
      org.apache.spark.connect.proto.Read result = new org.apache.spark.connect.proto.Read(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.spark.connect.proto.Read result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.isStreaming_ = isStreaming_;
      }
    }

    private void buildPartialOneofs(org.apache.spark.connect.proto.Read result) {
      result.readTypeCase_ = readTypeCase_;
      result.readType_ = this.readType_;
      if (readTypeCase_ == 1 &&
          namedTableBuilder_ != null) {
        result.readType_ = namedTableBuilder_.build();
      }
      if (readTypeCase_ == 2 &&
          dataSourceBuilder_ != null) {
        result.readType_ = dataSourceBuilder_.build();
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.Read) {
        return mergeFrom((org.apache.spark.connect.proto.Read)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.Read other) {
      if (other == org.apache.spark.connect.proto.Read.getDefaultInstance()) return this;
      if (other.getIsStreaming() != false) {
        setIsStreaming(other.getIsStreaming());
      }
      switch (other.getReadTypeCase()) {
        case NAMED_TABLE: {
          mergeNamedTable(other.getNamedTable());
          break;
        }
        case DATA_SOURCE: {
          mergeDataSource(other.getDataSource());
          break;
        }
        case READTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getNamedTableFieldBuilder().getBuilder(),
                  extensionRegistry);
              readTypeCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getDataSourceFieldBuilder().getBuilder(),
                  extensionRegistry);
              readTypeCase_ = 2;
              break;
            } // case 18
            case 24: {
              isStreaming_ = input.readBool();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int readTypeCase_ = 0;
    private Object readType_;
    public ReadTypeCase
        getReadTypeCase() {
      return ReadTypeCase.forNumber(
          readTypeCase_);
    }

    public Builder clearReadType() {
      readTypeCase_ = 0;
      readType_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Read.NamedTable, org.apache.spark.connect.proto.Read.NamedTable.Builder, org.apache.spark.connect.proto.Read.NamedTableOrBuilder> namedTableBuilder_;
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     * @return Whether the namedTable field is set.
     */
    @Override
    public boolean hasNamedTable() {
      return readTypeCase_ == 1;
    }
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     * @return The namedTable.
     */
    @Override
    public org.apache.spark.connect.proto.Read.NamedTable getNamedTable() {
      if (namedTableBuilder_ == null) {
        if (readTypeCase_ == 1) {
          return (org.apache.spark.connect.proto.Read.NamedTable) readType_;
        }
        return org.apache.spark.connect.proto.Read.NamedTable.getDefaultInstance();
      } else {
        if (readTypeCase_ == 1) {
          return namedTableBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Read.NamedTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     */
    public Builder setNamedTable(org.apache.spark.connect.proto.Read.NamedTable value) {
      if (namedTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        readType_ = value;
        onChanged();
      } else {
        namedTableBuilder_.setMessage(value);
      }
      readTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     */
    public Builder setNamedTable(
        org.apache.spark.connect.proto.Read.NamedTable.Builder builderForValue) {
      if (namedTableBuilder_ == null) {
        readType_ = builderForValue.build();
        onChanged();
      } else {
        namedTableBuilder_.setMessage(builderForValue.build());
      }
      readTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     */
    public Builder mergeNamedTable(org.apache.spark.connect.proto.Read.NamedTable value) {
      if (namedTableBuilder_ == null) {
        if (readTypeCase_ == 1 &&
            readType_ != org.apache.spark.connect.proto.Read.NamedTable.getDefaultInstance()) {
          readType_ = org.apache.spark.connect.proto.Read.NamedTable.newBuilder((org.apache.spark.connect.proto.Read.NamedTable) readType_)
              .mergeFrom(value).buildPartial();
        } else {
          readType_ = value;
        }
        onChanged();
      } else {
        if (readTypeCase_ == 1) {
          namedTableBuilder_.mergeFrom(value);
        } else {
          namedTableBuilder_.setMessage(value);
        }
      }
      readTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     */
    public Builder clearNamedTable() {
      if (namedTableBuilder_ == null) {
        if (readTypeCase_ == 1) {
          readTypeCase_ = 0;
          readType_ = null;
          onChanged();
        }
      } else {
        if (readTypeCase_ == 1) {
          readTypeCase_ = 0;
          readType_ = null;
        }
        namedTableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     */
    public org.apache.spark.connect.proto.Read.NamedTable.Builder getNamedTableBuilder() {
      return getNamedTableFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     */
    @Override
    public org.apache.spark.connect.proto.Read.NamedTableOrBuilder getNamedTableOrBuilder() {
      if ((readTypeCase_ == 1) && (namedTableBuilder_ != null)) {
        return namedTableBuilder_.getMessageOrBuilder();
      } else {
        if (readTypeCase_ == 1) {
          return (org.apache.spark.connect.proto.Read.NamedTable) readType_;
        }
        return org.apache.spark.connect.proto.Read.NamedTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Read.NamedTable, org.apache.spark.connect.proto.Read.NamedTable.Builder, org.apache.spark.connect.proto.Read.NamedTableOrBuilder> 
        getNamedTableFieldBuilder() {
      if (namedTableBuilder_ == null) {
        if (!(readTypeCase_ == 1)) {
          readType_ = org.apache.spark.connect.proto.Read.NamedTable.getDefaultInstance();
        }
        namedTableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Read.NamedTable, org.apache.spark.connect.proto.Read.NamedTable.Builder, org.apache.spark.connect.proto.Read.NamedTableOrBuilder>(
                (org.apache.spark.connect.proto.Read.NamedTable) readType_,
                getParentForChildren(),
                isClean());
        readType_ = null;
      }
      readTypeCase_ = 1;
      onChanged();
      return namedTableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Read.DataSource, org.apache.spark.connect.proto.Read.DataSource.Builder, org.apache.spark.connect.proto.Read.DataSourceOrBuilder> dataSourceBuilder_;
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     * @return Whether the dataSource field is set.
     */
    @Override
    public boolean hasDataSource() {
      return readTypeCase_ == 2;
    }
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     * @return The dataSource.
     */
    @Override
    public org.apache.spark.connect.proto.Read.DataSource getDataSource() {
      if (dataSourceBuilder_ == null) {
        if (readTypeCase_ == 2) {
          return (org.apache.spark.connect.proto.Read.DataSource) readType_;
        }
        return org.apache.spark.connect.proto.Read.DataSource.getDefaultInstance();
      } else {
        if (readTypeCase_ == 2) {
          return dataSourceBuilder_.getMessage();
        }
        return org.apache.spark.connect.proto.Read.DataSource.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     */
    public Builder setDataSource(org.apache.spark.connect.proto.Read.DataSource value) {
      if (dataSourceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        readType_ = value;
        onChanged();
      } else {
        dataSourceBuilder_.setMessage(value);
      }
      readTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     */
    public Builder setDataSource(
        org.apache.spark.connect.proto.Read.DataSource.Builder builderForValue) {
      if (dataSourceBuilder_ == null) {
        readType_ = builderForValue.build();
        onChanged();
      } else {
        dataSourceBuilder_.setMessage(builderForValue.build());
      }
      readTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     */
    public Builder mergeDataSource(org.apache.spark.connect.proto.Read.DataSource value) {
      if (dataSourceBuilder_ == null) {
        if (readTypeCase_ == 2 &&
            readType_ != org.apache.spark.connect.proto.Read.DataSource.getDefaultInstance()) {
          readType_ = org.apache.spark.connect.proto.Read.DataSource.newBuilder((org.apache.spark.connect.proto.Read.DataSource) readType_)
              .mergeFrom(value).buildPartial();
        } else {
          readType_ = value;
        }
        onChanged();
      } else {
        if (readTypeCase_ == 2) {
          dataSourceBuilder_.mergeFrom(value);
        } else {
          dataSourceBuilder_.setMessage(value);
        }
      }
      readTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     */
    public Builder clearDataSource() {
      if (dataSourceBuilder_ == null) {
        if (readTypeCase_ == 2) {
          readTypeCase_ = 0;
          readType_ = null;
          onChanged();
        }
      } else {
        if (readTypeCase_ == 2) {
          readTypeCase_ = 0;
          readType_ = null;
        }
        dataSourceBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     */
    public org.apache.spark.connect.proto.Read.DataSource.Builder getDataSourceBuilder() {
      return getDataSourceFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     */
    @Override
    public org.apache.spark.connect.proto.Read.DataSourceOrBuilder getDataSourceOrBuilder() {
      if ((readTypeCase_ == 2) && (dataSourceBuilder_ != null)) {
        return dataSourceBuilder_.getMessageOrBuilder();
      } else {
        if (readTypeCase_ == 2) {
          return (org.apache.spark.connect.proto.Read.DataSource) readType_;
        }
        return org.apache.spark.connect.proto.Read.DataSource.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.Read.DataSource, org.apache.spark.connect.proto.Read.DataSource.Builder, org.apache.spark.connect.proto.Read.DataSourceOrBuilder> 
        getDataSourceFieldBuilder() {
      if (dataSourceBuilder_ == null) {
        if (!(readTypeCase_ == 2)) {
          readType_ = org.apache.spark.connect.proto.Read.DataSource.getDefaultInstance();
        }
        dataSourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.Read.DataSource, org.apache.spark.connect.proto.Read.DataSource.Builder, org.apache.spark.connect.proto.Read.DataSourceOrBuilder>(
                (org.apache.spark.connect.proto.Read.DataSource) readType_,
                getParentForChildren(),
                isClean());
        readType_ = null;
      }
      readTypeCase_ = 2;
      onChanged();
      return dataSourceBuilder_;
    }

    private boolean isStreaming_ ;
    /**
     * <pre>
     * (Optional) Indicates if this is a streaming read.
     * </pre>
     *
     * <code>bool is_streaming = 3;</code>
     * @return The isStreaming.
     */
    @Override
    public boolean getIsStreaming() {
      return isStreaming_;
    }
    /**
     * <pre>
     * (Optional) Indicates if this is a streaming read.
     * </pre>
     *
     * <code>bool is_streaming = 3;</code>
     * @param value The isStreaming to set.
     * @return This builder for chaining.
     */
    public Builder setIsStreaming(boolean value) {

      isStreaming_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Indicates if this is a streaming read.
     * </pre>
     *
     * <code>bool is_streaming = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsStreaming() {
      bitField0_ = (bitField0_ & ~0x00000004);
      isStreaming_ = false;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.Read)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.Read)
  private static final org.apache.spark.connect.proto.Read DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.Read();
  }

  public static org.apache.spark.connect.proto.Read getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Read>
      PARSER = new com.google.protobuf.AbstractParser<Read>() {
    @Override
    public Read parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Read> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<Read> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.Read getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

