// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/commands.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * Protobuf type {@code spark.connect.WriteStreamOperationStartResult}
 */
public final class WriteStreamOperationStartResult extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.WriteStreamOperationStartResult)
    WriteStreamOperationStartResultOrBuilder {
private static final long serialVersionUID = 0L;
  // Use WriteStreamOperationStartResult.newBuilder() to construct.
  private WriteStreamOperationStartResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WriteStreamOperationStartResult() {
    name_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new WriteStreamOperationStartResult();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStartResult_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStartResult_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.spark.connect.proto.WriteStreamOperationStartResult.class, org.apache.spark.connect.proto.WriteStreamOperationStartResult.Builder.class);
  }

  public static final int QUERY_ID_FIELD_NUMBER = 1;
  private org.apache.spark.connect.proto.StreamingQueryInstanceId queryId_;
  /**
   * <pre>
   * (Required) Query instance. See `StreamingQueryInstanceId`.
   * </pre>
   *
   * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
   * @return Whether the queryId field is set.
   */
  @Override
  public boolean hasQueryId() {
    return queryId_ != null;
  }
  /**
   * <pre>
   * (Required) Query instance. See `StreamingQueryInstanceId`.
   * </pre>
   *
   * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
   * @return The queryId.
   */
  @Override
  public org.apache.spark.connect.proto.StreamingQueryInstanceId getQueryId() {
    return queryId_ == null ? org.apache.spark.connect.proto.StreamingQueryInstanceId.getDefaultInstance() : queryId_;
  }
  /**
   * <pre>
   * (Required) Query instance. See `StreamingQueryInstanceId`.
   * </pre>
   *
   * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
   */
  @Override
  public org.apache.spark.connect.proto.StreamingQueryInstanceIdOrBuilder getQueryIdOrBuilder() {
    return queryId_ == null ? org.apache.spark.connect.proto.StreamingQueryInstanceId.getDefaultInstance() : queryId_;
  }

  public static final int NAME_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile Object name_ = "";
  /**
   * <pre>
   * An optional query name.
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The name.
   */
  @Override
  public String getName() {
    Object ref = name_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * An optional query name.
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The bytes for name.
   */
  @Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    Object ref = name_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (queryId_ != null) {
      output.writeMessage(1, getQueryId());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (queryId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getQueryId());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.spark.connect.proto.WriteStreamOperationStartResult)) {
      return super.equals(obj);
    }
    org.apache.spark.connect.proto.WriteStreamOperationStartResult other = (org.apache.spark.connect.proto.WriteStreamOperationStartResult) obj;

    if (hasQueryId() != other.hasQueryId()) return false;
    if (hasQueryId()) {
      if (!getQueryId()
          .equals(other.getQueryId())) return false;
    }
    if (!getName()
        .equals(other.getName())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasQueryId()) {
      hash = (37 * hash) + QUERY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getQueryId().hashCode();
    }
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.spark.connect.proto.WriteStreamOperationStartResult prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code spark.connect.WriteStreamOperationStartResult}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.WriteStreamOperationStartResult)
      org.apache.spark.connect.proto.WriteStreamOperationStartResultOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStartResult_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStartResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.connect.proto.WriteStreamOperationStartResult.class, org.apache.spark.connect.proto.WriteStreamOperationStartResult.Builder.class);
    }

    // Construct using org.apache.spark.connect.proto.WriteStreamOperationStartResult.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      queryId_ = null;
      if (queryIdBuilder_ != null) {
        queryIdBuilder_.dispose();
        queryIdBuilder_ = null;
      }
      name_ = "";
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStartResult_descriptor;
    }

    @Override
    public org.apache.spark.connect.proto.WriteStreamOperationStartResult getDefaultInstanceForType() {
      return org.apache.spark.connect.proto.WriteStreamOperationStartResult.getDefaultInstance();
    }

    @Override
    public org.apache.spark.connect.proto.WriteStreamOperationStartResult build() {
      org.apache.spark.connect.proto.WriteStreamOperationStartResult result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.spark.connect.proto.WriteStreamOperationStartResult buildPartial() {
      org.apache.spark.connect.proto.WriteStreamOperationStartResult result = new org.apache.spark.connect.proto.WriteStreamOperationStartResult(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.spark.connect.proto.WriteStreamOperationStartResult result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.queryId_ = queryIdBuilder_ == null
            ? queryId_
            : queryIdBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.name_ = name_;
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.spark.connect.proto.WriteStreamOperationStartResult) {
        return mergeFrom((org.apache.spark.connect.proto.WriteStreamOperationStartResult)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.spark.connect.proto.WriteStreamOperationStartResult other) {
      if (other == org.apache.spark.connect.proto.WriteStreamOperationStartResult.getDefaultInstance()) return this;
      if (other.hasQueryId()) {
        mergeQueryId(other.getQueryId());
      }
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getQueryIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              name_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.apache.spark.connect.proto.StreamingQueryInstanceId queryId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StreamingQueryInstanceId, org.apache.spark.connect.proto.StreamingQueryInstanceId.Builder, org.apache.spark.connect.proto.StreamingQueryInstanceIdOrBuilder> queryIdBuilder_;
    /**
     * <pre>
     * (Required) Query instance. See `StreamingQueryInstanceId`.
     * </pre>
     *
     * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
     * @return Whether the queryId field is set.
     */
    public boolean hasQueryId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Required) Query instance. See `StreamingQueryInstanceId`.
     * </pre>
     *
     * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
     * @return The queryId.
     */
    public org.apache.spark.connect.proto.StreamingQueryInstanceId getQueryId() {
      if (queryIdBuilder_ == null) {
        return queryId_ == null ? org.apache.spark.connect.proto.StreamingQueryInstanceId.getDefaultInstance() : queryId_;
      } else {
        return queryIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Query instance. See `StreamingQueryInstanceId`.
     * </pre>
     *
     * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
     */
    public Builder setQueryId(org.apache.spark.connect.proto.StreamingQueryInstanceId value) {
      if (queryIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        queryId_ = value;
      } else {
        queryIdBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Query instance. See `StreamingQueryInstanceId`.
     * </pre>
     *
     * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
     */
    public Builder setQueryId(
        org.apache.spark.connect.proto.StreamingQueryInstanceId.Builder builderForValue) {
      if (queryIdBuilder_ == null) {
        queryId_ = builderForValue.build();
      } else {
        queryIdBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Query instance. See `StreamingQueryInstanceId`.
     * </pre>
     *
     * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
     */
    public Builder mergeQueryId(org.apache.spark.connect.proto.StreamingQueryInstanceId value) {
      if (queryIdBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          queryId_ != null &&
          queryId_ != org.apache.spark.connect.proto.StreamingQueryInstanceId.getDefaultInstance()) {
          getQueryIdBuilder().mergeFrom(value);
        } else {
          queryId_ = value;
        }
      } else {
        queryIdBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Query instance. See `StreamingQueryInstanceId`.
     * </pre>
     *
     * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
     */
    public Builder clearQueryId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      queryId_ = null;
      if (queryIdBuilder_ != null) {
        queryIdBuilder_.dispose();
        queryIdBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Query instance. See `StreamingQueryInstanceId`.
     * </pre>
     *
     * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
     */
    public org.apache.spark.connect.proto.StreamingQueryInstanceId.Builder getQueryIdBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getQueryIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Query instance. See `StreamingQueryInstanceId`.
     * </pre>
     *
     * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
     */
    public org.apache.spark.connect.proto.StreamingQueryInstanceIdOrBuilder getQueryIdOrBuilder() {
      if (queryIdBuilder_ != null) {
        return queryIdBuilder_.getMessageOrBuilder();
      } else {
        return queryId_ == null ?
            org.apache.spark.connect.proto.StreamingQueryInstanceId.getDefaultInstance() : queryId_;
      }
    }
    /**
     * <pre>
     * (Required) Query instance. See `StreamingQueryInstanceId`.
     * </pre>
     *
     * <code>.spark.connect.StreamingQueryInstanceId query_id = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.spark.connect.proto.StreamingQueryInstanceId, org.apache.spark.connect.proto.StreamingQueryInstanceId.Builder, org.apache.spark.connect.proto.StreamingQueryInstanceIdOrBuilder> 
        getQueryIdFieldBuilder() {
      if (queryIdBuilder_ == null) {
        queryIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.spark.connect.proto.StreamingQueryInstanceId, org.apache.spark.connect.proto.StreamingQueryInstanceId.Builder, org.apache.spark.connect.proto.StreamingQueryInstanceIdOrBuilder>(
                getQueryId(),
                getParentForChildren(),
                isClean());
        queryId_ = null;
      }
      return queryIdBuilder_;
    }

    private Object name_ = "";
    /**
     * <pre>
     * An optional query name.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    public String getName() {
      Object ref = name_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * An optional query name.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * An optional query name.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      name_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional query name.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      name_ = getDefaultInstance().getName();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional query name.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      name_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.WriteStreamOperationStartResult)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.WriteStreamOperationStartResult)
  private static final org.apache.spark.connect.proto.WriteStreamOperationStartResult DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.spark.connect.proto.WriteStreamOperationStartResult();
  }

  public static org.apache.spark.connect.proto.WriteStreamOperationStartResult getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WriteStreamOperationStartResult>
      PARSER = new com.google.protobuf.AbstractParser<WriteStreamOperationStartResult>() {
    @Override
    public WriteStreamOperationStartResult parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<WriteStreamOperationStartResult> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<WriteStreamOperationStartResult> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.spark.connect.proto.WriteStreamOperationStartResult getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

