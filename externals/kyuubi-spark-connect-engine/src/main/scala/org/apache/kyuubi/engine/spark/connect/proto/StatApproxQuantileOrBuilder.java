// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface StatApproxQuantileOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.StatApproxQuantile)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  org.apache.spark.connect.proto.Relation getInput();
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  org.apache.spark.connect.proto.RelationOrBuilder getInputOrBuilder();

  /**
   * <pre>
   * (Required) The names of the numerical columns.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @return A list containing the cols.
   */
  java.util.List<String>
      getColsList();
  /**
   * <pre>
   * (Required) The names of the numerical columns.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @return The count of cols.
   */
  int getColsCount();
  /**
   * <pre>
   * (Required) The names of the numerical columns.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @param index The index of the element to return.
   * @return The cols at the given index.
   */
  String getCols(int index);
  /**
   * <pre>
   * (Required) The names of the numerical columns.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the cols at the given index.
   */
  com.google.protobuf.ByteString
      getColsBytes(int index);

  /**
   * <pre>
   * (Required) A list of quantile probabilities.
   *
   * Each number must belong to [0, 1].
   * For example 0 is the minimum, 0.5 is the median, 1 is the maximum.
   * </pre>
   *
   * <code>repeated double probabilities = 3;</code>
   * @return A list containing the probabilities.
   */
  java.util.List<Double> getProbabilitiesList();
  /**
   * <pre>
   * (Required) A list of quantile probabilities.
   *
   * Each number must belong to [0, 1].
   * For example 0 is the minimum, 0.5 is the median, 1 is the maximum.
   * </pre>
   *
   * <code>repeated double probabilities = 3;</code>
   * @return The count of probabilities.
   */
  int getProbabilitiesCount();
  /**
   * <pre>
   * (Required) A list of quantile probabilities.
   *
   * Each number must belong to [0, 1].
   * For example 0 is the minimum, 0.5 is the median, 1 is the maximum.
   * </pre>
   *
   * <code>repeated double probabilities = 3;</code>
   * @param index The index of the element to return.
   * @return The probabilities at the given index.
   */
  double getProbabilities(int index);

  /**
   * <pre>
   * (Required) The relative target precision to achieve (greater than or equal to 0).
   *
   * If set to zero, the exact quantiles are computed, which could be very expensive.
   * Note that values greater than 1 are accepted but give the same result as 1.
   * </pre>
   *
   * <code>double relative_error = 4;</code>
   * @return The relativeError.
   */
  double getRelativeError();
}
