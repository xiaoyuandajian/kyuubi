// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/commands.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * A [[Command]] is an operation that is executed by the server that does not directly consume or
 * produce a relational result.
 * </pre>
 *
 * Protobuf type {@code spark.connect.Command}
 */
public final class Command extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.Command)
    CommandOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Command.newBuilder() to construct.
  private Command(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Command() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Command();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_Command_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_Command_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.proto.Command.class, org.apache.kyuubi.engine.spark.connect.proto.Command.Builder.class);
  }

  private int commandTypeCase_ = 0;
  private java.lang.Object commandType_;
  public enum CommandTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    REGISTER_FUNCTION(1),
    WRITE_OPERATION(2),
    CREATE_DATAFRAME_VIEW(3),
    WRITE_OPERATION_V2(4),
    SQL_COMMAND(5),
    WRITE_STREAM_OPERATION_START(6),
    STREAMING_QUERY_COMMAND(7),
    GET_RESOURCES_COMMAND(8),
    STREAMING_QUERY_MANAGER_COMMAND(9),
    REGISTER_TABLE_FUNCTION(10),
    EXTENSION(999),
    COMMANDTYPE_NOT_SET(0);
    private final int value;
    private CommandTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CommandTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static CommandTypeCase forNumber(int value) {
      switch (value) {
        case 1: return REGISTER_FUNCTION;
        case 2: return WRITE_OPERATION;
        case 3: return CREATE_DATAFRAME_VIEW;
        case 4: return WRITE_OPERATION_V2;
        case 5: return SQL_COMMAND;
        case 6: return WRITE_STREAM_OPERATION_START;
        case 7: return STREAMING_QUERY_COMMAND;
        case 8: return GET_RESOURCES_COMMAND;
        case 9: return STREAMING_QUERY_MANAGER_COMMAND;
        case 10: return REGISTER_TABLE_FUNCTION;
        case 999: return EXTENSION;
        case 0: return COMMANDTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public CommandTypeCase
  getCommandTypeCase() {
    return CommandTypeCase.forNumber(
        commandTypeCase_);
  }

  public static final int REGISTER_FUNCTION_FIELD_NUMBER = 1;
  /**
   * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
   * @return Whether the registerFunction field is set.
   */
  @java.lang.Override
  public boolean hasRegisterFunction() {
    return commandTypeCase_ == 1;
  }
  /**
   * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
   * @return The registerFunction.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction getRegisterFunction() {
    if (commandTypeCase_ == 1) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder getRegisterFunctionOrBuilder() {
    if (commandTypeCase_ == 1) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
  }

  public static final int WRITE_OPERATION_FIELD_NUMBER = 2;
  /**
   * <code>.spark.connect.WriteOperation write_operation = 2;</code>
   * @return Whether the writeOperation field is set.
   */
  @java.lang.Override
  public boolean hasWriteOperation() {
    return commandTypeCase_ == 2;
  }
  /**
   * <code>.spark.connect.WriteOperation write_operation = 2;</code>
   * @return The writeOperation.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.WriteOperation getWriteOperation() {
    if (commandTypeCase_ == 2) {
       return (org.apache.kyuubi.engine.spark.connect.proto.WriteOperation) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.WriteOperation write_operation = 2;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.WriteOperationOrBuilder getWriteOperationOrBuilder() {
    if (commandTypeCase_ == 2) {
       return (org.apache.kyuubi.engine.spark.connect.proto.WriteOperation) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.getDefaultInstance();
  }

  public static final int CREATE_DATAFRAME_VIEW_FIELD_NUMBER = 3;
  /**
   * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
   * @return Whether the createDataframeView field is set.
   */
  @java.lang.Override
  public boolean hasCreateDataframeView() {
    return commandTypeCase_ == 3;
  }
  /**
   * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
   * @return The createDataframeView.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand getCreateDataframeView() {
    if (commandTypeCase_ == 3) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommandOrBuilder getCreateDataframeViewOrBuilder() {
    if (commandTypeCase_ == 3) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.getDefaultInstance();
  }

  public static final int WRITE_OPERATION_V2_FIELD_NUMBER = 4;
  /**
   * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
   * @return Whether the writeOperationV2 field is set.
   */
  @java.lang.Override
  public boolean hasWriteOperationV2() {
    return commandTypeCase_ == 4;
  }
  /**
   * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
   * @return The writeOperationV2.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2 getWriteOperationV2() {
    if (commandTypeCase_ == 4) {
       return (org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2OrBuilder getWriteOperationV2OrBuilder() {
    if (commandTypeCase_ == 4) {
       return (org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.getDefaultInstance();
  }

  public static final int SQL_COMMAND_FIELD_NUMBER = 5;
  /**
   * <code>.spark.connect.SqlCommand sql_command = 5;</code>
   * @return Whether the sqlCommand field is set.
   */
  @java.lang.Override
  public boolean hasSqlCommand() {
    return commandTypeCase_ == 5;
  }
  /**
   * <code>.spark.connect.SqlCommand sql_command = 5;</code>
   * @return The sqlCommand.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.SqlCommand getSqlCommand() {
    if (commandTypeCase_ == 5) {
       return (org.apache.kyuubi.engine.spark.connect.proto.SqlCommand) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.SqlCommand sql_command = 5;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.SqlCommandOrBuilder getSqlCommandOrBuilder() {
    if (commandTypeCase_ == 5) {
       return (org.apache.kyuubi.engine.spark.connect.proto.SqlCommand) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.getDefaultInstance();
  }

  public static final int WRITE_STREAM_OPERATION_START_FIELD_NUMBER = 6;
  /**
   * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
   * @return Whether the writeStreamOperationStart field is set.
   */
  @java.lang.Override
  public boolean hasWriteStreamOperationStart() {
    return commandTypeCase_ == 6;
  }
  /**
   * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
   * @return The writeStreamOperationStart.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart getWriteStreamOperationStart() {
    if (commandTypeCase_ == 6) {
       return (org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStartOrBuilder getWriteStreamOperationStartOrBuilder() {
    if (commandTypeCase_ == 6) {
       return (org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.getDefaultInstance();
  }

  public static final int STREAMING_QUERY_COMMAND_FIELD_NUMBER = 7;
  /**
   * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
   * @return Whether the streamingQueryCommand field is set.
   */
  @java.lang.Override
  public boolean hasStreamingQueryCommand() {
    return commandTypeCase_ == 7;
  }
  /**
   * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
   * @return The streamingQueryCommand.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand getStreamingQueryCommand() {
    if (commandTypeCase_ == 7) {
       return (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommandOrBuilder getStreamingQueryCommandOrBuilder() {
    if (commandTypeCase_ == 7) {
       return (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.getDefaultInstance();
  }

  public static final int GET_RESOURCES_COMMAND_FIELD_NUMBER = 8;
  /**
   * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
   * @return Whether the getResourcesCommand field is set.
   */
  @java.lang.Override
  public boolean hasGetResourcesCommand() {
    return commandTypeCase_ == 8;
  }
  /**
   * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
   * @return The getResourcesCommand.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand getGetResourcesCommand() {
    if (commandTypeCase_ == 8) {
       return (org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommandOrBuilder getGetResourcesCommandOrBuilder() {
    if (commandTypeCase_ == 8) {
       return (org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.getDefaultInstance();
  }

  public static final int STREAMING_QUERY_MANAGER_COMMAND_FIELD_NUMBER = 9;
  /**
   * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
   * @return Whether the streamingQueryManagerCommand field is set.
   */
  @java.lang.Override
  public boolean hasStreamingQueryManagerCommand() {
    return commandTypeCase_ == 9;
  }
  /**
   * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
   * @return The streamingQueryManagerCommand.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand getStreamingQueryManagerCommand() {
    if (commandTypeCase_ == 9) {
       return (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommandOrBuilder getStreamingQueryManagerCommandOrBuilder() {
    if (commandTypeCase_ == 9) {
       return (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.getDefaultInstance();
  }

  public static final int REGISTER_TABLE_FUNCTION_FIELD_NUMBER = 10;
  /**
   * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
   * @return Whether the registerTableFunction field is set.
   */
  @java.lang.Override
  public boolean hasRegisterTableFunction() {
    return commandTypeCase_ == 10;
  }
  /**
   * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
   * @return The registerTableFunction.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction getRegisterTableFunction() {
    if (commandTypeCase_ == 10) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunctionOrBuilder getRegisterTableFunctionOrBuilder() {
    if (commandTypeCase_ == 10) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction) commandType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
  }

  public static final int EXTENSION_FIELD_NUMBER = 999;
  /**
   * <pre>
   * This field is used to mark extensions to the protocol. When plugins generate arbitrary
   * Commands they can add them here. During the planning the correct resolution is done.
   * </pre>
   *
   * <code>.google.protobuf.Any extension = 999;</code>
   * @return Whether the extension field is set.
   */
  @java.lang.Override
  public boolean hasExtension() {
    return commandTypeCase_ == 999;
  }
  /**
   * <pre>
   * This field is used to mark extensions to the protocol. When plugins generate arbitrary
   * Commands they can add them here. During the planning the correct resolution is done.
   * </pre>
   *
   * <code>.google.protobuf.Any extension = 999;</code>
   * @return The extension.
   */
  @java.lang.Override
  public com.google.protobuf.Any getExtension() {
    if (commandTypeCase_ == 999) {
       return (com.google.protobuf.Any) commandType_;
    }
    return com.google.protobuf.Any.getDefaultInstance();
  }
  /**
   * <pre>
   * This field is used to mark extensions to the protocol. When plugins generate arbitrary
   * Commands they can add them here. During the planning the correct resolution is done.
   * </pre>
   *
   * <code>.google.protobuf.Any extension = 999;</code>
   */
  @java.lang.Override
  public com.google.protobuf.AnyOrBuilder getExtensionOrBuilder() {
    if (commandTypeCase_ == 999) {
       return (com.google.protobuf.Any) commandType_;
    }
    return com.google.protobuf.Any.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (commandTypeCase_ == 1) {
      output.writeMessage(1, (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) commandType_);
    }
    if (commandTypeCase_ == 2) {
      output.writeMessage(2, (org.apache.kyuubi.engine.spark.connect.proto.WriteOperation) commandType_);
    }
    if (commandTypeCase_ == 3) {
      output.writeMessage(3, (org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand) commandType_);
    }
    if (commandTypeCase_ == 4) {
      output.writeMessage(4, (org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2) commandType_);
    }
    if (commandTypeCase_ == 5) {
      output.writeMessage(5, (org.apache.kyuubi.engine.spark.connect.proto.SqlCommand) commandType_);
    }
    if (commandTypeCase_ == 6) {
      output.writeMessage(6, (org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart) commandType_);
    }
    if (commandTypeCase_ == 7) {
      output.writeMessage(7, (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand) commandType_);
    }
    if (commandTypeCase_ == 8) {
      output.writeMessage(8, (org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand) commandType_);
    }
    if (commandTypeCase_ == 9) {
      output.writeMessage(9, (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand) commandType_);
    }
    if (commandTypeCase_ == 10) {
      output.writeMessage(10, (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction) commandType_);
    }
    if (commandTypeCase_ == 999) {
      output.writeMessage(999, (com.google.protobuf.Any) commandType_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (commandTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) commandType_);
    }
    if (commandTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.apache.kyuubi.engine.spark.connect.proto.WriteOperation) commandType_);
    }
    if (commandTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand) commandType_);
    }
    if (commandTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2) commandType_);
    }
    if (commandTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.apache.kyuubi.engine.spark.connect.proto.SqlCommand) commandType_);
    }
    if (commandTypeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart) commandType_);
    }
    if (commandTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand) commandType_);
    }
    if (commandTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand) commandType_);
    }
    if (commandTypeCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand) commandType_);
    }
    if (commandTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction) commandType_);
    }
    if (commandTypeCase_ == 999) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(999, (com.google.protobuf.Any) commandType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Command)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.proto.Command other = (org.apache.kyuubi.engine.spark.connect.proto.Command) obj;

    if (!getCommandTypeCase().equals(other.getCommandTypeCase())) return false;
    switch (commandTypeCase_) {
      case 1:
        if (!getRegisterFunction()
            .equals(other.getRegisterFunction())) return false;
        break;
      case 2:
        if (!getWriteOperation()
            .equals(other.getWriteOperation())) return false;
        break;
      case 3:
        if (!getCreateDataframeView()
            .equals(other.getCreateDataframeView())) return false;
        break;
      case 4:
        if (!getWriteOperationV2()
            .equals(other.getWriteOperationV2())) return false;
        break;
      case 5:
        if (!getSqlCommand()
            .equals(other.getSqlCommand())) return false;
        break;
      case 6:
        if (!getWriteStreamOperationStart()
            .equals(other.getWriteStreamOperationStart())) return false;
        break;
      case 7:
        if (!getStreamingQueryCommand()
            .equals(other.getStreamingQueryCommand())) return false;
        break;
      case 8:
        if (!getGetResourcesCommand()
            .equals(other.getGetResourcesCommand())) return false;
        break;
      case 9:
        if (!getStreamingQueryManagerCommand()
            .equals(other.getStreamingQueryManagerCommand())) return false;
        break;
      case 10:
        if (!getRegisterTableFunction()
            .equals(other.getRegisterTableFunction())) return false;
        break;
      case 999:
        if (!getExtension()
            .equals(other.getExtension())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (commandTypeCase_) {
      case 1:
        hash = (37 * hash) + REGISTER_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getRegisterFunction().hashCode();
        break;
      case 2:
        hash = (37 * hash) + WRITE_OPERATION_FIELD_NUMBER;
        hash = (53 * hash) + getWriteOperation().hashCode();
        break;
      case 3:
        hash = (37 * hash) + CREATE_DATAFRAME_VIEW_FIELD_NUMBER;
        hash = (53 * hash) + getCreateDataframeView().hashCode();
        break;
      case 4:
        hash = (37 * hash) + WRITE_OPERATION_V2_FIELD_NUMBER;
        hash = (53 * hash) + getWriteOperationV2().hashCode();
        break;
      case 5:
        hash = (37 * hash) + SQL_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + getSqlCommand().hashCode();
        break;
      case 6:
        hash = (37 * hash) + WRITE_STREAM_OPERATION_START_FIELD_NUMBER;
        hash = (53 * hash) + getWriteStreamOperationStart().hashCode();
        break;
      case 7:
        hash = (37 * hash) + STREAMING_QUERY_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + getStreamingQueryCommand().hashCode();
        break;
      case 8:
        hash = (37 * hash) + GET_RESOURCES_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + getGetResourcesCommand().hashCode();
        break;
      case 9:
        hash = (37 * hash) + STREAMING_QUERY_MANAGER_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + getStreamingQueryManagerCommand().hashCode();
        break;
      case 10:
        hash = (37 * hash) + REGISTER_TABLE_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getRegisterTableFunction().hashCode();
        break;
      case 999:
        hash = (37 * hash) + EXTENSION_FIELD_NUMBER;
        hash = (53 * hash) + getExtension().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Command parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Command prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A [[Command]] is an operation that is executed by the server that does not directly consume or
   * produce a relational result.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Command}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.Command)
      org.apache.kyuubi.engine.spark.connect.proto.CommandOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_Command_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_Command_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Command.class, org.apache.kyuubi.engine.spark.connect.proto.Command.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.proto.Command.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (registerFunctionBuilder_ != null) {
        registerFunctionBuilder_.clear();
      }
      if (writeOperationBuilder_ != null) {
        writeOperationBuilder_.clear();
      }
      if (createDataframeViewBuilder_ != null) {
        createDataframeViewBuilder_.clear();
      }
      if (writeOperationV2Builder_ != null) {
        writeOperationV2Builder_.clear();
      }
      if (sqlCommandBuilder_ != null) {
        sqlCommandBuilder_.clear();
      }
      if (writeStreamOperationStartBuilder_ != null) {
        writeStreamOperationStartBuilder_.clear();
      }
      if (streamingQueryCommandBuilder_ != null) {
        streamingQueryCommandBuilder_.clear();
      }
      if (getResourcesCommandBuilder_ != null) {
        getResourcesCommandBuilder_.clear();
      }
      if (streamingQueryManagerCommandBuilder_ != null) {
        streamingQueryManagerCommandBuilder_.clear();
      }
      if (registerTableFunctionBuilder_ != null) {
        registerTableFunctionBuilder_.clear();
      }
      if (extensionBuilder_ != null) {
        extensionBuilder_.clear();
      }
      commandTypeCase_ = 0;
      commandType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_Command_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Command getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.Command.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Command build() {
      org.apache.kyuubi.engine.spark.connect.proto.Command result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Command buildPartial() {
      org.apache.kyuubi.engine.spark.connect.proto.Command result = new org.apache.kyuubi.engine.spark.connect.proto.Command(this);
      if (commandTypeCase_ == 1) {
        if (registerFunctionBuilder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = registerFunctionBuilder_.build();
        }
      }
      if (commandTypeCase_ == 2) {
        if (writeOperationBuilder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = writeOperationBuilder_.build();
        }
      }
      if (commandTypeCase_ == 3) {
        if (createDataframeViewBuilder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = createDataframeViewBuilder_.build();
        }
      }
      if (commandTypeCase_ == 4) {
        if (writeOperationV2Builder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = writeOperationV2Builder_.build();
        }
      }
      if (commandTypeCase_ == 5) {
        if (sqlCommandBuilder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = sqlCommandBuilder_.build();
        }
      }
      if (commandTypeCase_ == 6) {
        if (writeStreamOperationStartBuilder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = writeStreamOperationStartBuilder_.build();
        }
      }
      if (commandTypeCase_ == 7) {
        if (streamingQueryCommandBuilder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = streamingQueryCommandBuilder_.build();
        }
      }
      if (commandTypeCase_ == 8) {
        if (getResourcesCommandBuilder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = getResourcesCommandBuilder_.build();
        }
      }
      if (commandTypeCase_ == 9) {
        if (streamingQueryManagerCommandBuilder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = streamingQueryManagerCommandBuilder_.build();
        }
      }
      if (commandTypeCase_ == 10) {
        if (registerTableFunctionBuilder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = registerTableFunctionBuilder_.build();
        }
      }
      if (commandTypeCase_ == 999) {
        if (extensionBuilder_ == null) {
          result.commandType_ = commandType_;
        } else {
          result.commandType_ = extensionBuilder_.build();
        }
      }
      result.commandTypeCase_ = commandTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Command) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Command)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Command other) {
      if (other == org.apache.kyuubi.engine.spark.connect.proto.Command.getDefaultInstance()) return this;
      switch (other.getCommandTypeCase()) {
        case REGISTER_FUNCTION: {
          mergeRegisterFunction(other.getRegisterFunction());
          break;
        }
        case WRITE_OPERATION: {
          mergeWriteOperation(other.getWriteOperation());
          break;
        }
        case CREATE_DATAFRAME_VIEW: {
          mergeCreateDataframeView(other.getCreateDataframeView());
          break;
        }
        case WRITE_OPERATION_V2: {
          mergeWriteOperationV2(other.getWriteOperationV2());
          break;
        }
        case SQL_COMMAND: {
          mergeSqlCommand(other.getSqlCommand());
          break;
        }
        case WRITE_STREAM_OPERATION_START: {
          mergeWriteStreamOperationStart(other.getWriteStreamOperationStart());
          break;
        }
        case STREAMING_QUERY_COMMAND: {
          mergeStreamingQueryCommand(other.getStreamingQueryCommand());
          break;
        }
        case GET_RESOURCES_COMMAND: {
          mergeGetResourcesCommand(other.getGetResourcesCommand());
          break;
        }
        case STREAMING_QUERY_MANAGER_COMMAND: {
          mergeStreamingQueryManagerCommand(other.getStreamingQueryManagerCommand());
          break;
        }
        case REGISTER_TABLE_FUNCTION: {
          mergeRegisterTableFunction(other.getRegisterTableFunction());
          break;
        }
        case EXTENSION: {
          mergeExtension(other.getExtension());
          break;
        }
        case COMMANDTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getRegisterFunctionFieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getWriteOperationFieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getCreateDataframeViewFieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getWriteOperationV2FieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getSqlCommandFieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getWriteStreamOperationStartFieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getStreamingQueryCommandFieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 7;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getGetResourcesCommandFieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 8;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getStreamingQueryManagerCommandFieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 9;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getRegisterTableFunctionFieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 10;
              break;
            } // case 82
            case 7994: {
              input.readMessage(
                  getExtensionFieldBuilder().getBuilder(),
                  extensionRegistry);
              commandTypeCase_ = 999;
              break;
            } // case 7994
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int commandTypeCase_ = 0;
    private java.lang.Object commandType_;
    public CommandTypeCase
        getCommandTypeCase() {
      return CommandTypeCase.forNumber(
          commandTypeCase_);
    }

    public Builder clearCommandType() {
      commandTypeCase_ = 0;
      commandType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder> registerFunctionBuilder_;
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
     * @return Whether the registerFunction field is set.
     */
    @java.lang.Override
    public boolean hasRegisterFunction() {
      return commandTypeCase_ == 1;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
     * @return The registerFunction.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction getRegisterFunction() {
      if (registerFunctionBuilder_ == null) {
        if (commandTypeCase_ == 1) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 1) {
          return registerFunctionBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
     */
    public Builder setRegisterFunction(org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction value) {
      if (registerFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        registerFunctionBuilder_.setMessage(value);
      }
      commandTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
     */
    public Builder setRegisterFunction(
        org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.Builder builderForValue) {
      if (registerFunctionBuilder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        registerFunctionBuilder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
     */
    public Builder mergeRegisterFunction(org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction value) {
      if (registerFunctionBuilder_ == null) {
        if (commandTypeCase_ == 1 &&
            commandType_ != org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance()) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 1) {
          registerFunctionBuilder_.mergeFrom(value);
        } else {
          registerFunctionBuilder_.setMessage(value);
        }
      }
      commandTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
     */
    public Builder clearRegisterFunction() {
      if (registerFunctionBuilder_ == null) {
        if (commandTypeCase_ == 1) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 1) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        registerFunctionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.Builder getRegisterFunctionBuilder() {
      return getRegisterFunctionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder getRegisterFunctionOrBuilder() {
      if ((commandTypeCase_ == 1) && (registerFunctionBuilder_ != null)) {
        return registerFunctionBuilder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 1) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction register_function = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder> 
        getRegisterFunctionFieldBuilder() {
      if (registerFunctionBuilder_ == null) {
        if (!(commandTypeCase_ == 1)) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
        }
        registerFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 1;
      onChanged();;
      return registerFunctionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.WriteOperation, org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.Builder, org.apache.kyuubi.engine.spark.connect.proto.WriteOperationOrBuilder> writeOperationBuilder_;
    /**
     * <code>.spark.connect.WriteOperation write_operation = 2;</code>
     * @return Whether the writeOperation field is set.
     */
    @java.lang.Override
    public boolean hasWriteOperation() {
      return commandTypeCase_ == 2;
    }
    /**
     * <code>.spark.connect.WriteOperation write_operation = 2;</code>
     * @return The writeOperation.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.WriteOperation getWriteOperation() {
      if (writeOperationBuilder_ == null) {
        if (commandTypeCase_ == 2) {
          return (org.apache.kyuubi.engine.spark.connect.proto.WriteOperation) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 2) {
          return writeOperationBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WriteOperation write_operation = 2;</code>
     */
    public Builder setWriteOperation(org.apache.kyuubi.engine.spark.connect.proto.WriteOperation value) {
      if (writeOperationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        writeOperationBuilder_.setMessage(value);
      }
      commandTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperation write_operation = 2;</code>
     */
    public Builder setWriteOperation(
        org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.Builder builderForValue) {
      if (writeOperationBuilder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        writeOperationBuilder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperation write_operation = 2;</code>
     */
    public Builder mergeWriteOperation(org.apache.kyuubi.engine.spark.connect.proto.WriteOperation value) {
      if (writeOperationBuilder_ == null) {
        if (commandTypeCase_ == 2 &&
            commandType_ != org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.getDefaultInstance()) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.WriteOperation) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 2) {
          writeOperationBuilder_.mergeFrom(value);
        } else {
          writeOperationBuilder_.setMessage(value);
        }
      }
      commandTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperation write_operation = 2;</code>
     */
    public Builder clearWriteOperation() {
      if (writeOperationBuilder_ == null) {
        if (commandTypeCase_ == 2) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 2) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        writeOperationBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperation write_operation = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.Builder getWriteOperationBuilder() {
      return getWriteOperationFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.WriteOperation write_operation = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.WriteOperationOrBuilder getWriteOperationOrBuilder() {
      if ((commandTypeCase_ == 2) && (writeOperationBuilder_ != null)) {
        return writeOperationBuilder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 2) {
          return (org.apache.kyuubi.engine.spark.connect.proto.WriteOperation) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WriteOperation write_operation = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.WriteOperation, org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.Builder, org.apache.kyuubi.engine.spark.connect.proto.WriteOperationOrBuilder> 
        getWriteOperationFieldBuilder() {
      if (writeOperationBuilder_ == null) {
        if (!(commandTypeCase_ == 2)) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.getDefaultInstance();
        }
        writeOperationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.WriteOperation, org.apache.kyuubi.engine.spark.connect.proto.WriteOperation.Builder, org.apache.kyuubi.engine.spark.connect.proto.WriteOperationOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.WriteOperation) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 2;
      onChanged();;
      return writeOperationBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand, org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommandOrBuilder> createDataframeViewBuilder_;
    /**
     * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
     * @return Whether the createDataframeView field is set.
     */
    @java.lang.Override
    public boolean hasCreateDataframeView() {
      return commandTypeCase_ == 3;
    }
    /**
     * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
     * @return The createDataframeView.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand getCreateDataframeView() {
      if (createDataframeViewBuilder_ == null) {
        if (commandTypeCase_ == 3) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 3) {
          return createDataframeViewBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
     */
    public Builder setCreateDataframeView(org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand value) {
      if (createDataframeViewBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        createDataframeViewBuilder_.setMessage(value);
      }
      commandTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
     */
    public Builder setCreateDataframeView(
        org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.Builder builderForValue) {
      if (createDataframeViewBuilder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        createDataframeViewBuilder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
     */
    public Builder mergeCreateDataframeView(org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand value) {
      if (createDataframeViewBuilder_ == null) {
        if (commandTypeCase_ == 3 &&
            commandType_ != org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.getDefaultInstance()) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 3) {
          createDataframeViewBuilder_.mergeFrom(value);
        } else {
          createDataframeViewBuilder_.setMessage(value);
        }
      }
      commandTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
     */
    public Builder clearCreateDataframeView() {
      if (createDataframeViewBuilder_ == null) {
        if (commandTypeCase_ == 3) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 3) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        createDataframeViewBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.Builder getCreateDataframeViewBuilder() {
      return getCreateDataframeViewFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommandOrBuilder getCreateDataframeViewOrBuilder() {
      if ((commandTypeCase_ == 3) && (createDataframeViewBuilder_ != null)) {
        return createDataframeViewBuilder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 3) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CreateDataFrameViewCommand create_dataframe_view = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand, org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommandOrBuilder> 
        getCreateDataframeViewFieldBuilder() {
      if (createDataframeViewBuilder_ == null) {
        if (!(commandTypeCase_ == 3)) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.getDefaultInstance();
        }
        createDataframeViewBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand, org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommandOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.CreateDataFrameViewCommand) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 3;
      onChanged();;
      return createDataframeViewBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2, org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.Builder, org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2OrBuilder> writeOperationV2Builder_;
    /**
     * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
     * @return Whether the writeOperationV2 field is set.
     */
    @java.lang.Override
    public boolean hasWriteOperationV2() {
      return commandTypeCase_ == 4;
    }
    /**
     * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
     * @return The writeOperationV2.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2 getWriteOperationV2() {
      if (writeOperationV2Builder_ == null) {
        if (commandTypeCase_ == 4) {
          return (org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 4) {
          return writeOperationV2Builder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
     */
    public Builder setWriteOperationV2(org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2 value) {
      if (writeOperationV2Builder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        writeOperationV2Builder_.setMessage(value);
      }
      commandTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
     */
    public Builder setWriteOperationV2(
        org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.Builder builderForValue) {
      if (writeOperationV2Builder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        writeOperationV2Builder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
     */
    public Builder mergeWriteOperationV2(org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2 value) {
      if (writeOperationV2Builder_ == null) {
        if (commandTypeCase_ == 4 &&
            commandType_ != org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.getDefaultInstance()) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 4) {
          writeOperationV2Builder_.mergeFrom(value);
        } else {
          writeOperationV2Builder_.setMessage(value);
        }
      }
      commandTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
     */
    public Builder clearWriteOperationV2() {
      if (writeOperationV2Builder_ == null) {
        if (commandTypeCase_ == 4) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 4) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        writeOperationV2Builder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.Builder getWriteOperationV2Builder() {
      return getWriteOperationV2FieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2OrBuilder getWriteOperationV2OrBuilder() {
      if ((commandTypeCase_ == 4) && (writeOperationV2Builder_ != null)) {
        return writeOperationV2Builder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 4) {
          return (org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WriteOperationV2 write_operation_v2 = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2, org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.Builder, org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2OrBuilder> 
        getWriteOperationV2FieldBuilder() {
      if (writeOperationV2Builder_ == null) {
        if (!(commandTypeCase_ == 4)) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.getDefaultInstance();
        }
        writeOperationV2Builder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2, org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2.Builder, org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2OrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.WriteOperationV2) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 4;
      onChanged();;
      return writeOperationV2Builder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.SqlCommand, org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.SqlCommandOrBuilder> sqlCommandBuilder_;
    /**
     * <code>.spark.connect.SqlCommand sql_command = 5;</code>
     * @return Whether the sqlCommand field is set.
     */
    @java.lang.Override
    public boolean hasSqlCommand() {
      return commandTypeCase_ == 5;
    }
    /**
     * <code>.spark.connect.SqlCommand sql_command = 5;</code>
     * @return The sqlCommand.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.SqlCommand getSqlCommand() {
      if (sqlCommandBuilder_ == null) {
        if (commandTypeCase_ == 5) {
          return (org.apache.kyuubi.engine.spark.connect.proto.SqlCommand) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 5) {
          return sqlCommandBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SqlCommand sql_command = 5;</code>
     */
    public Builder setSqlCommand(org.apache.kyuubi.engine.spark.connect.proto.SqlCommand value) {
      if (sqlCommandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        sqlCommandBuilder_.setMessage(value);
      }
      commandTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.SqlCommand sql_command = 5;</code>
     */
    public Builder setSqlCommand(
        org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.Builder builderForValue) {
      if (sqlCommandBuilder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        sqlCommandBuilder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.SqlCommand sql_command = 5;</code>
     */
    public Builder mergeSqlCommand(org.apache.kyuubi.engine.spark.connect.proto.SqlCommand value) {
      if (sqlCommandBuilder_ == null) {
        if (commandTypeCase_ == 5 &&
            commandType_ != org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.getDefaultInstance()) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.SqlCommand) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 5) {
          sqlCommandBuilder_.mergeFrom(value);
        } else {
          sqlCommandBuilder_.setMessage(value);
        }
      }
      commandTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.SqlCommand sql_command = 5;</code>
     */
    public Builder clearSqlCommand() {
      if (sqlCommandBuilder_ == null) {
        if (commandTypeCase_ == 5) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 5) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        sqlCommandBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.SqlCommand sql_command = 5;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.Builder getSqlCommandBuilder() {
      return getSqlCommandFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.SqlCommand sql_command = 5;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.SqlCommandOrBuilder getSqlCommandOrBuilder() {
      if ((commandTypeCase_ == 5) && (sqlCommandBuilder_ != null)) {
        return sqlCommandBuilder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 5) {
          return (org.apache.kyuubi.engine.spark.connect.proto.SqlCommand) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SqlCommand sql_command = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.SqlCommand, org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.SqlCommandOrBuilder> 
        getSqlCommandFieldBuilder() {
      if (sqlCommandBuilder_ == null) {
        if (!(commandTypeCase_ == 5)) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.getDefaultInstance();
        }
        sqlCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.SqlCommand, org.apache.kyuubi.engine.spark.connect.proto.SqlCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.SqlCommandOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.SqlCommand) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 5;
      onChanged();;
      return sqlCommandBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart, org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.Builder, org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStartOrBuilder> writeStreamOperationStartBuilder_;
    /**
     * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
     * @return Whether the writeStreamOperationStart field is set.
     */
    @java.lang.Override
    public boolean hasWriteStreamOperationStart() {
      return commandTypeCase_ == 6;
    }
    /**
     * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
     * @return The writeStreamOperationStart.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart getWriteStreamOperationStart() {
      if (writeStreamOperationStartBuilder_ == null) {
        if (commandTypeCase_ == 6) {
          return (org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 6) {
          return writeStreamOperationStartBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
     */
    public Builder setWriteStreamOperationStart(org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart value) {
      if (writeStreamOperationStartBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        writeStreamOperationStartBuilder_.setMessage(value);
      }
      commandTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
     */
    public Builder setWriteStreamOperationStart(
        org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.Builder builderForValue) {
      if (writeStreamOperationStartBuilder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        writeStreamOperationStartBuilder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
     */
    public Builder mergeWriteStreamOperationStart(org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart value) {
      if (writeStreamOperationStartBuilder_ == null) {
        if (commandTypeCase_ == 6 &&
            commandType_ != org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.getDefaultInstance()) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 6) {
          writeStreamOperationStartBuilder_.mergeFrom(value);
        } else {
          writeStreamOperationStartBuilder_.setMessage(value);
        }
      }
      commandTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
     */
    public Builder clearWriteStreamOperationStart() {
      if (writeStreamOperationStartBuilder_ == null) {
        if (commandTypeCase_ == 6) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 6) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        writeStreamOperationStartBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.Builder getWriteStreamOperationStartBuilder() {
      return getWriteStreamOperationStartFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStartOrBuilder getWriteStreamOperationStartOrBuilder() {
      if ((commandTypeCase_ == 6) && (writeStreamOperationStartBuilder_ != null)) {
        return writeStreamOperationStartBuilder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 6) {
          return (org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.WriteStreamOperationStart write_stream_operation_start = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart, org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.Builder, org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStartOrBuilder> 
        getWriteStreamOperationStartFieldBuilder() {
      if (writeStreamOperationStartBuilder_ == null) {
        if (!(commandTypeCase_ == 6)) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.getDefaultInstance();
        }
        writeStreamOperationStartBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart, org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.Builder, org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStartOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 6;
      onChanged();;
      return writeStreamOperationStartBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommandOrBuilder> streamingQueryCommandBuilder_;
    /**
     * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
     * @return Whether the streamingQueryCommand field is set.
     */
    @java.lang.Override
    public boolean hasStreamingQueryCommand() {
      return commandTypeCase_ == 7;
    }
    /**
     * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
     * @return The streamingQueryCommand.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand getStreamingQueryCommand() {
      if (streamingQueryCommandBuilder_ == null) {
        if (commandTypeCase_ == 7) {
          return (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 7) {
          return streamingQueryCommandBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
     */
    public Builder setStreamingQueryCommand(org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand value) {
      if (streamingQueryCommandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        streamingQueryCommandBuilder_.setMessage(value);
      }
      commandTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
     */
    public Builder setStreamingQueryCommand(
        org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.Builder builderForValue) {
      if (streamingQueryCommandBuilder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        streamingQueryCommandBuilder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
     */
    public Builder mergeStreamingQueryCommand(org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand value) {
      if (streamingQueryCommandBuilder_ == null) {
        if (commandTypeCase_ == 7 &&
            commandType_ != org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.getDefaultInstance()) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 7) {
          streamingQueryCommandBuilder_.mergeFrom(value);
        } else {
          streamingQueryCommandBuilder_.setMessage(value);
        }
      }
      commandTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
     */
    public Builder clearStreamingQueryCommand() {
      if (streamingQueryCommandBuilder_ == null) {
        if (commandTypeCase_ == 7) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 7) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        streamingQueryCommandBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.Builder getStreamingQueryCommandBuilder() {
      return getStreamingQueryCommandFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommandOrBuilder getStreamingQueryCommandOrBuilder() {
      if ((commandTypeCase_ == 7) && (streamingQueryCommandBuilder_ != null)) {
        return streamingQueryCommandBuilder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 7) {
          return (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StreamingQueryCommand streaming_query_command = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommandOrBuilder> 
        getStreamingQueryCommandFieldBuilder() {
      if (streamingQueryCommandBuilder_ == null) {
        if (!(commandTypeCase_ == 7)) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.getDefaultInstance();
        }
        streamingQueryCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommandOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryCommand) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 7;
      onChanged();;
      return streamingQueryCommandBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand, org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommandOrBuilder> getResourcesCommandBuilder_;
    /**
     * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
     * @return Whether the getResourcesCommand field is set.
     */
    @java.lang.Override
    public boolean hasGetResourcesCommand() {
      return commandTypeCase_ == 8;
    }
    /**
     * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
     * @return The getResourcesCommand.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand getGetResourcesCommand() {
      if (getResourcesCommandBuilder_ == null) {
        if (commandTypeCase_ == 8) {
          return (org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 8) {
          return getResourcesCommandBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
     */
    public Builder setGetResourcesCommand(org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand value) {
      if (getResourcesCommandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        getResourcesCommandBuilder_.setMessage(value);
      }
      commandTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
     */
    public Builder setGetResourcesCommand(
        org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.Builder builderForValue) {
      if (getResourcesCommandBuilder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        getResourcesCommandBuilder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
     */
    public Builder mergeGetResourcesCommand(org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand value) {
      if (getResourcesCommandBuilder_ == null) {
        if (commandTypeCase_ == 8 &&
            commandType_ != org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.getDefaultInstance()) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 8) {
          getResourcesCommandBuilder_.mergeFrom(value);
        } else {
          getResourcesCommandBuilder_.setMessage(value);
        }
      }
      commandTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
     */
    public Builder clearGetResourcesCommand() {
      if (getResourcesCommandBuilder_ == null) {
        if (commandTypeCase_ == 8) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 8) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        getResourcesCommandBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.Builder getGetResourcesCommandBuilder() {
      return getGetResourcesCommandFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommandOrBuilder getGetResourcesCommandOrBuilder() {
      if ((commandTypeCase_ == 8) && (getResourcesCommandBuilder_ != null)) {
        return getResourcesCommandBuilder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 8) {
          return (org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.GetResourcesCommand get_resources_command = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand, org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommandOrBuilder> 
        getGetResourcesCommandFieldBuilder() {
      if (getResourcesCommandBuilder_ == null) {
        if (!(commandTypeCase_ == 8)) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.getDefaultInstance();
        }
        getResourcesCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand, org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommandOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.GetResourcesCommand) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 8;
      onChanged();;
      return getResourcesCommandBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommandOrBuilder> streamingQueryManagerCommandBuilder_;
    /**
     * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
     * @return Whether the streamingQueryManagerCommand field is set.
     */
    @java.lang.Override
    public boolean hasStreamingQueryManagerCommand() {
      return commandTypeCase_ == 9;
    }
    /**
     * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
     * @return The streamingQueryManagerCommand.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand getStreamingQueryManagerCommand() {
      if (streamingQueryManagerCommandBuilder_ == null) {
        if (commandTypeCase_ == 9) {
          return (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 9) {
          return streamingQueryManagerCommandBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
     */
    public Builder setStreamingQueryManagerCommand(org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand value) {
      if (streamingQueryManagerCommandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        streamingQueryManagerCommandBuilder_.setMessage(value);
      }
      commandTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
     */
    public Builder setStreamingQueryManagerCommand(
        org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.Builder builderForValue) {
      if (streamingQueryManagerCommandBuilder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        streamingQueryManagerCommandBuilder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
     */
    public Builder mergeStreamingQueryManagerCommand(org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand value) {
      if (streamingQueryManagerCommandBuilder_ == null) {
        if (commandTypeCase_ == 9 &&
            commandType_ != org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.getDefaultInstance()) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 9) {
          streamingQueryManagerCommandBuilder_.mergeFrom(value);
        } else {
          streamingQueryManagerCommandBuilder_.setMessage(value);
        }
      }
      commandTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
     */
    public Builder clearStreamingQueryManagerCommand() {
      if (streamingQueryManagerCommandBuilder_ == null) {
        if (commandTypeCase_ == 9) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 9) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        streamingQueryManagerCommandBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.Builder getStreamingQueryManagerCommandBuilder() {
      return getStreamingQueryManagerCommandFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommandOrBuilder getStreamingQueryManagerCommandOrBuilder() {
      if ((commandTypeCase_ == 9) && (streamingQueryManagerCommandBuilder_ != null)) {
        return streamingQueryManagerCommandBuilder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 9) {
          return (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.StreamingQueryManagerCommand streaming_query_manager_command = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommandOrBuilder> 
        getStreamingQueryManagerCommandFieldBuilder() {
      if (streamingQueryManagerCommandBuilder_ == null) {
        if (!(commandTypeCase_ == 9)) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.getDefaultInstance();
        }
        streamingQueryManagerCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommandOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.StreamingQueryManagerCommand) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 9;
      onChanged();;
      return streamingQueryManagerCommandBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunctionOrBuilder> registerTableFunctionBuilder_;
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
     * @return Whether the registerTableFunction field is set.
     */
    @java.lang.Override
    public boolean hasRegisterTableFunction() {
      return commandTypeCase_ == 10;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
     * @return The registerTableFunction.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction getRegisterTableFunction() {
      if (registerTableFunctionBuilder_ == null) {
        if (commandTypeCase_ == 10) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 10) {
          return registerTableFunctionBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
     */
    public Builder setRegisterTableFunction(org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction value) {
      if (registerTableFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        registerTableFunctionBuilder_.setMessage(value);
      }
      commandTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
     */
    public Builder setRegisterTableFunction(
        org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.Builder builderForValue) {
      if (registerTableFunctionBuilder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        registerTableFunctionBuilder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
     */
    public Builder mergeRegisterTableFunction(org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction value) {
      if (registerTableFunctionBuilder_ == null) {
        if (commandTypeCase_ == 10 &&
            commandType_ != org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance()) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 10) {
          registerTableFunctionBuilder_.mergeFrom(value);
        } else {
          registerTableFunctionBuilder_.setMessage(value);
        }
      }
      commandTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
     */
    public Builder clearRegisterTableFunction() {
      if (registerTableFunctionBuilder_ == null) {
        if (commandTypeCase_ == 10) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 10) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        registerTableFunctionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.Builder getRegisterTableFunctionBuilder() {
      return getRegisterTableFunctionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunctionOrBuilder getRegisterTableFunctionOrBuilder() {
      if ((commandTypeCase_ == 10) && (registerTableFunctionBuilder_ != null)) {
        return registerTableFunctionBuilder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 10) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction) commandType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedTableFunction register_table_function = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunctionOrBuilder> 
        getRegisterTableFunctionFieldBuilder() {
      if (registerTableFunctionBuilder_ == null) {
        if (!(commandTypeCase_ == 10)) {
          commandType_ = org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.getDefaultInstance();
        }
        registerTableFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunctionOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedTableFunction) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 10;
      onChanged();;
      return registerTableFunctionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> extensionBuilder_;
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * Commands they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     * @return Whether the extension field is set.
     */
    @java.lang.Override
    public boolean hasExtension() {
      return commandTypeCase_ == 999;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * Commands they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     * @return The extension.
     */
    @java.lang.Override
    public com.google.protobuf.Any getExtension() {
      if (extensionBuilder_ == null) {
        if (commandTypeCase_ == 999) {
          return (com.google.protobuf.Any) commandType_;
        }
        return com.google.protobuf.Any.getDefaultInstance();
      } else {
        if (commandTypeCase_ == 999) {
          return extensionBuilder_.getMessage();
        }
        return com.google.protobuf.Any.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * Commands they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    public Builder setExtension(com.google.protobuf.Any value) {
      if (extensionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commandType_ = value;
        onChanged();
      } else {
        extensionBuilder_.setMessage(value);
      }
      commandTypeCase_ = 999;
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * Commands they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    public Builder setExtension(
        com.google.protobuf.Any.Builder builderForValue) {
      if (extensionBuilder_ == null) {
        commandType_ = builderForValue.build();
        onChanged();
      } else {
        extensionBuilder_.setMessage(builderForValue.build());
      }
      commandTypeCase_ = 999;
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * Commands they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    public Builder mergeExtension(com.google.protobuf.Any value) {
      if (extensionBuilder_ == null) {
        if (commandTypeCase_ == 999 &&
            commandType_ != com.google.protobuf.Any.getDefaultInstance()) {
          commandType_ = com.google.protobuf.Any.newBuilder((com.google.protobuf.Any) commandType_)
              .mergeFrom(value).buildPartial();
        } else {
          commandType_ = value;
        }
        onChanged();
      } else {
        if (commandTypeCase_ == 999) {
          extensionBuilder_.mergeFrom(value);
        } else {
          extensionBuilder_.setMessage(value);
        }
      }
      commandTypeCase_ = 999;
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * Commands they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    public Builder clearExtension() {
      if (extensionBuilder_ == null) {
        if (commandTypeCase_ == 999) {
          commandTypeCase_ = 0;
          commandType_ = null;
          onChanged();
        }
      } else {
        if (commandTypeCase_ == 999) {
          commandTypeCase_ = 0;
          commandType_ = null;
        }
        extensionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * Commands they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    public com.google.protobuf.Any.Builder getExtensionBuilder() {
      return getExtensionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * Commands they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    @java.lang.Override
    public com.google.protobuf.AnyOrBuilder getExtensionOrBuilder() {
      if ((commandTypeCase_ == 999) && (extensionBuilder_ != null)) {
        return extensionBuilder_.getMessageOrBuilder();
      } else {
        if (commandTypeCase_ == 999) {
          return (com.google.protobuf.Any) commandType_;
        }
        return com.google.protobuf.Any.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * Commands they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
        getExtensionFieldBuilder() {
      if (extensionBuilder_ == null) {
        if (!(commandTypeCase_ == 999)) {
          commandType_ = com.google.protobuf.Any.getDefaultInstance();
        }
        extensionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                (com.google.protobuf.Any) commandType_,
                getParentForChildren(),
                isClean());
        commandType_ = null;
      }
      commandTypeCase_ = 999;
      onChanged();;
      return extensionBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.Command)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.Command)
  private static final org.apache.kyuubi.engine.spark.connect.proto.Command DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Command();
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.Command getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Command>
      PARSER = new com.google.protobuf.AbstractParser<Command>() {
    @java.lang.Override
    public Command parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Command> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Command> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Command getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

