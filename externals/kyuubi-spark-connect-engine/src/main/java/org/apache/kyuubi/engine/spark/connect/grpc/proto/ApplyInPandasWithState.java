// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

/** Protobuf type {@code spark.connect.ApplyInPandasWithState} */
public final class ApplyInPandasWithState extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:spark.connect.ApplyInPandasWithState)
    ApplyInPandasWithStateOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use ApplyInPandasWithState.newBuilder() to construct.
  private ApplyInPandasWithState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ApplyInPandasWithState() {
    groupingExpressions_ = java.util.Collections.emptyList();
    outputSchema_ = "";
    stateSchema_ = "";
    outputMode_ = "";
    timeoutConf_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new ApplyInPandasWithState();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
        .internal_static_spark_connect_ApplyInPandasWithState_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
        .internal_static_spark_connect_ApplyInPandasWithState_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState.class,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState.Builder.class);
  }

  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation input_;
  /**
   *
   *
   * <pre>
   * (Required) Input relation for applyInPandasWithState.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return Whether the input field is set.
   */
  @java.lang.Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   *
   *
   * <pre>
   * (Required) Input relation for applyInPandasWithState.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return The input.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput() {
    return input_ == null
        ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
        : input_;
  }
  /**
   *
   *
   * <pre>
   * (Required) Input relation for applyInPandasWithState.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder() {
    return getInput();
  }

  public static final int GROUPING_EXPRESSIONS_FIELD_NUMBER = 2;
  private java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      groupingExpressions_;
  /**
   *
   *
   * <pre>
   * (Required) Expressions for grouping keys.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
   */
  @java.lang.Override
  public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      getGroupingExpressionsList() {
    return groupingExpressions_;
  }
  /**
   *
   *
   * <pre>
   * (Required) Expressions for grouping keys.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
   */
  @java.lang.Override
  public java.util.List<
          ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
      getGroupingExpressionsOrBuilderList() {
    return groupingExpressions_;
  }
  /**
   *
   *
   * <pre>
   * (Required) Expressions for grouping keys.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
   */
  @java.lang.Override
  public int getGroupingExpressionsCount() {
    return groupingExpressions_.size();
  }
  /**
   *
   *
   * <pre>
   * (Required) Expressions for grouping keys.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getGroupingExpressions(
      int index) {
    return groupingExpressions_.get(index);
  }
  /**
   *
   *
   * <pre>
   * (Required) Expressions for grouping keys.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder
      getGroupingExpressionsOrBuilder(int index) {
    return groupingExpressions_.get(index);
  }

  public static final int FUNC_FIELD_NUMBER = 3;
  private org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction func_;
  /**
   *
   *
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
   *
   * @return Whether the func field is set.
   */
  @java.lang.Override
  public boolean hasFunc() {
    return func_ != null;
  }
  /**
   *
   *
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
   *
   * @return The func.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction
      getFunc() {
    return func_ == null
        ? org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction
            .getDefaultInstance()
        : func_;
  }
  /**
   *
   *
   * <pre>
   * (Required) Input user-defined function.
   * </pre>
   *
   * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunctionOrBuilder
      getFuncOrBuilder() {
    return getFunc();
  }

  public static final int OUTPUT_SCHEMA_FIELD_NUMBER = 4;
  private volatile java.lang.Object outputSchema_;
  /**
   *
   *
   * <pre>
   * (Required) Schema for the output DataFrame.
   * </pre>
   *
   * <code>string output_schema = 4;</code>
   *
   * @return The outputSchema.
   */
  @java.lang.Override
  public java.lang.String getOutputSchema() {
    java.lang.Object ref = outputSchema_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      outputSchema_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * (Required) Schema for the output DataFrame.
   * </pre>
   *
   * <code>string output_schema = 4;</code>
   *
   * @return The bytes for outputSchema.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getOutputSchemaBytes() {
    java.lang.Object ref = outputSchema_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      outputSchema_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STATE_SCHEMA_FIELD_NUMBER = 5;
  private volatile java.lang.Object stateSchema_;
  /**
   *
   *
   * <pre>
   * (Required) Schema for the state.
   * </pre>
   *
   * <code>string state_schema = 5;</code>
   *
   * @return The stateSchema.
   */
  @java.lang.Override
  public java.lang.String getStateSchema() {
    java.lang.Object ref = stateSchema_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      stateSchema_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * (Required) Schema for the state.
   * </pre>
   *
   * <code>string state_schema = 5;</code>
   *
   * @return The bytes for stateSchema.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getStateSchemaBytes() {
    java.lang.Object ref = stateSchema_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      stateSchema_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OUTPUT_MODE_FIELD_NUMBER = 6;
  private volatile java.lang.Object outputMode_;
  /**
   *
   *
   * <pre>
   * (Required) The output mode of the function.
   * </pre>
   *
   * <code>string output_mode = 6;</code>
   *
   * @return The outputMode.
   */
  @java.lang.Override
  public java.lang.String getOutputMode() {
    java.lang.Object ref = outputMode_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      outputMode_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * (Required) The output mode of the function.
   * </pre>
   *
   * <code>string output_mode = 6;</code>
   *
   * @return The bytes for outputMode.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getOutputModeBytes() {
    java.lang.Object ref = outputMode_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      outputMode_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TIMEOUT_CONF_FIELD_NUMBER = 7;
  private volatile java.lang.Object timeoutConf_;
  /**
   *
   *
   * <pre>
   * (Required) Timeout configuration for groups that do not receive data for a while.
   * </pre>
   *
   * <code>string timeout_conf = 7;</code>
   *
   * @return The timeoutConf.
   */
  @java.lang.Override
  public java.lang.String getTimeoutConf() {
    java.lang.Object ref = timeoutConf_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      timeoutConf_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * (Required) Timeout configuration for groups that do not receive data for a while.
   * </pre>
   *
   * <code>string timeout_conf = 7;</code>
   *
   * @return The bytes for timeoutConf.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getTimeoutConfBytes() {
    java.lang.Object ref = timeoutConf_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      timeoutConf_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    for (int i = 0; i < groupingExpressions_.size(); i++) {
      output.writeMessage(2, groupingExpressions_.get(i));
    }
    if (func_ != null) {
      output.writeMessage(3, getFunc());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputSchema_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, outputSchema_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateSchema_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, stateSchema_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputMode_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, outputMode_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(timeoutConf_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, timeoutConf_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getInput());
    }
    for (int i = 0; i < groupingExpressions_.size(); i++) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(2, groupingExpressions_.get(i));
    }
    if (func_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getFunc());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputSchema_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, outputSchema_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateSchema_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, stateSchema_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputMode_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, outputMode_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(timeoutConf_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, timeoutConf_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj
        instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState other =
        (org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput().equals(other.getInput())) return false;
    }
    if (!getGroupingExpressionsList().equals(other.getGroupingExpressionsList())) return false;
    if (hasFunc() != other.hasFunc()) return false;
    if (hasFunc()) {
      if (!getFunc().equals(other.getFunc())) return false;
    }
    if (!getOutputSchema().equals(other.getOutputSchema())) return false;
    if (!getStateSchema().equals(other.getStateSchema())) return false;
    if (!getOutputMode().equals(other.getOutputMode())) return false;
    if (!getTimeoutConf().equals(other.getTimeoutConf())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    if (getGroupingExpressionsCount() > 0) {
      hash = (37 * hash) + GROUPING_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getGroupingExpressionsList().hashCode();
    }
    if (hasFunc()) {
      hash = (37 * hash) + FUNC_FIELD_NUMBER;
      hash = (53 * hash) + getFunc().hashCode();
    }
    hash = (37 * hash) + OUTPUT_SCHEMA_FIELD_NUMBER;
    hash = (53 * hash) + getOutputSchema().hashCode();
    hash = (37 * hash) + STATE_SCHEMA_FIELD_NUMBER;
    hash = (53 * hash) + getStateSchema().hashCode();
    hash = (37 * hash) + OUTPUT_MODE_FIELD_NUMBER;
    hash = (53 * hash) + getOutputMode().hashCode();
    hash = (37 * hash) + TIMEOUT_CONF_FIELD_NUMBER;
    hash = (53 * hash) + getTimeoutConf().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState parseFrom(
      byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState
      parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState
      parseDelimitedFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /** Protobuf type {@code spark.connect.ApplyInPandasWithState} */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:spark.connect.ApplyInPandasWithState)
      org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithStateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_ApplyInPandasWithState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_ApplyInPandasWithState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState.Builder
                  .class);
    }

    // Construct using
    // org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (inputBuilder_ == null) {
        input_ = null;
      } else {
        input_ = null;
        inputBuilder_ = null;
      }
      if (groupingExpressionsBuilder_ == null) {
        groupingExpressions_ = java.util.Collections.emptyList();
      } else {
        groupingExpressions_ = null;
        groupingExpressionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      if (funcBuilder_ == null) {
        func_ = null;
      } else {
        func_ = null;
        funcBuilder_ = null;
      }
      outputSchema_ = "";

      stateSchema_ = "";

      outputMode_ = "";

      timeoutConf_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_ApplyInPandasWithState_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState
        getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState
          .getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState build() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState result =
          buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState buildPartial() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState result =
          new org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState(this);
      int from_bitField0_ = bitField0_;
      if (inputBuilder_ == null) {
        result.input_ = input_;
      } else {
        result.input_ = inputBuilder_.build();
      }
      if (groupingExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          groupingExpressions_ = java.util.Collections.unmodifiableList(groupingExpressions_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.groupingExpressions_ = groupingExpressions_;
      } else {
        result.groupingExpressions_ = groupingExpressionsBuilder_.build();
      }
      if (funcBuilder_ == null) {
        result.func_ = func_;
      } else {
        result.func_ = funcBuilder_.build();
      }
      result.outputSchema_ = outputSchema_;
      result.stateSchema_ = stateSchema_;
      result.outputMode_ = outputMode_;
      result.timeoutConf_ = timeoutConf_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other
          instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState) {
        return mergeFrom(
            (org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState other) {
      if (other
          == org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState
              .getDefaultInstance()) return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      if (groupingExpressionsBuilder_ == null) {
        if (!other.groupingExpressions_.isEmpty()) {
          if (groupingExpressions_.isEmpty()) {
            groupingExpressions_ = other.groupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureGroupingExpressionsIsMutable();
            groupingExpressions_.addAll(other.groupingExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.groupingExpressions_.isEmpty()) {
          if (groupingExpressionsBuilder_.isEmpty()) {
            groupingExpressionsBuilder_.dispose();
            groupingExpressionsBuilder_ = null;
            groupingExpressions_ = other.groupingExpressions_;
            bitField0_ = (bitField0_ & ~0x00000001);
            groupingExpressionsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getGroupingExpressionsFieldBuilder()
                    : null;
          } else {
            groupingExpressionsBuilder_.addAllMessages(other.groupingExpressions_);
          }
        }
      }
      if (other.hasFunc()) {
        mergeFunc(other.getFunc());
      }
      if (!other.getOutputSchema().isEmpty()) {
        outputSchema_ = other.outputSchema_;
        onChanged();
      }
      if (!other.getStateSchema().isEmpty()) {
        stateSchema_ = other.stateSchema_;
        onChanged();
      }
      if (!other.getOutputMode().isEmpty()) {
        outputMode_ = other.outputMode_;
        onChanged();
      }
      if (!other.getTimeoutConf().isEmpty()) {
        timeoutConf_ = other.timeoutConf_;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getInputFieldBuilder().getBuilder(), extensionRegistry);

                break;
              } // case 10
            case 18:
              {
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression m =
                    input.readMessage(
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.parser(),
                        extensionRegistry);
                if (groupingExpressionsBuilder_ == null) {
                  ensureGroupingExpressionsIsMutable();
                  groupingExpressions_.add(m);
                } else {
                  groupingExpressionsBuilder_.addMessage(m);
                }
                break;
              } // case 18
            case 26:
              {
                input.readMessage(getFuncFieldBuilder().getBuilder(), extensionRegistry);

                break;
              } // case 26
            case 34:
              {
                outputSchema_ = input.readStringRequireUtf8();

                break;
              } // case 34
            case 42:
              {
                stateSchema_ = input.readStringRequireUtf8();

                break;
              } // case 42
            case 50:
              {
                outputMode_ = input.readStringRequireUtf8();

                break;
              } // case 50
            case 58:
              {
                timeoutConf_ = input.readStringRequireUtf8();

                break;
              } // case 58
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        inputBuilder_;
    /**
     *
     *
     * <pre>
     * (Required) Input relation for applyInPandasWithState.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     *
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return inputBuilder_ != null || input_ != null;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation for applyInPandasWithState.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     *
     * @return The input.
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
            : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation for applyInPandasWithState.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
        onChanged();
      } else {
        inputBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation for applyInPandasWithState.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
        onChanged();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation for applyInPandasWithState.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (input_ != null) {
          input_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.newBuilder(input_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          input_ = value;
        }
        onChanged();
      } else {
        inputBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation for applyInPandasWithState.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      if (inputBuilder_ == null) {
        input_ = null;
        onChanged();
      } else {
        input_ = null;
        inputBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation for applyInPandasWithState.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder getInputBuilder() {

      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation for applyInPandasWithState.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
            : input_;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation for applyInPandasWithState.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>(
                getInput(), getParentForChildren(), isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        groupingExpressions_ = java.util.Collections.emptyList();

    private void ensureGroupingExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        groupingExpressions_ =
            new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>(
                groupingExpressions_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
        groupingExpressionsBuilder_;

    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        getGroupingExpressionsList() {
      if (groupingExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(groupingExpressions_);
      } else {
        return groupingExpressionsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public int getGroupingExpressionsCount() {
      if (groupingExpressionsBuilder_ == null) {
        return groupingExpressions_.size();
      } else {
        return groupingExpressionsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getGroupingExpressions(
        int index) {
      if (groupingExpressionsBuilder_ == null) {
        return groupingExpressions_.get(index);
      } else {
        return groupingExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder setGroupingExpressions(
        int index, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression value) {
      if (groupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.set(index, value);
        onChanged();
      } else {
        groupingExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder setGroupingExpressions(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder builderForValue) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        groupingExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder addGroupingExpressions(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression value) {
      if (groupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(value);
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder addGroupingExpressions(
        int index, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression value) {
      if (groupingExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(index, value);
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder addGroupingExpressions(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder builderForValue) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder addGroupingExpressions(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder builderForValue) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        groupingExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder addAllGroupingExpressions(
        java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
            values) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, groupingExpressions_);
        onChanged();
      } else {
        groupingExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder clearGroupingExpressions() {
      if (groupingExpressionsBuilder_ == null) {
        groupingExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        groupingExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public Builder removeGroupingExpressions(int index) {
      if (groupingExpressionsBuilder_ == null) {
        ensureGroupingExpressionsIsMutable();
        groupingExpressions_.remove(index);
        onChanged();
      } else {
        groupingExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder
        getGroupingExpressionsBuilder(int index) {
      return getGroupingExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder
        getGroupingExpressionsOrBuilder(int index) {
      if (groupingExpressionsBuilder_ == null) {
        return groupingExpressions_.get(index);
      } else {
        return groupingExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public java.util.List<
            ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
        getGroupingExpressionsOrBuilderList() {
      if (groupingExpressionsBuilder_ != null) {
        return groupingExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(groupingExpressions_);
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder
        addGroupingExpressionsBuilder() {
      return getGroupingExpressionsFieldBuilder()
          .addBuilder(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder
        addGroupingExpressionsBuilder(int index) {
      return getGroupingExpressionsFieldBuilder()
          .addBuilder(
              index,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * (Required) Expressions for grouping keys.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression grouping_expressions = 2;</code>
     */
    public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder>
        getGroupingExpressionsBuilderList() {
      return getGroupingExpressionsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
        getGroupingExpressionsFieldBuilder() {
      if (groupingExpressionsBuilder_ == null) {
        groupingExpressionsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>(
                groupingExpressions_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        groupingExpressions_ = null;
      }
      return groupingExpressionsBuilder_;
    }

    private org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction func_;
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction
                .Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto
                .CommonInlineUserDefinedFunctionOrBuilder>
        funcBuilder_;
    /**
     *
     *
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     *
     * @return Whether the func field is set.
     */
    public boolean hasFunc() {
      return funcBuilder_ != null || func_ != null;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     *
     * @return The func.
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction
        getFunc() {
      if (funcBuilder_ == null) {
        return func_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction
                .getDefaultInstance()
            : func_;
      } else {
        return funcBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public Builder setFunc(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction value) {
      if (funcBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        func_ = value;
        onChanged();
      } else {
        funcBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public Builder setFunc(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction.Builder
            builderForValue) {
      if (funcBuilder_ == null) {
        func_ = builderForValue.build();
        onChanged();
      } else {
        funcBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public Builder mergeFunc(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction value) {
      if (funcBuilder_ == null) {
        if (func_ != null) {
          func_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction
                  .newBuilder(func_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          func_ = value;
        }
        onChanged();
      } else {
        funcBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public Builder clearFunc() {
      if (funcBuilder_ == null) {
        func_ = null;
        onChanged();
      } else {
        func_ = null;
        funcBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction.Builder
        getFuncBuilder() {

      onChanged();
      return getFuncFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto
            .CommonInlineUserDefinedFunctionOrBuilder
        getFuncOrBuilder() {
      if (funcBuilder_ != null) {
        return funcBuilder_.getMessageOrBuilder();
      } else {
        return func_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction
                .getDefaultInstance()
            : func_;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Input user-defined function.
     * </pre>
     *
     * <code>.spark.connect.CommonInlineUserDefinedFunction func = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction
                .Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto
                .CommonInlineUserDefinedFunctionOrBuilder>
        getFuncFieldBuilder() {
      if (funcBuilder_ == null) {
        funcBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.CommonInlineUserDefinedFunction
                    .Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto
                    .CommonInlineUserDefinedFunctionOrBuilder>(
                getFunc(), getParentForChildren(), isClean());
        func_ = null;
      }
      return funcBuilder_;
    }

    private java.lang.Object outputSchema_ = "";
    /**
     *
     *
     * <pre>
     * (Required) Schema for the output DataFrame.
     * </pre>
     *
     * <code>string output_schema = 4;</code>
     *
     * @return The outputSchema.
     */
    public java.lang.String getOutputSchema() {
      java.lang.Object ref = outputSchema_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        outputSchema_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Schema for the output DataFrame.
     * </pre>
     *
     * <code>string output_schema = 4;</code>
     *
     * @return The bytes for outputSchema.
     */
    public com.google.protobuf.ByteString getOutputSchemaBytes() {
      java.lang.Object ref = outputSchema_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        outputSchema_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Schema for the output DataFrame.
     * </pre>
     *
     * <code>string output_schema = 4;</code>
     *
     * @param value The outputSchema to set.
     * @return This builder for chaining.
     */
    public Builder setOutputSchema(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      outputSchema_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Schema for the output DataFrame.
     * </pre>
     *
     * <code>string output_schema = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearOutputSchema() {

      outputSchema_ = getDefaultInstance().getOutputSchema();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Schema for the output DataFrame.
     * </pre>
     *
     * <code>string output_schema = 4;</code>
     *
     * @param value The bytes for outputSchema to set.
     * @return This builder for chaining.
     */
    public Builder setOutputSchemaBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      outputSchema_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object stateSchema_ = "";
    /**
     *
     *
     * <pre>
     * (Required) Schema for the state.
     * </pre>
     *
     * <code>string state_schema = 5;</code>
     *
     * @return The stateSchema.
     */
    public java.lang.String getStateSchema() {
      java.lang.Object ref = stateSchema_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stateSchema_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Schema for the state.
     * </pre>
     *
     * <code>string state_schema = 5;</code>
     *
     * @return The bytes for stateSchema.
     */
    public com.google.protobuf.ByteString getStateSchemaBytes() {
      java.lang.Object ref = stateSchema_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        stateSchema_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Schema for the state.
     * </pre>
     *
     * <code>string state_schema = 5;</code>
     *
     * @param value The stateSchema to set.
     * @return This builder for chaining.
     */
    public Builder setStateSchema(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      stateSchema_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Schema for the state.
     * </pre>
     *
     * <code>string state_schema = 5;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearStateSchema() {

      stateSchema_ = getDefaultInstance().getStateSchema();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Schema for the state.
     * </pre>
     *
     * <code>string state_schema = 5;</code>
     *
     * @param value The bytes for stateSchema to set.
     * @return This builder for chaining.
     */
    public Builder setStateSchemaBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      stateSchema_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object outputMode_ = "";
    /**
     *
     *
     * <pre>
     * (Required) The output mode of the function.
     * </pre>
     *
     * <code>string output_mode = 6;</code>
     *
     * @return The outputMode.
     */
    public java.lang.String getOutputMode() {
      java.lang.Object ref = outputMode_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        outputMode_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) The output mode of the function.
     * </pre>
     *
     * <code>string output_mode = 6;</code>
     *
     * @return The bytes for outputMode.
     */
    public com.google.protobuf.ByteString getOutputModeBytes() {
      java.lang.Object ref = outputMode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        outputMode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) The output mode of the function.
     * </pre>
     *
     * <code>string output_mode = 6;</code>
     *
     * @param value The outputMode to set.
     * @return This builder for chaining.
     */
    public Builder setOutputMode(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      outputMode_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The output mode of the function.
     * </pre>
     *
     * <code>string output_mode = 6;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearOutputMode() {

      outputMode_ = getDefaultInstance().getOutputMode();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The output mode of the function.
     * </pre>
     *
     * <code>string output_mode = 6;</code>
     *
     * @param value The bytes for outputMode to set.
     * @return This builder for chaining.
     */
    public Builder setOutputModeBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      outputMode_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object timeoutConf_ = "";
    /**
     *
     *
     * <pre>
     * (Required) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>string timeout_conf = 7;</code>
     *
     * @return The timeoutConf.
     */
    public java.lang.String getTimeoutConf() {
      java.lang.Object ref = timeoutConf_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        timeoutConf_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>string timeout_conf = 7;</code>
     *
     * @return The bytes for timeoutConf.
     */
    public com.google.protobuf.ByteString getTimeoutConfBytes() {
      java.lang.Object ref = timeoutConf_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        timeoutConf_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>string timeout_conf = 7;</code>
     *
     * @param value The timeoutConf to set.
     * @return This builder for chaining.
     */
    public Builder setTimeoutConf(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      timeoutConf_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>string timeout_conf = 7;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearTimeoutConf() {

      timeoutConf_ = getDefaultInstance().getTimeoutConf();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Timeout configuration for groups that do not receive data for a while.
     * </pre>
     *
     * <code>string timeout_conf = 7;</code>
     *
     * @param value The bytes for timeoutConf to set.
     * @return This builder for chaining.
     */
    public Builder setTimeoutConfBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      timeoutConf_ = value;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:spark.connect.ApplyInPandasWithState)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.ApplyInPandasWithState)
  private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE =
        new org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState();
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState
      getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ApplyInPandasWithState> PARSER =
      new com.google.protobuf.AbstractParser<ApplyInPandasWithState>() {
        @java.lang.Override
        public ApplyInPandasWithState parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<ApplyInPandasWithState> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ApplyInPandasWithState> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.ApplyInPandasWithState
      getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
