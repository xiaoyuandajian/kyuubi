// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface ArtifactStatusesRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.ArtifactStatusesRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Required)
   * The session_id specifies a spark session for a user id (which is specified
   * by user_context.user_id). The session_id is set by the client to be able to
   * collate streaming responses from different queries within the dedicated session.
   * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
   * </pre>
   *
   * <code>string session_id = 1;</code>
   * @return The sessionId.
   */
  java.lang.String getSessionId();
  /**
   * <pre>
   * (Required)
   * The session_id specifies a spark session for a user id (which is specified
   * by user_context.user_id). The session_id is set by the client to be able to
   * collate streaming responses from different queries within the dedicated session.
   * The id should be an UUID string of the format `00112233-4455-6677-8899-aabbccddeeff`
   * </pre>
   *
   * <code>string session_id = 1;</code>
   * @return The bytes for sessionId.
   */
  com.google.protobuf.ByteString
      getSessionIdBytes();

  /**
   * <pre>
   * User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   * @return Whether the userContext field is set.
   */
  boolean hasUserContext();
  /**
   * <pre>
   * User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   * @return The userContext.
   */
  org.apache.kyuubi.engine.spark.connect.proto.UserContext getUserContext();
  /**
   * <pre>
   * User context
   * </pre>
   *
   * <code>.spark.connect.UserContext user_context = 2;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.UserContextOrBuilder getUserContextOrBuilder();

  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 3;</code>
   * @return Whether the clientType field is set.
   */
  boolean hasClientType();
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 3;</code>
   * @return The clientType.
   */
  java.lang.String getClientType();
  /**
   * <pre>
   * Provides optional information about the client sending the request. This field
   * can be used for language or version specific information and is only intended for
   * logging purposes and will not be interpreted by the server.
   * </pre>
   *
   * <code>optional string client_type = 3;</code>
   * @return The bytes for clientType.
   */
  com.google.protobuf.ByteString
      getClientTypeBytes();

  /**
   * <pre>
   * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
   * sequence of directories and the final file element.
   * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
   * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
   * The relative path of the file on the server's filesystem will be the same as the name of
   * the provided artifact)
   * </pre>
   *
   * <code>repeated string names = 4;</code>
   * @return A list containing the names.
   */
  java.util.List<java.lang.String>
      getNamesList();
  /**
   * <pre>
   * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
   * sequence of directories and the final file element.
   * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
   * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
   * The relative path of the file on the server's filesystem will be the same as the name of
   * the provided artifact)
   * </pre>
   *
   * <code>repeated string names = 4;</code>
   * @return The count of names.
   */
  int getNamesCount();
  /**
   * <pre>
   * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
   * sequence of directories and the final file element.
   * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
   * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
   * The relative path of the file on the server's filesystem will be the same as the name of
   * the provided artifact)
   * </pre>
   *
   * <code>repeated string names = 4;</code>
   * @param index The index of the element to return.
   * @return The names at the given index.
   */
  java.lang.String getNames(int index);
  /**
   * <pre>
   * The name of the artifact is expected in the form of a "Relative Path" that is made up of a
   * sequence of directories and the final file element.
   * Examples of "Relative Path"s: "jars/test.jar", "classes/xyz.class", "abc.xyz", "a/b/X.jar".
   * The server is expected to maintain the hierarchy of files as defined by their name. (i.e
   * The relative path of the file on the server's filesystem will be the same as the name of
   * the provided artifact)
   * </pre>
   *
   * <code>repeated string names = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the names at the given index.
   */
  com.google.protobuf.ByteString
      getNamesBytes(int index);
}
