// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

public final class Relations {
  private Relations() {}

  public static void registerAllExtensions(com.google.protobuf.ExtensionRegistryLite registry) {}

  public static void registerAllExtensions(com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions((com.google.protobuf.ExtensionRegistryLite) registry);
  }

  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Relation_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Relation_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Unknown_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Unknown_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_RelationCommon_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_RelationCommon_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_SQL_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_SQL_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_SQL_ArgsEntry_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_SQL_ArgsEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_SQL_NamedArgumentsEntry_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_SQL_NamedArgumentsEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_WithRelations_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_WithRelations_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Read_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Read_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Read_NamedTable_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Read_NamedTable_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Read_NamedTable_OptionsEntry_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Read_NamedTable_OptionsEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Read_DataSource_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Read_DataSource_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Read_DataSource_OptionsEntry_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Read_DataSource_OptionsEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Project_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Project_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Filter_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Filter_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Join_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Join_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Join_JoinDataType_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Join_JoinDataType_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_SetOperation_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_SetOperation_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Limit_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Limit_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Offset_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Offset_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Tail_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Tail_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Aggregate_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Aggregate_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Aggregate_Pivot_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Aggregate_Pivot_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Aggregate_GroupingSets_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Aggregate_GroupingSets_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Sort_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Sort_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Drop_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Drop_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Deduplicate_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Deduplicate_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_LocalRelation_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_LocalRelation_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_CachedLocalRelation_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_CachedLocalRelation_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_CachedRemoteRelation_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_CachedRemoteRelation_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Sample_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Sample_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Range_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Range_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_SubqueryAlias_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_SubqueryAlias_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Repartition_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Repartition_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_ShowString_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_ShowString_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_HtmlString_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_HtmlString_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_StatSummary_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_StatSummary_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_StatDescribe_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_StatDescribe_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_StatCrosstab_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_StatCrosstab_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_StatCov_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_StatCov_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_StatCorr_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_StatCorr_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_StatApproxQuantile_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_StatApproxQuantile_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_StatFreqItems_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_StatFreqItems_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_StatSampleBy_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_StatSampleBy_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_StatSampleBy_Fraction_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_StatSampleBy_Fraction_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_NAFill_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_NAFill_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_NADrop_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_NADrop_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_NAReplace_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_NAReplace_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_NAReplace_Replacement_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_NAReplace_Replacement_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_ToDF_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_ToDF_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_WithColumnsRenamed_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_WithColumnsRenamed_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_WithColumnsRenamed_RenameColumnsMapEntry_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_WithColumnsRenamed_RenameColumnsMapEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_WithColumnsRenamed_Rename_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_WithColumnsRenamed_Rename_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_WithColumns_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_WithColumns_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_WithWatermark_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_WithWatermark_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Hint_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Hint_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Unpivot_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Unpivot_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Unpivot_Values_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Unpivot_Values_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_ToSchema_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_ToSchema_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_RepartitionByExpression_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_RepartitionByExpression_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_MapPartitions_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_MapPartitions_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_GroupMap_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_GroupMap_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_CoGroupMap_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_CoGroupMap_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_ApplyInPandasWithState_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_ApplyInPandasWithState_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_CommonInlineUserDefinedTableFunction_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_CommonInlineUserDefinedTableFunction_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_PythonUDTF_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_PythonUDTF_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_CommonInlineUserDefinedDataSource_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_CommonInlineUserDefinedDataSource_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_PythonDataSource_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_PythonDataSource_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_CollectMetrics_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_CollectMetrics_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Parse_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Parse_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_Parse_OptionsEntry_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_Parse_OptionsEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_spark_connect_AsOfJoin_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_connect_AsOfJoin_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor() {
    return descriptor;
  }

  private static com.google.protobuf.Descriptors.FileDescriptor descriptor;

  static {
    java.lang.String[] descriptorData = {
      "\n$kyuubi/spark/connect/relations.proto\022\r"
          + "spark.connect\032\031google/protobuf/any.proto"
          + "\032&kyuubi/spark/connect/expressions.proto"
          + "\032 kyuubi/spark/connect/types.proto\032\"kyuu"
          + "bi/spark/connect/catalog.proto\"\337\025\n\010Relat"
          + "ion\022-\n\006common\030\001 \001(\0132\035.spark.connect.Rela"
          + "tionCommon\022#\n\004read\030\002 \001(\0132\023.spark.connect"
          + ".ReadH\000\022)\n\007project\030\003 \001(\0132\026.spark.connect"
          + ".ProjectH\000\022\'\n\006filter\030\004 \001(\0132\025.spark.conne"
          + "ct.FilterH\000\022#\n\004join\030\005 \001(\0132\023.spark.connec"
          + "t.JoinH\000\022-\n\006set_op\030\006 \001(\0132\033.spark.connect"
          + ".SetOperationH\000\022#\n\004sort\030\007 \001(\0132\023.spark.co"
          + "nnect.SortH\000\022%\n\005limit\030\010 \001(\0132\024.spark.conn"
          + "ect.LimitH\000\022-\n\taggregate\030\t \001(\0132\030.spark.c"
          + "onnect.AggregateH\000\022!\n\003sql\030\n \001(\0132\022.spark."
          + "connect.SQLH\000\0226\n\016local_relation\030\013 \001(\0132\034."
          + "spark.connect.LocalRelationH\000\022\'\n\006sample\030"
          + "\014 \001(\0132\025.spark.connect.SampleH\000\022\'\n\006offset"
          + "\030\r \001(\0132\025.spark.connect.OffsetH\000\0221\n\013dedup"
          + "licate\030\016 \001(\0132\032.spark.connect.Deduplicate"
          + "H\000\022%\n\005range\030\017 \001(\0132\024.spark.connect.RangeH"
          + "\000\0226\n\016subquery_alias\030\020 \001(\0132\034.spark.connec"
          + "t.SubqueryAliasH\000\0221\n\013repartition\030\021 \001(\0132\032"
          + ".spark.connect.RepartitionH\000\022$\n\005to_df\030\022 "
          + "\001(\0132\023.spark.connect.ToDFH\000\022A\n\024with_colum"
          + "ns_renamed\030\023 \001(\0132!.spark.connect.WithCol"
          + "umnsRenamedH\000\0220\n\013show_string\030\024 \001(\0132\031.spa"
          + "rk.connect.ShowStringH\000\022#\n\004drop\030\025 \001(\0132\023."
          + "spark.connect.DropH\000\022#\n\004tail\030\026 \001(\0132\023.spa"
          + "rk.connect.TailH\000\0222\n\014with_columns\030\027 \001(\0132"
          + "\032.spark.connect.WithColumnsH\000\022#\n\004hint\030\030 "
          + "\001(\0132\023.spark.connect.HintH\000\022)\n\007unpivot\030\031 "
          + "\001(\0132\026.spark.connect.UnpivotH\000\022,\n\tto_sche"
          + "ma\030\032 \001(\0132\027.spark.connect.ToSchemaH\000\022K\n\031r"
          + "epartition_by_expression\030\033 \001(\0132&.spark.c"
          + "onnect.RepartitionByExpressionH\000\0226\n\016map_"
          + "partitions\030\034 \001(\0132\034.spark.connect.MapPart"
          + "itionsH\000\0228\n\017collect_metrics\030\035 \001(\0132\035.spar"
          + "k.connect.CollectMetricsH\000\022%\n\005parse\030\036 \001("
          + "\0132\024.spark.connect.ParseH\000\022,\n\tgroup_map\030\037"
          + " \001(\0132\027.spark.connect.GroupMapH\000\0221\n\014co_gr"
          + "oup_map\030  \001(\0132\031.spark.connect.CoGroupMap"
          + "H\000\0226\n\016with_watermark\030! \001(\0132\034.spark.conne"
          + "ct.WithWatermarkH\000\022K\n\032apply_in_pandas_wi"
          + "th_state\030\" \001(\0132%.spark.connect.ApplyInPa"
          + "ndasWithStateH\000\0220\n\013html_string\030# \001(\0132\031.s"
          + "park.connect.HtmlStringH\000\022C\n\025cached_loca"
          + "l_relation\030$ \001(\0132\".spark.connect.CachedL"
          + "ocalRelationH\000\022E\n\026cached_remote_relation"
          + "\030% \001(\0132#.spark.connect.CachedRemoteRelat"
          + "ionH\000\022h\n)common_inline_user_defined_tabl"
          + "e_function\030& \001(\01323.spark.connect.CommonI"
          + "nlineUserDefinedTableFunctionH\000\022-\n\nas_of"
          + "_join\030\' \001(\0132\027.spark.connect.AsOfJoinH\000\022b"
          + "\n&common_inline_user_defined_data_source"
          + "\030( \001(\01320.spark.connect.CommonInlineUserD"
          + "efinedDataSourceH\000\0226\n\016with_relations\030) \001"
          + "(\0132\034.spark.connect.WithRelationsH\000\022(\n\007fi"
          + "ll_na\030Z \001(\0132\025.spark.connect.NAFillH\000\022(\n\007"
          + "drop_na\030[ \001(\0132\025.spark.connect.NADropH\000\022+"
          + "\n\007replace\030\\ \001(\0132\030.spark.connect.NAReplac"
          + "eH\000\022-\n\007summary\030d \001(\0132\032.spark.connect.Sta"
          + "tSummaryH\000\022/\n\010crosstab\030e \001(\0132\033.spark.con"
          + "nect.StatCrosstabH\000\022/\n\010describe\030f \001(\0132\033."
          + "spark.connect.StatDescribeH\000\022%\n\003cov\030g \001("
          + "\0132\026.spark.connect.StatCovH\000\022\'\n\004corr\030h \001("
          + "\0132\027.spark.connect.StatCorrH\000\022<\n\017approx_q"
          + "uantile\030i \001(\0132!.spark.connect.StatApprox"
          + "QuantileH\000\0222\n\nfreq_items\030j \001(\0132\034.spark.c"
          + "onnect.StatFreqItemsH\000\0220\n\tsample_by\030k \001("
          + "\0132\033.spark.connect.StatSampleByH\000\022*\n\007cata"
          + "log\030\310\001 \001(\0132\026.spark.connect.CatalogH\000\022*\n\t"
          + "extension\030\346\007 \001(\0132\024.google.protobuf.AnyH\000"
          + "\022*\n\007unknown\030\347\007 \001(\0132\026.spark.connect.Unkno"
          + "wnH\000B\n\n\010rel_type\"\t\n\007Unknown\"G\n\016RelationC"
          + "ommon\022\023\n\013source_info\030\001 \001(\t\022\024\n\007plan_id\030\002 "
          + "\001(\003H\000\210\001\001B\n\n\010_plan_id\"\222\003\n\003SQL\022\r\n\005query\030\001 "
          + "\001(\t\022.\n\004args\030\002 \003(\0132\034.spark.connect.SQL.Ar"
          + "gsEntryB\002\030\001\0227\n\010pos_args\030\003 \003(\0132!.spark.co"
          + "nnect.Expression.LiteralB\002\030\001\022?\n\017named_ar"
          + "guments\030\004 \003(\0132&.spark.connect.SQL.NamedA"
          + "rgumentsEntry\0220\n\rpos_arguments\030\005 \003(\0132\031.s"
          + "park.connect.Expression\032N\n\tArgsEntry\022\013\n\003"
          + "key\030\001 \001(\t\0220\n\005value\030\002 \001(\0132!.spark.connect"
          + ".Expression.Literal:\0028\001\032P\n\023NamedArgument"
          + "sEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002 \001(\0132\031.spa"
          + "rk.connect.Expression:\0028\001\"c\n\rWithRelatio"
          + "ns\022%\n\004root\030\001 \001(\0132\027.spark.connect.Relatio"
          + "n\022+\n\nreferences\030\002 \003(\0132\027.spark.connect.Re"
          + "lation\"\221\004\n\004Read\0225\n\013named_table\030\001 \001(\0132\036.s"
          + "park.connect.Read.NamedTableH\000\0225\n\013data_s"
          + "ource\030\002 \001(\0132\036.spark.connect.Read.DataSou"
          + "rceH\000\022\024\n\014is_streaming\030\003 \001(\010\032\227\001\n\nNamedTab"
          + "le\022\033\n\023unparsed_identifier\030\001 \001(\t\022<\n\007optio"
          + "ns\030\002 \003(\0132+.spark.connect.Read.NamedTable"
          + ".OptionsEntry\032.\n\014OptionsEntry\022\013\n\003key\030\001 \001"
          + "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032\335\001\n\nDataSource\022\023\n\006"
          + "format\030\001 \001(\tH\000\210\001\001\022\023\n\006schema\030\002 \001(\tH\001\210\001\001\022<"
          + "\n\007options\030\003 \003(\0132+.spark.connect.Read.Dat"
          + "aSource.OptionsEntry\022\r\n\005paths\030\004 \003(\t\022\022\n\np"
          + "redicates\030\005 \003(\t\032.\n\014OptionsEntry\022\013\n\003key\030\001"
          + " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\t\n\007_formatB\t\n\007_s"
          + "chemaB\013\n\tread_type\"a\n\007Project\022&\n\005input\030\001"
          + " \001(\0132\027.spark.connect.Relation\022.\n\013express"
          + "ions\030\003 \003(\0132\031.spark.connect.Expression\"^\n"
          + "\006Filter\022&\n\005input\030\001 \001(\0132\027.spark.connect.R"
          + "elation\022,\n\tcondition\030\002 \001(\0132\031.spark.conne"
          + "ct.Expression\"\266\004\n\004Join\022%\n\004left\030\001 \001(\0132\027.s"
          + "park.connect.Relation\022&\n\005right\030\002 \001(\0132\027.s"
          + "park.connect.Relation\0221\n\016join_condition\030"
          + "\003 \001(\0132\031.spark.connect.Expression\022/\n\tjoin"
          + "_type\030\004 \001(\0162\034.spark.connect.Join.JoinTyp"
          + "e\022\025\n\rusing_columns\030\005 \003(\t\022=\n\016join_data_ty"
          + "pe\030\006 \001(\0132 .spark.connect.Join.JoinDataTy"
          + "peH\000\210\001\001\032?\n\014JoinDataType\022\026\n\016is_left_struc"
          + "t\030\001 \001(\010\022\027\n\017is_right_struct\030\002 \001(\010\"\320\001\n\010Joi"
          + "nType\022\031\n\025JOIN_TYPE_UNSPECIFIED\020\000\022\023\n\017JOIN"
          + "_TYPE_INNER\020\001\022\030\n\024JOIN_TYPE_FULL_OUTER\020\002\022"
          + "\030\n\024JOIN_TYPE_LEFT_OUTER\020\003\022\031\n\025JOIN_TYPE_R"
          + "IGHT_OUTER\020\004\022\027\n\023JOIN_TYPE_LEFT_ANTI\020\005\022\027\n"
          + "\023JOIN_TYPE_LEFT_SEMI\020\006\022\023\n\017JOIN_TYPE_CROS"
          + "S\020\007B\021\n\017_join_data_type\"\231\003\n\014SetOperation\022"
          + "+\n\nleft_input\030\001 \001(\0132\027.spark.connect.Rela"
          + "tion\022,\n\013right_input\030\002 \001(\0132\027.spark.connec"
          + "t.Relation\022:\n\013set_op_type\030\003 \001(\0162%.spark."
          + "connect.SetOperation.SetOpType\022\023\n\006is_all"
          + "\030\004 \001(\010H\000\210\001\001\022\024\n\007by_name\030\005 \001(\010H\001\210\001\001\022\"\n\025all"
          + "ow_missing_columns\030\006 \001(\010H\002\210\001\001\"r\n\tSetOpTy"
          + "pe\022\033\n\027SET_OP_TYPE_UNSPECIFIED\020\000\022\031\n\025SET_O"
          + "P_TYPE_INTERSECT\020\001\022\025\n\021SET_OP_TYPE_UNION\020"
          + "\002\022\026\n\022SET_OP_TYPE_EXCEPT\020\003B\t\n\007_is_allB\n\n\010"
          + "_by_nameB\030\n\026_allow_missing_columns\">\n\005Li"
          + "mit\022&\n\005input\030\001 \001(\0132\027.spark.connect.Relat"
          + "ion\022\r\n\005limit\030\002 \001(\005\"@\n\006Offset\022&\n\005input\030\001 "
          + "\001(\0132\027.spark.connect.Relation\022\016\n\006offset\030\002"
          + " \001(\005\"=\n\004Tail\022&\n\005input\030\001 \001(\0132\027.spark.conn"
          + "ect.Relation\022\r\n\005limit\030\002 \001(\005\"\222\005\n\tAggregat"
          + "e\022&\n\005input\030\001 \001(\0132\027.spark.connect.Relatio"
          + "n\0226\n\ngroup_type\030\002 \001(\0162\".spark.connect.Ag"
          + "gregate.GroupType\0227\n\024grouping_expression"
          + "s\030\003 \003(\0132\031.spark.connect.Expression\0228\n\025ag"
          + "gregate_expressions\030\004 \003(\0132\031.spark.connec"
          + "t.Expression\022-\n\005pivot\030\005 \001(\0132\036.spark.conn"
          + "ect.Aggregate.Pivot\022<\n\rgrouping_sets\030\006 \003"
          + "(\0132%.spark.connect.Aggregate.GroupingSet"
          + "s\032b\n\005Pivot\022&\n\003col\030\001 \001(\0132\031.spark.connect."
          + "Expression\0221\n\006values\030\002 \003(\0132!.spark.conne"
          + "ct.Expression.Literal\032?\n\014GroupingSets\022/\n"
          + "\014grouping_set\030\001 \003(\0132\031.spark.connect.Expr"
          + "ession\"\237\001\n\tGroupType\022\032\n\026GROUP_TYPE_UNSPE"
          + "CIFIED\020\000\022\026\n\022GROUP_TYPE_GROUPBY\020\001\022\025\n\021GROU"
          + "P_TYPE_ROLLUP\020\002\022\023\n\017GROUP_TYPE_CUBE\020\003\022\024\n\020"
          + "GROUP_TYPE_PIVOT\020\004\022\034\n\030GROUP_TYPE_GROUPIN"
          + "G_SETS\020\005\"\210\001\n\004Sort\022&\n\005input\030\001 \001(\0132\027.spark"
          + ".connect.Relation\0222\n\005order\030\002 \003(\0132#.spark"
          + ".connect.Expression.SortOrder\022\026\n\tis_glob"
          + "al\030\003 \001(\010H\000\210\001\001B\014\n\n_is_global\"p\n\004Drop\022&\n\005i"
          + "nput\030\001 \001(\0132\027.spark.connect.Relation\022*\n\007c"
          + "olumns\030\002 \003(\0132\031.spark.connect.Expression\022"
          + "\024\n\014column_names\030\003 \003(\t\"\271\001\n\013Deduplicate\022&\n"
          + "\005input\030\001 \001(\0132\027.spark.connect.Relation\022\024\n"
          + "\014column_names\030\002 \003(\t\022 \n\023all_columns_as_ke"
          + "ys\030\003 \001(\010H\000\210\001\001\022\035\n\020within_watermark\030\004 \001(\010H"
          + "\001\210\001\001B\026\n\024_all_columns_as_keysB\023\n\021_within_"
          + "watermark\"K\n\rLocalRelation\022\021\n\004data\030\001 \001(\014"
          + "H\000\210\001\001\022\023\n\006schema\030\002 \001(\tH\001\210\001\001B\007\n\005_dataB\t\n\007_"
          + "schema\"B\n\023CachedLocalRelation\022\014\n\004hash\030\003 "
          + "\001(\tJ\004\010\001\020\002J\004\010\002\020\003R\006userIdR\tsessionId\"+\n\024Ca"
          + "chedRemoteRelation\022\023\n\013relation_id\030\001 \001(\t\""
          + "\307\001\n\006Sample\022&\n\005input\030\001 \001(\0132\027.spark.connec"
          + "t.Relation\022\023\n\013lower_bound\030\002 \001(\001\022\023\n\013upper"
          + "_bound\030\003 \001(\001\022\035\n\020with_replacement\030\004 \001(\010H\000"
          + "\210\001\001\022\021\n\004seed\030\005 \001(\003H\001\210\001\001\022\033\n\023deterministic_"
          + "order\030\006 \001(\010B\023\n\021_with_replacementB\007\n\005_see"
          + "d\"p\n\005Range\022\022\n\005start\030\001 \001(\003H\000\210\001\001\022\013\n\003end\030\002 "
          + "\001(\003\022\014\n\004step\030\003 \001(\003\022\033\n\016num_partitions\030\004 \001("
          + "\005H\001\210\001\001B\010\n\006_startB\021\n\017_num_partitions\"Y\n\rS"
          + "ubqueryAlias\022&\n\005input\030\001 \001(\0132\027.spark.conn"
          + "ect.Relation\022\r\n\005alias\030\002 \001(\t\022\021\n\tqualifier"
          + "\030\003 \003(\t\"o\n\013Repartition\022&\n\005input\030\001 \001(\0132\027.s"
          + "park.connect.Relation\022\026\n\016num_partitions\030"
          + "\002 \001(\005\022\024\n\007shuffle\030\003 \001(\010H\000\210\001\001B\n\n\010_shuffle\""
          + "j\n\nShowString\022&\n\005input\030\001 \001(\0132\027.spark.con"
          + "nect.Relation\022\020\n\010num_rows\030\002 \001(\005\022\020\n\010trunc"
          + "ate\030\003 \001(\005\022\020\n\010vertical\030\004 \001(\010\"X\n\nHtmlStrin"
          + "g\022&\n\005input\030\001 \001(\0132\027.spark.connect.Relatio"
          + "n\022\020\n\010num_rows\030\002 \001(\005\022\020\n\010truncate\030\003 \001(\005\"I\n"
          + "\013StatSummary\022&\n\005input\030\001 \001(\0132\027.spark.conn"
          + "ect.Relation\022\022\n\nstatistics\030\002 \003(\t\"D\n\014Stat"
          + "Describe\022&\n\005input\030\001 \001(\0132\027.spark.connect."
          + "Relation\022\014\n\004cols\030\002 \003(\t\"R\n\014StatCrosstab\022&"
          + "\n\005input\030\001 \001(\0132\027.spark.connect.Relation\022\014"
          + "\n\004col1\030\002 \001(\t\022\014\n\004col2\030\003 \001(\t\"M\n\007StatCov\022&\n"
          + "\005input\030\001 \001(\0132\027.spark.connect.Relation\022\014\n"
          + "\004col1\030\002 \001(\t\022\014\n\004col2\030\003 \001(\t\"n\n\010StatCorr\022&\n"
          + "\005input\030\001 \001(\0132\027.spark.connect.Relation\022\014\n"
          + "\004col1\030\002 \001(\t\022\014\n\004col2\030\003 \001(\t\022\023\n\006method\030\004 \001("
          + "\tH\000\210\001\001B\t\n\007_method\"y\n\022StatApproxQuantile\022"
          + "&\n\005input\030\001 \001(\0132\027.spark.connect.Relation\022"
          + "\014\n\004cols\030\002 \003(\t\022\025\n\rprobabilities\030\003 \003(\001\022\026\n\016"
          + "relative_error\030\004 \001(\001\"g\n\rStatFreqItems\022&\n"
          + "\005input\030\001 \001(\0132\027.spark.connect.Relation\022\014\n"
          + "\004cols\030\002 \003(\t\022\024\n\007support\030\003 \001(\001H\000\210\001\001B\n\n\010_su"
          + "pport\"\205\002\n\014StatSampleBy\022&\n\005input\030\001 \001(\0132\027."
          + "spark.connect.Relation\022&\n\003col\030\002 \001(\0132\031.sp"
          + "ark.connect.Expression\0227\n\tfractions\030\003 \003("
          + "\0132$.spark.connect.StatSampleBy.Fraction\022"
          + "\021\n\004seed\030\005 \001(\003H\000\210\001\001\032P\n\010Fraction\0222\n\007stratu"
          + "m\030\001 \001(\0132!.spark.connect.Expression.Liter"
          + "al\022\020\n\010fraction\030\002 \001(\001B\007\n\005_seed\"q\n\006NAFill\022"
          + "&\n\005input\030\001 \001(\0132\027.spark.connect.Relation\022"
          + "\014\n\004cols\030\002 \003(\t\0221\n\006values\030\003 \003(\0132!.spark.co"
          + "nnect.Expression.Literal\"l\n\006NADrop\022&\n\005in"
          + "put\030\001 \001(\0132\027.spark.connect.Relation\022\014\n\004co"
          + "ls\030\002 \003(\t\022\032\n\rmin_non_nulls\030\003 \001(\005H\000\210\001\001B\020\n\016"
          + "_min_non_nulls\"\370\001\n\tNAReplace\022&\n\005input\030\001 "
          + "\001(\0132\027.spark.connect.Relation\022\014\n\004cols\030\002 \003"
          + "(\t\022:\n\014replacements\030\003 \003(\0132$.spark.connect"
          + ".NAReplace.Replacement\032y\n\013Replacement\0224\n"
          + "\told_value\030\001 \001(\0132!.spark.connect.Express"
          + "ion.Literal\0224\n\tnew_value\030\002 \001(\0132!.spark.c"
          + "onnect.Expression.Literal\"D\n\004ToDF\022&\n\005inp"
          + "ut\030\001 \001(\0132\027.spark.connect.Relation\022\024\n\014col"
          + "umn_names\030\002 \003(\t\"\273\002\n\022WithColumnsRenamed\022&"
          + "\n\005input\030\001 \001(\0132\027.spark.connect.Relation\022W"
          + "\n\022rename_columns_map\030\002 \003(\01327.spark.conne"
          + "ct.WithColumnsRenamed.RenameColumnsMapEn"
          + "tryB\002\030\001\0229\n\007renames\030\003 \003(\0132(.spark.connect"
          + ".WithColumnsRenamed.Rename\0327\n\025RenameColu"
          + "mnsMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
          + "\0028\001\0320\n\006Rename\022\020\n\010col_name\030\001 \001(\t\022\024\n\014new_c"
          + "ol_name\030\002 \001(\t\"g\n\013WithColumns\022&\n\005input\030\001 "
          + "\001(\0132\027.spark.connect.Relation\0220\n\007aliases\030"
          + "\002 \003(\0132\037.spark.connect.Expression.Alias\"d"
          + "\n\rWithWatermark\022&\n\005input\030\001 \001(\0132\027.spark.c"
          + "onnect.Relation\022\022\n\nevent_time\030\002 \001(\t\022\027\n\017d"
          + "elay_threshold\030\003 \001(\t\"k\n\004Hint\022&\n\005input\030\001 "
          + "\001(\0132\027.spark.connect.Relation\022\014\n\004name\030\002 \001"
          + "(\t\022-\n\nparameters\030\003 \003(\0132\031.spark.connect.E"
          + "xpression\"\206\002\n\007Unpivot\022&\n\005input\030\001 \001(\0132\027.s"
          + "park.connect.Relation\022&\n\003ids\030\002 \003(\0132\031.spa"
          + "rk.connect.Expression\0222\n\006values\030\003 \001(\0132\035."
          + "spark.connect.Unpivot.ValuesH\000\210\001\001\022\034\n\024var"
          + "iable_column_name\030\004 \001(\t\022\031\n\021value_column_"
          + "name\030\005 \001(\t\0323\n\006Values\022)\n\006values\030\001 \003(\0132\031.s"
          + "park.connect.ExpressionB\t\n\007_values\"[\n\010To"
          + "Schema\022&\n\005input\030\001 \001(\0132\027.spark.connect.Re"
          + "lation\022\'\n\006schema\030\002 \001(\0132\027.spark.connect.D"
          + "ataType\"\245\001\n\027RepartitionByExpression\022&\n\005i"
          + "nput\030\001 \001(\0132\027.spark.connect.Relation\0222\n\017p"
          + "artition_exprs\030\002 \003(\0132\031.spark.connect.Exp"
          + "ression\022\033\n\016num_partitions\030\003 \001(\005H\000\210\001\001B\021\n\017"
          + "_num_partitions\"\305\001\n\rMapPartitions\022&\n\005inp"
          + "ut\030\001 \001(\0132\027.spark.connect.Relation\022<\n\004fun"
          + "c\030\002 \001(\0132..spark.connect.CommonInlineUser"
          + "DefinedFunction\022\027\n\nis_barrier\030\003 \001(\010H\000\210\001\001"
          + "\022\027\n\nprofile_id\030\004 \001(\005H\001\210\001\001B\r\n\013_is_barrier"
          + "B\r\n\013_profile_id\"\354\003\n\010GroupMap\022&\n\005input\030\001 "
          + "\001(\0132\027.spark.connect.Relation\0227\n\024grouping"
          + "_expressions\030\002 \003(\0132\031.spark.connect.Expre"
          + "ssion\022<\n\004func\030\003 \001(\0132..spark.connect.Comm"
          + "onInlineUserDefinedFunction\0226\n\023sorting_e"
          + "xpressions\030\004 \003(\0132\031.spark.connect.Express"
          + "ion\022.\n\rinitial_input\030\005 \001(\0132\027.spark.conne"
          + "ct.Relation\022?\n\034initial_grouping_expressi"
          + "ons\030\006 \003(\0132\031.spark.connect.Expression\022%\n\030"
          + "is_map_groups_with_state\030\007 \001(\010H\000\210\001\001\022\030\n\013o"
          + "utput_mode\030\010 \001(\tH\001\210\001\001\022\031\n\014timeout_conf\030\t "
          + "\001(\tH\002\210\001\001B\033\n\031_is_map_groups_with_stateB\016\n"
          + "\014_output_modeB\017\n\r_timeout_conf\"\224\003\n\nCoGro"
          + "upMap\022&\n\005input\030\001 \001(\0132\027.spark.connect.Rel"
          + "ation\022=\n\032input_grouping_expressions\030\002 \003("
          + "\0132\031.spark.connect.Expression\022&\n\005other\030\003 "
          + "\001(\0132\027.spark.connect.Relation\022=\n\032other_gr"
          + "ouping_expressions\030\004 \003(\0132\031.spark.connect"
          + ".Expression\022<\n\004func\030\005 \001(\0132..spark.connec"
          + "t.CommonInlineUserDefinedFunction\022<\n\031inp"
          + "ut_sorting_expressions\030\006 \003(\0132\031.spark.con"
          + "nect.Expression\022<\n\031other_sorting_express"
          + "ions\030\007 \003(\0132\031.spark.connect.Expression\"\217\002"
          + "\n\026ApplyInPandasWithState\022&\n\005input\030\001 \001(\0132"
          + "\027.spark.connect.Relation\0227\n\024grouping_exp"
          + "ressions\030\002 \003(\0132\031.spark.connect.Expressio"
          + "n\022<\n\004func\030\003 \001(\0132..spark.connect.CommonIn"
          + "lineUserDefinedFunction\022\025\n\routput_schema"
          + "\030\004 \001(\t\022\024\n\014state_schema\030\005 \001(\t\022\023\n\013output_m"
          + "ode\030\006 \001(\t\022\024\n\014timeout_conf\030\007 \001(\t\"\300\001\n$Comm"
          + "onInlineUserDefinedTableFunction\022\025\n\rfunc"
          + "tion_name\030\001 \001(\t\022\025\n\rdeterministic\030\002 \001(\010\022,"
          + "\n\targuments\030\003 \003(\0132\031.spark.connect.Expres"
          + "sion\0220\n\013python_udtf\030\004 \001(\0132\031.spark.connec"
          + "t.PythonUDTFH\000B\n\n\010function\"\207\001\n\nPythonUDT"
          + "F\0221\n\013return_type\030\001 \001(\0132\027.spark.connect.D"
          + "ataTypeH\000\210\001\001\022\021\n\teval_type\030\002 \001(\005\022\017\n\007comma"
          + "nd\030\003 \001(\014\022\022\n\npython_ver\030\004 \001(\tB\016\n\014_return_"
          + "type\"\177\n!CommonInlineUserDefinedDataSourc"
          + "e\022\014\n\004name\030\001 \001(\t\022=\n\022python_data_source\030\002 "
          + "\001(\0132\037.spark.connect.PythonDataSourceH\000B\r"
          + "\n\013data_source\"7\n\020PythonDataSource\022\017\n\007com"
          + "mand\030\001 \001(\014\022\022\n\npython_ver\030\002 \001(\t\"r\n\016Collec"
          + "tMetrics\022&\n\005input\030\001 \001(\0132\027.spark.connect."
          + "Relation\022\014\n\004name\030\002 \001(\t\022*\n\007metrics\030\003 \003(\0132"
          + "\031.spark.connect.Expression\"\330\002\n\005Parse\022&\n\005"
          + "input\030\001 \001(\0132\027.spark.connect.Relation\0220\n\006"
          + "format\030\002 \001(\0162 .spark.connect.Parse.Parse"
          + "Format\022,\n\006schema\030\003 \001(\0132\027.spark.connect.D"
          + "ataTypeH\000\210\001\001\0222\n\007options\030\004 \003(\0132!.spark.co"
          + "nnect.Parse.OptionsEntry\032.\n\014OptionsEntry"
          + "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"X\n\013Pars"
          + "eFormat\022\034\n\030PARSE_FORMAT_UNSPECIFIED\020\000\022\024\n"
          + "\020PARSE_FORMAT_CSV\020\001\022\025\n\021PARSE_FORMAT_JSON"
          + "\020\002B\t\n\007_schema\"\356\002\n\010AsOfJoin\022%\n\004left\030\001 \001(\013"
          + "2\027.spark.connect.Relation\022&\n\005right\030\002 \001(\013"
          + "2\027.spark.connect.Relation\022-\n\nleft_as_of\030"
          + "\003 \001(\0132\031.spark.connect.Expression\022.\n\013righ"
          + "t_as_of\030\004 \001(\0132\031.spark.connect.Expression"
          + "\022,\n\tjoin_expr\030\005 \001(\0132\031.spark.connect.Expr"
          + "ession\022\025\n\rusing_columns\030\006 \003(\t\022\021\n\tjoin_ty"
          + "pe\030\007 \001(\t\022,\n\ttolerance\030\010 \001(\0132\031.spark.conn"
          + "ect.Expression\022\033\n\023allow_exact_matches\030\t "
          + "\001(\010\022\021\n\tdirection\030\n \001(\tBI\n1org.apache.kyu"
          + "ubi.engine.spark.connect.grpc.protoP\001Z\022i"
          + "nternal/generatedb\006proto3"
    };
    descriptor =
        com.google.protobuf.Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(
            descriptorData,
            new com.google.protobuf.Descriptors.FileDescriptor[] {
              com.google.protobuf.AnyProto.getDescriptor(),
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Expressions.getDescriptor(),
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Types.getDescriptor(),
              org.apache.kyuubi.engine.spark.connect.grpc.proto.CatalogOuterClass.getDescriptor(),
            });
    internal_static_spark_connect_Relation_descriptor = getDescriptor().getMessageTypes().get(0);
    internal_static_spark_connect_Relation_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Relation_descriptor,
            new java.lang.String[] {
              "Common",
              "Read",
              "Project",
              "Filter",
              "Join",
              "SetOp",
              "Sort",
              "Limit",
              "Aggregate",
              "Sql",
              "LocalRelation",
              "Sample",
              "Offset",
              "Deduplicate",
              "Range",
              "SubqueryAlias",
              "Repartition",
              "ToDf",
              "WithColumnsRenamed",
              "ShowString",
              "Drop",
              "Tail",
              "WithColumns",
              "Hint",
              "Unpivot",
              "ToSchema",
              "RepartitionByExpression",
              "MapPartitions",
              "CollectMetrics",
              "Parse",
              "GroupMap",
              "CoGroupMap",
              "WithWatermark",
              "ApplyInPandasWithState",
              "HtmlString",
              "CachedLocalRelation",
              "CachedRemoteRelation",
              "CommonInlineUserDefinedTableFunction",
              "AsOfJoin",
              "CommonInlineUserDefinedDataSource",
              "WithRelations",
              "FillNa",
              "DropNa",
              "Replace",
              "Summary",
              "Crosstab",
              "Describe",
              "Cov",
              "Corr",
              "ApproxQuantile",
              "FreqItems",
              "SampleBy",
              "Catalog",
              "Extension",
              "Unknown",
              "RelType",
            });
    internal_static_spark_connect_Unknown_descriptor = getDescriptor().getMessageTypes().get(1);
    internal_static_spark_connect_Unknown_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Unknown_descriptor, new java.lang.String[] {});
    internal_static_spark_connect_RelationCommon_descriptor =
        getDescriptor().getMessageTypes().get(2);
    internal_static_spark_connect_RelationCommon_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_RelationCommon_descriptor,
            new java.lang.String[] {
              "SourceInfo", "PlanId", "PlanId",
            });
    internal_static_spark_connect_SQL_descriptor = getDescriptor().getMessageTypes().get(3);
    internal_static_spark_connect_SQL_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_SQL_descriptor,
            new java.lang.String[] {
              "Query", "Args", "PosArgs", "NamedArguments", "PosArguments",
            });
    internal_static_spark_connect_SQL_ArgsEntry_descriptor =
        internal_static_spark_connect_SQL_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_SQL_ArgsEntry_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_SQL_ArgsEntry_descriptor,
            new java.lang.String[] {
              "Key", "Value",
            });
    internal_static_spark_connect_SQL_NamedArgumentsEntry_descriptor =
        internal_static_spark_connect_SQL_descriptor.getNestedTypes().get(1);
    internal_static_spark_connect_SQL_NamedArgumentsEntry_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_SQL_NamedArgumentsEntry_descriptor,
            new java.lang.String[] {
              "Key", "Value",
            });
    internal_static_spark_connect_WithRelations_descriptor =
        getDescriptor().getMessageTypes().get(4);
    internal_static_spark_connect_WithRelations_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_WithRelations_descriptor,
            new java.lang.String[] {
              "Root", "References",
            });
    internal_static_spark_connect_Read_descriptor = getDescriptor().getMessageTypes().get(5);
    internal_static_spark_connect_Read_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Read_descriptor,
            new java.lang.String[] {
              "NamedTable", "DataSource", "IsStreaming", "ReadType",
            });
    internal_static_spark_connect_Read_NamedTable_descriptor =
        internal_static_spark_connect_Read_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_Read_NamedTable_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Read_NamedTable_descriptor,
            new java.lang.String[] {
              "UnparsedIdentifier", "Options",
            });
    internal_static_spark_connect_Read_NamedTable_OptionsEntry_descriptor =
        internal_static_spark_connect_Read_NamedTable_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_Read_NamedTable_OptionsEntry_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Read_NamedTable_OptionsEntry_descriptor,
            new java.lang.String[] {
              "Key", "Value",
            });
    internal_static_spark_connect_Read_DataSource_descriptor =
        internal_static_spark_connect_Read_descriptor.getNestedTypes().get(1);
    internal_static_spark_connect_Read_DataSource_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Read_DataSource_descriptor,
            new java.lang.String[] {
              "Format", "Schema", "Options", "Paths", "Predicates", "Format", "Schema",
            });
    internal_static_spark_connect_Read_DataSource_OptionsEntry_descriptor =
        internal_static_spark_connect_Read_DataSource_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_Read_DataSource_OptionsEntry_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Read_DataSource_OptionsEntry_descriptor,
            new java.lang.String[] {
              "Key", "Value",
            });
    internal_static_spark_connect_Project_descriptor = getDescriptor().getMessageTypes().get(6);
    internal_static_spark_connect_Project_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Project_descriptor,
            new java.lang.String[] {
              "Input", "Expressions",
            });
    internal_static_spark_connect_Filter_descriptor = getDescriptor().getMessageTypes().get(7);
    internal_static_spark_connect_Filter_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Filter_descriptor,
            new java.lang.String[] {
              "Input", "Condition",
            });
    internal_static_spark_connect_Join_descriptor = getDescriptor().getMessageTypes().get(8);
    internal_static_spark_connect_Join_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Join_descriptor,
            new java.lang.String[] {
              "Left",
              "Right",
              "JoinCondition",
              "JoinType",
              "UsingColumns",
              "JoinDataType",
              "JoinDataType",
            });
    internal_static_spark_connect_Join_JoinDataType_descriptor =
        internal_static_spark_connect_Join_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_Join_JoinDataType_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Join_JoinDataType_descriptor,
            new java.lang.String[] {
              "IsLeftStruct", "IsRightStruct",
            });
    internal_static_spark_connect_SetOperation_descriptor =
        getDescriptor().getMessageTypes().get(9);
    internal_static_spark_connect_SetOperation_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_SetOperation_descriptor,
            new java.lang.String[] {
              "LeftInput",
              "RightInput",
              "SetOpType",
              "IsAll",
              "ByName",
              "AllowMissingColumns",
              "IsAll",
              "ByName",
              "AllowMissingColumns",
            });
    internal_static_spark_connect_Limit_descriptor = getDescriptor().getMessageTypes().get(10);
    internal_static_spark_connect_Limit_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Limit_descriptor,
            new java.lang.String[] {
              "Input", "Limit",
            });
    internal_static_spark_connect_Offset_descriptor = getDescriptor().getMessageTypes().get(11);
    internal_static_spark_connect_Offset_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Offset_descriptor,
            new java.lang.String[] {
              "Input", "Offset",
            });
    internal_static_spark_connect_Tail_descriptor = getDescriptor().getMessageTypes().get(12);
    internal_static_spark_connect_Tail_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Tail_descriptor,
            new java.lang.String[] {
              "Input", "Limit",
            });
    internal_static_spark_connect_Aggregate_descriptor = getDescriptor().getMessageTypes().get(13);
    internal_static_spark_connect_Aggregate_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Aggregate_descriptor,
            new java.lang.String[] {
              "Input",
              "GroupType",
              "GroupingExpressions",
              "AggregateExpressions",
              "Pivot",
              "GroupingSets",
            });
    internal_static_spark_connect_Aggregate_Pivot_descriptor =
        internal_static_spark_connect_Aggregate_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_Aggregate_Pivot_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Aggregate_Pivot_descriptor,
            new java.lang.String[] {
              "Col", "Values",
            });
    internal_static_spark_connect_Aggregate_GroupingSets_descriptor =
        internal_static_spark_connect_Aggregate_descriptor.getNestedTypes().get(1);
    internal_static_spark_connect_Aggregate_GroupingSets_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Aggregate_GroupingSets_descriptor,
            new java.lang.String[] {
              "GroupingSet",
            });
    internal_static_spark_connect_Sort_descriptor = getDescriptor().getMessageTypes().get(14);
    internal_static_spark_connect_Sort_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Sort_descriptor,
            new java.lang.String[] {
              "Input", "Order", "IsGlobal", "IsGlobal",
            });
    internal_static_spark_connect_Drop_descriptor = getDescriptor().getMessageTypes().get(15);
    internal_static_spark_connect_Drop_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Drop_descriptor,
            new java.lang.String[] {
              "Input", "Columns", "ColumnNames",
            });
    internal_static_spark_connect_Deduplicate_descriptor =
        getDescriptor().getMessageTypes().get(16);
    internal_static_spark_connect_Deduplicate_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Deduplicate_descriptor,
            new java.lang.String[] {
              "Input",
              "ColumnNames",
              "AllColumnsAsKeys",
              "WithinWatermark",
              "AllColumnsAsKeys",
              "WithinWatermark",
            });
    internal_static_spark_connect_LocalRelation_descriptor =
        getDescriptor().getMessageTypes().get(17);
    internal_static_spark_connect_LocalRelation_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_LocalRelation_descriptor,
            new java.lang.String[] {
              "Data", "Schema", "Data", "Schema",
            });
    internal_static_spark_connect_CachedLocalRelation_descriptor =
        getDescriptor().getMessageTypes().get(18);
    internal_static_spark_connect_CachedLocalRelation_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_CachedLocalRelation_descriptor,
            new java.lang.String[] {
              "Hash",
            });
    internal_static_spark_connect_CachedRemoteRelation_descriptor =
        getDescriptor().getMessageTypes().get(19);
    internal_static_spark_connect_CachedRemoteRelation_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_CachedRemoteRelation_descriptor,
            new java.lang.String[] {
              "RelationId",
            });
    internal_static_spark_connect_Sample_descriptor = getDescriptor().getMessageTypes().get(20);
    internal_static_spark_connect_Sample_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Sample_descriptor,
            new java.lang.String[] {
              "Input",
              "LowerBound",
              "UpperBound",
              "WithReplacement",
              "Seed",
              "DeterministicOrder",
              "WithReplacement",
              "Seed",
            });
    internal_static_spark_connect_Range_descriptor = getDescriptor().getMessageTypes().get(21);
    internal_static_spark_connect_Range_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Range_descriptor,
            new java.lang.String[] {
              "Start", "End", "Step", "NumPartitions", "Start", "NumPartitions",
            });
    internal_static_spark_connect_SubqueryAlias_descriptor =
        getDescriptor().getMessageTypes().get(22);
    internal_static_spark_connect_SubqueryAlias_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_SubqueryAlias_descriptor,
            new java.lang.String[] {
              "Input", "Alias", "Qualifier",
            });
    internal_static_spark_connect_Repartition_descriptor =
        getDescriptor().getMessageTypes().get(23);
    internal_static_spark_connect_Repartition_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Repartition_descriptor,
            new java.lang.String[] {
              "Input", "NumPartitions", "Shuffle", "Shuffle",
            });
    internal_static_spark_connect_ShowString_descriptor = getDescriptor().getMessageTypes().get(24);
    internal_static_spark_connect_ShowString_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_ShowString_descriptor,
            new java.lang.String[] {
              "Input", "NumRows", "Truncate", "Vertical",
            });
    internal_static_spark_connect_HtmlString_descriptor = getDescriptor().getMessageTypes().get(25);
    internal_static_spark_connect_HtmlString_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_HtmlString_descriptor,
            new java.lang.String[] {
              "Input", "NumRows", "Truncate",
            });
    internal_static_spark_connect_StatSummary_descriptor =
        getDescriptor().getMessageTypes().get(26);
    internal_static_spark_connect_StatSummary_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_StatSummary_descriptor,
            new java.lang.String[] {
              "Input", "Statistics",
            });
    internal_static_spark_connect_StatDescribe_descriptor =
        getDescriptor().getMessageTypes().get(27);
    internal_static_spark_connect_StatDescribe_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_StatDescribe_descriptor,
            new java.lang.String[] {
              "Input", "Cols",
            });
    internal_static_spark_connect_StatCrosstab_descriptor =
        getDescriptor().getMessageTypes().get(28);
    internal_static_spark_connect_StatCrosstab_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_StatCrosstab_descriptor,
            new java.lang.String[] {
              "Input", "Col1", "Col2",
            });
    internal_static_spark_connect_StatCov_descriptor = getDescriptor().getMessageTypes().get(29);
    internal_static_spark_connect_StatCov_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_StatCov_descriptor,
            new java.lang.String[] {
              "Input", "Col1", "Col2",
            });
    internal_static_spark_connect_StatCorr_descriptor = getDescriptor().getMessageTypes().get(30);
    internal_static_spark_connect_StatCorr_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_StatCorr_descriptor,
            new java.lang.String[] {
              "Input", "Col1", "Col2", "Method", "Method",
            });
    internal_static_spark_connect_StatApproxQuantile_descriptor =
        getDescriptor().getMessageTypes().get(31);
    internal_static_spark_connect_StatApproxQuantile_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_StatApproxQuantile_descriptor,
            new java.lang.String[] {
              "Input", "Cols", "Probabilities", "RelativeError",
            });
    internal_static_spark_connect_StatFreqItems_descriptor =
        getDescriptor().getMessageTypes().get(32);
    internal_static_spark_connect_StatFreqItems_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_StatFreqItems_descriptor,
            new java.lang.String[] {
              "Input", "Cols", "Support", "Support",
            });
    internal_static_spark_connect_StatSampleBy_descriptor =
        getDescriptor().getMessageTypes().get(33);
    internal_static_spark_connect_StatSampleBy_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_StatSampleBy_descriptor,
            new java.lang.String[] {
              "Input", "Col", "Fractions", "Seed", "Seed",
            });
    internal_static_spark_connect_StatSampleBy_Fraction_descriptor =
        internal_static_spark_connect_StatSampleBy_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_StatSampleBy_Fraction_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_StatSampleBy_Fraction_descriptor,
            new java.lang.String[] {
              "Stratum", "Fraction",
            });
    internal_static_spark_connect_NAFill_descriptor = getDescriptor().getMessageTypes().get(34);
    internal_static_spark_connect_NAFill_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_NAFill_descriptor,
            new java.lang.String[] {
              "Input", "Cols", "Values",
            });
    internal_static_spark_connect_NADrop_descriptor = getDescriptor().getMessageTypes().get(35);
    internal_static_spark_connect_NADrop_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_NADrop_descriptor,
            new java.lang.String[] {
              "Input", "Cols", "MinNonNulls", "MinNonNulls",
            });
    internal_static_spark_connect_NAReplace_descriptor = getDescriptor().getMessageTypes().get(36);
    internal_static_spark_connect_NAReplace_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_NAReplace_descriptor,
            new java.lang.String[] {
              "Input", "Cols", "Replacements",
            });
    internal_static_spark_connect_NAReplace_Replacement_descriptor =
        internal_static_spark_connect_NAReplace_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_NAReplace_Replacement_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_NAReplace_Replacement_descriptor,
            new java.lang.String[] {
              "OldValue", "NewValue",
            });
    internal_static_spark_connect_ToDF_descriptor = getDescriptor().getMessageTypes().get(37);
    internal_static_spark_connect_ToDF_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_ToDF_descriptor,
            new java.lang.String[] {
              "Input", "ColumnNames",
            });
    internal_static_spark_connect_WithColumnsRenamed_descriptor =
        getDescriptor().getMessageTypes().get(38);
    internal_static_spark_connect_WithColumnsRenamed_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_WithColumnsRenamed_descriptor,
            new java.lang.String[] {
              "Input", "RenameColumnsMap", "Renames",
            });
    internal_static_spark_connect_WithColumnsRenamed_RenameColumnsMapEntry_descriptor =
        internal_static_spark_connect_WithColumnsRenamed_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_WithColumnsRenamed_RenameColumnsMapEntry_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_WithColumnsRenamed_RenameColumnsMapEntry_descriptor,
            new java.lang.String[] {
              "Key", "Value",
            });
    internal_static_spark_connect_WithColumnsRenamed_Rename_descriptor =
        internal_static_spark_connect_WithColumnsRenamed_descriptor.getNestedTypes().get(1);
    internal_static_spark_connect_WithColumnsRenamed_Rename_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_WithColumnsRenamed_Rename_descriptor,
            new java.lang.String[] {
              "ColName", "NewColName",
            });
    internal_static_spark_connect_WithColumns_descriptor =
        getDescriptor().getMessageTypes().get(39);
    internal_static_spark_connect_WithColumns_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_WithColumns_descriptor,
            new java.lang.String[] {
              "Input", "Aliases",
            });
    internal_static_spark_connect_WithWatermark_descriptor =
        getDescriptor().getMessageTypes().get(40);
    internal_static_spark_connect_WithWatermark_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_WithWatermark_descriptor,
            new java.lang.String[] {
              "Input", "EventTime", "DelayThreshold",
            });
    internal_static_spark_connect_Hint_descriptor = getDescriptor().getMessageTypes().get(41);
    internal_static_spark_connect_Hint_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Hint_descriptor,
            new java.lang.String[] {
              "Input", "Name", "Parameters",
            });
    internal_static_spark_connect_Unpivot_descriptor = getDescriptor().getMessageTypes().get(42);
    internal_static_spark_connect_Unpivot_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Unpivot_descriptor,
            new java.lang.String[] {
              "Input", "Ids", "Values", "VariableColumnName", "ValueColumnName", "Values",
            });
    internal_static_spark_connect_Unpivot_Values_descriptor =
        internal_static_spark_connect_Unpivot_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_Unpivot_Values_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Unpivot_Values_descriptor,
            new java.lang.String[] {
              "Values",
            });
    internal_static_spark_connect_ToSchema_descriptor = getDescriptor().getMessageTypes().get(43);
    internal_static_spark_connect_ToSchema_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_ToSchema_descriptor,
            new java.lang.String[] {
              "Input", "Schema",
            });
    internal_static_spark_connect_RepartitionByExpression_descriptor =
        getDescriptor().getMessageTypes().get(44);
    internal_static_spark_connect_RepartitionByExpression_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_RepartitionByExpression_descriptor,
            new java.lang.String[] {
              "Input", "PartitionExprs", "NumPartitions", "NumPartitions",
            });
    internal_static_spark_connect_MapPartitions_descriptor =
        getDescriptor().getMessageTypes().get(45);
    internal_static_spark_connect_MapPartitions_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_MapPartitions_descriptor,
            new java.lang.String[] {
              "Input", "Func", "IsBarrier", "ProfileId", "IsBarrier", "ProfileId",
            });
    internal_static_spark_connect_GroupMap_descriptor = getDescriptor().getMessageTypes().get(46);
    internal_static_spark_connect_GroupMap_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_GroupMap_descriptor,
            new java.lang.String[] {
              "Input",
              "GroupingExpressions",
              "Func",
              "SortingExpressions",
              "InitialInput",
              "InitialGroupingExpressions",
              "IsMapGroupsWithState",
              "OutputMode",
              "TimeoutConf",
              "IsMapGroupsWithState",
              "OutputMode",
              "TimeoutConf",
            });
    internal_static_spark_connect_CoGroupMap_descriptor = getDescriptor().getMessageTypes().get(47);
    internal_static_spark_connect_CoGroupMap_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_CoGroupMap_descriptor,
            new java.lang.String[] {
              "Input",
              "InputGroupingExpressions",
              "Other",
              "OtherGroupingExpressions",
              "Func",
              "InputSortingExpressions",
              "OtherSortingExpressions",
            });
    internal_static_spark_connect_ApplyInPandasWithState_descriptor =
        getDescriptor().getMessageTypes().get(48);
    internal_static_spark_connect_ApplyInPandasWithState_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_ApplyInPandasWithState_descriptor,
            new java.lang.String[] {
              "Input",
              "GroupingExpressions",
              "Func",
              "OutputSchema",
              "StateSchema",
              "OutputMode",
              "TimeoutConf",
            });
    internal_static_spark_connect_CommonInlineUserDefinedTableFunction_descriptor =
        getDescriptor().getMessageTypes().get(49);
    internal_static_spark_connect_CommonInlineUserDefinedTableFunction_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_CommonInlineUserDefinedTableFunction_descriptor,
            new java.lang.String[] {
              "FunctionName", "Deterministic", "Arguments", "PythonUdtf", "Function",
            });
    internal_static_spark_connect_PythonUDTF_descriptor = getDescriptor().getMessageTypes().get(50);
    internal_static_spark_connect_PythonUDTF_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_PythonUDTF_descriptor,
            new java.lang.String[] {
              "ReturnType", "EvalType", "Command", "PythonVer", "ReturnType",
            });
    internal_static_spark_connect_CommonInlineUserDefinedDataSource_descriptor =
        getDescriptor().getMessageTypes().get(51);
    internal_static_spark_connect_CommonInlineUserDefinedDataSource_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_CommonInlineUserDefinedDataSource_descriptor,
            new java.lang.String[] {
              "Name", "PythonDataSource", "DataSource",
            });
    internal_static_spark_connect_PythonDataSource_descriptor =
        getDescriptor().getMessageTypes().get(52);
    internal_static_spark_connect_PythonDataSource_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_PythonDataSource_descriptor,
            new java.lang.String[] {
              "Command", "PythonVer",
            });
    internal_static_spark_connect_CollectMetrics_descriptor =
        getDescriptor().getMessageTypes().get(53);
    internal_static_spark_connect_CollectMetrics_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_CollectMetrics_descriptor,
            new java.lang.String[] {
              "Input", "Name", "Metrics",
            });
    internal_static_spark_connect_Parse_descriptor = getDescriptor().getMessageTypes().get(54);
    internal_static_spark_connect_Parse_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Parse_descriptor,
            new java.lang.String[] {
              "Input", "Format", "Schema", "Options", "Schema",
            });
    internal_static_spark_connect_Parse_OptionsEntry_descriptor =
        internal_static_spark_connect_Parse_descriptor.getNestedTypes().get(0);
    internal_static_spark_connect_Parse_OptionsEntry_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_Parse_OptionsEntry_descriptor,
            new java.lang.String[] {
              "Key", "Value",
            });
    internal_static_spark_connect_AsOfJoin_descriptor = getDescriptor().getMessageTypes().get(55);
    internal_static_spark_connect_AsOfJoin_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_spark_connect_AsOfJoin_descriptor,
            new java.lang.String[] {
              "Left",
              "Right",
              "LeftAsOf",
              "RightAsOf",
              "JoinExpr",
              "UsingColumns",
              "JoinType",
              "Tolerance",
              "AllowExactMatches",
              "Direction",
            });
    com.google.protobuf.AnyProto.getDescriptor();
    org.apache.kyuubi.engine.spark.connect.grpc.proto.Expressions.getDescriptor();
    org.apache.kyuubi.engine.spark.connect.grpc.proto.Types.getDescriptor();
    org.apache.kyuubi.engine.spark.connect.grpc.proto.CatalogOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
