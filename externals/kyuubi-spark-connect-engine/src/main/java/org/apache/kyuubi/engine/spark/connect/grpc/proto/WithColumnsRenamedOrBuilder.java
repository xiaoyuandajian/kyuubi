// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

public interface WithColumnsRenamedOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:spark.connect.WithColumnsRenamed)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return The input.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput();
  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder();

  /**
   *
   *
   * <pre>
   * (Optional)
   * Renaming column names of input relation from A to B where A is the map key
   * and B is the map value. This is a no-op if schema doesn't contain any A. It
   * does not require that all input relation column names to present as keys.
   * duplicated B are not allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  int getRenameColumnsMapCount();
  /**
   *
   *
   * <pre>
   * (Optional)
   * Renaming column names of input relation from A to B where A is the map key
   * and B is the map value. This is a no-op if schema doesn't contain any A. It
   * does not require that all input relation column names to present as keys.
   * duplicated B are not allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  boolean containsRenameColumnsMap(java.lang.String key);
  /** Use {@link #getRenameColumnsMapMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String> getRenameColumnsMap();
  /**
   *
   *
   * <pre>
   * (Optional)
   * Renaming column names of input relation from A to B where A is the map key
   * and B is the map value. This is a no-op if schema doesn't contain any A. It
   * does not require that all input relation column names to present as keys.
   * duplicated B are not allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String> getRenameColumnsMapMap();
  /**
   *
   *
   * <pre>
   * (Optional)
   * Renaming column names of input relation from A to B where A is the map key
   * and B is the map value. This is a no-op if schema doesn't contain any A. It
   * does not require that all input relation column names to present as keys.
   * duplicated B are not allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  /* nullable */
  java.lang.String getRenameColumnsMapOrDefault(
      java.lang.String key,
      /* nullable */
      java.lang.String defaultValue);
  /**
   *
   *
   * <pre>
   * (Optional)
   * Renaming column names of input relation from A to B where A is the map key
   * and B is the map value. This is a no-op if schema doesn't contain any A. It
   * does not require that all input relation column names to present as keys.
   * duplicated B are not allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  java.lang.String getRenameColumnsMapOrThrow(java.lang.String key);

  /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
  java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename>
      getRenamesList();
  /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename getRenames(int index);
  /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
  int getRenamesCount();
  /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
  java.util.List<
          ? extends
              org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.RenameOrBuilder>
      getRenamesOrBuilderList();
  /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.RenameOrBuilder
      getRenamesOrBuilder(int index);
}
