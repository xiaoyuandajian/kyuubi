// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

/**
 *
 *
 * <pre>
 * Relation of type [[WithRelations]].
 * This relation contains a root plan, and one or more references that are used by the root plan.
 * There are two ways of referencing a relation, by name (through a subquery alias), or by plan_id
 * (using RelationCommon.plan_id).
 * This relation can be used to implement CTEs, describe DAGs, or to reduce tree depth.
 * </pre>
 *
 * Protobuf type {@code spark.connect.WithRelations}
 */
public final class WithRelations extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:spark.connect.WithRelations)
    WithRelationsOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use WithRelations.newBuilder() to construct.
  private WithRelations(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private WithRelations() {
    references_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new WithRelations();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
        .internal_static_spark_connect_WithRelations_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
        .internal_static_spark_connect_WithRelations_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations.class,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations.Builder.class);
  }

  public static final int ROOT_FIELD_NUMBER = 1;
  private org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation root_;
  /**
   *
   *
   * <pre>
   * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
   * references. Those references get expanded later on by the engine.
   * </pre>
   *
   * <code>.spark.connect.Relation root = 1;</code>
   *
   * @return Whether the root field is set.
   */
  @java.lang.Override
  public boolean hasRoot() {
    return root_ != null;
  }
  /**
   *
   *
   * <pre>
   * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
   * references. Those references get expanded later on by the engine.
   * </pre>
   *
   * <code>.spark.connect.Relation root = 1;</code>
   *
   * @return The root.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getRoot() {
    return root_ == null
        ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
        : root_;
  }
  /**
   *
   *
   * <pre>
   * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
   * references. Those references get expanded later on by the engine.
   * </pre>
   *
   * <code>.spark.connect.Relation root = 1;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getRootOrBuilder() {
    return getRoot();
  }

  public static final int REFERENCES_FIELD_NUMBER = 2;
  private java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation> references_;
  /**
   *
   *
   * <pre>
   * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
   * contain references to other relations in this list, as long they do not form cycles.
   * </pre>
   *
   * <code>repeated .spark.connect.Relation references = 2;</code>
   */
  @java.lang.Override
  public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation>
      getReferencesList() {
    return references_;
  }
  /**
   *
   *
   * <pre>
   * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
   * contain references to other relations in this list, as long they do not form cycles.
   * </pre>
   *
   * <code>repeated .spark.connect.Relation references = 2;</code>
   */
  @java.lang.Override
  public java.util.List<
          ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
      getReferencesOrBuilderList() {
    return references_;
  }
  /**
   *
   *
   * <pre>
   * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
   * contain references to other relations in this list, as long they do not form cycles.
   * </pre>
   *
   * <code>repeated .spark.connect.Relation references = 2;</code>
   */
  @java.lang.Override
  public int getReferencesCount() {
    return references_.size();
  }
  /**
   *
   *
   * <pre>
   * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
   * contain references to other relations in this list, as long they do not form cycles.
   * </pre>
   *
   * <code>repeated .spark.connect.Relation references = 2;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getReferences(int index) {
    return references_.get(index);
  }
  /**
   *
   *
   * <pre>
   * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
   * contain references to other relations in this list, as long they do not form cycles.
   * </pre>
   *
   * <code>repeated .spark.connect.Relation references = 2;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getReferencesOrBuilder(
      int index) {
    return references_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (root_ != null) {
      output.writeMessage(1, getRoot());
    }
    for (int i = 0; i < references_.size(); i++) {
      output.writeMessage(2, references_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (root_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getRoot());
    }
    for (int i = 0; i < references_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, references_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations other =
        (org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations) obj;

    if (hasRoot() != other.hasRoot()) return false;
    if (hasRoot()) {
      if (!getRoot().equals(other.getRoot())) return false;
    }
    if (!getReferencesList().equals(other.getReferencesList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasRoot()) {
      hash = (37 * hash) + ROOT_FIELD_NUMBER;
      hash = (53 * hash) + getRoot().hashCode();
    }
    if (getReferencesCount() > 0) {
      hash = (37 * hash) + REFERENCES_FIELD_NUMBER;
      hash = (53 * hash) + getReferencesList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseFrom(
      byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Relation of type [[WithRelations]].
   * This relation contains a root plan, and one or more references that are used by the root plan.
   * There are two ways of referencing a relation, by name (through a subquery alias), or by plan_id
   * (using RelationCommon.plan_id).
   * This relation can be used to implement CTEs, describe DAGs, or to reduce tree depth.
   * </pre>
   *
   * Protobuf type {@code spark.connect.WithRelations}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:spark.connect.WithRelations)
      org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelationsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_WithRelations_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_WithRelations_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (rootBuilder_ == null) {
        root_ = null;
      } else {
        root_ = null;
        rootBuilder_ = null;
      }
      if (referencesBuilder_ == null) {
        references_ = java.util.Collections.emptyList();
      } else {
        references_ = null;
        referencesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_WithRelations_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations
        getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations build() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations buildPartial() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations result =
          new org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations(this);
      int from_bitField0_ = bitField0_;
      if (rootBuilder_ == null) {
        result.root_ = root_;
      } else {
        result.root_ = rootBuilder_.build();
      }
      if (referencesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          references_ = java.util.Collections.unmodifiableList(references_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.references_ = references_;
      } else {
        result.references_ = referencesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations other) {
      if (other
          == org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations.getDefaultInstance())
        return this;
      if (other.hasRoot()) {
        mergeRoot(other.getRoot());
      }
      if (referencesBuilder_ == null) {
        if (!other.references_.isEmpty()) {
          if (references_.isEmpty()) {
            references_ = other.references_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureReferencesIsMutable();
            references_.addAll(other.references_);
          }
          onChanged();
        }
      } else {
        if (!other.references_.isEmpty()) {
          if (referencesBuilder_.isEmpty()) {
            referencesBuilder_.dispose();
            referencesBuilder_ = null;
            references_ = other.references_;
            bitField0_ = (bitField0_ & ~0x00000001);
            referencesBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getReferencesFieldBuilder()
                    : null;
          } else {
            referencesBuilder_.addAllMessages(other.references_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getRootFieldBuilder().getBuilder(), extensionRegistry);

                break;
              } // case 10
            case 18:
              {
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation m =
                    input.readMessage(
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.parser(),
                        extensionRegistry);
                if (referencesBuilder_ == null) {
                  ensureReferencesIsMutable();
                  references_.add(m);
                } else {
                  referencesBuilder_.addMessage(m);
                }
                break;
              } // case 18
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation root_;
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        rootBuilder_;
    /**
     *
     *
     * <pre>
     * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
     * references. Those references get expanded later on by the engine.
     * </pre>
     *
     * <code>.spark.connect.Relation root = 1;</code>
     *
     * @return Whether the root field is set.
     */
    public boolean hasRoot() {
      return rootBuilder_ != null || root_ != null;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
     * references. Those references get expanded later on by the engine.
     * </pre>
     *
     * <code>.spark.connect.Relation root = 1;</code>
     *
     * @return The root.
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getRoot() {
      if (rootBuilder_ == null) {
        return root_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
            : root_;
      } else {
        return rootBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
     * references. Those references get expanded later on by the engine.
     * </pre>
     *
     * <code>.spark.connect.Relation root = 1;</code>
     */
    public Builder setRoot(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (rootBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        root_ = value;
        onChanged();
      } else {
        rootBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
     * references. Those references get expanded later on by the engine.
     * </pre>
     *
     * <code>.spark.connect.Relation root = 1;</code>
     */
    public Builder setRoot(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder builderForValue) {
      if (rootBuilder_ == null) {
        root_ = builderForValue.build();
        onChanged();
      } else {
        rootBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
     * references. Those references get expanded later on by the engine.
     * </pre>
     *
     * <code>.spark.connect.Relation root = 1;</code>
     */
    public Builder mergeRoot(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (rootBuilder_ == null) {
        if (root_ != null) {
          root_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.newBuilder(root_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          root_ = value;
        }
        onChanged();
      } else {
        rootBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
     * references. Those references get expanded later on by the engine.
     * </pre>
     *
     * <code>.spark.connect.Relation root = 1;</code>
     */
    public Builder clearRoot() {
      if (rootBuilder_ == null) {
        root_ = null;
        onChanged();
      } else {
        root_ = null;
        rootBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
     * references. Those references get expanded later on by the engine.
     * </pre>
     *
     * <code>.spark.connect.Relation root = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder getRootBuilder() {

      onChanged();
      return getRootFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
     * references. Those references get expanded later on by the engine.
     * </pre>
     *
     * <code>.spark.connect.Relation root = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getRootOrBuilder() {
      if (rootBuilder_ != null) {
        return rootBuilder_.getMessageOrBuilder();
      } else {
        return root_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
            : root_;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
     * references. Those references get expanded later on by the engine.
     * </pre>
     *
     * <code>.spark.connect.Relation root = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        getRootFieldBuilder() {
      if (rootBuilder_ == null) {
        rootBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>(
                getRoot(), getParentForChildren(), isClean());
        root_ = null;
      }
      return rootBuilder_;
    }

    private java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation> references_ =
        java.util.Collections.emptyList();

    private void ensureReferencesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        references_ =
            new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation>(
                references_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        referencesBuilder_;

    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation>
        getReferencesList() {
      if (referencesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(references_);
      } else {
        return referencesBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public int getReferencesCount() {
      if (referencesBuilder_ == null) {
        return references_.size();
      } else {
        return referencesBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getReferences(int index) {
      if (referencesBuilder_ == null) {
        return references_.get(index);
      } else {
        return referencesBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public Builder setReferences(
        int index, org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (referencesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesIsMutable();
        references_.set(index, value);
        onChanged();
      } else {
        referencesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public Builder setReferences(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder builderForValue) {
      if (referencesBuilder_ == null) {
        ensureReferencesIsMutable();
        references_.set(index, builderForValue.build());
        onChanged();
      } else {
        referencesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public Builder addReferences(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (referencesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesIsMutable();
        references_.add(value);
        onChanged();
      } else {
        referencesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public Builder addReferences(
        int index, org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (referencesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesIsMutable();
        references_.add(index, value);
        onChanged();
      } else {
        referencesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public Builder addReferences(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder builderForValue) {
      if (referencesBuilder_ == null) {
        ensureReferencesIsMutable();
        references_.add(builderForValue.build());
        onChanged();
      } else {
        referencesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public Builder addReferences(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder builderForValue) {
      if (referencesBuilder_ == null) {
        ensureReferencesIsMutable();
        references_.add(index, builderForValue.build());
        onChanged();
      } else {
        referencesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public Builder addAllReferences(
        java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation>
            values) {
      if (referencesBuilder_ == null) {
        ensureReferencesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, references_);
        onChanged();
      } else {
        referencesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public Builder clearReferences() {
      if (referencesBuilder_ == null) {
        references_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        referencesBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public Builder removeReferences(int index) {
      if (referencesBuilder_ == null) {
        ensureReferencesIsMutable();
        references_.remove(index);
        onChanged();
      } else {
        referencesBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder getReferencesBuilder(
        int index) {
      return getReferencesFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder
        getReferencesOrBuilder(int index) {
      if (referencesBuilder_ == null) {
        return references_.get(index);
      } else {
        return referencesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public java.util.List<
            ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        getReferencesOrBuilderList() {
      if (referencesBuilder_ != null) {
        return referencesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(references_);
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder
        addReferencesBuilder() {
      return getReferencesFieldBuilder()
          .addBuilder(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder addReferencesBuilder(
        int index) {
      return getReferencesFieldBuilder()
          .addBuilder(
              index,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
     * contain references to other relations in this list, as long they do not form cycles.
     * </pre>
     *
     * <code>repeated .spark.connect.Relation references = 2;</code>
     */
    public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder>
        getReferencesBuilderList() {
      return getReferencesFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        getReferencesFieldBuilder() {
      if (referencesBuilder_ == null) {
        referencesBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>(
                references_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
        references_ = null;
      }
      return referencesBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:spark.connect.WithRelations)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.WithRelations)
  private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations();
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations
      getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WithRelations> PARSER =
      new com.google.protobuf.AbstractParser<WithRelations>() {
        @java.lang.Override
        public WithRelations parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<WithRelations> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WithRelations> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithRelations
      getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
