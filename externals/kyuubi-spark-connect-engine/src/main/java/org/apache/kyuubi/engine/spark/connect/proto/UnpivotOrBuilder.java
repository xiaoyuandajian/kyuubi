// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface UnpivotOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.Unpivot)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  org.apache.kyuubi.engine.spark.connect.proto.Relation getInput();
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getInputOrBuilder();

  /**
   * <pre>
   * (Required) Id columns.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression ids = 2;</code>
   */
  java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> 
      getIdsList();
  /**
   * <pre>
   * (Required) Id columns.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression ids = 2;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.Expression getIds(int index);
  /**
   * <pre>
   * (Required) Id columns.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression ids = 2;</code>
   */
  int getIdsCount();
  /**
   * <pre>
   * (Required) Id columns.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression ids = 2;</code>
   */
  java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
      getIdsOrBuilderList();
  /**
   * <pre>
   * (Required) Id columns.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression ids = 2;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getIdsOrBuilder(
      int index);

  /**
   * <pre>
   * (Optional) Value columns to unpivot.
   * </pre>
   *
   * <code>optional .spark.connect.Unpivot.Values values = 3;</code>
   * @return Whether the values field is set.
   */
  boolean hasValues();
  /**
   * <pre>
   * (Optional) Value columns to unpivot.
   * </pre>
   *
   * <code>optional .spark.connect.Unpivot.Values values = 3;</code>
   * @return The values.
   */
  org.apache.kyuubi.engine.spark.connect.proto.Unpivot.Values getValues();
  /**
   * <pre>
   * (Optional) Value columns to unpivot.
   * </pre>
   *
   * <code>optional .spark.connect.Unpivot.Values values = 3;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.Unpivot.ValuesOrBuilder getValuesOrBuilder();

  /**
   * <pre>
   * (Required) Name of the variable column.
   * </pre>
   *
   * <code>string variable_column_name = 4;</code>
   * @return The variableColumnName.
   */
  java.lang.String getVariableColumnName();
  /**
   * <pre>
   * (Required) Name of the variable column.
   * </pre>
   *
   * <code>string variable_column_name = 4;</code>
   * @return The bytes for variableColumnName.
   */
  com.google.protobuf.ByteString
      getVariableColumnNameBytes();

  /**
   * <pre>
   * (Required) Name of the value column.
   * </pre>
   *
   * <code>string value_column_name = 5;</code>
   * @return The valueColumnName.
   */
  java.lang.String getValueColumnName();
  /**
   * <pre>
   * (Required) Name of the value column.
   * </pre>
   *
   * <code>string value_column_name = 5;</code>
   * @return The bytes for valueColumnName.
   */
  com.google.protobuf.ByteString
      getValueColumnNameBytes();
}
