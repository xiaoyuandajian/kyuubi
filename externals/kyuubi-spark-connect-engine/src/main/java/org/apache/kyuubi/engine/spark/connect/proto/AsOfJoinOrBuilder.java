// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface AsOfJoinOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.AsOfJoin)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Required) Left input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation left = 1;</code>
   * @return Whether the left field is set.
   */
  boolean hasLeft();
  /**
   * <pre>
   * (Required) Left input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation left = 1;</code>
   * @return The left.
   */
  org.apache.kyuubi.engine.spark.connect.proto.Relation getLeft();
  /**
   * <pre>
   * (Required) Left input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation left = 1;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getLeftOrBuilder();

  /**
   * <pre>
   * (Required) Right input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation right = 2;</code>
   * @return Whether the right field is set.
   */
  boolean hasRight();
  /**
   * <pre>
   * (Required) Right input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation right = 2;</code>
   * @return The right.
   */
  org.apache.kyuubi.engine.spark.connect.proto.Relation getRight();
  /**
   * <pre>
   * (Required) Right input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation right = 2;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getRightOrBuilder();

  /**
   * <pre>
   * (Required) Field to join on in left DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression left_as_of = 3;</code>
   * @return Whether the leftAsOf field is set.
   */
  boolean hasLeftAsOf();
  /**
   * <pre>
   * (Required) Field to join on in left DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression left_as_of = 3;</code>
   * @return The leftAsOf.
   */
  org.apache.kyuubi.engine.spark.connect.proto.Expression getLeftAsOf();
  /**
   * <pre>
   * (Required) Field to join on in left DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression left_as_of = 3;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getLeftAsOfOrBuilder();

  /**
   * <pre>
   * (Required) Field to join on in right DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression right_as_of = 4;</code>
   * @return Whether the rightAsOf field is set.
   */
  boolean hasRightAsOf();
  /**
   * <pre>
   * (Required) Field to join on in right DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression right_as_of = 4;</code>
   * @return The rightAsOf.
   */
  org.apache.kyuubi.engine.spark.connect.proto.Expression getRightAsOf();
  /**
   * <pre>
   * (Required) Field to join on in right DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression right_as_of = 4;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getRightAsOfOrBuilder();

  /**
   * <pre>
   * (Optional) The join condition. Could be unset when `using_columns` is utilized.
   * This field does not co-exist with using_columns.
   * </pre>
   *
   * <code>.spark.connect.Expression join_expr = 5;</code>
   * @return Whether the joinExpr field is set.
   */
  boolean hasJoinExpr();
  /**
   * <pre>
   * (Optional) The join condition. Could be unset when `using_columns` is utilized.
   * This field does not co-exist with using_columns.
   * </pre>
   *
   * <code>.spark.connect.Expression join_expr = 5;</code>
   * @return The joinExpr.
   */
  org.apache.kyuubi.engine.spark.connect.proto.Expression getJoinExpr();
  /**
   * <pre>
   * (Optional) The join condition. Could be unset when `using_columns` is utilized.
   * This field does not co-exist with using_columns.
   * </pre>
   *
   * <code>.spark.connect.Expression join_expr = 5;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getJoinExprOrBuilder();

  /**
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 6;</code>
   * @return A list containing the usingColumns.
   */
  java.util.List<java.lang.String>
      getUsingColumnsList();
  /**
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 6;</code>
   * @return The count of usingColumns.
   */
  int getUsingColumnsCount();
  /**
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 6;</code>
   * @param index The index of the element to return.
   * @return The usingColumns at the given index.
   */
  java.lang.String getUsingColumns(int index);
  /**
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 6;</code>
   * @param index The index of the value to return.
   * @return The bytes of the usingColumns at the given index.
   */
  com.google.protobuf.ByteString
      getUsingColumnsBytes(int index);

  /**
   * <pre>
   * (Required) The join type.
   * </pre>
   *
   * <code>string join_type = 7;</code>
   * @return The joinType.
   */
  java.lang.String getJoinType();
  /**
   * <pre>
   * (Required) The join type.
   * </pre>
   *
   * <code>string join_type = 7;</code>
   * @return The bytes for joinType.
   */
  com.google.protobuf.ByteString
      getJoinTypeBytes();

  /**
   * <pre>
   * (Optional) The asof tolerance within this range.
   * </pre>
   *
   * <code>.spark.connect.Expression tolerance = 8;</code>
   * @return Whether the tolerance field is set.
   */
  boolean hasTolerance();
  /**
   * <pre>
   * (Optional) The asof tolerance within this range.
   * </pre>
   *
   * <code>.spark.connect.Expression tolerance = 8;</code>
   * @return The tolerance.
   */
  org.apache.kyuubi.engine.spark.connect.proto.Expression getTolerance();
  /**
   * <pre>
   * (Optional) The asof tolerance within this range.
   * </pre>
   *
   * <code>.spark.connect.Expression tolerance = 8;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getToleranceOrBuilder();

  /**
   * <pre>
   * (Required) Whether allow matching with the same value or not.
   * </pre>
   *
   * <code>bool allow_exact_matches = 9;</code>
   * @return The allowExactMatches.
   */
  boolean getAllowExactMatches();

  /**
   * <pre>
   * (Required) Whether to search for prior, subsequent, or closest matches.
   * </pre>
   *
   * <code>string direction = 10;</code>
   * @return The direction.
   */
  java.lang.String getDirection();
  /**
   * <pre>
   * (Required) Whether to search for prior, subsequent, or closest matches.
   * </pre>
   *
   * <code>string direction = 10;</code>
   * @return The bytes for direction.
   */
  com.google.protobuf.ByteString
      getDirectionBytes();
}
