// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

/**
 *
 *
 * <pre>
 * User Context is used to refer to one particular user session that is executing
 * queries in the backend.
 * </pre>
 *
 * Protobuf type {@code spark.connect.UserContext}
 */
public final class UserContext extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:spark.connect.UserContext)
    UserContextOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use UserContext.newBuilder() to construct.
  private UserContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private UserContext() {
    userId_ = "";
    userName_ = "";
    extensions_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new UserContext();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Base
        .internal_static_spark_connect_UserContext_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Base
        .internal_static_spark_connect_UserContext_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext.class,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext.Builder.class);
  }

  public static final int USER_ID_FIELD_NUMBER = 1;
  private volatile java.lang.Object userId_;
  /**
   * <code>string user_id = 1;</code>
   *
   * @return The userId.
   */
  @java.lang.Override
  public java.lang.String getUserId() {
    java.lang.Object ref = userId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      userId_ = s;
      return s;
    }
  }
  /**
   * <code>string user_id = 1;</code>
   *
   * @return The bytes for userId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getUserIdBytes() {
    java.lang.Object ref = userId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      userId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int USER_NAME_FIELD_NUMBER = 2;
  private volatile java.lang.Object userName_;
  /**
   * <code>string user_name = 2;</code>
   *
   * @return The userName.
   */
  @java.lang.Override
  public java.lang.String getUserName() {
    java.lang.Object ref = userName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      userName_ = s;
      return s;
    }
  }
  /**
   * <code>string user_name = 2;</code>
   *
   * @return The bytes for userName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getUserNameBytes() {
    java.lang.Object ref = userName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      userName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int EXTENSIONS_FIELD_NUMBER = 999;
  private java.util.List<com.google.protobuf.Any> extensions_;
  /**
   *
   *
   * <pre>
   * To extend the existing user context message that is used to identify incoming requests,
   * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
   * messages into this message. Extensions are stored as a `repeated` type to be able to
   * handle multiple active extensions.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extensions = 999;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.protobuf.Any> getExtensionsList() {
    return extensions_;
  }
  /**
   *
   *
   * <pre>
   * To extend the existing user context message that is used to identify incoming requests,
   * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
   * messages into this message. Extensions are stored as a `repeated` type to be able to
   * handle multiple active extensions.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extensions = 999;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.protobuf.AnyOrBuilder> getExtensionsOrBuilderList() {
    return extensions_;
  }
  /**
   *
   *
   * <pre>
   * To extend the existing user context message that is used to identify incoming requests,
   * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
   * messages into this message. Extensions are stored as a `repeated` type to be able to
   * handle multiple active extensions.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extensions = 999;</code>
   */
  @java.lang.Override
  public int getExtensionsCount() {
    return extensions_.size();
  }
  /**
   *
   *
   * <pre>
   * To extend the existing user context message that is used to identify incoming requests,
   * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
   * messages into this message. Extensions are stored as a `repeated` type to be able to
   * handle multiple active extensions.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extensions = 999;</code>
   */
  @java.lang.Override
  public com.google.protobuf.Any getExtensions(int index) {
    return extensions_.get(index);
  }
  /**
   *
   *
   * <pre>
   * To extend the existing user context message that is used to identify incoming requests,
   * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
   * messages into this message. Extensions are stored as a `repeated` type to be able to
   * handle multiple active extensions.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extensions = 999;</code>
   */
  @java.lang.Override
  public com.google.protobuf.AnyOrBuilder getExtensionsOrBuilder(int index) {
    return extensions_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(userId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, userId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(userName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, userName_);
    }
    for (int i = 0; i < extensions_.size(); i++) {
      output.writeMessage(999, extensions_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(userId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, userId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(userName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, userName_);
    }
    for (int i = 0; i < extensions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(999, extensions_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext other =
        (org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext) obj;

    if (!getUserId().equals(other.getUserId())) return false;
    if (!getUserName().equals(other.getUserName())) return false;
    if (!getExtensionsList().equals(other.getExtensionsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + USER_ID_FIELD_NUMBER;
    hash = (53 * hash) + getUserId().hashCode();
    hash = (37 * hash) + USER_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getUserName().hashCode();
    if (getExtensionsCount() > 0) {
      hash = (37 * hash) + EXTENSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getExtensionsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * User Context is used to refer to one particular user session that is executing
   * queries in the backend.
   * </pre>
   *
   * Protobuf type {@code spark.connect.UserContext}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:spark.connect.UserContext)
      org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContextOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Base
          .internal_static_spark_connect_UserContext_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Base
          .internal_static_spark_connect_UserContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      userId_ = "";

      userName_ = "";

      if (extensionsBuilder_ == null) {
        extensions_ = java.util.Collections.emptyList();
      } else {
        extensions_ = null;
        extensionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Base
          .internal_static_spark_connect_UserContext_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext
        getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext build() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext buildPartial() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext result =
          new org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext(this);
      int from_bitField0_ = bitField0_;
      result.userId_ = userId_;
      result.userName_ = userName_;
      if (extensionsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          extensions_ = java.util.Collections.unmodifiableList(extensions_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.extensions_ = extensions_;
      } else {
        result.extensions_ = extensionsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext other) {
      if (other
          == org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext.getDefaultInstance())
        return this;
      if (!other.getUserId().isEmpty()) {
        userId_ = other.userId_;
        onChanged();
      }
      if (!other.getUserName().isEmpty()) {
        userName_ = other.userName_;
        onChanged();
      }
      if (extensionsBuilder_ == null) {
        if (!other.extensions_.isEmpty()) {
          if (extensions_.isEmpty()) {
            extensions_ = other.extensions_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureExtensionsIsMutable();
            extensions_.addAll(other.extensions_);
          }
          onChanged();
        }
      } else {
        if (!other.extensions_.isEmpty()) {
          if (extensionsBuilder_.isEmpty()) {
            extensionsBuilder_.dispose();
            extensionsBuilder_ = null;
            extensions_ = other.extensions_;
            bitField0_ = (bitField0_ & ~0x00000001);
            extensionsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getExtensionsFieldBuilder()
                    : null;
          } else {
            extensionsBuilder_.addAllMessages(other.extensions_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                userId_ = input.readStringRequireUtf8();

                break;
              } // case 10
            case 18:
              {
                userName_ = input.readStringRequireUtf8();

                break;
              } // case 18
            case 7994:
              {
                com.google.protobuf.Any m =
                    input.readMessage(com.google.protobuf.Any.parser(), extensionRegistry);
                if (extensionsBuilder_ == null) {
                  ensureExtensionsIsMutable();
                  extensions_.add(m);
                } else {
                  extensionsBuilder_.addMessage(m);
                }
                break;
              } // case 7994
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object userId_ = "";
    /**
     * <code>string user_id = 1;</code>
     *
     * @return The userId.
     */
    public java.lang.String getUserId() {
      java.lang.Object ref = userId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        userId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string user_id = 1;</code>
     *
     * @return The bytes for userId.
     */
    public com.google.protobuf.ByteString getUserIdBytes() {
      java.lang.Object ref = userId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        userId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string user_id = 1;</code>
     *
     * @param value The userId to set.
     * @return This builder for chaining.
     */
    public Builder setUserId(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      userId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string user_id = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearUserId() {

      userId_ = getDefaultInstance().getUserId();
      onChanged();
      return this;
    }
    /**
     * <code>string user_id = 1;</code>
     *
     * @param value The bytes for userId to set.
     * @return This builder for chaining.
     */
    public Builder setUserIdBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      userId_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object userName_ = "";
    /**
     * <code>string user_name = 2;</code>
     *
     * @return The userName.
     */
    public java.lang.String getUserName() {
      java.lang.Object ref = userName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        userName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string user_name = 2;</code>
     *
     * @return The bytes for userName.
     */
    public com.google.protobuf.ByteString getUserNameBytes() {
      java.lang.Object ref = userName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        userName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string user_name = 2;</code>
     *
     * @param value The userName to set.
     * @return This builder for chaining.
     */
    public Builder setUserName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      userName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string user_name = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearUserName() {

      userName_ = getDefaultInstance().getUserName();
      onChanged();
      return this;
    }
    /**
     * <code>string user_name = 2;</code>
     *
     * @param value The bytes for userName to set.
     * @return This builder for chaining.
     */
    public Builder setUserNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      userName_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.google.protobuf.Any> extensions_ = java.util.Collections.emptyList();

    private void ensureExtensionsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        extensions_ = new java.util.ArrayList<com.google.protobuf.Any>(extensions_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.protobuf.Any,
            com.google.protobuf.Any.Builder,
            com.google.protobuf.AnyOrBuilder>
        extensionsBuilder_;

    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public java.util.List<com.google.protobuf.Any> getExtensionsList() {
      if (extensionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(extensions_);
      } else {
        return extensionsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public int getExtensionsCount() {
      if (extensionsBuilder_ == null) {
        return extensions_.size();
      } else {
        return extensionsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public com.google.protobuf.Any getExtensions(int index) {
      if (extensionsBuilder_ == null) {
        return extensions_.get(index);
      } else {
        return extensionsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public Builder setExtensions(int index, com.google.protobuf.Any value) {
      if (extensionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtensionsIsMutable();
        extensions_.set(index, value);
        onChanged();
      } else {
        extensionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public Builder setExtensions(int index, com.google.protobuf.Any.Builder builderForValue) {
      if (extensionsBuilder_ == null) {
        ensureExtensionsIsMutable();
        extensions_.set(index, builderForValue.build());
        onChanged();
      } else {
        extensionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public Builder addExtensions(com.google.protobuf.Any value) {
      if (extensionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtensionsIsMutable();
        extensions_.add(value);
        onChanged();
      } else {
        extensionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public Builder addExtensions(int index, com.google.protobuf.Any value) {
      if (extensionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtensionsIsMutable();
        extensions_.add(index, value);
        onChanged();
      } else {
        extensionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public Builder addExtensions(com.google.protobuf.Any.Builder builderForValue) {
      if (extensionsBuilder_ == null) {
        ensureExtensionsIsMutable();
        extensions_.add(builderForValue.build());
        onChanged();
      } else {
        extensionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public Builder addExtensions(int index, com.google.protobuf.Any.Builder builderForValue) {
      if (extensionsBuilder_ == null) {
        ensureExtensionsIsMutable();
        extensions_.add(index, builderForValue.build());
        onChanged();
      } else {
        extensionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public Builder addAllExtensions(java.lang.Iterable<? extends com.google.protobuf.Any> values) {
      if (extensionsBuilder_ == null) {
        ensureExtensionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, extensions_);
        onChanged();
      } else {
        extensionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public Builder clearExtensions() {
      if (extensionsBuilder_ == null) {
        extensions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        extensionsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public Builder removeExtensions(int index) {
      if (extensionsBuilder_ == null) {
        ensureExtensionsIsMutable();
        extensions_.remove(index);
        onChanged();
      } else {
        extensionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public com.google.protobuf.Any.Builder getExtensionsBuilder(int index) {
      return getExtensionsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public com.google.protobuf.AnyOrBuilder getExtensionsOrBuilder(int index) {
      if (extensionsBuilder_ == null) {
        return extensions_.get(index);
      } else {
        return extensionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public java.util.List<? extends com.google.protobuf.AnyOrBuilder> getExtensionsOrBuilderList() {
      if (extensionsBuilder_ != null) {
        return extensionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(extensions_);
      }
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public com.google.protobuf.Any.Builder addExtensionsBuilder() {
      return getExtensionsFieldBuilder().addBuilder(com.google.protobuf.Any.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public com.google.protobuf.Any.Builder addExtensionsBuilder(int index) {
      return getExtensionsFieldBuilder()
          .addBuilder(index, com.google.protobuf.Any.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * To extend the existing user context message that is used to identify incoming requests,
     * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
     * messages into this message. Extensions are stored as a `repeated` type to be able to
     * handle multiple active extensions.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any extensions = 999;</code>
     */
    public java.util.List<com.google.protobuf.Any.Builder> getExtensionsBuilderList() {
      return getExtensionsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.protobuf.Any,
            com.google.protobuf.Any.Builder,
            com.google.protobuf.AnyOrBuilder>
        getExtensionsFieldBuilder() {
      if (extensionsBuilder_ == null) {
        extensionsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.protobuf.Any,
                com.google.protobuf.Any.Builder,
                com.google.protobuf.AnyOrBuilder>(
                extensions_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
        extensions_ = null;
      }
      return extensionsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:spark.connect.UserContext)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.UserContext)
  private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext();
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<UserContext> PARSER =
      new com.google.protobuf.AbstractParser<UserContext>() {
        @java.lang.Override
        public UserContext parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<UserContext> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<UserContext> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.UserContext getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
