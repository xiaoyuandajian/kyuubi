// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/commands.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

/**
 *
 *
 * <pre>
 * A SQL Command is used to trigger the eager evaluation of SQL commands in Spark.
 * When the SQL provide as part of the message is a command it will be immediately evaluated
 * and the result will be collected and returned as part of a LocalRelation. If the result is
 * not a command, the operation will simply return a SQL Relation. This allows the client to be
 * almost oblivious to the server-side behavior.
 * </pre>
 *
 * Protobuf type {@code spark.connect.SqlCommand}
 */
public final class SqlCommand extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:spark.connect.SqlCommand)
    SqlCommandOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use SqlCommand.newBuilder() to construct.
  private SqlCommand(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private SqlCommand() {
    sql_ = "";
    posArgs_ = java.util.Collections.emptyList();
    posArguments_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new SqlCommand();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
        .internal_static_spark_connect_SqlCommand_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(int number) {
    switch (number) {
      case 2:
        return internalGetArgs();
      case 4:
        return internalGetNamedArguments();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
        .internal_static_spark_connect_SqlCommand_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand.class,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand.Builder.class);
  }

  public static final int SQL_FIELD_NUMBER = 1;
  private volatile java.lang.Object sql_;
  /**
   *
   *
   * <pre>
   * (Required) SQL Query.
   * </pre>
   *
   * <code>string sql = 1 [deprecated = true];</code>
   *
   * @deprecated spark.connect.SqlCommand.sql is deprecated. See
   *     kyuubi/spark/connect/commands.proto;l=63
   * @return The sql.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.lang.String getSql() {
    java.lang.Object ref = sql_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      sql_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * (Required) SQL Query.
   * </pre>
   *
   * <code>string sql = 1 [deprecated = true];</code>
   *
   * @deprecated spark.connect.SqlCommand.sql is deprecated. See
   *     kyuubi/spark/connect/commands.proto;l=63
   * @return The bytes for sql.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public com.google.protobuf.ByteString getSqlBytes() {
    java.lang.Object ref = sql_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      sql_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ARGS_FIELD_NUMBER = 2;

  private static final class ArgsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        defaultEntry =
            com.google.protobuf.MapEntry
                .<java.lang.String,
                    org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
                    newDefaultInstance(
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
                            .internal_static_spark_connect_SqlCommand_ArgsEntry_descriptor,
                        com.google.protobuf.WireFormat.FieldType.STRING,
                        "",
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal
                            .getDefaultInstance());
  }

  private com.google.protobuf.MapField<
          java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
      args_;

  private com.google.protobuf.MapField<
          java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
      internalGetArgs() {
    if (args_ == null) {
      return com.google.protobuf.MapField.emptyMapField(ArgsDefaultEntryHolder.defaultEntry);
    }
    return args_;
  }

  @java.lang.Deprecated
  public int getArgsCount() {
    return internalGetArgs().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to literal expressions.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  @java.lang.Override
  public boolean containsArgs(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetArgs().getMap().containsKey(key);
  }
  /** Use {@link #getArgsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<
          java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
      getArgs() {
    return getArgsMap();
  }
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to literal expressions.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<
          java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
      getArgsMap() {
    return internalGetArgs().getMap();
  }
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to literal expressions.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal getArgsOrDefault(
      java.lang.String key,
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        map = internalGetArgs().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to literal expressions.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal getArgsOrThrow(
      java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        map = internalGetArgs().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int POS_ARGS_FIELD_NUMBER = 3;
  private java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
      posArgs_;
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
      getPosArgsList() {
    return posArgs_;
  }
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.List<
          ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.LiteralOrBuilder>
      getPosArgsOrBuilderList() {
    return posArgs_;
  }
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public int getPosArgsCount() {
    return posArgs_.size();
  }
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal getPosArgs(
      int index) {
    return posArgs_.get(index);
  }
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.LiteralOrBuilder
      getPosArgsOrBuilder(int index) {
    return posArgs_.get(index);
  }

  public static final int NAMED_ARGUMENTS_FIELD_NUMBER = 4;

  private static final class NamedArgumentsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        defaultEntry =
            com.google.protobuf.MapEntry
                .<java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
                    newDefaultInstance(
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
                            .internal_static_spark_connect_SqlCommand_NamedArgumentsEntry_descriptor,
                        com.google.protobuf.WireFormat.FieldType.STRING,
                        "",
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression
                            .getDefaultInstance());
  }

  private com.google.protobuf.MapField<
          java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      namedArguments_;

  private com.google.protobuf.MapField<
          java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      internalGetNamedArguments() {
    if (namedArguments_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          NamedArgumentsDefaultEntryHolder.defaultEntry);
    }
    return namedArguments_;
  }

  @java.lang.Deprecated
  public int getNamedArgumentsCount() {
    return internalGetNamedArguments().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to expressions.
   * It cannot coexist with `pos_arguments`.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
   * </code>
   */
  @java.lang.Deprecated
  @java.lang.Override
  public boolean containsNamedArguments(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetNamedArguments().getMap().containsKey(key);
  }
  /** Use {@link #getNamedArgumentsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<
          java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      getNamedArguments() {
    return getNamedArgumentsMap();
  }
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to expressions.
   * It cannot coexist with `pos_arguments`.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
   * </code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<
          java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      getNamedArgumentsMap() {
    return internalGetNamedArguments().getMap();
  }
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to expressions.
   * It cannot coexist with `pos_arguments`.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
   * </code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getNamedArgumentsOrDefault(
      java.lang.String key,
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        map = internalGetNamedArguments().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to expressions.
   * It cannot coexist with `pos_arguments`.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
   * </code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getNamedArgumentsOrThrow(
      java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        map = internalGetNamedArguments().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int POS_ARGUMENTS_FIELD_NUMBER = 5;
  private java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      posArguments_;
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of expressions for positional parameters in the SQL query text.
   * It cannot coexist with `named_arguments`.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      getPosArgumentsList() {
    return posArguments_;
  }
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of expressions for positional parameters in the SQL query text.
   * It cannot coexist with `named_arguments`.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.List<
          ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
      getPosArgumentsOrBuilderList() {
    return posArguments_;
  }
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of expressions for positional parameters in the SQL query text.
   * It cannot coexist with `named_arguments`.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public int getPosArgumentsCount() {
    return posArguments_.size();
  }
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of expressions for positional parameters in the SQL query text.
   * It cannot coexist with `named_arguments`.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getPosArguments(int index) {
    return posArguments_.get(index);
  }
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of expressions for positional parameters in the SQL query text.
   * It cannot coexist with `named_arguments`.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder
      getPosArgumentsOrBuilder(int index) {
    return posArguments_.get(index);
  }

  public static final int INPUT_FIELD_NUMBER = 6;
  private org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation input_;
  /**
   *
   *
   * <pre>
   * (Optional) The relation that this SQL command will be built on.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 6;</code>
   *
   * @return Whether the input field is set.
   */
  @java.lang.Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   *
   *
   * <pre>
   * (Optional) The relation that this SQL command will be built on.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 6;</code>
   *
   * @return The input.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput() {
    return input_ == null
        ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
        : input_;
  }
  /**
   *
   *
   * <pre>
   * (Optional) The relation that this SQL command will be built on.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 6;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder() {
    return getInput();
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sql_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sql_);
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetArgs(), ArgsDefaultEntryHolder.defaultEntry, 2);
    for (int i = 0; i < posArgs_.size(); i++) {
      output.writeMessage(3, posArgs_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetNamedArguments(), NamedArgumentsDefaultEntryHolder.defaultEntry, 4);
    for (int i = 0; i < posArguments_.size(); i++) {
      output.writeMessage(5, posArguments_.get(i));
    }
    if (input_ != null) {
      output.writeMessage(6, getInput());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sql_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sql_);
    }
    for (java.util.Map.Entry<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        entry : internalGetArgs().getMap().entrySet()) {
      com.google.protobuf.MapEntry<
              java.lang.String,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
          args__ =
              ArgsDefaultEntryHolder.defaultEntry
                  .newBuilderForType()
                  .setKey(entry.getKey())
                  .setValue(entry.getValue())
                  .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, args__);
    }
    for (int i = 0; i < posArgs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, posArgs_.get(i));
    }
    for (java.util.Map.Entry<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        entry : internalGetNamedArguments().getMap().entrySet()) {
      com.google.protobuf.MapEntry<
              java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
          namedArguments__ =
              NamedArgumentsDefaultEntryHolder.defaultEntry
                  .newBuilderForType()
                  .setKey(entry.getKey())
                  .setValue(entry.getValue())
                  .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, namedArguments__);
    }
    for (int i = 0; i < posArguments_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, posArguments_.get(i));
    }
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, getInput());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand other =
        (org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand) obj;

    if (!getSql().equals(other.getSql())) return false;
    if (!internalGetArgs().equals(other.internalGetArgs())) return false;
    if (!getPosArgsList().equals(other.getPosArgsList())) return false;
    if (!internalGetNamedArguments().equals(other.internalGetNamedArguments())) return false;
    if (!getPosArgumentsList().equals(other.getPosArgumentsList())) return false;
    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput().equals(other.getInput())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SQL_FIELD_NUMBER;
    hash = (53 * hash) + getSql().hashCode();
    if (!internalGetArgs().getMap().isEmpty()) {
      hash = (37 * hash) + ARGS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetArgs().hashCode();
    }
    if (getPosArgsCount() > 0) {
      hash = (37 * hash) + POS_ARGS_FIELD_NUMBER;
      hash = (53 * hash) + getPosArgsList().hashCode();
    }
    if (!internalGetNamedArguments().getMap().isEmpty()) {
      hash = (37 * hash) + NAMED_ARGUMENTS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetNamedArguments().hashCode();
    }
    if (getPosArgumentsCount() > 0) {
      hash = (37 * hash) + POS_ARGUMENTS_FIELD_NUMBER;
      hash = (53 * hash) + getPosArgumentsList().hashCode();
    }
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * A SQL Command is used to trigger the eager evaluation of SQL commands in Spark.
   * When the SQL provide as part of the message is a command it will be immediately evaluated
   * and the result will be collected and returned as part of a LocalRelation. If the result is
   * not a command, the operation will simply return a SQL Relation. This allows the client to be
   * almost oblivious to the server-side behavior.
   * </pre>
   *
   * Protobuf type {@code spark.connect.SqlCommand}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:spark.connect.SqlCommand)
      org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommandOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
          .internal_static_spark_connect_SqlCommand_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(int number) {
      switch (number) {
        case 2:
          return internalGetArgs();
        case 4:
          return internalGetNamedArguments();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(int number) {
      switch (number) {
        case 2:
          return internalGetMutableArgs();
        case 4:
          return internalGetMutableNamedArguments();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
          .internal_static_spark_connect_SqlCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      sql_ = "";

      internalGetMutableArgs().clear();
      if (posArgsBuilder_ == null) {
        posArgs_ = java.util.Collections.emptyList();
      } else {
        posArgs_ = null;
        posArgsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableNamedArguments().clear();
      if (posArgumentsBuilder_ == null) {
        posArguments_ = java.util.Collections.emptyList();
      } else {
        posArguments_ = null;
        posArgumentsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      if (inputBuilder_ == null) {
        input_ = null;
      } else {
        input_ = null;
        inputBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
          .internal_static_spark_connect_SqlCommand_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand
        getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand build() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand buildPartial() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand result =
          new org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand(this);
      int from_bitField0_ = bitField0_;
      result.sql_ = sql_;
      result.args_ = internalGetArgs();
      result.args_.makeImmutable();
      if (posArgsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          posArgs_ = java.util.Collections.unmodifiableList(posArgs_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.posArgs_ = posArgs_;
      } else {
        result.posArgs_ = posArgsBuilder_.build();
      }
      result.namedArguments_ = internalGetNamedArguments();
      result.namedArguments_.makeImmutable();
      if (posArgumentsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          posArguments_ = java.util.Collections.unmodifiableList(posArguments_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.posArguments_ = posArguments_;
      } else {
        result.posArguments_ = posArgumentsBuilder_.build();
      }
      if (inputBuilder_ == null) {
        result.input_ = input_;
      } else {
        result.input_ = inputBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand other) {
      if (other
          == org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand.getDefaultInstance())
        return this;
      if (!other.getSql().isEmpty()) {
        sql_ = other.sql_;
        onChanged();
      }
      internalGetMutableArgs().mergeFrom(other.internalGetArgs());
      if (posArgsBuilder_ == null) {
        if (!other.posArgs_.isEmpty()) {
          if (posArgs_.isEmpty()) {
            posArgs_ = other.posArgs_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensurePosArgsIsMutable();
            posArgs_.addAll(other.posArgs_);
          }
          onChanged();
        }
      } else {
        if (!other.posArgs_.isEmpty()) {
          if (posArgsBuilder_.isEmpty()) {
            posArgsBuilder_.dispose();
            posArgsBuilder_ = null;
            posArgs_ = other.posArgs_;
            bitField0_ = (bitField0_ & ~0x00000002);
            posArgsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getPosArgsFieldBuilder()
                    : null;
          } else {
            posArgsBuilder_.addAllMessages(other.posArgs_);
          }
        }
      }
      internalGetMutableNamedArguments().mergeFrom(other.internalGetNamedArguments());
      if (posArgumentsBuilder_ == null) {
        if (!other.posArguments_.isEmpty()) {
          if (posArguments_.isEmpty()) {
            posArguments_ = other.posArguments_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensurePosArgumentsIsMutable();
            posArguments_.addAll(other.posArguments_);
          }
          onChanged();
        }
      } else {
        if (!other.posArguments_.isEmpty()) {
          if (posArgumentsBuilder_.isEmpty()) {
            posArgumentsBuilder_.dispose();
            posArgumentsBuilder_ = null;
            posArguments_ = other.posArguments_;
            bitField0_ = (bitField0_ & ~0x00000008);
            posArgumentsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getPosArgumentsFieldBuilder()
                    : null;
          } else {
            posArgumentsBuilder_.addAllMessages(other.posArguments_);
          }
        }
      }
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                sql_ = input.readStringRequireUtf8();

                break;
              } // case 10
            case 18:
              {
                com.google.protobuf.MapEntry<
                        java.lang.String,
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
                    args__ =
                        input.readMessage(
                            ArgsDefaultEntryHolder.defaultEntry.getParserForType(),
                            extensionRegistry);
                internalGetMutableArgs().getMutableMap().put(args__.getKey(), args__.getValue());
                break;
              } // case 18
            case 26:
              {
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal m =
                    input.readMessage(
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal
                            .parser(),
                        extensionRegistry);
                if (posArgsBuilder_ == null) {
                  ensurePosArgsIsMutable();
                  posArgs_.add(m);
                } else {
                  posArgsBuilder_.addMessage(m);
                }
                break;
              } // case 26
            case 34:
              {
                com.google.protobuf.MapEntry<
                        java.lang.String,
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
                    namedArguments__ =
                        input.readMessage(
                            NamedArgumentsDefaultEntryHolder.defaultEntry.getParserForType(),
                            extensionRegistry);
                internalGetMutableNamedArguments()
                    .getMutableMap()
                    .put(namedArguments__.getKey(), namedArguments__.getValue());
                break;
              } // case 34
            case 42:
              {
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression m =
                    input.readMessage(
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.parser(),
                        extensionRegistry);
                if (posArgumentsBuilder_ == null) {
                  ensurePosArgumentsIsMutable();
                  posArguments_.add(m);
                } else {
                  posArgumentsBuilder_.addMessage(m);
                }
                break;
              } // case 42
            case 50:
              {
                input.readMessage(getInputFieldBuilder().getBuilder(), extensionRegistry);

                break;
              } // case 50
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object sql_ = "";
    /**
     *
     *
     * <pre>
     * (Required) SQL Query.
     * </pre>
     *
     * <code>string sql = 1 [deprecated = true];</code>
     *
     * @deprecated spark.connect.SqlCommand.sql is deprecated. See
     *     kyuubi/spark/connect/commands.proto;l=63
     * @return The sql.
     */
    @java.lang.Deprecated
    public java.lang.String getSql() {
      java.lang.Object ref = sql_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sql_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) SQL Query.
     * </pre>
     *
     * <code>string sql = 1 [deprecated = true];</code>
     *
     * @deprecated spark.connect.SqlCommand.sql is deprecated. See
     *     kyuubi/spark/connect/commands.proto;l=63
     * @return The bytes for sql.
     */
    @java.lang.Deprecated
    public com.google.protobuf.ByteString getSqlBytes() {
      java.lang.Object ref = sql_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        sql_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) SQL Query.
     * </pre>
     *
     * <code>string sql = 1 [deprecated = true];</code>
     *
     * @deprecated spark.connect.SqlCommand.sql is deprecated. See
     *     kyuubi/spark/connect/commands.proto;l=63
     * @param value The sql to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated
    public Builder setSql(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      sql_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) SQL Query.
     * </pre>
     *
     * <code>string sql = 1 [deprecated = true];</code>
     *
     * @deprecated spark.connect.SqlCommand.sql is deprecated. See
     *     kyuubi/spark/connect/commands.proto;l=63
     * @return This builder for chaining.
     */
    @java.lang.Deprecated
    public Builder clearSql() {

      sql_ = getDefaultInstance().getSql();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) SQL Query.
     * </pre>
     *
     * <code>string sql = 1 [deprecated = true];</code>
     *
     * @deprecated spark.connect.SqlCommand.sql is deprecated. See
     *     kyuubi/spark/connect/commands.proto;l=63
     * @param value The bytes for sql to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated
    public Builder setSqlBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      sql_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        args_;

    private com.google.protobuf.MapField<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        internalGetArgs() {
      if (args_ == null) {
        return com.google.protobuf.MapField.emptyMapField(ArgsDefaultEntryHolder.defaultEntry);
      }
      return args_;
    }

    private com.google.protobuf.MapField<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        internalGetMutableArgs() {
      onChanged();
      ;
      if (args_ == null) {
        args_ = com.google.protobuf.MapField.newMapField(ArgsDefaultEntryHolder.defaultEntry);
      }
      if (!args_.isMutable()) {
        args_ = args_.copy();
      }
      return args_;
    }

    @java.lang.Deprecated
    public int getArgsCount() {
      return internalGetArgs().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to literal expressions.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];
     * </code>
     */
    @java.lang.Deprecated
    @java.lang.Override
    public boolean containsArgs(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetArgs().getMap().containsKey(key);
    }
    /** Use {@link #getArgsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        getArgs() {
      return getArgsMap();
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to literal expressions.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];
     * </code>
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        getArgsMap() {
      return internalGetArgs().getMap();
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to literal expressions.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];
     * </code>
     */
    @java.lang.Override
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal getArgsOrDefault(
        java.lang.String key,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<
              java.lang.String,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
          map = internalGetArgs().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to literal expressions.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];
     * </code>
     */
    @java.lang.Override
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal getArgsOrThrow(
        java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<
              java.lang.String,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
          map = internalGetArgs().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    @java.lang.Deprecated
    public Builder clearArgs() {
      internalGetMutableArgs().getMutableMap().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to literal expressions.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];
     * </code>
     */
    @java.lang.Deprecated
    public Builder removeArgs(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableArgs().getMutableMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        getMutableArgs() {
      return internalGetMutableArgs().getMutableMap();
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to literal expressions.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];
     * </code>
     */
    @java.lang.Deprecated
    public Builder putArgs(
        java.lang.String key,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }

      internalGetMutableArgs().getMutableMap().put(key, value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to literal expressions.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];
     * </code>
     */
    @java.lang.Deprecated
    public Builder putAllArgs(
        java.util.Map<
                java.lang.String,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
            values) {
      internalGetMutableArgs().getMutableMap().putAll(values);
      return this;
    }

    private java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        posArgs_ = java.util.Collections.emptyList();

    private void ensurePosArgsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        posArgs_ =
            new java.util.ArrayList<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>(posArgs_);
        bitField0_ |= 0x00000002;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.LiteralOrBuilder>
        posArgsBuilder_;

    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
        getPosArgsList() {
      if (posArgsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(posArgs_);
      } else {
        return posArgsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public int getPosArgsCount() {
      if (posArgsBuilder_ == null) {
        return posArgs_.size();
      } else {
        return posArgsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal getPosArgs(
        int index) {
      if (posArgsBuilder_ == null) {
        return posArgs_.get(index);
      } else {
        return posArgsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder setPosArgs(
        int index, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal value) {
      if (posArgsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePosArgsIsMutable();
        posArgs_.set(index, value);
        onChanged();
      } else {
        posArgsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder setPosArgs(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal.Builder
            builderForValue) {
      if (posArgsBuilder_ == null) {
        ensurePosArgsIsMutable();
        posArgs_.set(index, builderForValue.build());
        onChanged();
      } else {
        posArgsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder addPosArgs(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal value) {
      if (posArgsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePosArgsIsMutable();
        posArgs_.add(value);
        onChanged();
      } else {
        posArgsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder addPosArgs(
        int index, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal value) {
      if (posArgsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePosArgsIsMutable();
        posArgs_.add(index, value);
        onChanged();
      } else {
        posArgsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder addPosArgs(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal.Builder
            builderForValue) {
      if (posArgsBuilder_ == null) {
        ensurePosArgsIsMutable();
        posArgs_.add(builderForValue.build());
        onChanged();
      } else {
        posArgsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder addPosArgs(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal.Builder
            builderForValue) {
      if (posArgsBuilder_ == null) {
        ensurePosArgsIsMutable();
        posArgs_.add(index, builderForValue.build());
        onChanged();
      } else {
        posArgsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder addAllPosArgs(
        java.lang.Iterable<
                ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
            values) {
      if (posArgsBuilder_ == null) {
        ensurePosArgsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, posArgs_);
        onChanged();
      } else {
        posArgsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder clearPosArgs() {
      if (posArgsBuilder_ == null) {
        posArgs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        posArgsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder removePosArgs(int index) {
      if (posArgsBuilder_ == null) {
        ensurePosArgsIsMutable();
        posArgs_.remove(index);
        onChanged();
      } else {
        posArgsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal.Builder
        getPosArgsBuilder(int index) {
      return getPosArgsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.LiteralOrBuilder
        getPosArgsOrBuilder(int index) {
      if (posArgsBuilder_ == null) {
        return posArgs_.get(index);
      } else {
        return posArgsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public java.util.List<
            ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.LiteralOrBuilder>
        getPosArgsOrBuilderList() {
      if (posArgsBuilder_ != null) {
        return posArgsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(posArgs_);
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal.Builder
        addPosArgsBuilder() {
      return getPosArgsFieldBuilder()
          .addBuilder(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal
                  .getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal.Builder
        addPosArgsBuilder(int index) {
      return getPosArgsFieldBuilder()
          .addBuilder(
              index,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal
                  .getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public java.util.List<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal.Builder>
        getPosArgsBuilderList() {
      return getPosArgsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.LiteralOrBuilder>
        getPosArgsFieldBuilder() {
      if (posArgsBuilder_ == null) {
        posArgsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.LiteralOrBuilder>(
                posArgs_, ((bitField0_ & 0x00000002) != 0), getParentForChildren(), isClean());
        posArgs_ = null;
      }
      return posArgsBuilder_;
    }

    private com.google.protobuf.MapField<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        namedArguments_;

    private com.google.protobuf.MapField<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        internalGetNamedArguments() {
      if (namedArguments_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            NamedArgumentsDefaultEntryHolder.defaultEntry);
      }
      return namedArguments_;
    }

    private com.google.protobuf.MapField<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        internalGetMutableNamedArguments() {
      onChanged();
      ;
      if (namedArguments_ == null) {
        namedArguments_ =
            com.google.protobuf.MapField.newMapField(NamedArgumentsDefaultEntryHolder.defaultEntry);
      }
      if (!namedArguments_.isMutable()) {
        namedArguments_ = namedArguments_.copy();
      }
      return namedArguments_;
    }

    @java.lang.Deprecated
    public int getNamedArgumentsCount() {
      return internalGetNamedArguments().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to expressions.
     * It cannot coexist with `pos_arguments`.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
     * </code>
     */
    @java.lang.Deprecated
    @java.lang.Override
    public boolean containsNamedArguments(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetNamedArguments().getMap().containsKey(key);
    }
    /** Use {@link #getNamedArgumentsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        getNamedArguments() {
      return getNamedArgumentsMap();
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to expressions.
     * It cannot coexist with `pos_arguments`.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
     * </code>
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        getNamedArgumentsMap() {
      return internalGetNamedArguments().getMap();
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to expressions.
     * It cannot coexist with `pos_arguments`.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
     * </code>
     */
    @java.lang.Override
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getNamedArgumentsOrDefault(
        java.lang.String key,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
          map = internalGetNamedArguments().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to expressions.
     * It cannot coexist with `pos_arguments`.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
     * </code>
     */
    @java.lang.Override
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getNamedArgumentsOrThrow(
        java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
          map = internalGetNamedArguments().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    @java.lang.Deprecated
    public Builder clearNamedArguments() {
      internalGetMutableNamedArguments().getMutableMap().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to expressions.
     * It cannot coexist with `pos_arguments`.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
     * </code>
     */
    @java.lang.Deprecated
    public Builder removeNamedArguments(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableNamedArguments().getMutableMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        getMutableNamedArguments() {
      return internalGetMutableNamedArguments().getMutableMap();
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to expressions.
     * It cannot coexist with `pos_arguments`.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
     * </code>
     */
    @java.lang.Deprecated
    public Builder putNamedArguments(
        java.lang.String key, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }

      internalGetMutableNamedArguments().getMutableMap().put(key, value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A map of parameter names to expressions.
     * It cannot coexist with `pos_arguments`.
     * </pre>
     *
     * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4 [deprecated = true];
     * </code>
     */
    @java.lang.Deprecated
    public Builder putAllNamedArguments(
        java.util.Map<
                java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
            values) {
      internalGetMutableNamedArguments().getMutableMap().putAll(values);
      return this;
    }

    private java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        posArguments_ = java.util.Collections.emptyList();

    private void ensurePosArgumentsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        posArguments_ =
            new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>(
                posArguments_);
        bitField0_ |= 0x00000008;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
        posArgumentsBuilder_;

    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
        getPosArgumentsList() {
      if (posArgumentsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(posArguments_);
      } else {
        return posArgumentsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public int getPosArgumentsCount() {
      if (posArgumentsBuilder_ == null) {
        return posArguments_.size();
      } else {
        return posArgumentsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getPosArguments(int index) {
      if (posArgumentsBuilder_ == null) {
        return posArguments_.get(index);
      } else {
        return posArgumentsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder setPosArguments(
        int index, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression value) {
      if (posArgumentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePosArgumentsIsMutable();
        posArguments_.set(index, value);
        onChanged();
      } else {
        posArgumentsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder setPosArguments(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder builderForValue) {
      if (posArgumentsBuilder_ == null) {
        ensurePosArgumentsIsMutable();
        posArguments_.set(index, builderForValue.build());
        onChanged();
      } else {
        posArgumentsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder addPosArguments(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression value) {
      if (posArgumentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePosArgumentsIsMutable();
        posArguments_.add(value);
        onChanged();
      } else {
        posArgumentsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder addPosArguments(
        int index, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression value) {
      if (posArgumentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePosArgumentsIsMutable();
        posArguments_.add(index, value);
        onChanged();
      } else {
        posArgumentsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder addPosArguments(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder builderForValue) {
      if (posArgumentsBuilder_ == null) {
        ensurePosArgumentsIsMutable();
        posArguments_.add(builderForValue.build());
        onChanged();
      } else {
        posArgumentsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder addPosArguments(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder builderForValue) {
      if (posArgumentsBuilder_ == null) {
        ensurePosArgumentsIsMutable();
        posArguments_.add(index, builderForValue.build());
        onChanged();
      } else {
        posArgumentsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder addAllPosArguments(
        java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
            values) {
      if (posArgumentsBuilder_ == null) {
        ensurePosArgumentsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, posArguments_);
        onChanged();
      } else {
        posArgumentsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder clearPosArguments() {
      if (posArgumentsBuilder_ == null) {
        posArguments_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        posArgumentsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder removePosArguments(int index) {
      if (posArgumentsBuilder_ == null) {
        ensurePosArgumentsIsMutable();
        posArguments_.remove(index);
        onChanged();
      } else {
        posArgumentsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder
        getPosArgumentsBuilder(int index) {
      return getPosArgumentsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder
        getPosArgumentsOrBuilder(int index) {
      if (posArgumentsBuilder_ == null) {
        return posArguments_.get(index);
      } else {
        return posArgumentsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public java.util.List<
            ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
        getPosArgumentsOrBuilderList() {
      if (posArgumentsBuilder_ != null) {
        return posArgumentsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(posArguments_);
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder
        addPosArgumentsBuilder() {
      return getPosArgumentsFieldBuilder()
          .addBuilder(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder
        addPosArgumentsBuilder(int index) {
      return getPosArgumentsFieldBuilder()
          .addBuilder(
              index,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * (Optional) A sequence of expressions for positional parameters in the SQL query text.
     * It cannot coexist with `named_arguments`.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression pos_arguments = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder>
        getPosArgumentsBuilderList() {
      return getPosArgumentsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
        getPosArgumentsFieldBuilder() {
      if (posArgumentsBuilder_ == null) {
        posArgumentsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>(
                posArguments_, ((bitField0_ & 0x00000008) != 0), getParentForChildren(), isClean());
        posArguments_ = null;
      }
      return posArgumentsBuilder_;
    }

    private org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        inputBuilder_;
    /**
     *
     *
     * <pre>
     * (Optional) The relation that this SQL command will be built on.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 6;</code>
     *
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return inputBuilder_ != null || input_ != null;
    }
    /**
     *
     *
     * <pre>
     * (Optional) The relation that this SQL command will be built on.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 6;</code>
     *
     * @return The input.
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
            : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) The relation that this SQL command will be built on.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 6;</code>
     */
    public Builder setInput(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
        onChanged();
      } else {
        inputBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) The relation that this SQL command will be built on.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 6;</code>
     */
    public Builder setInput(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
        onChanged();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) The relation that this SQL command will be built on.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 6;</code>
     */
    public Builder mergeInput(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (input_ != null) {
          input_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.newBuilder(input_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          input_ = value;
        }
        onChanged();
      } else {
        inputBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) The relation that this SQL command will be built on.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 6;</code>
     */
    public Builder clearInput() {
      if (inputBuilder_ == null) {
        input_ = null;
        onChanged();
      } else {
        input_ = null;
        inputBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) The relation that this SQL command will be built on.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 6;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder getInputBuilder() {

      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * (Optional) The relation that this SQL command will be built on.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 6;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
            : input_;
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) The relation that this SQL command will be built on.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>(
                getInput(), getParentForChildren(), isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:spark.connect.SqlCommand)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.SqlCommand)
  private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand();
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SqlCommand> PARSER =
      new com.google.protobuf.AbstractParser<SqlCommand>() {
        @java.lang.Override
        public SqlCommand parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<SqlCommand> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SqlCommand> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.SqlCommand getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
