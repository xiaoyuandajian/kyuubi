// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/commands.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

/**
 *
 *
 * <pre>
 * The enum used for client side streaming query listener event
 * There is no QueryStartedEvent defined here,
 * it is added as a field in WriteStreamOperationStartResult
 * </pre>
 *
 * Protobuf enum {@code spark.connect.StreamingQueryEventType}
 */
public enum StreamingQueryEventType implements com.google.protobuf.ProtocolMessageEnum {
  /** <code>QUERY_PROGRESS_UNSPECIFIED = 0;</code> */
  QUERY_PROGRESS_UNSPECIFIED(0),
  /** <code>QUERY_PROGRESS_EVENT = 1;</code> */
  QUERY_PROGRESS_EVENT(1),
  /** <code>QUERY_TERMINATED_EVENT = 2;</code> */
  QUERY_TERMINATED_EVENT(2),
  /** <code>QUERY_IDLE_EVENT = 3;</code> */
  QUERY_IDLE_EVENT(3),
  UNRECOGNIZED(-1),
  ;

  /** <code>QUERY_PROGRESS_UNSPECIFIED = 0;</code> */
  public static final int QUERY_PROGRESS_UNSPECIFIED_VALUE = 0;
  /** <code>QUERY_PROGRESS_EVENT = 1;</code> */
  public static final int QUERY_PROGRESS_EVENT_VALUE = 1;
  /** <code>QUERY_TERMINATED_EVENT = 2;</code> */
  public static final int QUERY_TERMINATED_EVENT_VALUE = 2;
  /** <code>QUERY_IDLE_EVENT = 3;</code> */
  public static final int QUERY_IDLE_EVENT_VALUE = 3;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static StreamingQueryEventType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static StreamingQueryEventType forNumber(int value) {
    switch (value) {
      case 0:
        return QUERY_PROGRESS_UNSPECIFIED;
      case 1:
        return QUERY_PROGRESS_EVENT;
      case 2:
        return QUERY_TERMINATED_EVENT;
      case 3:
        return QUERY_IDLE_EVENT;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<StreamingQueryEventType>
      internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<StreamingQueryEventType>
      internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StreamingQueryEventType>() {
            public StreamingQueryEventType findValueByNumber(int number) {
              return StreamingQueryEventType.forNumber(number);
            }
          };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands.getDescriptor()
        .getEnumTypes()
        .get(0);
  }

  private static final StreamingQueryEventType[] VALUES = values();

  public static StreamingQueryEventType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private StreamingQueryEventType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:spark.connect.StreamingQueryEventType)
}
