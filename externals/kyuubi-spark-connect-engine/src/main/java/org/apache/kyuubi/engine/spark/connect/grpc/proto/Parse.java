// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

/** Protobuf type {@code spark.connect.Parse} */
public final class Parse extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:spark.connect.Parse)
    ParseOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use Parse.newBuilder() to construct.
  private Parse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private Parse() {
    format_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new Parse();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
        .internal_static_spark_connect_Parse_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(int number) {
    switch (number) {
      case 4:
        return internalGetOptions();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
        .internal_static_spark_connect_Parse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.class,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.Builder.class);
  }

  /** Protobuf enum {@code spark.connect.Parse.ParseFormat} */
  public enum ParseFormat implements com.google.protobuf.ProtocolMessageEnum {
    /** <code>PARSE_FORMAT_UNSPECIFIED = 0;</code> */
    PARSE_FORMAT_UNSPECIFIED(0),
    /** <code>PARSE_FORMAT_CSV = 1;</code> */
    PARSE_FORMAT_CSV(1),
    /** <code>PARSE_FORMAT_JSON = 2;</code> */
    PARSE_FORMAT_JSON(2),
    UNRECOGNIZED(-1),
    ;

    /** <code>PARSE_FORMAT_UNSPECIFIED = 0;</code> */
    public static final int PARSE_FORMAT_UNSPECIFIED_VALUE = 0;
    /** <code>PARSE_FORMAT_CSV = 1;</code> */
    public static final int PARSE_FORMAT_CSV_VALUE = 1;
    /** <code>PARSE_FORMAT_JSON = 2;</code> */
    public static final int PARSE_FORMAT_JSON_VALUE = 2;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ParseFormat valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ParseFormat forNumber(int value) {
      switch (value) {
        case 0:
          return PARSE_FORMAT_UNSPECIFIED;
        case 1:
          return PARSE_FORMAT_CSV;
        case 2:
          return PARSE_FORMAT_JSON;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ParseFormat> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<ParseFormat> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ParseFormat>() {
          public ParseFormat findValueByNumber(int number) {
            return ParseFormat.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.getDescriptor()
          .getEnumTypes()
          .get(0);
    }

    private static final ParseFormat[] VALUES = values();

    public static ParseFormat valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ParseFormat(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:spark.connect.Parse.ParseFormat)
  }

  private int bitField0_;
  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation input_;
  /**
   *
   *
   * <pre>
   * (Required) Input relation to Parse. The input is expected to have single text column.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return Whether the input field is set.
   */
  @java.lang.Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   *
   *
   * <pre>
   * (Required) Input relation to Parse. The input is expected to have single text column.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return The input.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput() {
    return input_ == null
        ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
        : input_;
  }
  /**
   *
   *
   * <pre>
   * (Required) Input relation to Parse. The input is expected to have single text column.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder() {
    return getInput();
  }

  public static final int FORMAT_FIELD_NUMBER = 2;
  private int format_;
  /**
   *
   *
   * <pre>
   * (Required) The expected format of the text.
   * </pre>
   *
   * <code>.spark.connect.Parse.ParseFormat format = 2;</code>
   *
   * @return The enum numeric value on the wire for format.
   */
  @java.lang.Override
  public int getFormatValue() {
    return format_;
  }
  /**
   *
   *
   * <pre>
   * (Required) The expected format of the text.
   * </pre>
   *
   * <code>.spark.connect.Parse.ParseFormat format = 2;</code>
   *
   * @return The format.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat getFormat() {
    @SuppressWarnings("deprecation")
    org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat result =
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat.valueOf(format_);
    return result == null
        ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat.UNRECOGNIZED
        : result;
  }

  public static final int SCHEMA_FIELD_NUMBER = 3;
  private org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType schema_;
  /**
   *
   *
   * <pre>
   * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
   * </pre>
   *
   * <code>optional .spark.connect.DataType schema = 3;</code>
   *
   * @return Whether the schema field is set.
   */
  @java.lang.Override
  public boolean hasSchema() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
   * </pre>
   *
   * <code>optional .spark.connect.DataType schema = 3;</code>
   *
   * @return The schema.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType getSchema() {
    return schema_ == null
        ? org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType.getDefaultInstance()
        : schema_;
  }
  /**
   *
   *
   * <pre>
   * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
   * </pre>
   *
   * <code>optional .spark.connect.DataType schema = 3;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.DataTypeOrBuilder getSchemaOrBuilder() {
    return schema_ == null
        ? org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType.getDefaultInstance()
        : schema_;
  }

  public static final int OPTIONS_FIELD_NUMBER = 4;

  private static final class OptionsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<java.lang.String, java.lang.String> defaultEntry =
        com.google.protobuf.MapEntry.<java.lang.String, java.lang.String>newDefaultInstance(
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
                .internal_static_spark_connect_Parse_OptionsEntry_descriptor,
            com.google.protobuf.WireFormat.FieldType.STRING,
            "",
            com.google.protobuf.WireFormat.FieldType.STRING,
            "");
  }

  private com.google.protobuf.MapField<java.lang.String, java.lang.String> options_;

  private com.google.protobuf.MapField<java.lang.String, java.lang.String> internalGetOptions() {
    if (options_ == null) {
      return com.google.protobuf.MapField.emptyMapField(OptionsDefaultEntryHolder.defaultEntry);
    }
    return options_;
  }

  public int getOptionsCount() {
    return internalGetOptions().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * Options for the csv/json parser. The map key is case insensitive.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 4;</code>
   */
  @java.lang.Override
  public boolean containsOptions(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetOptions().getMap().containsKey(key);
  }
  /** Use {@link #getOptionsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getOptions() {
    return getOptionsMap();
  }
  /**
   *
   *
   * <pre>
   * Options for the csv/json parser. The map key is case insensitive.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 4;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getOptionsMap() {
    return internalGetOptions().getMap();
  }
  /**
   *
   *
   * <pre>
   * Options for the csv/json parser. The map key is case insensitive.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 4;</code>
   */
  @java.lang.Override
  public java.lang.String getOptionsOrDefault(java.lang.String key, java.lang.String defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * Options for the csv/json parser. The map key is case insensitive.
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 4;</code>
   */
  @java.lang.Override
  public java.lang.String getOptionsOrThrow(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    if (format_
        != org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat
            .PARSE_FORMAT_UNSPECIFIED
            .getNumber()) {
      output.writeEnum(2, format_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(3, getSchema());
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetOptions(), OptionsDefaultEntryHolder.defaultEntry, 4);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getInput());
    }
    if (format_
        != org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat
            .PARSE_FORMAT_UNSPECIFIED
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(2, format_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getSchema());
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry :
        internalGetOptions().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String> options__ =
          OptionsDefaultEntryHolder.defaultEntry
              .newBuilderForType()
              .setKey(entry.getKey())
              .setValue(entry.getValue())
              .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, options__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse other =
        (org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput().equals(other.getInput())) return false;
    }
    if (format_ != other.format_) return false;
    if (hasSchema() != other.hasSchema()) return false;
    if (hasSchema()) {
      if (!getSchema().equals(other.getSchema())) return false;
    }
    if (!internalGetOptions().equals(other.internalGetOptions())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    hash = (37 * hash) + FORMAT_FIELD_NUMBER;
    hash = (53 * hash) + format_;
    if (hasSchema()) {
      hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
      hash = (53 * hash) + getSchema().hashCode();
    }
    if (!internalGetOptions().getMap().isEmpty()) {
      hash = (37 * hash) + OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetOptions().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /** Protobuf type {@code spark.connect.Parse} */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:spark.connect.Parse)
      org.apache.kyuubi.engine.spark.connect.grpc.proto.ParseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_Parse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(int number) {
      switch (number) {
        case 4:
          return internalGetOptions();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(int number) {
      switch (number) {
        case 4:
          return internalGetMutableOptions();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_Parse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getSchemaFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (inputBuilder_ == null) {
        input_ = null;
      } else {
        input_ = null;
        inputBuilder_ = null;
      }
      format_ = 0;

      if (schemaBuilder_ == null) {
        schema_ = null;
      } else {
        schemaBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      internalGetMutableOptions().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_Parse_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse build() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse buildPartial() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse result =
          new org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (inputBuilder_ == null) {
        result.input_ = input_;
      } else {
        result.input_ = inputBuilder_.build();
      }
      result.format_ = format_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        if (schemaBuilder_ == null) {
          result.schema_ = schema_;
        } else {
          result.schema_ = schemaBuilder_.build();
        }
        to_bitField0_ |= 0x00000001;
      }
      result.options_ = internalGetOptions();
      result.options_.makeImmutable();
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse other) {
      if (other == org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.getDefaultInstance())
        return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      if (other.format_ != 0) {
        setFormatValue(other.getFormatValue());
      }
      if (other.hasSchema()) {
        mergeSchema(other.getSchema());
      }
      internalGetMutableOptions().mergeFrom(other.internalGetOptions());
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getInputFieldBuilder().getBuilder(), extensionRegistry);

                break;
              } // case 10
            case 16:
              {
                format_ = input.readEnum();

                break;
              } // case 16
            case 26:
              {
                input.readMessage(getSchemaFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 26
            case 34:
              {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.String> options__ =
                    input.readMessage(
                        OptionsDefaultEntryHolder.defaultEntry.getParserForType(),
                        extensionRegistry);
                internalGetMutableOptions()
                    .getMutableMap()
                    .put(options__.getKey(), options__.getValue());
                break;
              } // case 34
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        inputBuilder_;
    /**
     *
     *
     * <pre>
     * (Required) Input relation to Parse. The input is expected to have single text column.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     *
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return inputBuilder_ != null || input_ != null;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation to Parse. The input is expected to have single text column.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     *
     * @return The input.
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
            : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation to Parse. The input is expected to have single text column.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
        onChanged();
      } else {
        inputBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation to Parse. The input is expected to have single text column.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
        onChanged();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation to Parse. The input is expected to have single text column.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (input_ != null) {
          input_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.newBuilder(input_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          input_ = value;
        }
        onChanged();
      } else {
        inputBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation to Parse. The input is expected to have single text column.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      if (inputBuilder_ == null) {
        input_ = null;
        onChanged();
      } else {
        input_ = null;
        inputBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation to Parse. The input is expected to have single text column.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder getInputBuilder() {

      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation to Parse. The input is expected to have single text column.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
            : input_;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Input relation to Parse. The input is expected to have single text column.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>(
                getInput(), getParentForChildren(), isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private int format_ = 0;
    /**
     *
     *
     * <pre>
     * (Required) The expected format of the text.
     * </pre>
     *
     * <code>.spark.connect.Parse.ParseFormat format = 2;</code>
     *
     * @return The enum numeric value on the wire for format.
     */
    @java.lang.Override
    public int getFormatValue() {
      return format_;
    }
    /**
     *
     *
     * <pre>
     * (Required) The expected format of the text.
     * </pre>
     *
     * <code>.spark.connect.Parse.ParseFormat format = 2;</code>
     *
     * @param value The enum numeric value on the wire for format to set.
     * @return This builder for chaining.
     */
    public Builder setFormatValue(int value) {

      format_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The expected format of the text.
     * </pre>
     *
     * <code>.spark.connect.Parse.ParseFormat format = 2;</code>
     *
     * @return The format.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat getFormat() {
      @SuppressWarnings("deprecation")
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat result =
          org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat.valueOf(format_);
      return result == null
          ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat.UNRECOGNIZED
          : result;
    }
    /**
     *
     *
     * <pre>
     * (Required) The expected format of the text.
     * </pre>
     *
     * <code>.spark.connect.Parse.ParseFormat format = 2;</code>
     *
     * @param value The format to set.
     * @return This builder for chaining.
     */
    public Builder setFormat(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse.ParseFormat value) {
      if (value == null) {
        throw new NullPointerException();
      }

      format_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The expected format of the text.
     * </pre>
     *
     * <code>.spark.connect.Parse.ParseFormat format = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearFormat() {

      format_ = 0;
      onChanged();
      return this;
    }

    private org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType schema_;
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.DataTypeOrBuilder>
        schemaBuilder_;
    /**
     *
     *
     * <pre>
     * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
     * </pre>
     *
     * <code>optional .spark.connect.DataType schema = 3;</code>
     *
     * @return Whether the schema field is set.
     */
    public boolean hasSchema() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
     * </pre>
     *
     * <code>optional .spark.connect.DataType schema = 3;</code>
     *
     * @return The schema.
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType getSchema() {
      if (schemaBuilder_ == null) {
        return schema_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType.getDefaultInstance()
            : schema_;
      } else {
        return schemaBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
     * </pre>
     *
     * <code>optional .spark.connect.DataType schema = 3;</code>
     */
    public Builder setSchema(org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType value) {
      if (schemaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        schema_ = value;
        onChanged();
      } else {
        schemaBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
     * </pre>
     *
     * <code>optional .spark.connect.DataType schema = 3;</code>
     */
    public Builder setSchema(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType.Builder builderForValue) {
      if (schemaBuilder_ == null) {
        schema_ = builderForValue.build();
        onChanged();
      } else {
        schemaBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
     * </pre>
     *
     * <code>optional .spark.connect.DataType schema = 3;</code>
     */
    public Builder mergeSchema(org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType value) {
      if (schemaBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)
            && schema_ != null
            && schema_
                != org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType
                    .getDefaultInstance()) {
          schema_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType.newBuilder(schema_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          schema_ = value;
        }
        onChanged();
      } else {
        schemaBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
     * </pre>
     *
     * <code>optional .spark.connect.DataType schema = 3;</code>
     */
    public Builder clearSchema() {
      if (schemaBuilder_ == null) {
        schema_ = null;
        onChanged();
      } else {
        schemaBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
     * </pre>
     *
     * <code>optional .spark.connect.DataType schema = 3;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType.Builder getSchemaBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getSchemaFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
     * </pre>
     *
     * <code>optional .spark.connect.DataType schema = 3;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.DataTypeOrBuilder
        getSchemaOrBuilder() {
      if (schemaBuilder_ != null) {
        return schemaBuilder_.getMessageOrBuilder();
      } else {
        return schema_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType.getDefaultInstance()
            : schema_;
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) DataType representing the schema. If not set, Spark will infer the schema.
     * </pre>
     *
     * <code>optional .spark.connect.DataType schema = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.DataTypeOrBuilder>
        getSchemaFieldBuilder() {
      if (schemaBuilder_ == null) {
        schemaBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.DataType.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.DataTypeOrBuilder>(
                getSchema(), getParentForChildren(), isClean());
        schema_ = null;
      }
      return schemaBuilder_;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> options_;

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> internalGetOptions() {
      if (options_ == null) {
        return com.google.protobuf.MapField.emptyMapField(OptionsDefaultEntryHolder.defaultEntry);
      }
      return options_;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableOptions() {
      onChanged();
      ;
      if (options_ == null) {
        options_ = com.google.protobuf.MapField.newMapField(OptionsDefaultEntryHolder.defaultEntry);
      }
      if (!options_.isMutable()) {
        options_ = options_.copy();
      }
      return options_;
    }

    public int getOptionsCount() {
      return internalGetOptions().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * Options for the csv/json parser. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 4;</code>
     */
    @java.lang.Override
    public boolean containsOptions(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetOptions().getMap().containsKey(key);
    }
    /** Use {@link #getOptionsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getOptions() {
      return getOptionsMap();
    }
    /**
     *
     *
     * <pre>
     * Options for the csv/json parser. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 4;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getOptionsMap() {
      return internalGetOptions().getMap();
    }
    /**
     *
     *
     * <pre>
     * Options for the csv/json parser. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 4;</code>
     */
    @java.lang.Override
    public java.lang.String getOptionsOrDefault(
        java.lang.String key, java.lang.String defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Options for the csv/json parser. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 4;</code>
     */
    @java.lang.Override
    public java.lang.String getOptionsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearOptions() {
      internalGetMutableOptions().getMutableMap().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Options for the csv/json parser. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 4;</code>
     */
    public Builder removeOptions(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableOptions().getMutableMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMutableOptions() {
      return internalGetMutableOptions().getMutableMap();
    }
    /**
     *
     *
     * <pre>
     * Options for the csv/json parser. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 4;</code>
     */
    public Builder putOptions(java.lang.String key, java.lang.String value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }

      internalGetMutableOptions().getMutableMap().put(key, value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Options for the csv/json parser. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 4;</code>
     */
    public Builder putAllOptions(java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableOptions().getMutableMap().putAll(values);
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:spark.connect.Parse)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.Parse)
  private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse();
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Parse> PARSER =
      new com.google.protobuf.AbstractParser<Parse>() {
        @java.lang.Override
        public Parse parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<Parse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Parse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Parse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
