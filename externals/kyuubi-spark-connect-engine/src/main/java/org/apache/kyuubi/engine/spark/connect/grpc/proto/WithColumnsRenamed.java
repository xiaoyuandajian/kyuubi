// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

/**
 *
 *
 * <pre>
 * Rename columns on the input relation by a map with name to name mapping.
 * </pre>
 *
 * Protobuf type {@code spark.connect.WithColumnsRenamed}
 */
public final class WithColumnsRenamed extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:spark.connect.WithColumnsRenamed)
    WithColumnsRenamedOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use WithColumnsRenamed.newBuilder() to construct.
  private WithColumnsRenamed(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private WithColumnsRenamed() {
    renames_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new WithColumnsRenamed();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
        .internal_static_spark_connect_WithColumnsRenamed_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(int number) {
    switch (number) {
      case 2:
        return internalGetRenameColumnsMap();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
        .internal_static_spark_connect_WithColumnsRenamed_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.class,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Builder.class);
  }

  public interface RenameOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:spark.connect.WithColumnsRenamed.Rename)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * (Required) The existing column name.
     * </pre>
     *
     * <code>string col_name = 1;</code>
     *
     * @return The colName.
     */
    java.lang.String getColName();
    /**
     *
     *
     * <pre>
     * (Required) The existing column name.
     * </pre>
     *
     * <code>string col_name = 1;</code>
     *
     * @return The bytes for colName.
     */
    com.google.protobuf.ByteString getColNameBytes();

    /**
     *
     *
     * <pre>
     * (Required) The new column name.
     * </pre>
     *
     * <code>string new_col_name = 2;</code>
     *
     * @return The newColName.
     */
    java.lang.String getNewColName();
    /**
     *
     *
     * <pre>
     * (Required) The new column name.
     * </pre>
     *
     * <code>string new_col_name = 2;</code>
     *
     * @return The bytes for newColName.
     */
    com.google.protobuf.ByteString getNewColNameBytes();
  }
  /** Protobuf type {@code spark.connect.WithColumnsRenamed.Rename} */
  public static final class Rename extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:spark.connect.WithColumnsRenamed.Rename)
      RenameOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use Rename.newBuilder() to construct.
    private Rename(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private Rename() {
      colName_ = "";
      newColName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new Rename();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_WithColumnsRenamed_Rename_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_WithColumnsRenamed_Rename_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder
                  .class);
    }

    public static final int COL_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object colName_;
    /**
     *
     *
     * <pre>
     * (Required) The existing column name.
     * </pre>
     *
     * <code>string col_name = 1;</code>
     *
     * @return The colName.
     */
    @java.lang.Override
    public java.lang.String getColName() {
      java.lang.Object ref = colName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        colName_ = s;
        return s;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) The existing column name.
     * </pre>
     *
     * <code>string col_name = 1;</code>
     *
     * @return The bytes for colName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getColNameBytes() {
      java.lang.Object ref = colName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        colName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NEW_COL_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object newColName_;
    /**
     *
     *
     * <pre>
     * (Required) The new column name.
     * </pre>
     *
     * <code>string new_col_name = 2;</code>
     *
     * @return The newColName.
     */
    @java.lang.Override
    public java.lang.String getNewColName() {
      java.lang.Object ref = newColName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        newColName_ = s;
        return s;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) The new column name.
     * </pre>
     *
     * <code>string new_col_name = 2;</code>
     *
     * @return The bytes for newColName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNewColNameBytes() {
      java.lang.Object ref = newColName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        newColName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(colName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, colName_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(newColName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, newColName_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(colName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, colName_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(newColName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, newColName_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj
          instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename other =
          (org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename) obj;

      if (!getColName().equals(other.getColName())) return false;
      if (!getNewColName().equals(other.getNewColName())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COL_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getColName().hashCode();
      hash = (37 * hash) + NEW_COL_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getNewColName().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseFrom(java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseFrom(
            java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseFrom(com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseFrom(
            java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseDelimitedFrom(
            java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /** Protobuf type {@code spark.connect.WithColumnsRenamed.Rename} */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:spark.connect.WithColumnsRenamed.Rename)
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.RenameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
            .internal_static_spark_connect_WithColumnsRenamed_Rename_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
            .internal_static_spark_connect_WithColumnsRenamed_Rename_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.class,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder
                    .class);
      }

      // Construct using
      // org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        colName_ = "";

        newColName_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
            .internal_static_spark_connect_WithColumnsRenamed_Rename_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
          getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
            .getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename build() {
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename result =
            buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
          buildPartial() {
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename result =
            new org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename(this);
        result.colName_ = colName_;
        result.newColName_ = newColName_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other
            instanceof
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename) {
          return mergeFrom(
              (org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(
          org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename other) {
        if (other
            == org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
                .getDefaultInstance()) return this;
        if (!other.getColName().isEmpty()) {
          colName_ = other.colName_;
          onChanged();
        }
        if (!other.getNewColName().isEmpty()) {
          newColName_ = other.newColName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  colName_ = input.readStringRequireUtf8();

                  break;
                } // case 10
              case 18:
                {
                  newColName_ = input.readStringRequireUtf8();

                  break;
                } // case 18
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private java.lang.Object colName_ = "";
      /**
       *
       *
       * <pre>
       * (Required) The existing column name.
       * </pre>
       *
       * <code>string col_name = 1;</code>
       *
       * @return The colName.
       */
      public java.lang.String getColName() {
        java.lang.Object ref = colName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          colName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * (Required) The existing column name.
       * </pre>
       *
       * <code>string col_name = 1;</code>
       *
       * @return The bytes for colName.
       */
      public com.google.protobuf.ByteString getColNameBytes() {
        java.lang.Object ref = colName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
          colName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * (Required) The existing column name.
       * </pre>
       *
       * <code>string col_name = 1;</code>
       *
       * @param value The colName to set.
       * @return This builder for chaining.
       */
      public Builder setColName(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }

        colName_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Required) The existing column name.
       * </pre>
       *
       * <code>string col_name = 1;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearColName() {

        colName_ = getDefaultInstance().getColName();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Required) The existing column name.
       * </pre>
       *
       * <code>string col_name = 1;</code>
       *
       * @param value The bytes for colName to set.
       * @return This builder for chaining.
       */
      public Builder setColNameBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);

        colName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object newColName_ = "";
      /**
       *
       *
       * <pre>
       * (Required) The new column name.
       * </pre>
       *
       * <code>string new_col_name = 2;</code>
       *
       * @return The newColName.
       */
      public java.lang.String getNewColName() {
        java.lang.Object ref = newColName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          newColName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * (Required) The new column name.
       * </pre>
       *
       * <code>string new_col_name = 2;</code>
       *
       * @return The bytes for newColName.
       */
      public com.google.protobuf.ByteString getNewColNameBytes() {
        java.lang.Object ref = newColName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
          newColName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * (Required) The new column name.
       * </pre>
       *
       * <code>string new_col_name = 2;</code>
       *
       * @param value The newColName to set.
       * @return This builder for chaining.
       */
      public Builder setNewColName(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }

        newColName_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Required) The new column name.
       * </pre>
       *
       * <code>string new_col_name = 2;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearNewColName() {

        newColName_ = getDefaultInstance().getNewColName();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Required) The new column name.
       * </pre>
       *
       * <code>string new_col_name = 2;</code>
       *
       * @param value The bytes for newColName to set.
       * @return This builder for chaining.
       */
      public Builder setNewColNameBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);

        newColName_ = value;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:spark.connect.WithColumnsRenamed.Rename)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.WithColumnsRenamed.Rename)
    private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE =
          new org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename();
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Rename> PARSER =
        new com.google.protobuf.AbstractParser<Rename>() {
          @java.lang.Override
          public Rename parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<Rename> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Rename> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
        getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation input_;
  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return Whether the input field is set.
   */
  @java.lang.Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return The input.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput() {
    return input_ == null
        ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
        : input_;
  }
  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder() {
    return getInput();
  }

  public static final int RENAME_COLUMNS_MAP_FIELD_NUMBER = 2;

  private static final class RenameColumnsMapDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<java.lang.String, java.lang.String> defaultEntry =
        com.google.protobuf.MapEntry.<java.lang.String, java.lang.String>newDefaultInstance(
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
                .internal_static_spark_connect_WithColumnsRenamed_RenameColumnsMapEntry_descriptor,
            com.google.protobuf.WireFormat.FieldType.STRING,
            "",
            com.google.protobuf.WireFormat.FieldType.STRING,
            "");
  }

  private com.google.protobuf.MapField<java.lang.String, java.lang.String> renameColumnsMap_;

  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetRenameColumnsMap() {
    if (renameColumnsMap_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          RenameColumnsMapDefaultEntryHolder.defaultEntry);
    }
    return renameColumnsMap_;
  }

  @java.lang.Deprecated
  public int getRenameColumnsMapCount() {
    return internalGetRenameColumnsMap().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * (Optional)
   * Renaming column names of input relation from A to B where A is the map key
   * and B is the map value. This is a no-op if schema doesn't contain any A. It
   * does not require that all input relation column names to present as keys.
   * duplicated B are not allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  @java.lang.Override
  public boolean containsRenameColumnsMap(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetRenameColumnsMap().getMap().containsKey(key);
  }
  /** Use {@link #getRenameColumnsMapMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getRenameColumnsMap() {
    return getRenameColumnsMapMap();
  }
  /**
   *
   *
   * <pre>
   * (Optional)
   * Renaming column names of input relation from A to B where A is the map key
   * and B is the map value. This is a no-op if schema doesn't contain any A. It
   * does not require that all input relation column names to present as keys.
   * duplicated B are not allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getRenameColumnsMapMap() {
    return internalGetRenameColumnsMap().getMap();
  }
  /**
   *
   *
   * <pre>
   * (Optional)
   * Renaming column names of input relation from A to B where A is the map key
   * and B is the map value. This is a no-op if schema doesn't contain any A. It
   * does not require that all input relation column names to present as keys.
   * duplicated B are not allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.lang.String getRenameColumnsMapOrDefault(
      java.lang.String key, java.lang.String defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetRenameColumnsMap().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * (Optional)
   * Renaming column names of input relation from A to B where A is the map key
   * and B is the map value. This is a no-op if schema doesn't contain any A. It
   * does not require that all input relation column names to present as keys.
   * duplicated B are not allowed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.lang.String getRenameColumnsMapOrThrow(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetRenameColumnsMap().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int RENAMES_FIELD_NUMBER = 3;
  private java.util.List<
          org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename>
      renames_;
  /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
  @java.lang.Override
  public java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename>
      getRenamesList() {
    return renames_;
  }
  /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
  @java.lang.Override
  public java.util.List<
          ? extends
              org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.RenameOrBuilder>
      getRenamesOrBuilderList() {
    return renames_;
  }
  /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
  @java.lang.Override
  public int getRenamesCount() {
    return renames_.size();
  }
  /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename getRenames(
      int index) {
    return renames_.get(index);
  }
  /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.RenameOrBuilder
      getRenamesOrBuilder(int index) {
    return renames_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetRenameColumnsMap(), RenameColumnsMapDefaultEntryHolder.defaultEntry, 2);
    for (int i = 0; i < renames_.size(); i++) {
      output.writeMessage(3, renames_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getInput());
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry :
        internalGetRenameColumnsMap().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String> renameColumnsMap__ =
          RenameColumnsMapDefaultEntryHolder.defaultEntry
              .newBuilderForType()
              .setKey(entry.getKey())
              .setValue(entry.getValue())
              .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, renameColumnsMap__);
    }
    for (int i = 0; i < renames_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, renames_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed other =
        (org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput().equals(other.getInput())) return false;
    }
    if (!internalGetRenameColumnsMap().equals(other.internalGetRenameColumnsMap())) return false;
    if (!getRenamesList().equals(other.getRenamesList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    if (!internalGetRenameColumnsMap().getMap().isEmpty()) {
      hash = (37 * hash) + RENAME_COLUMNS_MAP_FIELD_NUMBER;
      hash = (53 * hash) + internalGetRenameColumnsMap().hashCode();
    }
    if (getRenamesCount() > 0) {
      hash = (37 * hash) + RENAMES_FIELD_NUMBER;
      hash = (53 * hash) + getRenamesList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed parseFrom(
      byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed
      parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed
      parseDelimitedFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Rename columns on the input relation by a map with name to name mapping.
   * </pre>
   *
   * Protobuf type {@code spark.connect.WithColumnsRenamed}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:spark.connect.WithColumnsRenamed)
      org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamedOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_WithColumnsRenamed_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(int number) {
      switch (number) {
        case 2:
          return internalGetRenameColumnsMap();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(int number) {
      switch (number) {
        case 2:
          return internalGetMutableRenameColumnsMap();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_WithColumnsRenamed_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Builder.class);
    }

    // Construct using
    // org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (inputBuilder_ == null) {
        input_ = null;
      } else {
        input_ = null;
        inputBuilder_ = null;
      }
      internalGetMutableRenameColumnsMap().clear();
      if (renamesBuilder_ == null) {
        renames_ = java.util.Collections.emptyList();
      } else {
        renames_ = null;
        renamesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_WithColumnsRenamed_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed
        getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed
          .getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed build() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed buildPartial() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed result =
          new org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed(this);
      int from_bitField0_ = bitField0_;
      if (inputBuilder_ == null) {
        result.input_ = input_;
      } else {
        result.input_ = inputBuilder_.build();
      }
      result.renameColumnsMap_ = internalGetRenameColumnsMap();
      result.renameColumnsMap_.makeImmutable();
      if (renamesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          renames_ = java.util.Collections.unmodifiableList(renames_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.renames_ = renames_;
      } else {
        result.renames_ = renamesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed) {
        return mergeFrom(
            (org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed other) {
      if (other
          == org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed
              .getDefaultInstance()) return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      internalGetMutableRenameColumnsMap().mergeFrom(other.internalGetRenameColumnsMap());
      if (renamesBuilder_ == null) {
        if (!other.renames_.isEmpty()) {
          if (renames_.isEmpty()) {
            renames_ = other.renames_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRenamesIsMutable();
            renames_.addAll(other.renames_);
          }
          onChanged();
        }
      } else {
        if (!other.renames_.isEmpty()) {
          if (renamesBuilder_.isEmpty()) {
            renamesBuilder_.dispose();
            renamesBuilder_ = null;
            renames_ = other.renames_;
            bitField0_ = (bitField0_ & ~0x00000002);
            renamesBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getRenamesFieldBuilder()
                    : null;
          } else {
            renamesBuilder_.addAllMessages(other.renames_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getInputFieldBuilder().getBuilder(), extensionRegistry);

                break;
              } // case 10
            case 18:
              {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
                    renameColumnsMap__ =
                        input.readMessage(
                            RenameColumnsMapDefaultEntryHolder.defaultEntry.getParserForType(),
                            extensionRegistry);
                internalGetMutableRenameColumnsMap()
                    .getMutableMap()
                    .put(renameColumnsMap__.getKey(), renameColumnsMap__.getValue());
                break;
              } // case 18
            case 26:
              {
                org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename m =
                    input.readMessage(
                        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
                            .parser(),
                        extensionRegistry);
                if (renamesBuilder_ == null) {
                  ensureRenamesIsMutable();
                  renames_.add(m);
                } else {
                  renamesBuilder_.addMessage(m);
                }
                break;
              } // case 26
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        inputBuilder_;
    /**
     *
     *
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     *
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return inputBuilder_ != null || input_ != null;
    }
    /**
     *
     *
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     *
     * @return The input.
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
            : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
        onChanged();
      } else {
        inputBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
        onChanged();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (input_ != null) {
          input_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.newBuilder(input_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          input_ = value;
        }
        onChanged();
      } else {
        inputBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      if (inputBuilder_ == null) {
        input_ = null;
        onChanged();
      } else {
        input_ = null;
        inputBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder getInputBuilder() {

      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null
            ? org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.getDefaultInstance()
            : input_;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>(
                getInput(), getParentForChildren(), isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> renameColumnsMap_;

    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetRenameColumnsMap() {
      if (renameColumnsMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            RenameColumnsMapDefaultEntryHolder.defaultEntry);
      }
      return renameColumnsMap_;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableRenameColumnsMap() {
      onChanged();
      ;
      if (renameColumnsMap_ == null) {
        renameColumnsMap_ =
            com.google.protobuf.MapField.newMapField(
                RenameColumnsMapDefaultEntryHolder.defaultEntry);
      }
      if (!renameColumnsMap_.isMutable()) {
        renameColumnsMap_ = renameColumnsMap_.copy();
      }
      return renameColumnsMap_;
    }

    @java.lang.Deprecated
    public int getRenameColumnsMapCount() {
      return internalGetRenameColumnsMap().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * (Optional)
     * Renaming column names of input relation from A to B where A is the map key
     * and B is the map value. This is a no-op if schema doesn't contain any A. It
     * does not require that all input relation column names to present as keys.
     * duplicated B are not allowed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    @java.lang.Override
    public boolean containsRenameColumnsMap(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetRenameColumnsMap().getMap().containsKey(key);
    }
    /** Use {@link #getRenameColumnsMapMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getRenameColumnsMap() {
      return getRenameColumnsMapMap();
    }
    /**
     *
     *
     * <pre>
     * (Optional)
     * Renaming column names of input relation from A to B where A is the map key
     * and B is the map value. This is a no-op if schema doesn't contain any A. It
     * does not require that all input relation column names to present as keys.
     * duplicated B are not allowed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getRenameColumnsMapMap() {
      return internalGetRenameColumnsMap().getMap();
    }
    /**
     *
     *
     * <pre>
     * (Optional)
     * Renaming column names of input relation from A to B where A is the map key
     * and B is the map value. This is a no-op if schema doesn't contain any A. It
     * does not require that all input relation column names to present as keys.
     * duplicated B are not allowed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.lang.String getRenameColumnsMapOrDefault(
        java.lang.String key, java.lang.String defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetRenameColumnsMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * (Optional)
     * Renaming column names of input relation from A to B where A is the map key
     * and B is the map value. This is a no-op if schema doesn't contain any A. It
     * does not require that all input relation column names to present as keys.
     * duplicated B are not allowed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.lang.String getRenameColumnsMapOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetRenameColumnsMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    @java.lang.Deprecated
    public Builder clearRenameColumnsMap() {
      internalGetMutableRenameColumnsMap().getMutableMap().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional)
     * Renaming column names of input relation from A to B where A is the map key
     * and B is the map value. This is a no-op if schema doesn't contain any A. It
     * does not require that all input relation column names to present as keys.
     * duplicated B are not allowed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder removeRenameColumnsMap(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableRenameColumnsMap().getMutableMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMutableRenameColumnsMap() {
      return internalGetMutableRenameColumnsMap().getMutableMap();
    }
    /**
     *
     *
     * <pre>
     * (Optional)
     * Renaming column names of input relation from A to B where A is the map key
     * and B is the map value. This is a no-op if schema doesn't contain any A. It
     * does not require that all input relation column names to present as keys.
     * duplicated B are not allowed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder putRenameColumnsMap(java.lang.String key, java.lang.String value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }

      internalGetMutableRenameColumnsMap().getMutableMap().put(key, value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional)
     * Renaming column names of input relation from A to B where A is the map key
     * and B is the map value. This is a no-op if schema doesn't contain any A. It
     * does not require that all input relation column names to present as keys.
     * duplicated B are not allowed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; rename_columns_map = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    public Builder putAllRenameColumnsMap(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableRenameColumnsMap().getMutableMap().putAll(values);
      return this;
    }

    private java.util.List<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename>
        renames_ = java.util.Collections.emptyList();

    private void ensureRenamesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        renames_ =
            new java.util.ArrayList<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename>(
                renames_);
        bitField0_ |= 0x00000002;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.RenameOrBuilder>
        renamesBuilder_;

    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public java.util.List<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename>
        getRenamesList() {
      if (renamesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(renames_);
      } else {
        return renamesBuilder_.getMessageList();
      }
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public int getRenamesCount() {
      if (renamesBuilder_ == null) {
        return renames_.size();
      } else {
        return renamesBuilder_.getCount();
      }
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename getRenames(
        int index) {
      if (renamesBuilder_ == null) {
        return renames_.get(index);
      } else {
        return renamesBuilder_.getMessage(index);
      }
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public Builder setRenames(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename value) {
      if (renamesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRenamesIsMutable();
        renames_.set(index, value);
        onChanged();
      } else {
        renamesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public Builder setRenames(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder
            builderForValue) {
      if (renamesBuilder_ == null) {
        ensureRenamesIsMutable();
        renames_.set(index, builderForValue.build());
        onChanged();
      } else {
        renamesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public Builder addRenames(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename value) {
      if (renamesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRenamesIsMutable();
        renames_.add(value);
        onChanged();
      } else {
        renamesBuilder_.addMessage(value);
      }
      return this;
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public Builder addRenames(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename value) {
      if (renamesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRenamesIsMutable();
        renames_.add(index, value);
        onChanged();
      } else {
        renamesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public Builder addRenames(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder
            builderForValue) {
      if (renamesBuilder_ == null) {
        ensureRenamesIsMutable();
        renames_.add(builderForValue.build());
        onChanged();
      } else {
        renamesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public Builder addRenames(
        int index,
        org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder
            builderForValue) {
      if (renamesBuilder_ == null) {
        ensureRenamesIsMutable();
        renames_.add(index, builderForValue.build());
        onChanged();
      } else {
        renamesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public Builder addAllRenames(
        java.lang.Iterable<
                ? extends
                    org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename>
            values) {
      if (renamesBuilder_ == null) {
        ensureRenamesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, renames_);
        onChanged();
      } else {
        renamesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public Builder clearRenames() {
      if (renamesBuilder_ == null) {
        renames_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        renamesBuilder_.clear();
      }
      return this;
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public Builder removeRenames(int index) {
      if (renamesBuilder_ == null) {
        ensureRenamesIsMutable();
        renames_.remove(index);
        onChanged();
      } else {
        renamesBuilder_.remove(index);
      }
      return this;
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder
        getRenamesBuilder(int index) {
      return getRenamesFieldBuilder().getBuilder(index);
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.RenameOrBuilder
        getRenamesOrBuilder(int index) {
      if (renamesBuilder_ == null) {
        return renames_.get(index);
      } else {
        return renamesBuilder_.getMessageOrBuilder(index);
      }
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public java.util.List<
            ? extends
                org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed
                    .RenameOrBuilder>
        getRenamesOrBuilderList() {
      if (renamesBuilder_ != null) {
        return renamesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(renames_);
      }
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder
        addRenamesBuilder() {
      return getRenamesFieldBuilder()
          .addBuilder(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
                  .getDefaultInstance());
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder
        addRenamesBuilder(int index) {
      return getRenamesFieldBuilder()
          .addBuilder(
              index,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename
                  .getDefaultInstance());
    }
    /** <code>repeated .spark.connect.WithColumnsRenamed.Rename renames = 3;</code> */
    public java.util.List<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder>
        getRenamesBuilderList() {
      return getRenamesFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.RenameOrBuilder>
        getRenamesFieldBuilder() {
      if (renamesBuilder_ == null) {
        renamesBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed.Rename.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed
                    .RenameOrBuilder>(
                renames_, ((bitField0_ & 0x00000002) != 0), getParentForChildren(), isClean());
        renames_ = null;
      }
      return renamesBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:spark.connect.WithColumnsRenamed)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.WithColumnsRenamed)
  private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed();
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed
      getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WithColumnsRenamed> PARSER =
      new com.google.protobuf.AbstractParser<WithColumnsRenamed>() {
        @java.lang.Override
        public WithColumnsRenamed parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<WithColumnsRenamed> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WithColumnsRenamed> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.WithColumnsRenamed
      getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
