// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

public interface WithRelationsOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:spark.connect.WithRelations)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
   * references. Those references get expanded later on by the engine.
   * </pre>
   *
   * <code>.spark.connect.Relation root = 1;</code>
   *
   * @return Whether the root field is set.
   */
  boolean hasRoot();
  /**
   *
   *
   * <pre>
   * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
   * references. Those references get expanded later on by the engine.
   * </pre>
   *
   * <code>.spark.connect.Relation root = 1;</code>
   *
   * @return The root.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getRoot();
  /**
   *
   *
   * <pre>
   * (Required) Plan at the root of the query tree. This plan is expected to contain one or more
   * references. Those references get expanded later on by the engine.
   * </pre>
   *
   * <code>.spark.connect.Relation root = 1;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getRootOrBuilder();

  /**
   *
   *
   * <pre>
   * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
   * contain references to other relations in this list, as long they do not form cycles.
   * </pre>
   *
   * <code>repeated .spark.connect.Relation references = 2;</code>
   */
  java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation> getReferencesList();
  /**
   *
   *
   * <pre>
   * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
   * contain references to other relations in this list, as long they do not form cycles.
   * </pre>
   *
   * <code>repeated .spark.connect.Relation references = 2;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getReferences(int index);
  /**
   *
   *
   * <pre>
   * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
   * contain references to other relations in this list, as long they do not form cycles.
   * </pre>
   *
   * <code>repeated .spark.connect.Relation references = 2;</code>
   */
  int getReferencesCount();
  /**
   *
   *
   * <pre>
   * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
   * contain references to other relations in this list, as long they do not form cycles.
   * </pre>
   *
   * <code>repeated .spark.connect.Relation references = 2;</code>
   */
  java.util.List<? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder>
      getReferencesOrBuilderList();
  /**
   *
   *
   * <pre>
   * (Required) Plans referenced by the root plan. Relations in this list are also allowed to
   * contain references to other relations in this list, as long they do not form cycles.
   * </pre>
   *
   * <code>repeated .spark.connect.Relation references = 2;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getReferencesOrBuilder(
      int index);
}
