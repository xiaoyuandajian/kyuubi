// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

public interface AggregateOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:spark.connect.Aggregate)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * (Required) Input relation for a RelationalGroupedDataset.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   *
   *
   * <pre>
   * (Required) Input relation for a RelationalGroupedDataset.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return The input.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput();
  /**
   *
   *
   * <pre>
   * (Required) Input relation for a RelationalGroupedDataset.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder();

  /**
   *
   *
   * <pre>
   * (Required) How the RelationalGroupedDataset was built.
   * </pre>
   *
   * <code>.spark.connect.Aggregate.GroupType group_type = 2;</code>
   *
   * @return The enum numeric value on the wire for groupType.
   */
  int getGroupTypeValue();
  /**
   *
   *
   * <pre>
   * (Required) How the RelationalGroupedDataset was built.
   * </pre>
   *
   * <code>.spark.connect.Aggregate.GroupType group_type = 2;</code>
   *
   * @return The groupType.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Aggregate.GroupType getGroupType();

  /**
   *
   *
   * <pre>
   * (Required) Expressions for grouping keys
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
   */
  java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      getGroupingExpressionsList();
  /**
   *
   *
   * <pre>
   * (Required) Expressions for grouping keys
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getGroupingExpressions(int index);
  /**
   *
   *
   * <pre>
   * (Required) Expressions for grouping keys
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
   */
  int getGroupingExpressionsCount();
  /**
   *
   *
   * <pre>
   * (Required) Expressions for grouping keys
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
   */
  java.util.List<? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
      getGroupingExpressionsOrBuilderList();
  /**
   *
   *
   * <pre>
   * (Required) Expressions for grouping keys
   * </pre>
   *
   * <code>repeated .spark.connect.Expression grouping_expressions = 3;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder
      getGroupingExpressionsOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * (Required) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
   */
  java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      getAggregateExpressionsList();
  /**
   *
   *
   * <pre>
   * (Required) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getAggregateExpressions(int index);
  /**
   *
   *
   * <pre>
   * (Required) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
   */
  int getAggregateExpressionsCount();
  /**
   *
   *
   * <pre>
   * (Required) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
   */
  java.util.List<? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
      getAggregateExpressionsOrBuilderList();
  /**
   *
   *
   * <pre>
   * (Required) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression aggregate_expressions = 4;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder
      getAggregateExpressionsOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
   * </pre>
   *
   * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
   *
   * @return Whether the pivot field is set.
   */
  boolean hasPivot();
  /**
   *
   *
   * <pre>
   * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
   * </pre>
   *
   * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
   *
   * @return The pivot.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Aggregate.Pivot getPivot();
  /**
   *
   *
   * <pre>
   * (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
   * </pre>
   *
   * <code>.spark.connect.Aggregate.Pivot pivot = 5;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Aggregate.PivotOrBuilder getPivotOrBuilder();

  /**
   *
   *
   * <pre>
   * (Optional) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Aggregate.GroupingSets grouping_sets = 6;</code>
   */
  java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Aggregate.GroupingSets>
      getGroupingSetsList();
  /**
   *
   *
   * <pre>
   * (Optional) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Aggregate.GroupingSets grouping_sets = 6;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Aggregate.GroupingSets getGroupingSets(
      int index);
  /**
   *
   *
   * <pre>
   * (Optional) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Aggregate.GroupingSets grouping_sets = 6;</code>
   */
  int getGroupingSetsCount();
  /**
   *
   *
   * <pre>
   * (Optional) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Aggregate.GroupingSets grouping_sets = 6;</code>
   */
  java.util.List<
          ? extends
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Aggregate.GroupingSetsOrBuilder>
      getGroupingSetsOrBuilderList();
  /**
   *
   *
   * <pre>
   * (Optional) List of values that will be translated to columns in the output DataFrame.
   * </pre>
   *
   * <code>repeated .spark.connect.Aggregate.GroupingSets grouping_sets = 6;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Aggregate.GroupingSetsOrBuilder
      getGroupingSetsOrBuilder(int index);
}
