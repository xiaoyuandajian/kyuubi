// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Drop rows containing null values.
 * It will invoke 'Dataset.na.drop' (same as 'DataFrameNaFunctions.drop') to compute the results.
 * </pre>
 *
 * Protobuf type {@code spark.connect.NADrop}
 */
public final class NADrop extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.NADrop)
    NADropOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NADrop.newBuilder() to construct.
  private NADrop(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NADrop() {
    cols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new NADrop();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.proto.Relations.internal_static_spark_connect_NADrop_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.proto.Relations.internal_static_spark_connect_NADrop_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.proto.NADrop.class, org.apache.kyuubi.engine.spark.connect.proto.NADrop.Builder.class);
  }

  private int bitField0_;
  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.kyuubi.engine.spark.connect.proto.Relation input_;
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  @java.lang.Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Relation getInput() {
    return input_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
    return getInput();
  }

  public static final int COLS_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList cols_;
  /**
   * <pre>
   * (Optional) Optional list of column names to consider.
   * When it is empty, all the columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @return A list containing the cols.
   */
  public com.google.protobuf.ProtocolStringList
      getColsList() {
    return cols_;
  }
  /**
   * <pre>
   * (Optional) Optional list of column names to consider.
   * When it is empty, all the columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @return The count of cols.
   */
  public int getColsCount() {
    return cols_.size();
  }
  /**
   * <pre>
   * (Optional) Optional list of column names to consider.
   * When it is empty, all the columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @param index The index of the element to return.
   * @return The cols at the given index.
   */
  public java.lang.String getCols(int index) {
    return cols_.get(index);
  }
  /**
   * <pre>
   * (Optional) Optional list of column names to consider.
   * When it is empty, all the columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the cols at the given index.
   */
  public com.google.protobuf.ByteString
      getColsBytes(int index) {
    return cols_.getByteString(index);
  }

  public static final int MIN_NON_NULLS_FIELD_NUMBER = 3;
  private int minNonNulls_;
  /**
   * <pre>
   * (Optional) The minimum number of non-null and non-NaN values required to keep.
   * When not set, it is equivalent to the number of considered columns, which means
   * a row will be kept only if all columns are non-null.
   * 'how' options ('all', 'any') can be easily converted to this field:
   *   - 'all' -&gt; set 'min_non_nulls' 1;
   *   - 'any' -&gt; keep 'min_non_nulls' unset;
   * </pre>
   *
   * <code>optional int32 min_non_nulls = 3;</code>
   * @return Whether the minNonNulls field is set.
   */
  @java.lang.Override
  public boolean hasMinNonNulls() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * (Optional) The minimum number of non-null and non-NaN values required to keep.
   * When not set, it is equivalent to the number of considered columns, which means
   * a row will be kept only if all columns are non-null.
   * 'how' options ('all', 'any') can be easily converted to this field:
   *   - 'all' -&gt; set 'min_non_nulls' 1;
   *   - 'any' -&gt; keep 'min_non_nulls' unset;
   * </pre>
   *
   * <code>optional int32 min_non_nulls = 3;</code>
   * @return The minNonNulls.
   */
  @java.lang.Override
  public int getMinNonNulls() {
    return minNonNulls_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    for (int i = 0; i < cols_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, cols_.getRaw(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeInt32(3, minNonNulls_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInput());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < cols_.size(); i++) {
        dataSize += computeStringSizeNoTag(cols_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getColsList().size();
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, minNonNulls_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.NADrop)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.proto.NADrop other = (org.apache.kyuubi.engine.spark.connect.proto.NADrop) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput()
          .equals(other.getInput())) return false;
    }
    if (!getColsList()
        .equals(other.getColsList())) return false;
    if (hasMinNonNulls() != other.hasMinNonNulls()) return false;
    if (hasMinNonNulls()) {
      if (getMinNonNulls()
          != other.getMinNonNulls()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    if (getColsCount() > 0) {
      hash = (37 * hash) + COLS_FIELD_NUMBER;
      hash = (53 * hash) + getColsList().hashCode();
    }
    if (hasMinNonNulls()) {
      hash = (37 * hash) + MIN_NON_NULLS_FIELD_NUMBER;
      hash = (53 * hash) + getMinNonNulls();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.NADrop prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Drop rows containing null values.
   * It will invoke 'Dataset.na.drop' (same as 'DataFrameNaFunctions.drop') to compute the results.
   * </pre>
   *
   * Protobuf type {@code spark.connect.NADrop}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.NADrop)
      org.apache.kyuubi.engine.spark.connect.proto.NADropOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Relations.internal_static_spark_connect_NADrop_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Relations.internal_static_spark_connect_NADrop_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.NADrop.class, org.apache.kyuubi.engine.spark.connect.proto.NADrop.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.proto.NADrop.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (inputBuilder_ == null) {
        input_ = null;
      } else {
        input_ = null;
        inputBuilder_ = null;
      }
      cols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      minNonNulls_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.Relations.internal_static_spark_connect_NADrop_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.NADrop getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.NADrop.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.NADrop build() {
      org.apache.kyuubi.engine.spark.connect.proto.NADrop result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.NADrop buildPartial() {
      org.apache.kyuubi.engine.spark.connect.proto.NADrop result = new org.apache.kyuubi.engine.spark.connect.proto.NADrop(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (inputBuilder_ == null) {
        result.input_ = input_;
      } else {
        result.input_ = inputBuilder_.build();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        cols_ = cols_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.cols_ = cols_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.minNonNulls_ = minNonNulls_;
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.NADrop) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.NADrop)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.NADrop other) {
      if (other == org.apache.kyuubi.engine.spark.connect.proto.NADrop.getDefaultInstance()) return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      if (!other.cols_.isEmpty()) {
        if (cols_.isEmpty()) {
          cols_ = other.cols_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureColsIsMutable();
          cols_.addAll(other.cols_);
        }
        onChanged();
      }
      if (other.hasMinNonNulls()) {
        setMinNonNulls(other.getMinNonNulls());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getInputFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 10
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureColsIsMutable();
              cols_.add(s);
              break;
            } // case 18
            case 24: {
              minNonNulls_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.apache.kyuubi.engine.spark.connect.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder> inputBuilder_;
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return inputBuilder_ != null || input_ != null;
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return The input.
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.kyuubi.engine.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
        onChanged();
      } else {
        inputBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
        onChanged();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.kyuubi.engine.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (input_ != null) {
          input_ =
            org.apache.kyuubi.engine.spark.connect.proto.Relation.newBuilder(input_).mergeFrom(value).buildPartial();
        } else {
          input_ = value;
        }
        onChanged();
      } else {
        inputBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      if (inputBuilder_ == null) {
        input_ = null;
        onChanged();
      } else {
        input_ = null;
        inputBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder getInputBuilder() {
      
      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null ?
            org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : input_;
      }
    }
    /**
     * <pre>
     * (Required) The input relation.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder> 
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder>(
                getInput(),
                getParentForChildren(),
                isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private com.google.protobuf.LazyStringList cols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureColsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        cols_ = new com.google.protobuf.LazyStringArrayList(cols_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * (Optional) Optional list of column names to consider.
     * When it is empty, all the columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @return A list containing the cols.
     */
    public com.google.protobuf.ProtocolStringList
        getColsList() {
      return cols_.getUnmodifiableView();
    }
    /**
     * <pre>
     * (Optional) Optional list of column names to consider.
     * When it is empty, all the columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @return The count of cols.
     */
    public int getColsCount() {
      return cols_.size();
    }
    /**
     * <pre>
     * (Optional) Optional list of column names to consider.
     * When it is empty, all the columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param index The index of the element to return.
     * @return The cols at the given index.
     */
    public java.lang.String getCols(int index) {
      return cols_.get(index);
    }
    /**
     * <pre>
     * (Optional) Optional list of column names to consider.
     * When it is empty, all the columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the cols at the given index.
     */
    public com.google.protobuf.ByteString
        getColsBytes(int index) {
      return cols_.getByteString(index);
    }
    /**
     * <pre>
     * (Optional) Optional list of column names to consider.
     * When it is empty, all the columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param index The index to set the value at.
     * @param value The cols to set.
     * @return This builder for chaining.
     */
    public Builder setCols(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureColsIsMutable();
      cols_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Optional list of column names to consider.
     * When it is empty, all the columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param value The cols to add.
     * @return This builder for chaining.
     */
    public Builder addCols(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureColsIsMutable();
      cols_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Optional list of column names to consider.
     * When it is empty, all the columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param values The cols to add.
     * @return This builder for chaining.
     */
    public Builder addAllCols(
        java.lang.Iterable<java.lang.String> values) {
      ensureColsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, cols_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Optional list of column names to consider.
     * When it is empty, all the columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearCols() {
      cols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) Optional list of column names to consider.
     * When it is empty, all the columns in the input relation will be considered.
     * </pre>
     *
     * <code>repeated string cols = 2;</code>
     * @param value The bytes of the cols to add.
     * @return This builder for chaining.
     */
    public Builder addColsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureColsIsMutable();
      cols_.add(value);
      onChanged();
      return this;
    }

    private int minNonNulls_ ;
    /**
     * <pre>
     * (Optional) The minimum number of non-null and non-NaN values required to keep.
     * When not set, it is equivalent to the number of considered columns, which means
     * a row will be kept only if all columns are non-null.
     * 'how' options ('all', 'any') can be easily converted to this field:
     *   - 'all' -&gt; set 'min_non_nulls' 1;
     *   - 'any' -&gt; keep 'min_non_nulls' unset;
     * </pre>
     *
     * <code>optional int32 min_non_nulls = 3;</code>
     * @return Whether the minNonNulls field is set.
     */
    @java.lang.Override
    public boolean hasMinNonNulls() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * (Optional) The minimum number of non-null and non-NaN values required to keep.
     * When not set, it is equivalent to the number of considered columns, which means
     * a row will be kept only if all columns are non-null.
     * 'how' options ('all', 'any') can be easily converted to this field:
     *   - 'all' -&gt; set 'min_non_nulls' 1;
     *   - 'any' -&gt; keep 'min_non_nulls' unset;
     * </pre>
     *
     * <code>optional int32 min_non_nulls = 3;</code>
     * @return The minNonNulls.
     */
    @java.lang.Override
    public int getMinNonNulls() {
      return minNonNulls_;
    }
    /**
     * <pre>
     * (Optional) The minimum number of non-null and non-NaN values required to keep.
     * When not set, it is equivalent to the number of considered columns, which means
     * a row will be kept only if all columns are non-null.
     * 'how' options ('all', 'any') can be easily converted to this field:
     *   - 'all' -&gt; set 'min_non_nulls' 1;
     *   - 'any' -&gt; keep 'min_non_nulls' unset;
     * </pre>
     *
     * <code>optional int32 min_non_nulls = 3;</code>
     * @param value The minNonNulls to set.
     * @return This builder for chaining.
     */
    public Builder setMinNonNulls(int value) {
      bitField0_ |= 0x00000002;
      minNonNulls_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Optional) The minimum number of non-null and non-NaN values required to keep.
     * When not set, it is equivalent to the number of considered columns, which means
     * a row will be kept only if all columns are non-null.
     * 'how' options ('all', 'any') can be easily converted to this field:
     *   - 'all' -&gt; set 'min_non_nulls' 1;
     *   - 'any' -&gt; keep 'min_non_nulls' unset;
     * </pre>
     *
     * <code>optional int32 min_non_nulls = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinNonNulls() {
      bitField0_ = (bitField0_ & ~0x00000002);
      minNonNulls_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.NADrop)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.NADrop)
  private static final org.apache.kyuubi.engine.spark.connect.proto.NADrop DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.NADrop();
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.NADrop getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<NADrop>
      PARSER = new com.google.protobuf.AbstractParser<NADrop>() {
    @java.lang.Override
    public NADrop parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<NADrop> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<NADrop> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.NADrop getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

