// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

public interface JoinOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:spark.connect.Join)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * (Required) Left input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation left = 1;</code>
   *
   * @return Whether the left field is set.
   */
  boolean hasLeft();
  /**
   *
   *
   * <pre>
   * (Required) Left input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation left = 1;</code>
   *
   * @return The left.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getLeft();
  /**
   *
   *
   * <pre>
   * (Required) Left input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation left = 1;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getLeftOrBuilder();

  /**
   *
   *
   * <pre>
   * (Required) Right input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation right = 2;</code>
   *
   * @return Whether the right field is set.
   */
  boolean hasRight();
  /**
   *
   *
   * <pre>
   * (Required) Right input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation right = 2;</code>
   *
   * @return The right.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getRight();
  /**
   *
   *
   * <pre>
   * (Required) Right input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation right = 2;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getRightOrBuilder();

  /**
   *
   *
   * <pre>
   * (Optional) The join condition. Could be unset when `using_columns` is utilized.
   * This field does not co-exist with using_columns.
   * </pre>
   *
   * <code>.spark.connect.Expression join_condition = 3;</code>
   *
   * @return Whether the joinCondition field is set.
   */
  boolean hasJoinCondition();
  /**
   *
   *
   * <pre>
   * (Optional) The join condition. Could be unset when `using_columns` is utilized.
   * This field does not co-exist with using_columns.
   * </pre>
   *
   * <code>.spark.connect.Expression join_condition = 3;</code>
   *
   * @return The joinCondition.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getJoinCondition();
  /**
   *
   *
   * <pre>
   * (Optional) The join condition. Could be unset when `using_columns` is utilized.
   * This field does not co-exist with using_columns.
   * </pre>
   *
   * <code>.spark.connect.Expression join_condition = 3;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder getJoinConditionOrBuilder();

  /**
   *
   *
   * <pre>
   * (Required) The join type.
   * </pre>
   *
   * <code>.spark.connect.Join.JoinType join_type = 4;</code>
   *
   * @return The enum numeric value on the wire for joinType.
   */
  int getJoinTypeValue();
  /**
   *
   *
   * <pre>
   * (Required) The join type.
   * </pre>
   *
   * <code>.spark.connect.Join.JoinType join_type = 4;</code>
   *
   * @return The joinType.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Join.JoinType getJoinType();

  /**
   *
   *
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 5;</code>
   *
   * @return A list containing the usingColumns.
   */
  java.util.List<java.lang.String> getUsingColumnsList();
  /**
   *
   *
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 5;</code>
   *
   * @return The count of usingColumns.
   */
  int getUsingColumnsCount();
  /**
   *
   *
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 5;</code>
   *
   * @param index The index of the element to return.
   * @return The usingColumns at the given index.
   */
  java.lang.String getUsingColumns(int index);
  /**
   *
   *
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 5;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the usingColumns at the given index.
   */
  com.google.protobuf.ByteString getUsingColumnsBytes(int index);

  /**
   *
   *
   * <pre>
   * (Optional) Only used by joinWith. Set the left and right join data types.
   * </pre>
   *
   * <code>optional .spark.connect.Join.JoinDataType join_data_type = 6;</code>
   *
   * @return Whether the joinDataType field is set.
   */
  boolean hasJoinDataType();
  /**
   *
   *
   * <pre>
   * (Optional) Only used by joinWith. Set the left and right join data types.
   * </pre>
   *
   * <code>optional .spark.connect.Join.JoinDataType join_data_type = 6;</code>
   *
   * @return The joinDataType.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Join.JoinDataType getJoinDataType();
  /**
   *
   *
   * <pre>
   * (Optional) Only used by joinWith. Set the left and right join data types.
   * </pre>
   *
   * <code>optional .spark.connect.Join.JoinDataType join_data_type = 6;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Join.JoinDataTypeOrBuilder
      getJoinDataTypeOrBuilder();
}
