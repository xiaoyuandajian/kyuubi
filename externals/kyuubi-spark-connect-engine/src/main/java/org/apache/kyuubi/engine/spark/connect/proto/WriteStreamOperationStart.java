// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/commands.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Starts write stream operation as streaming query. Query ID and Run ID of the streaming
 * query are returned.
 * </pre>
 *
 * Protobuf type {@code spark.connect.WriteStreamOperationStart}
 */
public final class WriteStreamOperationStart extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.WriteStreamOperationStart)
    WriteStreamOperationStartOrBuilder {
private static final long serialVersionUID = 0L;
  // Use WriteStreamOperationStart.newBuilder() to construct.
  private WriteStreamOperationStart(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WriteStreamOperationStart() {
    format_ = "";
    partitioningColumnNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    outputMode_ = "";
    queryName_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new WriteStreamOperationStart();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStart_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 3:
        return internalGetOptions();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStart_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.class, org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.Builder.class);
  }

  private int triggerCase_ = 0;
  private java.lang.Object trigger_;
  public enum TriggerCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    PROCESSING_TIME_INTERVAL(5),
    AVAILABLE_NOW(6),
    ONCE(7),
    CONTINUOUS_CHECKPOINT_INTERVAL(8),
    TRIGGER_NOT_SET(0);
    private final int value;
    private TriggerCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TriggerCase valueOf(int value) {
      return forNumber(value);
    }

    public static TriggerCase forNumber(int value) {
      switch (value) {
        case 5: return PROCESSING_TIME_INTERVAL;
        case 6: return AVAILABLE_NOW;
        case 7: return ONCE;
        case 8: return CONTINUOUS_CHECKPOINT_INTERVAL;
        case 0: return TRIGGER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public TriggerCase
  getTriggerCase() {
    return TriggerCase.forNumber(
        triggerCase_);
  }

  private int sinkDestinationCase_ = 0;
  private java.lang.Object sinkDestination_;
  public enum SinkDestinationCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    PATH(11),
    TABLE_NAME(12),
    SINKDESTINATION_NOT_SET(0);
    private final int value;
    private SinkDestinationCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SinkDestinationCase valueOf(int value) {
      return forNumber(value);
    }

    public static SinkDestinationCase forNumber(int value) {
      switch (value) {
        case 11: return PATH;
        case 12: return TABLE_NAME;
        case 0: return SINKDESTINATION_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public SinkDestinationCase
  getSinkDestinationCase() {
    return SinkDestinationCase.forNumber(
        sinkDestinationCase_);
  }

  public static final int INPUT_FIELD_NUMBER = 1;
  private org.apache.kyuubi.engine.spark.connect.proto.Relation input_;
  /**
   * <pre>
   * (Required) The output of the `input` streaming relation will be written.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  @java.lang.Override
  public boolean hasInput() {
    return input_ != null;
  }
  /**
   * <pre>
   * (Required) The output of the `input` streaming relation will be written.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Relation getInput() {
    return input_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : input_;
  }
  /**
   * <pre>
   * (Required) The output of the `input` streaming relation will be written.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
    return getInput();
  }

  public static final int FORMAT_FIELD_NUMBER = 2;
  private volatile java.lang.Object format_;
  /**
   * <code>string format = 2;</code>
   * @return The format.
   */
  @java.lang.Override
  public java.lang.String getFormat() {
    java.lang.Object ref = format_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      format_ = s;
      return s;
    }
  }
  /**
   * <code>string format = 2;</code>
   * @return The bytes for format.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getFormatBytes() {
    java.lang.Object ref = format_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      format_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OPTIONS_FIELD_NUMBER = 3;
  private static final class OptionsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStart_OptionsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> options_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetOptions() {
    if (options_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          OptionsDefaultEntryHolder.defaultEntry);
    }
    return options_;
  }

  public int getOptionsCount() {
    return internalGetOptions().getMap().size();
  }
  /**
   * <code>map&lt;string, string&gt; options = 3;</code>
   */

  @java.lang.Override
  public boolean containsOptions(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetOptions().getMap().containsKey(key);
  }
  /**
   * Use {@link #getOptionsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getOptions() {
    return getOptionsMap();
  }
  /**
   * <code>map&lt;string, string&gt; options = 3;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.String> getOptionsMap() {
    return internalGetOptions().getMap();
  }
  /**
   * <code>map&lt;string, string&gt; options = 3;</code>
   */
  @java.lang.Override

  public java.lang.String getOptionsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetOptions().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, string&gt; options = 3;</code>
   */
  @java.lang.Override

  public java.lang.String getOptionsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetOptions().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int PARTITIONING_COLUMN_NAMES_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList partitioningColumnNames_;
  /**
   * <code>repeated string partitioning_column_names = 4;</code>
   * @return A list containing the partitioningColumnNames.
   */
  public com.google.protobuf.ProtocolStringList
      getPartitioningColumnNamesList() {
    return partitioningColumnNames_;
  }
  /**
   * <code>repeated string partitioning_column_names = 4;</code>
   * @return The count of partitioningColumnNames.
   */
  public int getPartitioningColumnNamesCount() {
    return partitioningColumnNames_.size();
  }
  /**
   * <code>repeated string partitioning_column_names = 4;</code>
   * @param index The index of the element to return.
   * @return The partitioningColumnNames at the given index.
   */
  public java.lang.String getPartitioningColumnNames(int index) {
    return partitioningColumnNames_.get(index);
  }
  /**
   * <code>repeated string partitioning_column_names = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the partitioningColumnNames at the given index.
   */
  public com.google.protobuf.ByteString
      getPartitioningColumnNamesBytes(int index) {
    return partitioningColumnNames_.getByteString(index);
  }

  public static final int PROCESSING_TIME_INTERVAL_FIELD_NUMBER = 5;
  /**
   * <code>string processing_time_interval = 5;</code>
   * @return Whether the processingTimeInterval field is set.
   */
  public boolean hasProcessingTimeInterval() {
    return triggerCase_ == 5;
  }
  /**
   * <code>string processing_time_interval = 5;</code>
   * @return The processingTimeInterval.
   */
  public java.lang.String getProcessingTimeInterval() {
    java.lang.Object ref = "";
    if (triggerCase_ == 5) {
      ref = trigger_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (triggerCase_ == 5) {
        trigger_ = s;
      }
      return s;
    }
  }
  /**
   * <code>string processing_time_interval = 5;</code>
   * @return The bytes for processingTimeInterval.
   */
  public com.google.protobuf.ByteString
      getProcessingTimeIntervalBytes() {
    java.lang.Object ref = "";
    if (triggerCase_ == 5) {
      ref = trigger_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (triggerCase_ == 5) {
        trigger_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int AVAILABLE_NOW_FIELD_NUMBER = 6;
  /**
   * <code>bool available_now = 6;</code>
   * @return Whether the availableNow field is set.
   */
  @java.lang.Override
  public boolean hasAvailableNow() {
    return triggerCase_ == 6;
  }
  /**
   * <code>bool available_now = 6;</code>
   * @return The availableNow.
   */
  @java.lang.Override
  public boolean getAvailableNow() {
    if (triggerCase_ == 6) {
      return (java.lang.Boolean) trigger_;
    }
    return false;
  }

  public static final int ONCE_FIELD_NUMBER = 7;
  /**
   * <code>bool once = 7;</code>
   * @return Whether the once field is set.
   */
  @java.lang.Override
  public boolean hasOnce() {
    return triggerCase_ == 7;
  }
  /**
   * <code>bool once = 7;</code>
   * @return The once.
   */
  @java.lang.Override
  public boolean getOnce() {
    if (triggerCase_ == 7) {
      return (java.lang.Boolean) trigger_;
    }
    return false;
  }

  public static final int CONTINUOUS_CHECKPOINT_INTERVAL_FIELD_NUMBER = 8;
  /**
   * <code>string continuous_checkpoint_interval = 8;</code>
   * @return Whether the continuousCheckpointInterval field is set.
   */
  public boolean hasContinuousCheckpointInterval() {
    return triggerCase_ == 8;
  }
  /**
   * <code>string continuous_checkpoint_interval = 8;</code>
   * @return The continuousCheckpointInterval.
   */
  public java.lang.String getContinuousCheckpointInterval() {
    java.lang.Object ref = "";
    if (triggerCase_ == 8) {
      ref = trigger_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (triggerCase_ == 8) {
        trigger_ = s;
      }
      return s;
    }
  }
  /**
   * <code>string continuous_checkpoint_interval = 8;</code>
   * @return The bytes for continuousCheckpointInterval.
   */
  public com.google.protobuf.ByteString
      getContinuousCheckpointIntervalBytes() {
    java.lang.Object ref = "";
    if (triggerCase_ == 8) {
      ref = trigger_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (triggerCase_ == 8) {
        trigger_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OUTPUT_MODE_FIELD_NUMBER = 9;
  private volatile java.lang.Object outputMode_;
  /**
   * <code>string output_mode = 9;</code>
   * @return The outputMode.
   */
  @java.lang.Override
  public java.lang.String getOutputMode() {
    java.lang.Object ref = outputMode_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      outputMode_ = s;
      return s;
    }
  }
  /**
   * <code>string output_mode = 9;</code>
   * @return The bytes for outputMode.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getOutputModeBytes() {
    java.lang.Object ref = outputMode_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      outputMode_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int QUERY_NAME_FIELD_NUMBER = 10;
  private volatile java.lang.Object queryName_;
  /**
   * <code>string query_name = 10;</code>
   * @return The queryName.
   */
  @java.lang.Override
  public java.lang.String getQueryName() {
    java.lang.Object ref = queryName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      queryName_ = s;
      return s;
    }
  }
  /**
   * <code>string query_name = 10;</code>
   * @return The bytes for queryName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getQueryNameBytes() {
    java.lang.Object ref = queryName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      queryName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PATH_FIELD_NUMBER = 11;
  /**
   * <code>string path = 11;</code>
   * @return Whether the path field is set.
   */
  public boolean hasPath() {
    return sinkDestinationCase_ == 11;
  }
  /**
   * <code>string path = 11;</code>
   * @return The path.
   */
  public java.lang.String getPath() {
    java.lang.Object ref = "";
    if (sinkDestinationCase_ == 11) {
      ref = sinkDestination_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (sinkDestinationCase_ == 11) {
        sinkDestination_ = s;
      }
      return s;
    }
  }
  /**
   * <code>string path = 11;</code>
   * @return The bytes for path.
   */
  public com.google.protobuf.ByteString
      getPathBytes() {
    java.lang.Object ref = "";
    if (sinkDestinationCase_ == 11) {
      ref = sinkDestination_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (sinkDestinationCase_ == 11) {
        sinkDestination_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TABLE_NAME_FIELD_NUMBER = 12;
  /**
   * <code>string table_name = 12;</code>
   * @return Whether the tableName field is set.
   */
  public boolean hasTableName() {
    return sinkDestinationCase_ == 12;
  }
  /**
   * <code>string table_name = 12;</code>
   * @return The tableName.
   */
  public java.lang.String getTableName() {
    java.lang.Object ref = "";
    if (sinkDestinationCase_ == 12) {
      ref = sinkDestination_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (sinkDestinationCase_ == 12) {
        sinkDestination_ = s;
      }
      return s;
    }
  }
  /**
   * <code>string table_name = 12;</code>
   * @return The bytes for tableName.
   */
  public com.google.protobuf.ByteString
      getTableNameBytes() {
    java.lang.Object ref = "";
    if (sinkDestinationCase_ == 12) {
      ref = sinkDestination_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (sinkDestinationCase_ == 12) {
        sinkDestination_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FOREACH_WRITER_FIELD_NUMBER = 13;
  private org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction foreachWriter_;
  /**
   * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
   * @return Whether the foreachWriter field is set.
   */
  @java.lang.Override
  public boolean hasForeachWriter() {
    return foreachWriter_ != null;
  }
  /**
   * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
   * @return The foreachWriter.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction getForeachWriter() {
    return foreachWriter_ == null ? org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.getDefaultInstance() : foreachWriter_;
  }
  /**
   * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunctionOrBuilder getForeachWriterOrBuilder() {
    return getForeachWriter();
  }

  public static final int FOREACH_BATCH_FIELD_NUMBER = 14;
  private org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction foreachBatch_;
  /**
   * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
   * @return Whether the foreachBatch field is set.
   */
  @java.lang.Override
  public boolean hasForeachBatch() {
    return foreachBatch_ != null;
  }
  /**
   * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
   * @return The foreachBatch.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction getForeachBatch() {
    return foreachBatch_ == null ? org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.getDefaultInstance() : foreachBatch_;
  }
  /**
   * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunctionOrBuilder getForeachBatchOrBuilder() {
    return getForeachBatch();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (input_ != null) {
      output.writeMessage(1, getInput());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(format_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, format_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetOptions(),
        OptionsDefaultEntryHolder.defaultEntry,
        3);
    for (int i = 0; i < partitioningColumnNames_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, partitioningColumnNames_.getRaw(i));
    }
    if (triggerCase_ == 5) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, trigger_);
    }
    if (triggerCase_ == 6) {
      output.writeBool(
          6, (boolean)((java.lang.Boolean) trigger_));
    }
    if (triggerCase_ == 7) {
      output.writeBool(
          7, (boolean)((java.lang.Boolean) trigger_));
    }
    if (triggerCase_ == 8) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, trigger_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputMode_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, outputMode_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(queryName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 10, queryName_);
    }
    if (sinkDestinationCase_ == 11) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 11, sinkDestination_);
    }
    if (sinkDestinationCase_ == 12) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 12, sinkDestination_);
    }
    if (foreachWriter_ != null) {
      output.writeMessage(13, getForeachWriter());
    }
    if (foreachBatch_ != null) {
      output.writeMessage(14, getForeachBatch());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (input_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInput());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(format_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, format_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetOptions().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      options__ = OptionsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, options__);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < partitioningColumnNames_.size(); i++) {
        dataSize += computeStringSizeNoTag(partitioningColumnNames_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getPartitioningColumnNamesList().size();
    }
    if (triggerCase_ == 5) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, trigger_);
    }
    if (triggerCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            6, (boolean)((java.lang.Boolean) trigger_));
    }
    if (triggerCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            7, (boolean)((java.lang.Boolean) trigger_));
    }
    if (triggerCase_ == 8) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, trigger_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputMode_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, outputMode_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(queryName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, queryName_);
    }
    if (sinkDestinationCase_ == 11) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, sinkDestination_);
    }
    if (sinkDestinationCase_ == 12) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, sinkDestination_);
    }
    if (foreachWriter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getForeachWriter());
    }
    if (foreachBatch_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, getForeachBatch());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart other = (org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart) obj;

    if (hasInput() != other.hasInput()) return false;
    if (hasInput()) {
      if (!getInput()
          .equals(other.getInput())) return false;
    }
    if (!getFormat()
        .equals(other.getFormat())) return false;
    if (!internalGetOptions().equals(
        other.internalGetOptions())) return false;
    if (!getPartitioningColumnNamesList()
        .equals(other.getPartitioningColumnNamesList())) return false;
    if (!getOutputMode()
        .equals(other.getOutputMode())) return false;
    if (!getQueryName()
        .equals(other.getQueryName())) return false;
    if (hasForeachWriter() != other.hasForeachWriter()) return false;
    if (hasForeachWriter()) {
      if (!getForeachWriter()
          .equals(other.getForeachWriter())) return false;
    }
    if (hasForeachBatch() != other.hasForeachBatch()) return false;
    if (hasForeachBatch()) {
      if (!getForeachBatch()
          .equals(other.getForeachBatch())) return false;
    }
    if (!getTriggerCase().equals(other.getTriggerCase())) return false;
    switch (triggerCase_) {
      case 5:
        if (!getProcessingTimeInterval()
            .equals(other.getProcessingTimeInterval())) return false;
        break;
      case 6:
        if (getAvailableNow()
            != other.getAvailableNow()) return false;
        break;
      case 7:
        if (getOnce()
            != other.getOnce()) return false;
        break;
      case 8:
        if (!getContinuousCheckpointInterval()
            .equals(other.getContinuousCheckpointInterval())) return false;
        break;
      case 0:
      default:
    }
    if (!getSinkDestinationCase().equals(other.getSinkDestinationCase())) return false;
    switch (sinkDestinationCase_) {
      case 11:
        if (!getPath()
            .equals(other.getPath())) return false;
        break;
      case 12:
        if (!getTableName()
            .equals(other.getTableName())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInput()) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInput().hashCode();
    }
    hash = (37 * hash) + FORMAT_FIELD_NUMBER;
    hash = (53 * hash) + getFormat().hashCode();
    if (!internalGetOptions().getMap().isEmpty()) {
      hash = (37 * hash) + OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetOptions().hashCode();
    }
    if (getPartitioningColumnNamesCount() > 0) {
      hash = (37 * hash) + PARTITIONING_COLUMN_NAMES_FIELD_NUMBER;
      hash = (53 * hash) + getPartitioningColumnNamesList().hashCode();
    }
    hash = (37 * hash) + OUTPUT_MODE_FIELD_NUMBER;
    hash = (53 * hash) + getOutputMode().hashCode();
    hash = (37 * hash) + QUERY_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getQueryName().hashCode();
    if (hasForeachWriter()) {
      hash = (37 * hash) + FOREACH_WRITER_FIELD_NUMBER;
      hash = (53 * hash) + getForeachWriter().hashCode();
    }
    if (hasForeachBatch()) {
      hash = (37 * hash) + FOREACH_BATCH_FIELD_NUMBER;
      hash = (53 * hash) + getForeachBatch().hashCode();
    }
    switch (triggerCase_) {
      case 5:
        hash = (37 * hash) + PROCESSING_TIME_INTERVAL_FIELD_NUMBER;
        hash = (53 * hash) + getProcessingTimeInterval().hashCode();
        break;
      case 6:
        hash = (37 * hash) + AVAILABLE_NOW_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAvailableNow());
        break;
      case 7:
        hash = (37 * hash) + ONCE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOnce());
        break;
      case 8:
        hash = (37 * hash) + CONTINUOUS_CHECKPOINT_INTERVAL_FIELD_NUMBER;
        hash = (53 * hash) + getContinuousCheckpointInterval().hashCode();
        break;
      case 0:
      default:
    }
    switch (sinkDestinationCase_) {
      case 11:
        hash = (37 * hash) + PATH_FIELD_NUMBER;
        hash = (53 * hash) + getPath().hashCode();
        break;
      case 12:
        hash = (37 * hash) + TABLE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getTableName().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Starts write stream operation as streaming query. Query ID and Run ID of the streaming
   * query are returned.
   * </pre>
   *
   * Protobuf type {@code spark.connect.WriteStreamOperationStart}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.WriteStreamOperationStart)
      org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStartOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStart_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetOptions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutableOptions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStart_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.class, org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (inputBuilder_ == null) {
        input_ = null;
      } else {
        input_ = null;
        inputBuilder_ = null;
      }
      format_ = "";

      internalGetMutableOptions().clear();
      partitioningColumnNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      outputMode_ = "";

      queryName_ = "";

      if (foreachWriterBuilder_ == null) {
        foreachWriter_ = null;
      } else {
        foreachWriter_ = null;
        foreachWriterBuilder_ = null;
      }
      if (foreachBatchBuilder_ == null) {
        foreachBatch_ = null;
      } else {
        foreachBatch_ = null;
        foreachBatchBuilder_ = null;
      }
      triggerCase_ = 0;
      trigger_ = null;
      sinkDestinationCase_ = 0;
      sinkDestination_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.Commands.internal_static_spark_connect_WriteStreamOperationStart_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart build() {
      org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart buildPartial() {
      org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart result = new org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart(this);
      int from_bitField0_ = bitField0_;
      if (inputBuilder_ == null) {
        result.input_ = input_;
      } else {
        result.input_ = inputBuilder_.build();
      }
      result.format_ = format_;
      result.options_ = internalGetOptions();
      result.options_.makeImmutable();
      if (((bitField0_ & 0x00000002) != 0)) {
        partitioningColumnNames_ = partitioningColumnNames_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.partitioningColumnNames_ = partitioningColumnNames_;
      if (triggerCase_ == 5) {
        result.trigger_ = trigger_;
      }
      if (triggerCase_ == 6) {
        result.trigger_ = trigger_;
      }
      if (triggerCase_ == 7) {
        result.trigger_ = trigger_;
      }
      if (triggerCase_ == 8) {
        result.trigger_ = trigger_;
      }
      result.outputMode_ = outputMode_;
      result.queryName_ = queryName_;
      if (sinkDestinationCase_ == 11) {
        result.sinkDestination_ = sinkDestination_;
      }
      if (sinkDestinationCase_ == 12) {
        result.sinkDestination_ = sinkDestination_;
      }
      if (foreachWriterBuilder_ == null) {
        result.foreachWriter_ = foreachWriter_;
      } else {
        result.foreachWriter_ = foreachWriterBuilder_.build();
      }
      if (foreachBatchBuilder_ == null) {
        result.foreachBatch_ = foreachBatch_;
      } else {
        result.foreachBatch_ = foreachBatchBuilder_.build();
      }
      result.triggerCase_ = triggerCase_;
      result.sinkDestinationCase_ = sinkDestinationCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart other) {
      if (other == org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart.getDefaultInstance()) return this;
      if (other.hasInput()) {
        mergeInput(other.getInput());
      }
      if (!other.getFormat().isEmpty()) {
        format_ = other.format_;
        onChanged();
      }
      internalGetMutableOptions().mergeFrom(
          other.internalGetOptions());
      if (!other.partitioningColumnNames_.isEmpty()) {
        if (partitioningColumnNames_.isEmpty()) {
          partitioningColumnNames_ = other.partitioningColumnNames_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensurePartitioningColumnNamesIsMutable();
          partitioningColumnNames_.addAll(other.partitioningColumnNames_);
        }
        onChanged();
      }
      if (!other.getOutputMode().isEmpty()) {
        outputMode_ = other.outputMode_;
        onChanged();
      }
      if (!other.getQueryName().isEmpty()) {
        queryName_ = other.queryName_;
        onChanged();
      }
      if (other.hasForeachWriter()) {
        mergeForeachWriter(other.getForeachWriter());
      }
      if (other.hasForeachBatch()) {
        mergeForeachBatch(other.getForeachBatch());
      }
      switch (other.getTriggerCase()) {
        case PROCESSING_TIME_INTERVAL: {
          triggerCase_ = 5;
          trigger_ = other.trigger_;
          onChanged();
          break;
        }
        case AVAILABLE_NOW: {
          setAvailableNow(other.getAvailableNow());
          break;
        }
        case ONCE: {
          setOnce(other.getOnce());
          break;
        }
        case CONTINUOUS_CHECKPOINT_INTERVAL: {
          triggerCase_ = 8;
          trigger_ = other.trigger_;
          onChanged();
          break;
        }
        case TRIGGER_NOT_SET: {
          break;
        }
      }
      switch (other.getSinkDestinationCase()) {
        case PATH: {
          sinkDestinationCase_ = 11;
          sinkDestination_ = other.sinkDestination_;
          onChanged();
          break;
        }
        case TABLE_NAME: {
          sinkDestinationCase_ = 12;
          sinkDestination_ = other.sinkDestination_;
          onChanged();
          break;
        }
        case SINKDESTINATION_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getInputFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 10
            case 18: {
              format_ = input.readStringRequireUtf8();

              break;
            } // case 18
            case 26: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              options__ = input.readMessage(
                  OptionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableOptions().getMutableMap().put(
                  options__.getKey(), options__.getValue());
              break;
            } // case 26
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              ensurePartitioningColumnNamesIsMutable();
              partitioningColumnNames_.add(s);
              break;
            } // case 34
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();
              triggerCase_ = 5;
              trigger_ = s;
              break;
            } // case 42
            case 48: {
              trigger_ = input.readBool();
              triggerCase_ = 6;
              break;
            } // case 48
            case 56: {
              trigger_ = input.readBool();
              triggerCase_ = 7;
              break;
            } // case 56
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();
              triggerCase_ = 8;
              trigger_ = s;
              break;
            } // case 66
            case 74: {
              outputMode_ = input.readStringRequireUtf8();

              break;
            } // case 74
            case 82: {
              queryName_ = input.readStringRequireUtf8();

              break;
            } // case 82
            case 90: {
              java.lang.String s = input.readStringRequireUtf8();
              sinkDestinationCase_ = 11;
              sinkDestination_ = s;
              break;
            } // case 90
            case 98: {
              java.lang.String s = input.readStringRequireUtf8();
              sinkDestinationCase_ = 12;
              sinkDestination_ = s;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getForeachWriterFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getForeachBatchFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 114
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int triggerCase_ = 0;
    private java.lang.Object trigger_;
    public TriggerCase
        getTriggerCase() {
      return TriggerCase.forNumber(
          triggerCase_);
    }

    public Builder clearTrigger() {
      triggerCase_ = 0;
      trigger_ = null;
      onChanged();
      return this;
    }

    private int sinkDestinationCase_ = 0;
    private java.lang.Object sinkDestination_;
    public SinkDestinationCase
        getSinkDestinationCase() {
      return SinkDestinationCase.forNumber(
          sinkDestinationCase_);
    }

    public Builder clearSinkDestination() {
      sinkDestinationCase_ = 0;
      sinkDestination_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private org.apache.kyuubi.engine.spark.connect.proto.Relation input_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder> inputBuilder_;
    /**
     * <pre>
     * (Required) The output of the `input` streaming relation will be written.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return Whether the input field is set.
     */
    public boolean hasInput() {
      return inputBuilder_ != null || input_ != null;
    }
    /**
     * <pre>
     * (Required) The output of the `input` streaming relation will be written.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     * @return The input.
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Relation getInput() {
      if (inputBuilder_ == null) {
        return input_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : input_;
      } else {
        return inputBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) The output of the `input` streaming relation will be written.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(org.apache.kyuubi.engine.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        input_ = value;
        onChanged();
      } else {
        inputBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` streaming relation will be written.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder setInput(
        org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder builderForValue) {
      if (inputBuilder_ == null) {
        input_ = builderForValue.build();
        onChanged();
      } else {
        inputBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` streaming relation will be written.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder mergeInput(org.apache.kyuubi.engine.spark.connect.proto.Relation value) {
      if (inputBuilder_ == null) {
        if (input_ != null) {
          input_ =
            org.apache.kyuubi.engine.spark.connect.proto.Relation.newBuilder(input_).mergeFrom(value).buildPartial();
        } else {
          input_ = value;
        }
        onChanged();
      } else {
        inputBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` streaming relation will be written.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public Builder clearInput() {
      if (inputBuilder_ == null) {
        input_ = null;
        onChanged();
      } else {
        input_ = null;
        inputBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * (Required) The output of the `input` streaming relation will be written.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder getInputBuilder() {
      
      onChanged();
      return getInputFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) The output of the `input` streaming relation will be written.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getInputOrBuilder() {
      if (inputBuilder_ != null) {
        return inputBuilder_.getMessageOrBuilder();
      } else {
        return input_ == null ?
            org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : input_;
      }
    }
    /**
     * <pre>
     * (Required) The output of the `input` streaming relation will be written.
     * </pre>
     *
     * <code>.spark.connect.Relation input = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder> 
        getInputFieldBuilder() {
      if (inputBuilder_ == null) {
        inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder>(
                getInput(),
                getParentForChildren(),
                isClean());
        input_ = null;
      }
      return inputBuilder_;
    }

    private java.lang.Object format_ = "";
    /**
     * <code>string format = 2;</code>
     * @return The format.
     */
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string format = 2;</code>
     * @return The bytes for format.
     */
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string format = 2;</code>
     * @param value The format to set.
     * @return This builder for chaining.
     */
    public Builder setFormat(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      format_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string format = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearFormat() {
      
      format_ = getDefaultInstance().getFormat();
      onChanged();
      return this;
    }
    /**
     * <code>string format = 2;</code>
     * @param value The bytes for format to set.
     * @return This builder for chaining.
     */
    public Builder setFormatBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      format_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> options_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetOptions() {
      if (options_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            OptionsDefaultEntryHolder.defaultEntry);
      }
      return options_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutableOptions() {
      onChanged();;
      if (options_ == null) {
        options_ = com.google.protobuf.MapField.newMapField(
            OptionsDefaultEntryHolder.defaultEntry);
      }
      if (!options_.isMutable()) {
        options_ = options_.copy();
      }
      return options_;
    }

    public int getOptionsCount() {
      return internalGetOptions().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; options = 3;</code>
     */

    @java.lang.Override
    public boolean containsOptions(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetOptions().getMap().containsKey(key);
    }
    /**
     * Use {@link #getOptionsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getOptions() {
      return getOptionsMap();
    }
    /**
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getOptionsMap() {
      return internalGetOptions().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @java.lang.Override

    public java.lang.String getOptionsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetOptions().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @java.lang.Override

    public java.lang.String getOptionsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetOptions().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearOptions() {
      internalGetMutableOptions().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; options = 3;</code>
     */

    public Builder removeOptions(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableOptions().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutableOptions() {
      return internalGetMutableOptions().getMutableMap();
    }
    /**
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    public Builder putOptions(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableOptions().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; options = 3;</code>
     */

    public Builder putAllOptions(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableOptions().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.LazyStringList partitioningColumnNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensurePartitioningColumnNamesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        partitioningColumnNames_ = new com.google.protobuf.LazyStringArrayList(partitioningColumnNames_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <code>repeated string partitioning_column_names = 4;</code>
     * @return A list containing the partitioningColumnNames.
     */
    public com.google.protobuf.ProtocolStringList
        getPartitioningColumnNamesList() {
      return partitioningColumnNames_.getUnmodifiableView();
    }
    /**
     * <code>repeated string partitioning_column_names = 4;</code>
     * @return The count of partitioningColumnNames.
     */
    public int getPartitioningColumnNamesCount() {
      return partitioningColumnNames_.size();
    }
    /**
     * <code>repeated string partitioning_column_names = 4;</code>
     * @param index The index of the element to return.
     * @return The partitioningColumnNames at the given index.
     */
    public java.lang.String getPartitioningColumnNames(int index) {
      return partitioningColumnNames_.get(index);
    }
    /**
     * <code>repeated string partitioning_column_names = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the partitioningColumnNames at the given index.
     */
    public com.google.protobuf.ByteString
        getPartitioningColumnNamesBytes(int index) {
      return partitioningColumnNames_.getByteString(index);
    }
    /**
     * <code>repeated string partitioning_column_names = 4;</code>
     * @param index The index to set the value at.
     * @param value The partitioningColumnNames to set.
     * @return This builder for chaining.
     */
    public Builder setPartitioningColumnNames(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensurePartitioningColumnNamesIsMutable();
      partitioningColumnNames_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string partitioning_column_names = 4;</code>
     * @param value The partitioningColumnNames to add.
     * @return This builder for chaining.
     */
    public Builder addPartitioningColumnNames(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensurePartitioningColumnNamesIsMutable();
      partitioningColumnNames_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string partitioning_column_names = 4;</code>
     * @param values The partitioningColumnNames to add.
     * @return This builder for chaining.
     */
    public Builder addAllPartitioningColumnNames(
        java.lang.Iterable<java.lang.String> values) {
      ensurePartitioningColumnNamesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, partitioningColumnNames_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string partitioning_column_names = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPartitioningColumnNames() {
      partitioningColumnNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string partitioning_column_names = 4;</code>
     * @param value The bytes of the partitioningColumnNames to add.
     * @return This builder for chaining.
     */
    public Builder addPartitioningColumnNamesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensurePartitioningColumnNamesIsMutable();
      partitioningColumnNames_.add(value);
      onChanged();
      return this;
    }

    /**
     * <code>string processing_time_interval = 5;</code>
     * @return Whether the processingTimeInterval field is set.
     */
    @java.lang.Override
    public boolean hasProcessingTimeInterval() {
      return triggerCase_ == 5;
    }
    /**
     * <code>string processing_time_interval = 5;</code>
     * @return The processingTimeInterval.
     */
    @java.lang.Override
    public java.lang.String getProcessingTimeInterval() {
      java.lang.Object ref = "";
      if (triggerCase_ == 5) {
        ref = trigger_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (triggerCase_ == 5) {
          trigger_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string processing_time_interval = 5;</code>
     * @return The bytes for processingTimeInterval.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getProcessingTimeIntervalBytes() {
      java.lang.Object ref = "";
      if (triggerCase_ == 5) {
        ref = trigger_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (triggerCase_ == 5) {
          trigger_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string processing_time_interval = 5;</code>
     * @param value The processingTimeInterval to set.
     * @return This builder for chaining.
     */
    public Builder setProcessingTimeInterval(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  triggerCase_ = 5;
      trigger_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string processing_time_interval = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearProcessingTimeInterval() {
      if (triggerCase_ == 5) {
        triggerCase_ = 0;
        trigger_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <code>string processing_time_interval = 5;</code>
     * @param value The bytes for processingTimeInterval to set.
     * @return This builder for chaining.
     */
    public Builder setProcessingTimeIntervalBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      triggerCase_ = 5;
      trigger_ = value;
      onChanged();
      return this;
    }

    /**
     * <code>bool available_now = 6;</code>
     * @return Whether the availableNow field is set.
     */
    public boolean hasAvailableNow() {
      return triggerCase_ == 6;
    }
    /**
     * <code>bool available_now = 6;</code>
     * @return The availableNow.
     */
    public boolean getAvailableNow() {
      if (triggerCase_ == 6) {
        return (java.lang.Boolean) trigger_;
      }
      return false;
    }
    /**
     * <code>bool available_now = 6;</code>
     * @param value The availableNow to set.
     * @return This builder for chaining.
     */
    public Builder setAvailableNow(boolean value) {
      triggerCase_ = 6;
      trigger_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool available_now = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearAvailableNow() {
      if (triggerCase_ == 6) {
        triggerCase_ = 0;
        trigger_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>bool once = 7;</code>
     * @return Whether the once field is set.
     */
    public boolean hasOnce() {
      return triggerCase_ == 7;
    }
    /**
     * <code>bool once = 7;</code>
     * @return The once.
     */
    public boolean getOnce() {
      if (triggerCase_ == 7) {
        return (java.lang.Boolean) trigger_;
      }
      return false;
    }
    /**
     * <code>bool once = 7;</code>
     * @param value The once to set.
     * @return This builder for chaining.
     */
    public Builder setOnce(boolean value) {
      triggerCase_ = 7;
      trigger_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool once = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearOnce() {
      if (triggerCase_ == 7) {
        triggerCase_ = 0;
        trigger_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>string continuous_checkpoint_interval = 8;</code>
     * @return Whether the continuousCheckpointInterval field is set.
     */
    @java.lang.Override
    public boolean hasContinuousCheckpointInterval() {
      return triggerCase_ == 8;
    }
    /**
     * <code>string continuous_checkpoint_interval = 8;</code>
     * @return The continuousCheckpointInterval.
     */
    @java.lang.Override
    public java.lang.String getContinuousCheckpointInterval() {
      java.lang.Object ref = "";
      if (triggerCase_ == 8) {
        ref = trigger_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (triggerCase_ == 8) {
          trigger_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string continuous_checkpoint_interval = 8;</code>
     * @return The bytes for continuousCheckpointInterval.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getContinuousCheckpointIntervalBytes() {
      java.lang.Object ref = "";
      if (triggerCase_ == 8) {
        ref = trigger_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (triggerCase_ == 8) {
          trigger_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string continuous_checkpoint_interval = 8;</code>
     * @param value The continuousCheckpointInterval to set.
     * @return This builder for chaining.
     */
    public Builder setContinuousCheckpointInterval(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  triggerCase_ = 8;
      trigger_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string continuous_checkpoint_interval = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearContinuousCheckpointInterval() {
      if (triggerCase_ == 8) {
        triggerCase_ = 0;
        trigger_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <code>string continuous_checkpoint_interval = 8;</code>
     * @param value The bytes for continuousCheckpointInterval to set.
     * @return This builder for chaining.
     */
    public Builder setContinuousCheckpointIntervalBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      triggerCase_ = 8;
      trigger_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object outputMode_ = "";
    /**
     * <code>string output_mode = 9;</code>
     * @return The outputMode.
     */
    public java.lang.String getOutputMode() {
      java.lang.Object ref = outputMode_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        outputMode_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string output_mode = 9;</code>
     * @return The bytes for outputMode.
     */
    public com.google.protobuf.ByteString
        getOutputModeBytes() {
      java.lang.Object ref = outputMode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        outputMode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string output_mode = 9;</code>
     * @param value The outputMode to set.
     * @return This builder for chaining.
     */
    public Builder setOutputMode(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      outputMode_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string output_mode = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearOutputMode() {
      
      outputMode_ = getDefaultInstance().getOutputMode();
      onChanged();
      return this;
    }
    /**
     * <code>string output_mode = 9;</code>
     * @param value The bytes for outputMode to set.
     * @return This builder for chaining.
     */
    public Builder setOutputModeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      outputMode_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object queryName_ = "";
    /**
     * <code>string query_name = 10;</code>
     * @return The queryName.
     */
    public java.lang.String getQueryName() {
      java.lang.Object ref = queryName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        queryName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string query_name = 10;</code>
     * @return The bytes for queryName.
     */
    public com.google.protobuf.ByteString
        getQueryNameBytes() {
      java.lang.Object ref = queryName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        queryName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string query_name = 10;</code>
     * @param value The queryName to set.
     * @return This builder for chaining.
     */
    public Builder setQueryName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      queryName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string query_name = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearQueryName() {
      
      queryName_ = getDefaultInstance().getQueryName();
      onChanged();
      return this;
    }
    /**
     * <code>string query_name = 10;</code>
     * @param value The bytes for queryName to set.
     * @return This builder for chaining.
     */
    public Builder setQueryNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      queryName_ = value;
      onChanged();
      return this;
    }

    /**
     * <code>string path = 11;</code>
     * @return Whether the path field is set.
     */
    @java.lang.Override
    public boolean hasPath() {
      return sinkDestinationCase_ == 11;
    }
    /**
     * <code>string path = 11;</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = "";
      if (sinkDestinationCase_ == 11) {
        ref = sinkDestination_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (sinkDestinationCase_ == 11) {
          sinkDestination_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string path = 11;</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = "";
      if (sinkDestinationCase_ == 11) {
        ref = sinkDestination_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (sinkDestinationCase_ == 11) {
          sinkDestination_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string path = 11;</code>
     * @param value The path to set.
     * @return This builder for chaining.
     */
    public Builder setPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  sinkDestinationCase_ = 11;
      sinkDestination_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string path = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearPath() {
      if (sinkDestinationCase_ == 11) {
        sinkDestinationCase_ = 0;
        sinkDestination_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <code>string path = 11;</code>
     * @param value The bytes for path to set.
     * @return This builder for chaining.
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      sinkDestinationCase_ = 11;
      sinkDestination_ = value;
      onChanged();
      return this;
    }

    /**
     * <code>string table_name = 12;</code>
     * @return Whether the tableName field is set.
     */
    @java.lang.Override
    public boolean hasTableName() {
      return sinkDestinationCase_ == 12;
    }
    /**
     * <code>string table_name = 12;</code>
     * @return The tableName.
     */
    @java.lang.Override
    public java.lang.String getTableName() {
      java.lang.Object ref = "";
      if (sinkDestinationCase_ == 12) {
        ref = sinkDestination_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (sinkDestinationCase_ == 12) {
          sinkDestination_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string table_name = 12;</code>
     * @return The bytes for tableName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableNameBytes() {
      java.lang.Object ref = "";
      if (sinkDestinationCase_ == 12) {
        ref = sinkDestination_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (sinkDestinationCase_ == 12) {
          sinkDestination_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string table_name = 12;</code>
     * @param value The tableName to set.
     * @return This builder for chaining.
     */
    public Builder setTableName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  sinkDestinationCase_ = 12;
      sinkDestination_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string table_name = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearTableName() {
      if (sinkDestinationCase_ == 12) {
        sinkDestinationCase_ = 0;
        sinkDestination_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <code>string table_name = 12;</code>
     * @param value The bytes for tableName to set.
     * @return This builder for chaining.
     */
    public Builder setTableNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      sinkDestinationCase_ = 12;
      sinkDestination_ = value;
      onChanged();
      return this;
    }

    private org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction foreachWriter_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunctionOrBuilder> foreachWriterBuilder_;
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
     * @return Whether the foreachWriter field is set.
     */
    public boolean hasForeachWriter() {
      return foreachWriterBuilder_ != null || foreachWriter_ != null;
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
     * @return The foreachWriter.
     */
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction getForeachWriter() {
      if (foreachWriterBuilder_ == null) {
        return foreachWriter_ == null ? org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.getDefaultInstance() : foreachWriter_;
      } else {
        return foreachWriterBuilder_.getMessage();
      }
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
     */
    public Builder setForeachWriter(org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction value) {
      if (foreachWriterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        foreachWriter_ = value;
        onChanged();
      } else {
        foreachWriterBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
     */
    public Builder setForeachWriter(
        org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.Builder builderForValue) {
      if (foreachWriterBuilder_ == null) {
        foreachWriter_ = builderForValue.build();
        onChanged();
      } else {
        foreachWriterBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
     */
    public Builder mergeForeachWriter(org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction value) {
      if (foreachWriterBuilder_ == null) {
        if (foreachWriter_ != null) {
          foreachWriter_ =
            org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.newBuilder(foreachWriter_).mergeFrom(value).buildPartial();
        } else {
          foreachWriter_ = value;
        }
        onChanged();
      } else {
        foreachWriterBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
     */
    public Builder clearForeachWriter() {
      if (foreachWriterBuilder_ == null) {
        foreachWriter_ = null;
        onChanged();
      } else {
        foreachWriter_ = null;
        foreachWriterBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.Builder getForeachWriterBuilder() {
      
      onChanged();
      return getForeachWriterFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunctionOrBuilder getForeachWriterOrBuilder() {
      if (foreachWriterBuilder_ != null) {
        return foreachWriterBuilder_.getMessageOrBuilder();
      } else {
        return foreachWriter_ == null ?
            org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.getDefaultInstance() : foreachWriter_;
      }
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_writer = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunctionOrBuilder> 
        getForeachWriterFieldBuilder() {
      if (foreachWriterBuilder_ == null) {
        foreachWriterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunctionOrBuilder>(
                getForeachWriter(),
                getParentForChildren(),
                isClean());
        foreachWriter_ = null;
      }
      return foreachWriterBuilder_;
    }

    private org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction foreachBatch_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunctionOrBuilder> foreachBatchBuilder_;
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
     * @return Whether the foreachBatch field is set.
     */
    public boolean hasForeachBatch() {
      return foreachBatchBuilder_ != null || foreachBatch_ != null;
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
     * @return The foreachBatch.
     */
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction getForeachBatch() {
      if (foreachBatchBuilder_ == null) {
        return foreachBatch_ == null ? org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.getDefaultInstance() : foreachBatch_;
      } else {
        return foreachBatchBuilder_.getMessage();
      }
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
     */
    public Builder setForeachBatch(org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction value) {
      if (foreachBatchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        foreachBatch_ = value;
        onChanged();
      } else {
        foreachBatchBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
     */
    public Builder setForeachBatch(
        org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.Builder builderForValue) {
      if (foreachBatchBuilder_ == null) {
        foreachBatch_ = builderForValue.build();
        onChanged();
      } else {
        foreachBatchBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
     */
    public Builder mergeForeachBatch(org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction value) {
      if (foreachBatchBuilder_ == null) {
        if (foreachBatch_ != null) {
          foreachBatch_ =
            org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.newBuilder(foreachBatch_).mergeFrom(value).buildPartial();
        } else {
          foreachBatch_ = value;
        }
        onChanged();
      } else {
        foreachBatchBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
     */
    public Builder clearForeachBatch() {
      if (foreachBatchBuilder_ == null) {
        foreachBatch_ = null;
        onChanged();
      } else {
        foreachBatch_ = null;
        foreachBatchBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.Builder getForeachBatchBuilder() {
      
      onChanged();
      return getForeachBatchFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunctionOrBuilder getForeachBatchOrBuilder() {
      if (foreachBatchBuilder_ != null) {
        return foreachBatchBuilder_.getMessageOrBuilder();
      } else {
        return foreachBatch_ == null ?
            org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.getDefaultInstance() : foreachBatch_;
      }
    }
    /**
     * <code>.spark.connect.StreamingForeachFunction foreach_batch = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunctionOrBuilder> 
        getForeachBatchFieldBuilder() {
      if (foreachBatchBuilder_ == null) {
        foreachBatchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.StreamingForeachFunctionOrBuilder>(
                getForeachBatch(),
                getParentForChildren(),
                isClean());
        foreachBatch_ = null;
      }
      return foreachBatchBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.WriteStreamOperationStart)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.WriteStreamOperationStart)
  private static final org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart();
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WriteStreamOperationStart>
      PARSER = new com.google.protobuf.AbstractParser<WriteStreamOperationStart>() {
    @java.lang.Override
    public WriteStreamOperationStart parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<WriteStreamOperationStart> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WriteStreamOperationStart> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.WriteStreamOperationStart getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

