// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

public interface WithColumnsOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:spark.connect.WithColumns)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return The input.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput();
  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder();

  /**
   *
   *
   * <pre>
   * (Required)
   * Given a column name, apply the corresponding expression on the column. If column
   * name exists in the input relation, then replace the column. If the column name
   * does not exist in the input relation, then adds it as a new column.
   * Only one name part is expected from each Expression.Alias.
   * An exception is thrown when duplicated names are present in the mapping.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Alias aliases = 2;</code>
   */
  java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Alias>
      getAliasesList();
  /**
   *
   *
   * <pre>
   * (Required)
   * Given a column name, apply the corresponding expression on the column. If column
   * name exists in the input relation, then replace the column. If the column name
   * does not exist in the input relation, then adds it as a new column.
   * Only one name part is expected from each Expression.Alias.
   * An exception is thrown when duplicated names are present in the mapping.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Alias aliases = 2;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Alias getAliases(int index);
  /**
   *
   *
   * <pre>
   * (Required)
   * Given a column name, apply the corresponding expression on the column. If column
   * name exists in the input relation, then replace the column. If the column name
   * does not exist in the input relation, then adds it as a new column.
   * Only one name part is expected from each Expression.Alias.
   * An exception is thrown when duplicated names are present in the mapping.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Alias aliases = 2;</code>
   */
  int getAliasesCount();
  /**
   *
   *
   * <pre>
   * (Required)
   * Given a column name, apply the corresponding expression on the column. If column
   * name exists in the input relation, then replace the column. If the column name
   * does not exist in the input relation, then adds it as a new column.
   * Only one name part is expected from each Expression.Alias.
   * An exception is thrown when duplicated names are present in the mapping.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Alias aliases = 2;</code>
   */
  java.util.List<
          ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.AliasOrBuilder>
      getAliasesOrBuilderList();
  /**
   *
   *
   * <pre>
   * (Required)
   * Given a column name, apply the corresponding expression on the column. If column
   * name exists in the input relation, then replace the column. If the column name
   * does not exist in the input relation, then adds it as a new column.
   * Only one name part is expected from each Expression.Alias.
   * An exception is thrown when duplicated names are present in the mapping.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Alias aliases = 2;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.AliasOrBuilder getAliasesOrBuilder(
      int index);
}
