// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface UserContextOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.UserContext)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string user_id = 1;</code>
   * @return The userId.
   */
  java.lang.String getUserId();
  /**
   * <code>string user_id = 1;</code>
   * @return The bytes for userId.
   */
  com.google.protobuf.ByteString
      getUserIdBytes();

  /**
   * <code>string user_name = 2;</code>
   * @return The userName.
   */
  java.lang.String getUserName();
  /**
   * <code>string user_name = 2;</code>
   * @return The bytes for userName.
   */
  com.google.protobuf.ByteString
      getUserNameBytes();

  /**
   * <pre>
   * To extend the existing user context message that is used to identify incoming requests,
   * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
   * messages into this message. Extensions are stored as a `repeated` type to be able to
   * handle multiple active extensions.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extensions = 999;</code>
   */
  java.util.List<com.google.protobuf.Any> 
      getExtensionsList();
  /**
   * <pre>
   * To extend the existing user context message that is used to identify incoming requests,
   * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
   * messages into this message. Extensions are stored as a `repeated` type to be able to
   * handle multiple active extensions.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extensions = 999;</code>
   */
  com.google.protobuf.Any getExtensions(int index);
  /**
   * <pre>
   * To extend the existing user context message that is used to identify incoming requests,
   * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
   * messages into this message. Extensions are stored as a `repeated` type to be able to
   * handle multiple active extensions.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extensions = 999;</code>
   */
  int getExtensionsCount();
  /**
   * <pre>
   * To extend the existing user context message that is used to identify incoming requests,
   * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
   * messages into this message. Extensions are stored as a `repeated` type to be able to
   * handle multiple active extensions.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extensions = 999;</code>
   */
  java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
      getExtensionsOrBuilderList();
  /**
   * <pre>
   * To extend the existing user context message that is used to identify incoming requests,
   * Spark Connect leverages the Any protobuf type that can be used to inject arbitrary other
   * messages into this message. Extensions are stored as a `repeated` type to be able to
   * handle multiple active extensions.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extensions = 999;</code>
   */
  com.google.protobuf.AnyOrBuilder getExtensionsOrBuilder(
      int index);
}
