// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Relation of type [[AsOfJoin]].
 * `left` and `right` must be present.
 * </pre>
 *
 * Protobuf type {@code spark.connect.AsOfJoin}
 */
public final class AsOfJoin extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.AsOfJoin)
    AsOfJoinOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AsOfJoin.newBuilder() to construct.
  private AsOfJoin(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AsOfJoin() {
    usingColumns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    joinType_ = "";
    direction_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AsOfJoin();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.proto.Relations.internal_static_spark_connect_AsOfJoin_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.proto.Relations.internal_static_spark_connect_AsOfJoin_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin.class, org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin.Builder.class);
  }

  public static final int LEFT_FIELD_NUMBER = 1;
  private org.apache.kyuubi.engine.spark.connect.proto.Relation left_;
  /**
   * <pre>
   * (Required) Left input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation left = 1;</code>
   * @return Whether the left field is set.
   */
  @java.lang.Override
  public boolean hasLeft() {
    return left_ != null;
  }
  /**
   * <pre>
   * (Required) Left input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation left = 1;</code>
   * @return The left.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Relation getLeft() {
    return left_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : left_;
  }
  /**
   * <pre>
   * (Required) Left input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation left = 1;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getLeftOrBuilder() {
    return getLeft();
  }

  public static final int RIGHT_FIELD_NUMBER = 2;
  private org.apache.kyuubi.engine.spark.connect.proto.Relation right_;
  /**
   * <pre>
   * (Required) Right input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation right = 2;</code>
   * @return Whether the right field is set.
   */
  @java.lang.Override
  public boolean hasRight() {
    return right_ != null;
  }
  /**
   * <pre>
   * (Required) Right input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation right = 2;</code>
   * @return The right.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Relation getRight() {
    return right_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : right_;
  }
  /**
   * <pre>
   * (Required) Right input relation for a Join.
   * </pre>
   *
   * <code>.spark.connect.Relation right = 2;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getRightOrBuilder() {
    return getRight();
  }

  public static final int LEFT_AS_OF_FIELD_NUMBER = 3;
  private org.apache.kyuubi.engine.spark.connect.proto.Expression leftAsOf_;
  /**
   * <pre>
   * (Required) Field to join on in left DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression left_as_of = 3;</code>
   * @return Whether the leftAsOf field is set.
   */
  @java.lang.Override
  public boolean hasLeftAsOf() {
    return leftAsOf_ != null;
  }
  /**
   * <pre>
   * (Required) Field to join on in left DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression left_as_of = 3;</code>
   * @return The leftAsOf.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression getLeftAsOf() {
    return leftAsOf_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : leftAsOf_;
  }
  /**
   * <pre>
   * (Required) Field to join on in left DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression left_as_of = 3;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getLeftAsOfOrBuilder() {
    return getLeftAsOf();
  }

  public static final int RIGHT_AS_OF_FIELD_NUMBER = 4;
  private org.apache.kyuubi.engine.spark.connect.proto.Expression rightAsOf_;
  /**
   * <pre>
   * (Required) Field to join on in right DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression right_as_of = 4;</code>
   * @return Whether the rightAsOf field is set.
   */
  @java.lang.Override
  public boolean hasRightAsOf() {
    return rightAsOf_ != null;
  }
  /**
   * <pre>
   * (Required) Field to join on in right DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression right_as_of = 4;</code>
   * @return The rightAsOf.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression getRightAsOf() {
    return rightAsOf_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : rightAsOf_;
  }
  /**
   * <pre>
   * (Required) Field to join on in right DataFrame
   * </pre>
   *
   * <code>.spark.connect.Expression right_as_of = 4;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getRightAsOfOrBuilder() {
    return getRightAsOf();
  }

  public static final int JOIN_EXPR_FIELD_NUMBER = 5;
  private org.apache.kyuubi.engine.spark.connect.proto.Expression joinExpr_;
  /**
   * <pre>
   * (Optional) The join condition. Could be unset when `using_columns` is utilized.
   * This field does not co-exist with using_columns.
   * </pre>
   *
   * <code>.spark.connect.Expression join_expr = 5;</code>
   * @return Whether the joinExpr field is set.
   */
  @java.lang.Override
  public boolean hasJoinExpr() {
    return joinExpr_ != null;
  }
  /**
   * <pre>
   * (Optional) The join condition. Could be unset when `using_columns` is utilized.
   * This field does not co-exist with using_columns.
   * </pre>
   *
   * <code>.spark.connect.Expression join_expr = 5;</code>
   * @return The joinExpr.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression getJoinExpr() {
    return joinExpr_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : joinExpr_;
  }
  /**
   * <pre>
   * (Optional) The join condition. Could be unset when `using_columns` is utilized.
   * This field does not co-exist with using_columns.
   * </pre>
   *
   * <code>.spark.connect.Expression join_expr = 5;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getJoinExprOrBuilder() {
    return getJoinExpr();
  }

  public static final int USING_COLUMNS_FIELD_NUMBER = 6;
  private com.google.protobuf.LazyStringList usingColumns_;
  /**
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 6;</code>
   * @return A list containing the usingColumns.
   */
  public com.google.protobuf.ProtocolStringList
      getUsingColumnsList() {
    return usingColumns_;
  }
  /**
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 6;</code>
   * @return The count of usingColumns.
   */
  public int getUsingColumnsCount() {
    return usingColumns_.size();
  }
  /**
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 6;</code>
   * @param index The index of the element to return.
   * @return The usingColumns at the given index.
   */
  public java.lang.String getUsingColumns(int index) {
    return usingColumns_.get(index);
  }
  /**
   * <pre>
   * Optional. using_columns provides a list of columns that should present on both sides of
   * the join inputs that this Join will join on. For example A JOIN B USING col_name is
   * equivalent to A JOIN B on A.col_name = B.col_name.
   * This field does not co-exist with join_condition.
   * </pre>
   *
   * <code>repeated string using_columns = 6;</code>
   * @param index The index of the value to return.
   * @return The bytes of the usingColumns at the given index.
   */
  public com.google.protobuf.ByteString
      getUsingColumnsBytes(int index) {
    return usingColumns_.getByteString(index);
  }

  public static final int JOIN_TYPE_FIELD_NUMBER = 7;
  private volatile java.lang.Object joinType_;
  /**
   * <pre>
   * (Required) The join type.
   * </pre>
   *
   * <code>string join_type = 7;</code>
   * @return The joinType.
   */
  @java.lang.Override
  public java.lang.String getJoinType() {
    java.lang.Object ref = joinType_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      joinType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Required) The join type.
   * </pre>
   *
   * <code>string join_type = 7;</code>
   * @return The bytes for joinType.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getJoinTypeBytes() {
    java.lang.Object ref = joinType_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      joinType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TOLERANCE_FIELD_NUMBER = 8;
  private org.apache.kyuubi.engine.spark.connect.proto.Expression tolerance_;
  /**
   * <pre>
   * (Optional) The asof tolerance within this range.
   * </pre>
   *
   * <code>.spark.connect.Expression tolerance = 8;</code>
   * @return Whether the tolerance field is set.
   */
  @java.lang.Override
  public boolean hasTolerance() {
    return tolerance_ != null;
  }
  /**
   * <pre>
   * (Optional) The asof tolerance within this range.
   * </pre>
   *
   * <code>.spark.connect.Expression tolerance = 8;</code>
   * @return The tolerance.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression getTolerance() {
    return tolerance_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : tolerance_;
  }
  /**
   * <pre>
   * (Optional) The asof tolerance within this range.
   * </pre>
   *
   * <code>.spark.connect.Expression tolerance = 8;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getToleranceOrBuilder() {
    return getTolerance();
  }

  public static final int ALLOW_EXACT_MATCHES_FIELD_NUMBER = 9;
  private boolean allowExactMatches_;
  /**
   * <pre>
   * (Required) Whether allow matching with the same value or not.
   * </pre>
   *
   * <code>bool allow_exact_matches = 9;</code>
   * @return The allowExactMatches.
   */
  @java.lang.Override
  public boolean getAllowExactMatches() {
    return allowExactMatches_;
  }

  public static final int DIRECTION_FIELD_NUMBER = 10;
  private volatile java.lang.Object direction_;
  /**
   * <pre>
   * (Required) Whether to search for prior, subsequent, or closest matches.
   * </pre>
   *
   * <code>string direction = 10;</code>
   * @return The direction.
   */
  @java.lang.Override
  public java.lang.String getDirection() {
    java.lang.Object ref = direction_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      direction_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (Required) Whether to search for prior, subsequent, or closest matches.
   * </pre>
   *
   * <code>string direction = 10;</code>
   * @return The bytes for direction.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDirectionBytes() {
    java.lang.Object ref = direction_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      direction_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (left_ != null) {
      output.writeMessage(1, getLeft());
    }
    if (right_ != null) {
      output.writeMessage(2, getRight());
    }
    if (leftAsOf_ != null) {
      output.writeMessage(3, getLeftAsOf());
    }
    if (rightAsOf_ != null) {
      output.writeMessage(4, getRightAsOf());
    }
    if (joinExpr_ != null) {
      output.writeMessage(5, getJoinExpr());
    }
    for (int i = 0; i < usingColumns_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, usingColumns_.getRaw(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(joinType_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, joinType_);
    }
    if (tolerance_ != null) {
      output.writeMessage(8, getTolerance());
    }
    if (allowExactMatches_ != false) {
      output.writeBool(9, allowExactMatches_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(direction_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 10, direction_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (left_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getLeft());
    }
    if (right_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getRight());
    }
    if (leftAsOf_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getLeftAsOf());
    }
    if (rightAsOf_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getRightAsOf());
    }
    if (joinExpr_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getJoinExpr());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < usingColumns_.size(); i++) {
        dataSize += computeStringSizeNoTag(usingColumns_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getUsingColumnsList().size();
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(joinType_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, joinType_);
    }
    if (tolerance_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getTolerance());
    }
    if (allowExactMatches_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, allowExactMatches_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(direction_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, direction_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin other = (org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin) obj;

    if (hasLeft() != other.hasLeft()) return false;
    if (hasLeft()) {
      if (!getLeft()
          .equals(other.getLeft())) return false;
    }
    if (hasRight() != other.hasRight()) return false;
    if (hasRight()) {
      if (!getRight()
          .equals(other.getRight())) return false;
    }
    if (hasLeftAsOf() != other.hasLeftAsOf()) return false;
    if (hasLeftAsOf()) {
      if (!getLeftAsOf()
          .equals(other.getLeftAsOf())) return false;
    }
    if (hasRightAsOf() != other.hasRightAsOf()) return false;
    if (hasRightAsOf()) {
      if (!getRightAsOf()
          .equals(other.getRightAsOf())) return false;
    }
    if (hasJoinExpr() != other.hasJoinExpr()) return false;
    if (hasJoinExpr()) {
      if (!getJoinExpr()
          .equals(other.getJoinExpr())) return false;
    }
    if (!getUsingColumnsList()
        .equals(other.getUsingColumnsList())) return false;
    if (!getJoinType()
        .equals(other.getJoinType())) return false;
    if (hasTolerance() != other.hasTolerance()) return false;
    if (hasTolerance()) {
      if (!getTolerance()
          .equals(other.getTolerance())) return false;
    }
    if (getAllowExactMatches()
        != other.getAllowExactMatches()) return false;
    if (!getDirection()
        .equals(other.getDirection())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasLeft()) {
      hash = (37 * hash) + LEFT_FIELD_NUMBER;
      hash = (53 * hash) + getLeft().hashCode();
    }
    if (hasRight()) {
      hash = (37 * hash) + RIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getRight().hashCode();
    }
    if (hasLeftAsOf()) {
      hash = (37 * hash) + LEFT_AS_OF_FIELD_NUMBER;
      hash = (53 * hash) + getLeftAsOf().hashCode();
    }
    if (hasRightAsOf()) {
      hash = (37 * hash) + RIGHT_AS_OF_FIELD_NUMBER;
      hash = (53 * hash) + getRightAsOf().hashCode();
    }
    if (hasJoinExpr()) {
      hash = (37 * hash) + JOIN_EXPR_FIELD_NUMBER;
      hash = (53 * hash) + getJoinExpr().hashCode();
    }
    if (getUsingColumnsCount() > 0) {
      hash = (37 * hash) + USING_COLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + getUsingColumnsList().hashCode();
    }
    hash = (37 * hash) + JOIN_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + getJoinType().hashCode();
    if (hasTolerance()) {
      hash = (37 * hash) + TOLERANCE_FIELD_NUMBER;
      hash = (53 * hash) + getTolerance().hashCode();
    }
    hash = (37 * hash) + ALLOW_EXACT_MATCHES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAllowExactMatches());
    hash = (37 * hash) + DIRECTION_FIELD_NUMBER;
    hash = (53 * hash) + getDirection().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Relation of type [[AsOfJoin]].
   * `left` and `right` must be present.
   * </pre>
   *
   * Protobuf type {@code spark.connect.AsOfJoin}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.AsOfJoin)
      org.apache.kyuubi.engine.spark.connect.proto.AsOfJoinOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Relations.internal_static_spark_connect_AsOfJoin_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Relations.internal_static_spark_connect_AsOfJoin_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin.class, org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (leftBuilder_ == null) {
        left_ = null;
      } else {
        left_ = null;
        leftBuilder_ = null;
      }
      if (rightBuilder_ == null) {
        right_ = null;
      } else {
        right_ = null;
        rightBuilder_ = null;
      }
      if (leftAsOfBuilder_ == null) {
        leftAsOf_ = null;
      } else {
        leftAsOf_ = null;
        leftAsOfBuilder_ = null;
      }
      if (rightAsOfBuilder_ == null) {
        rightAsOf_ = null;
      } else {
        rightAsOf_ = null;
        rightAsOfBuilder_ = null;
      }
      if (joinExprBuilder_ == null) {
        joinExpr_ = null;
      } else {
        joinExpr_ = null;
        joinExprBuilder_ = null;
      }
      usingColumns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      joinType_ = "";

      if (toleranceBuilder_ == null) {
        tolerance_ = null;
      } else {
        tolerance_ = null;
        toleranceBuilder_ = null;
      }
      allowExactMatches_ = false;

      direction_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.Relations.internal_static_spark_connect_AsOfJoin_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin build() {
      org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin buildPartial() {
      org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin result = new org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin(this);
      int from_bitField0_ = bitField0_;
      if (leftBuilder_ == null) {
        result.left_ = left_;
      } else {
        result.left_ = leftBuilder_.build();
      }
      if (rightBuilder_ == null) {
        result.right_ = right_;
      } else {
        result.right_ = rightBuilder_.build();
      }
      if (leftAsOfBuilder_ == null) {
        result.leftAsOf_ = leftAsOf_;
      } else {
        result.leftAsOf_ = leftAsOfBuilder_.build();
      }
      if (rightAsOfBuilder_ == null) {
        result.rightAsOf_ = rightAsOf_;
      } else {
        result.rightAsOf_ = rightAsOfBuilder_.build();
      }
      if (joinExprBuilder_ == null) {
        result.joinExpr_ = joinExpr_;
      } else {
        result.joinExpr_ = joinExprBuilder_.build();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        usingColumns_ = usingColumns_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.usingColumns_ = usingColumns_;
      result.joinType_ = joinType_;
      if (toleranceBuilder_ == null) {
        result.tolerance_ = tolerance_;
      } else {
        result.tolerance_ = toleranceBuilder_.build();
      }
      result.allowExactMatches_ = allowExactMatches_;
      result.direction_ = direction_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin other) {
      if (other == org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin.getDefaultInstance()) return this;
      if (other.hasLeft()) {
        mergeLeft(other.getLeft());
      }
      if (other.hasRight()) {
        mergeRight(other.getRight());
      }
      if (other.hasLeftAsOf()) {
        mergeLeftAsOf(other.getLeftAsOf());
      }
      if (other.hasRightAsOf()) {
        mergeRightAsOf(other.getRightAsOf());
      }
      if (other.hasJoinExpr()) {
        mergeJoinExpr(other.getJoinExpr());
      }
      if (!other.usingColumns_.isEmpty()) {
        if (usingColumns_.isEmpty()) {
          usingColumns_ = other.usingColumns_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureUsingColumnsIsMutable();
          usingColumns_.addAll(other.usingColumns_);
        }
        onChanged();
      }
      if (!other.getJoinType().isEmpty()) {
        joinType_ = other.joinType_;
        onChanged();
      }
      if (other.hasTolerance()) {
        mergeTolerance(other.getTolerance());
      }
      if (other.getAllowExactMatches() != false) {
        setAllowExactMatches(other.getAllowExactMatches());
      }
      if (!other.getDirection().isEmpty()) {
        direction_ = other.direction_;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getLeftFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getRightFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getLeftAsOfFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getRightAsOfFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getJoinExprFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 42
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureUsingColumnsIsMutable();
              usingColumns_.add(s);
              break;
            } // case 50
            case 58: {
              joinType_ = input.readStringRequireUtf8();

              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getToleranceFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 66
            case 72: {
              allowExactMatches_ = input.readBool();

              break;
            } // case 72
            case 82: {
              direction_ = input.readStringRequireUtf8();

              break;
            } // case 82
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.apache.kyuubi.engine.spark.connect.proto.Relation left_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder> leftBuilder_;
    /**
     * <pre>
     * (Required) Left input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation left = 1;</code>
     * @return Whether the left field is set.
     */
    public boolean hasLeft() {
      return leftBuilder_ != null || left_ != null;
    }
    /**
     * <pre>
     * (Required) Left input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation left = 1;</code>
     * @return The left.
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Relation getLeft() {
      if (leftBuilder_ == null) {
        return left_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : left_;
      } else {
        return leftBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Left input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation left = 1;</code>
     */
    public Builder setLeft(org.apache.kyuubi.engine.spark.connect.proto.Relation value) {
      if (leftBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        left_ = value;
        onChanged();
      } else {
        leftBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Left input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation left = 1;</code>
     */
    public Builder setLeft(
        org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder builderForValue) {
      if (leftBuilder_ == null) {
        left_ = builderForValue.build();
        onChanged();
      } else {
        leftBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Left input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation left = 1;</code>
     */
    public Builder mergeLeft(org.apache.kyuubi.engine.spark.connect.proto.Relation value) {
      if (leftBuilder_ == null) {
        if (left_ != null) {
          left_ =
            org.apache.kyuubi.engine.spark.connect.proto.Relation.newBuilder(left_).mergeFrom(value).buildPartial();
        } else {
          left_ = value;
        }
        onChanged();
      } else {
        leftBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Left input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation left = 1;</code>
     */
    public Builder clearLeft() {
      if (leftBuilder_ == null) {
        left_ = null;
        onChanged();
      } else {
        left_ = null;
        leftBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Left input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation left = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder getLeftBuilder() {
      
      onChanged();
      return getLeftFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Left input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation left = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getLeftOrBuilder() {
      if (leftBuilder_ != null) {
        return leftBuilder_.getMessageOrBuilder();
      } else {
        return left_ == null ?
            org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : left_;
      }
    }
    /**
     * <pre>
     * (Required) Left input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation left = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder> 
        getLeftFieldBuilder() {
      if (leftBuilder_ == null) {
        leftBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder>(
                getLeft(),
                getParentForChildren(),
                isClean());
        left_ = null;
      }
      return leftBuilder_;
    }

    private org.apache.kyuubi.engine.spark.connect.proto.Relation right_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder> rightBuilder_;
    /**
     * <pre>
     * (Required) Right input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation right = 2;</code>
     * @return Whether the right field is set.
     */
    public boolean hasRight() {
      return rightBuilder_ != null || right_ != null;
    }
    /**
     * <pre>
     * (Required) Right input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation right = 2;</code>
     * @return The right.
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Relation getRight() {
      if (rightBuilder_ == null) {
        return right_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : right_;
      } else {
        return rightBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Right input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation right = 2;</code>
     */
    public Builder setRight(org.apache.kyuubi.engine.spark.connect.proto.Relation value) {
      if (rightBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        right_ = value;
        onChanged();
      } else {
        rightBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Right input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation right = 2;</code>
     */
    public Builder setRight(
        org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder builderForValue) {
      if (rightBuilder_ == null) {
        right_ = builderForValue.build();
        onChanged();
      } else {
        rightBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Right input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation right = 2;</code>
     */
    public Builder mergeRight(org.apache.kyuubi.engine.spark.connect.proto.Relation value) {
      if (rightBuilder_ == null) {
        if (right_ != null) {
          right_ =
            org.apache.kyuubi.engine.spark.connect.proto.Relation.newBuilder(right_).mergeFrom(value).buildPartial();
        } else {
          right_ = value;
        }
        onChanged();
      } else {
        rightBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Right input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation right = 2;</code>
     */
    public Builder clearRight() {
      if (rightBuilder_ == null) {
        right_ = null;
        onChanged();
      } else {
        right_ = null;
        rightBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Right input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation right = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder getRightBuilder() {
      
      onChanged();
      return getRightFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Right input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation right = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getRightOrBuilder() {
      if (rightBuilder_ != null) {
        return rightBuilder_.getMessageOrBuilder();
      } else {
        return right_ == null ?
            org.apache.kyuubi.engine.spark.connect.proto.Relation.getDefaultInstance() : right_;
      }
    }
    /**
     * <pre>
     * (Required) Right input relation for a Join.
     * </pre>
     *
     * <code>.spark.connect.Relation right = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder> 
        getRightFieldBuilder() {
      if (rightBuilder_ == null) {
        rightBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Relation, org.apache.kyuubi.engine.spark.connect.proto.Relation.Builder, org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder>(
                getRight(),
                getParentForChildren(),
                isClean());
        right_ = null;
      }
      return rightBuilder_;
    }

    private org.apache.kyuubi.engine.spark.connect.proto.Expression leftAsOf_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> leftAsOfBuilder_;
    /**
     * <pre>
     * (Required) Field to join on in left DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression left_as_of = 3;</code>
     * @return Whether the leftAsOf field is set.
     */
    public boolean hasLeftAsOf() {
      return leftAsOfBuilder_ != null || leftAsOf_ != null;
    }
    /**
     * <pre>
     * (Required) Field to join on in left DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression left_as_of = 3;</code>
     * @return The leftAsOf.
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getLeftAsOf() {
      if (leftAsOfBuilder_ == null) {
        return leftAsOf_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : leftAsOf_;
      } else {
        return leftAsOfBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Field to join on in left DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression left_as_of = 3;</code>
     */
    public Builder setLeftAsOf(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
      if (leftAsOfBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        leftAsOf_ = value;
        onChanged();
      } else {
        leftAsOfBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Field to join on in left DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression left_as_of = 3;</code>
     */
    public Builder setLeftAsOf(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
      if (leftAsOfBuilder_ == null) {
        leftAsOf_ = builderForValue.build();
        onChanged();
      } else {
        leftAsOfBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Field to join on in left DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression left_as_of = 3;</code>
     */
    public Builder mergeLeftAsOf(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
      if (leftAsOfBuilder_ == null) {
        if (leftAsOf_ != null) {
          leftAsOf_ =
            org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(leftAsOf_).mergeFrom(value).buildPartial();
        } else {
          leftAsOf_ = value;
        }
        onChanged();
      } else {
        leftAsOfBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Field to join on in left DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression left_as_of = 3;</code>
     */
    public Builder clearLeftAsOf() {
      if (leftAsOfBuilder_ == null) {
        leftAsOf_ = null;
        onChanged();
      } else {
        leftAsOf_ = null;
        leftAsOfBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Field to join on in left DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression left_as_of = 3;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getLeftAsOfBuilder() {
      
      onChanged();
      return getLeftAsOfFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Field to join on in left DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression left_as_of = 3;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getLeftAsOfOrBuilder() {
      if (leftAsOfBuilder_ != null) {
        return leftAsOfBuilder_.getMessageOrBuilder();
      } else {
        return leftAsOf_ == null ?
            org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : leftAsOf_;
      }
    }
    /**
     * <pre>
     * (Required) Field to join on in left DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression left_as_of = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
        getLeftAsOfFieldBuilder() {
      if (leftAsOfBuilder_ == null) {
        leftAsOfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                getLeftAsOf(),
                getParentForChildren(),
                isClean());
        leftAsOf_ = null;
      }
      return leftAsOfBuilder_;
    }

    private org.apache.kyuubi.engine.spark.connect.proto.Expression rightAsOf_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> rightAsOfBuilder_;
    /**
     * <pre>
     * (Required) Field to join on in right DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression right_as_of = 4;</code>
     * @return Whether the rightAsOf field is set.
     */
    public boolean hasRightAsOf() {
      return rightAsOfBuilder_ != null || rightAsOf_ != null;
    }
    /**
     * <pre>
     * (Required) Field to join on in right DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression right_as_of = 4;</code>
     * @return The rightAsOf.
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getRightAsOf() {
      if (rightAsOfBuilder_ == null) {
        return rightAsOf_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : rightAsOf_;
      } else {
        return rightAsOfBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Required) Field to join on in right DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression right_as_of = 4;</code>
     */
    public Builder setRightAsOf(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
      if (rightAsOfBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rightAsOf_ = value;
        onChanged();
      } else {
        rightAsOfBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Field to join on in right DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression right_as_of = 4;</code>
     */
    public Builder setRightAsOf(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
      if (rightAsOfBuilder_ == null) {
        rightAsOf_ = builderForValue.build();
        onChanged();
      } else {
        rightAsOfBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Field to join on in right DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression right_as_of = 4;</code>
     */
    public Builder mergeRightAsOf(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
      if (rightAsOfBuilder_ == null) {
        if (rightAsOf_ != null) {
          rightAsOf_ =
            org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(rightAsOf_).mergeFrom(value).buildPartial();
        } else {
          rightAsOf_ = value;
        }
        onChanged();
      } else {
        rightAsOfBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Field to join on in right DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression right_as_of = 4;</code>
     */
    public Builder clearRightAsOf() {
      if (rightAsOfBuilder_ == null) {
        rightAsOf_ = null;
        onChanged();
      } else {
        rightAsOf_ = null;
        rightAsOfBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * (Required) Field to join on in right DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression right_as_of = 4;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getRightAsOfBuilder() {
      
      onChanged();
      return getRightAsOfFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Required) Field to join on in right DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression right_as_of = 4;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getRightAsOfOrBuilder() {
      if (rightAsOfBuilder_ != null) {
        return rightAsOfBuilder_.getMessageOrBuilder();
      } else {
        return rightAsOf_ == null ?
            org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : rightAsOf_;
      }
    }
    /**
     * <pre>
     * (Required) Field to join on in right DataFrame
     * </pre>
     *
     * <code>.spark.connect.Expression right_as_of = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
        getRightAsOfFieldBuilder() {
      if (rightAsOfBuilder_ == null) {
        rightAsOfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                getRightAsOf(),
                getParentForChildren(),
                isClean());
        rightAsOf_ = null;
      }
      return rightAsOfBuilder_;
    }

    private org.apache.kyuubi.engine.spark.connect.proto.Expression joinExpr_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> joinExprBuilder_;
    /**
     * <pre>
     * (Optional) The join condition. Could be unset when `using_columns` is utilized.
     * This field does not co-exist with using_columns.
     * </pre>
     *
     * <code>.spark.connect.Expression join_expr = 5;</code>
     * @return Whether the joinExpr field is set.
     */
    public boolean hasJoinExpr() {
      return joinExprBuilder_ != null || joinExpr_ != null;
    }
    /**
     * <pre>
     * (Optional) The join condition. Could be unset when `using_columns` is utilized.
     * This field does not co-exist with using_columns.
     * </pre>
     *
     * <code>.spark.connect.Expression join_expr = 5;</code>
     * @return The joinExpr.
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getJoinExpr() {
      if (joinExprBuilder_ == null) {
        return joinExpr_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : joinExpr_;
      } else {
        return joinExprBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Optional) The join condition. Could be unset when `using_columns` is utilized.
     * This field does not co-exist with using_columns.
     * </pre>
     *
     * <code>.spark.connect.Expression join_expr = 5;</code>
     */
    public Builder setJoinExpr(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
      if (joinExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        joinExpr_ = value;
        onChanged();
      } else {
        joinExprBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Optional) The join condition. Could be unset when `using_columns` is utilized.
     * This field does not co-exist with using_columns.
     * </pre>
     *
     * <code>.spark.connect.Expression join_expr = 5;</code>
     */
    public Builder setJoinExpr(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
      if (joinExprBuilder_ == null) {
        joinExpr_ = builderForValue.build();
        onChanged();
      } else {
        joinExprBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * (Optional) The join condition. Could be unset when `using_columns` is utilized.
     * This field does not co-exist with using_columns.
     * </pre>
     *
     * <code>.spark.connect.Expression join_expr = 5;</code>
     */
    public Builder mergeJoinExpr(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
      if (joinExprBuilder_ == null) {
        if (joinExpr_ != null) {
          joinExpr_ =
            org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(joinExpr_).mergeFrom(value).buildPartial();
        } else {
          joinExpr_ = value;
        }
        onChanged();
      } else {
        joinExprBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Optional) The join condition. Could be unset when `using_columns` is utilized.
     * This field does not co-exist with using_columns.
     * </pre>
     *
     * <code>.spark.connect.Expression join_expr = 5;</code>
     */
    public Builder clearJoinExpr() {
      if (joinExprBuilder_ == null) {
        joinExpr_ = null;
        onChanged();
      } else {
        joinExpr_ = null;
        joinExprBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * (Optional) The join condition. Could be unset when `using_columns` is utilized.
     * This field does not co-exist with using_columns.
     * </pre>
     *
     * <code>.spark.connect.Expression join_expr = 5;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getJoinExprBuilder() {
      
      onChanged();
      return getJoinExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Optional) The join condition. Could be unset when `using_columns` is utilized.
     * This field does not co-exist with using_columns.
     * </pre>
     *
     * <code>.spark.connect.Expression join_expr = 5;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getJoinExprOrBuilder() {
      if (joinExprBuilder_ != null) {
        return joinExprBuilder_.getMessageOrBuilder();
      } else {
        return joinExpr_ == null ?
            org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : joinExpr_;
      }
    }
    /**
     * <pre>
     * (Optional) The join condition. Could be unset when `using_columns` is utilized.
     * This field does not co-exist with using_columns.
     * </pre>
     *
     * <code>.spark.connect.Expression join_expr = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
        getJoinExprFieldBuilder() {
      if (joinExprBuilder_ == null) {
        joinExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                getJoinExpr(),
                getParentForChildren(),
                isClean());
        joinExpr_ = null;
      }
      return joinExprBuilder_;
    }

    private com.google.protobuf.LazyStringList usingColumns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureUsingColumnsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        usingColumns_ = new com.google.protobuf.LazyStringArrayList(usingColumns_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * Optional. using_columns provides a list of columns that should present on both sides of
     * the join inputs that this Join will join on. For example A JOIN B USING col_name is
     * equivalent to A JOIN B on A.col_name = B.col_name.
     * This field does not co-exist with join_condition.
     * </pre>
     *
     * <code>repeated string using_columns = 6;</code>
     * @return A list containing the usingColumns.
     */
    public com.google.protobuf.ProtocolStringList
        getUsingColumnsList() {
      return usingColumns_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Optional. using_columns provides a list of columns that should present on both sides of
     * the join inputs that this Join will join on. For example A JOIN B USING col_name is
     * equivalent to A JOIN B on A.col_name = B.col_name.
     * This field does not co-exist with join_condition.
     * </pre>
     *
     * <code>repeated string using_columns = 6;</code>
     * @return The count of usingColumns.
     */
    public int getUsingColumnsCount() {
      return usingColumns_.size();
    }
    /**
     * <pre>
     * Optional. using_columns provides a list of columns that should present on both sides of
     * the join inputs that this Join will join on. For example A JOIN B USING col_name is
     * equivalent to A JOIN B on A.col_name = B.col_name.
     * This field does not co-exist with join_condition.
     * </pre>
     *
     * <code>repeated string using_columns = 6;</code>
     * @param index The index of the element to return.
     * @return The usingColumns at the given index.
     */
    public java.lang.String getUsingColumns(int index) {
      return usingColumns_.get(index);
    }
    /**
     * <pre>
     * Optional. using_columns provides a list of columns that should present on both sides of
     * the join inputs that this Join will join on. For example A JOIN B USING col_name is
     * equivalent to A JOIN B on A.col_name = B.col_name.
     * This field does not co-exist with join_condition.
     * </pre>
     *
     * <code>repeated string using_columns = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the usingColumns at the given index.
     */
    public com.google.protobuf.ByteString
        getUsingColumnsBytes(int index) {
      return usingColumns_.getByteString(index);
    }
    /**
     * <pre>
     * Optional. using_columns provides a list of columns that should present on both sides of
     * the join inputs that this Join will join on. For example A JOIN B USING col_name is
     * equivalent to A JOIN B on A.col_name = B.col_name.
     * This field does not co-exist with join_condition.
     * </pre>
     *
     * <code>repeated string using_columns = 6;</code>
     * @param index The index to set the value at.
     * @param value The usingColumns to set.
     * @return This builder for chaining.
     */
    public Builder setUsingColumns(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureUsingColumnsIsMutable();
      usingColumns_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. using_columns provides a list of columns that should present on both sides of
     * the join inputs that this Join will join on. For example A JOIN B USING col_name is
     * equivalent to A JOIN B on A.col_name = B.col_name.
     * This field does not co-exist with join_condition.
     * </pre>
     *
     * <code>repeated string using_columns = 6;</code>
     * @param value The usingColumns to add.
     * @return This builder for chaining.
     */
    public Builder addUsingColumns(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureUsingColumnsIsMutable();
      usingColumns_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. using_columns provides a list of columns that should present on both sides of
     * the join inputs that this Join will join on. For example A JOIN B USING col_name is
     * equivalent to A JOIN B on A.col_name = B.col_name.
     * This field does not co-exist with join_condition.
     * </pre>
     *
     * <code>repeated string using_columns = 6;</code>
     * @param values The usingColumns to add.
     * @return This builder for chaining.
     */
    public Builder addAllUsingColumns(
        java.lang.Iterable<java.lang.String> values) {
      ensureUsingColumnsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, usingColumns_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. using_columns provides a list of columns that should present on both sides of
     * the join inputs that this Join will join on. For example A JOIN B USING col_name is
     * equivalent to A JOIN B on A.col_name = B.col_name.
     * This field does not co-exist with join_condition.
     * </pre>
     *
     * <code>repeated string using_columns = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearUsingColumns() {
      usingColumns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. using_columns provides a list of columns that should present on both sides of
     * the join inputs that this Join will join on. For example A JOIN B USING col_name is
     * equivalent to A JOIN B on A.col_name = B.col_name.
     * This field does not co-exist with join_condition.
     * </pre>
     *
     * <code>repeated string using_columns = 6;</code>
     * @param value The bytes of the usingColumns to add.
     * @return This builder for chaining.
     */
    public Builder addUsingColumnsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureUsingColumnsIsMutable();
      usingColumns_.add(value);
      onChanged();
      return this;
    }

    private java.lang.Object joinType_ = "";
    /**
     * <pre>
     * (Required) The join type.
     * </pre>
     *
     * <code>string join_type = 7;</code>
     * @return The joinType.
     */
    public java.lang.String getJoinType() {
      java.lang.Object ref = joinType_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        joinType_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * (Required) The join type.
     * </pre>
     *
     * <code>string join_type = 7;</code>
     * @return The bytes for joinType.
     */
    public com.google.protobuf.ByteString
        getJoinTypeBytes() {
      java.lang.Object ref = joinType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        joinType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Required) The join type.
     * </pre>
     *
     * <code>string join_type = 7;</code>
     * @param value The joinType to set.
     * @return This builder for chaining.
     */
    public Builder setJoinType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      joinType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The join type.
     * </pre>
     *
     * <code>string join_type = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearJoinType() {
      
      joinType_ = getDefaultInstance().getJoinType();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) The join type.
     * </pre>
     *
     * <code>string join_type = 7;</code>
     * @param value The bytes for joinType to set.
     * @return This builder for chaining.
     */
    public Builder setJoinTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      joinType_ = value;
      onChanged();
      return this;
    }

    private org.apache.kyuubi.engine.spark.connect.proto.Expression tolerance_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> toleranceBuilder_;
    /**
     * <pre>
     * (Optional) The asof tolerance within this range.
     * </pre>
     *
     * <code>.spark.connect.Expression tolerance = 8;</code>
     * @return Whether the tolerance field is set.
     */
    public boolean hasTolerance() {
      return toleranceBuilder_ != null || tolerance_ != null;
    }
    /**
     * <pre>
     * (Optional) The asof tolerance within this range.
     * </pre>
     *
     * <code>.spark.connect.Expression tolerance = 8;</code>
     * @return The tolerance.
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getTolerance() {
      if (toleranceBuilder_ == null) {
        return tolerance_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : tolerance_;
      } else {
        return toleranceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * (Optional) The asof tolerance within this range.
     * </pre>
     *
     * <code>.spark.connect.Expression tolerance = 8;</code>
     */
    public Builder setTolerance(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
      if (toleranceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tolerance_ = value;
        onChanged();
      } else {
        toleranceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Optional) The asof tolerance within this range.
     * </pre>
     *
     * <code>.spark.connect.Expression tolerance = 8;</code>
     */
    public Builder setTolerance(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
      if (toleranceBuilder_ == null) {
        tolerance_ = builderForValue.build();
        onChanged();
      } else {
        toleranceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * (Optional) The asof tolerance within this range.
     * </pre>
     *
     * <code>.spark.connect.Expression tolerance = 8;</code>
     */
    public Builder mergeTolerance(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
      if (toleranceBuilder_ == null) {
        if (tolerance_ != null) {
          tolerance_ =
            org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(tolerance_).mergeFrom(value).buildPartial();
        } else {
          tolerance_ = value;
        }
        onChanged();
      } else {
        toleranceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * (Optional) The asof tolerance within this range.
     * </pre>
     *
     * <code>.spark.connect.Expression tolerance = 8;</code>
     */
    public Builder clearTolerance() {
      if (toleranceBuilder_ == null) {
        tolerance_ = null;
        onChanged();
      } else {
        tolerance_ = null;
        toleranceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * (Optional) The asof tolerance within this range.
     * </pre>
     *
     * <code>.spark.connect.Expression tolerance = 8;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getToleranceBuilder() {
      
      onChanged();
      return getToleranceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * (Optional) The asof tolerance within this range.
     * </pre>
     *
     * <code>.spark.connect.Expression tolerance = 8;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getToleranceOrBuilder() {
      if (toleranceBuilder_ != null) {
        return toleranceBuilder_.getMessageOrBuilder();
      } else {
        return tolerance_ == null ?
            org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : tolerance_;
      }
    }
    /**
     * <pre>
     * (Optional) The asof tolerance within this range.
     * </pre>
     *
     * <code>.spark.connect.Expression tolerance = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
        getToleranceFieldBuilder() {
      if (toleranceBuilder_ == null) {
        toleranceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                getTolerance(),
                getParentForChildren(),
                isClean());
        tolerance_ = null;
      }
      return toleranceBuilder_;
    }

    private boolean allowExactMatches_ ;
    /**
     * <pre>
     * (Required) Whether allow matching with the same value or not.
     * </pre>
     *
     * <code>bool allow_exact_matches = 9;</code>
     * @return The allowExactMatches.
     */
    @java.lang.Override
    public boolean getAllowExactMatches() {
      return allowExactMatches_;
    }
    /**
     * <pre>
     * (Required) Whether allow matching with the same value or not.
     * </pre>
     *
     * <code>bool allow_exact_matches = 9;</code>
     * @param value The allowExactMatches to set.
     * @return This builder for chaining.
     */
    public Builder setAllowExactMatches(boolean value) {
      
      allowExactMatches_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Whether allow matching with the same value or not.
     * </pre>
     *
     * <code>bool allow_exact_matches = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearAllowExactMatches() {
      
      allowExactMatches_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object direction_ = "";
    /**
     * <pre>
     * (Required) Whether to search for prior, subsequent, or closest matches.
     * </pre>
     *
     * <code>string direction = 10;</code>
     * @return The direction.
     */
    public java.lang.String getDirection() {
      java.lang.Object ref = direction_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        direction_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * (Required) Whether to search for prior, subsequent, or closest matches.
     * </pre>
     *
     * <code>string direction = 10;</code>
     * @return The bytes for direction.
     */
    public com.google.protobuf.ByteString
        getDirectionBytes() {
      java.lang.Object ref = direction_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        direction_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (Required) Whether to search for prior, subsequent, or closest matches.
     * </pre>
     *
     * <code>string direction = 10;</code>
     * @param value The direction to set.
     * @return This builder for chaining.
     */
    public Builder setDirection(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      direction_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Whether to search for prior, subsequent, or closest matches.
     * </pre>
     *
     * <code>string direction = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearDirection() {
      
      direction_ = getDefaultInstance().getDirection();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (Required) Whether to search for prior, subsequent, or closest matches.
     * </pre>
     *
     * <code>string direction = 10;</code>
     * @param value The bytes for direction to set.
     * @return This builder for chaining.
     */
    public Builder setDirectionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      direction_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.AsOfJoin)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.AsOfJoin)
  private static final org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin();
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AsOfJoin>
      PARSER = new com.google.protobuf.AbstractParser<AsOfJoin>() {
    @java.lang.Override
    public AsOfJoin parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AsOfJoin> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AsOfJoin> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.AsOfJoin getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

