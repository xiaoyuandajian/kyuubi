// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.proto;

public interface NADropOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.NADrop)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   * @return The input.
   */
  org.apache.kyuubi.engine.spark.connect.proto.Relation getInput();
  /**
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  org.apache.kyuubi.engine.spark.connect.proto.RelationOrBuilder getInputOrBuilder();

  /**
   * <pre>
   * (Optional) Optional list of column names to consider.
   * When it is empty, all the columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @return A list containing the cols.
   */
  java.util.List<java.lang.String>
      getColsList();
  /**
   * <pre>
   * (Optional) Optional list of column names to consider.
   * When it is empty, all the columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @return The count of cols.
   */
  int getColsCount();
  /**
   * <pre>
   * (Optional) Optional list of column names to consider.
   * When it is empty, all the columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @param index The index of the element to return.
   * @return The cols at the given index.
   */
  java.lang.String getCols(int index);
  /**
   * <pre>
   * (Optional) Optional list of column names to consider.
   * When it is empty, all the columns in the input relation will be considered.
   * </pre>
   *
   * <code>repeated string cols = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the cols at the given index.
   */
  com.google.protobuf.ByteString
      getColsBytes(int index);

  /**
   * <pre>
   * (Optional) The minimum number of non-null and non-NaN values required to keep.
   * When not set, it is equivalent to the number of considered columns, which means
   * a row will be kept only if all columns are non-null.
   * 'how' options ('all', 'any') can be easily converted to this field:
   *   - 'all' -&gt; set 'min_non_nulls' 1;
   *   - 'any' -&gt; keep 'min_non_nulls' unset;
   * </pre>
   *
   * <code>optional int32 min_non_nulls = 3;</code>
   * @return Whether the minNonNulls field is set.
   */
  boolean hasMinNonNulls();
  /**
   * <pre>
   * (Optional) The minimum number of non-null and non-NaN values required to keep.
   * When not set, it is equivalent to the number of considered columns, which means
   * a row will be kept only if all columns are non-null.
   * 'how' options ('all', 'any') can be easily converted to this field:
   *   - 'all' -&gt; set 'min_non_nulls' 1;
   *   - 'any' -&gt; keep 'min_non_nulls' unset;
   * </pre>
   *
   * <code>optional int32 min_non_nulls = 3;</code>
   * @return The minNonNulls.
   */
  int getMinNonNulls();
}
