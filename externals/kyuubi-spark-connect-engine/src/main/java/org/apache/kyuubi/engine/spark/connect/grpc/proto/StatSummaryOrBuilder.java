// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

public interface StatSummaryOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:spark.connect.StatSummary)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   *
   * @return The input.
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Relation getInput();
  /**
   *
   *
   * <pre>
   * (Required) The input relation.
   * </pre>
   *
   * <code>.spark.connect.Relation input = 1;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.RelationOrBuilder getInputOrBuilder();

  /**
   *
   *
   * <pre>
   * (Optional) Statistics from to be computed.
   * Available statistics are:
   *  count
   *  mean
   *  stddev
   *  min
   *  max
   *  arbitrary approximate percentiles specified as a percentage (e.g. 75%)
   *  count_distinct
   *  approx_count_distinct
   * If no statistics are given, this function computes 'count', 'mean', 'stddev', 'min',
   * 'approximate quartiles' (percentiles at 25%, 50%, and 75%), and 'max'.
   * </pre>
   *
   * <code>repeated string statistics = 2;</code>
   *
   * @return A list containing the statistics.
   */
  java.util.List<java.lang.String> getStatisticsList();
  /**
   *
   *
   * <pre>
   * (Optional) Statistics from to be computed.
   * Available statistics are:
   *  count
   *  mean
   *  stddev
   *  min
   *  max
   *  arbitrary approximate percentiles specified as a percentage (e.g. 75%)
   *  count_distinct
   *  approx_count_distinct
   * If no statistics are given, this function computes 'count', 'mean', 'stddev', 'min',
   * 'approximate quartiles' (percentiles at 25%, 50%, and 75%), and 'max'.
   * </pre>
   *
   * <code>repeated string statistics = 2;</code>
   *
   * @return The count of statistics.
   */
  int getStatisticsCount();
  /**
   *
   *
   * <pre>
   * (Optional) Statistics from to be computed.
   * Available statistics are:
   *  count
   *  mean
   *  stddev
   *  min
   *  max
   *  arbitrary approximate percentiles specified as a percentage (e.g. 75%)
   *  count_distinct
   *  approx_count_distinct
   * If no statistics are given, this function computes 'count', 'mean', 'stddev', 'min',
   * 'approximate quartiles' (percentiles at 25%, 50%, and 75%), and 'max'.
   * </pre>
   *
   * <code>repeated string statistics = 2;</code>
   *
   * @param index The index of the element to return.
   * @return The statistics at the given index.
   */
  java.lang.String getStatistics(int index);
  /**
   *
   *
   * <pre>
   * (Optional) Statistics from to be computed.
   * Available statistics are:
   *  count
   *  mean
   *  stddev
   *  min
   *  max
   *  arbitrary approximate percentiles specified as a percentage (e.g. 75%)
   *  count_distinct
   *  approx_count_distinct
   * If no statistics are given, this function computes 'count', 'mean', 'stddev', 'min',
   * 'approximate quartiles' (percentiles at 25%, 50%, and 75%), and 'max'.
   * </pre>
   *
   * <code>repeated string statistics = 2;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the statistics at the given index.
   */
  com.google.protobuf.ByteString getStatisticsBytes(int index);
}
