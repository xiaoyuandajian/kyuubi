// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/base.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

public interface ArtifactStatusesResponseOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:spark.connect.ArtifactStatusesResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Session id in which the ArtifactStatus was running.
   * </pre>
   *
   * <code>string session_id = 2;</code>
   *
   * @return The sessionId.
   */
  java.lang.String getSessionId();
  /**
   *
   *
   * <pre>
   * Session id in which the ArtifactStatus was running.
   * </pre>
   *
   * <code>string session_id = 2;</code>
   *
   * @return The bytes for sessionId.
   */
  com.google.protobuf.ByteString getSessionIdBytes();

  /**
   *
   *
   * <pre>
   * Server-side generated idempotency key that the client can use to assert that the server side
   * session has not changed.
   * </pre>
   *
   * <code>string server_side_session_id = 3;</code>
   *
   * @return The serverSideSessionId.
   */
  java.lang.String getServerSideSessionId();
  /**
   *
   *
   * <pre>
   * Server-side generated idempotency key that the client can use to assert that the server side
   * session has not changed.
   * </pre>
   *
   * <code>string server_side_session_id = 3;</code>
   *
   * @return The bytes for serverSideSessionId.
   */
  com.google.protobuf.ByteString getServerSideSessionIdBytes();

  /**
   *
   *
   * <pre>
   * A map of artifact names to their statuses.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;
   * </code>
   */
  int getStatusesCount();
  /**
   *
   *
   * <pre>
   * A map of artifact names to their statuses.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;
   * </code>
   */
  boolean containsStatuses(java.lang.String key);
  /** Use {@link #getStatusesMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<
          java.lang.String,
          org.apache.kyuubi.engine.spark.connect.grpc.proto.ArtifactStatusesResponse.ArtifactStatus>
      getStatuses();
  /**
   *
   *
   * <pre>
   * A map of artifact names to their statuses.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;
   * </code>
   */
  java.util.Map<
          java.lang.String,
          org.apache.kyuubi.engine.spark.connect.grpc.proto.ArtifactStatusesResponse.ArtifactStatus>
      getStatusesMap();
  /**
   *
   *
   * <pre>
   * A map of artifact names to their statuses.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;
   * </code>
   */

  /* nullable */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.ArtifactStatusesResponse.ArtifactStatus
      getStatusesOrDefault(
          java.lang.String key,
          /* nullable */
          org.apache.kyuubi.engine.spark.connect.grpc.proto.ArtifactStatusesResponse.ArtifactStatus
              defaultValue);
  /**
   *
   *
   * <pre>
   * A map of artifact names to their statuses.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.ArtifactStatusesResponse.ArtifactStatus&gt; statuses = 1;
   * </code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.ArtifactStatusesResponse.ArtifactStatus
      getStatusesOrThrow(java.lang.String key);
}
