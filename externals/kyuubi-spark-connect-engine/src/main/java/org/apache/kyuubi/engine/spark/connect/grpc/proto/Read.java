// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

/**
 *
 *
 * <pre>
 * Relation that reads from a file / table or other data source. Does not have additional
 * inputs.
 * </pre>
 *
 * Protobuf type {@code spark.connect.Read}
 */
public final class Read extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:spark.connect.Read)
    ReadOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use Read.newBuilder() to construct.
  private Read(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private Read() {}

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new Read();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
        .internal_static_spark_connect_Read_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
        .internal_static_spark_connect_Read_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.class,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.Builder.class);
  }

  public interface NamedTableOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Read.NamedTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * (Required) Unparsed identifier for the table.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     *
     * @return The unparsedIdentifier.
     */
    java.lang.String getUnparsedIdentifier();
    /**
     *
     *
     * <pre>
     * (Required) Unparsed identifier for the table.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     *
     * @return The bytes for unparsedIdentifier.
     */
    com.google.protobuf.ByteString getUnparsedIdentifierBytes();

    /**
     *
     *
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    int getOptionsCount();
    /**
     *
     *
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    boolean containsOptions(java.lang.String key);
    /** Use {@link #getOptionsMap()} instead. */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String> getOptions();
    /**
     *
     *
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    java.util.Map<java.lang.String, java.lang.String> getOptionsMap();
    /**
     *
     *
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */

    /* nullable */
    java.lang.String getOptionsOrDefault(
        java.lang.String key,
        /* nullable */
        java.lang.String defaultValue);
    /**
     *
     *
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    java.lang.String getOptionsOrThrow(java.lang.String key);
  }
  /** Protobuf type {@code spark.connect.Read.NamedTable} */
  public static final class NamedTable extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:spark.connect.Read.NamedTable)
      NamedTableOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use NamedTable.newBuilder() to construct.
    private NamedTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private NamedTable() {
      unparsedIdentifier_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new NamedTable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_Read_NamedTable_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(int number) {
      switch (number) {
        case 2:
          return internalGetOptions();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_Read_NamedTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.Builder.class);
    }

    public static final int UNPARSED_IDENTIFIER_FIELD_NUMBER = 1;
    private volatile java.lang.Object unparsedIdentifier_;
    /**
     *
     *
     * <pre>
     * (Required) Unparsed identifier for the table.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     *
     * @return The unparsedIdentifier.
     */
    @java.lang.Override
    public java.lang.String getUnparsedIdentifier() {
      java.lang.Object ref = unparsedIdentifier_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        unparsedIdentifier_ = s;
        return s;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) Unparsed identifier for the table.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     *
     * @return The bytes for unparsedIdentifier.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getUnparsedIdentifierBytes() {
      java.lang.Object ref = unparsedIdentifier_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        unparsedIdentifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPTIONS_FIELD_NUMBER = 2;

    private static final class OptionsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<java.lang.String, java.lang.String> defaultEntry =
          com.google.protobuf.MapEntry.<java.lang.String, java.lang.String>newDefaultInstance(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
                  .internal_static_spark_connect_Read_NamedTable_OptionsEntry_descriptor,
              com.google.protobuf.WireFormat.FieldType.STRING,
              "",
              com.google.protobuf.WireFormat.FieldType.STRING,
              "");
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> options_;

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> internalGetOptions() {
      if (options_ == null) {
        return com.google.protobuf.MapField.emptyMapField(OptionsDefaultEntryHolder.defaultEntry);
      }
      return options_;
    }

    public int getOptionsCount() {
      return internalGetOptions().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    @java.lang.Override
    public boolean containsOptions(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetOptions().getMap().containsKey(key);
    }
    /** Use {@link #getOptionsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getOptions() {
      return getOptionsMap();
    }
    /**
     *
     *
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getOptionsMap() {
      return internalGetOptions().getMap();
    }
    /**
     *
     *
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    @java.lang.Override
    public java.lang.String getOptionsOrDefault(
        java.lang.String key, java.lang.String defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Options for the named table. The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 2;</code>
     */
    @java.lang.Override
    public java.lang.String getOptionsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(unparsedIdentifier_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, unparsedIdentifier_);
      }
      com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
          output, internalGetOptions(), OptionsDefaultEntryHolder.defaultEntry, 2);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(unparsedIdentifier_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, unparsedIdentifier_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry :
          internalGetOptions().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String> options__ =
            OptionsDefaultEntryHolder.defaultEntry
                .newBuilderForType()
                .setKey(entry.getKey())
                .setValue(entry.getValue())
                .build();
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, options__);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable other =
          (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) obj;

      if (!getUnparsedIdentifier().equals(other.getUnparsedIdentifier())) return false;
      if (!internalGetOptions().equals(other.internalGetOptions())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UNPARSED_IDENTIFIER_FIELD_NUMBER;
      hash = (53 * hash) + getUnparsedIdentifier().hashCode();
      if (!internalGetOptions().getMap().isEmpty()) {
        hash = (37 * hash) + OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetOptions().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable parseFrom(
        byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
        parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
        parseDelimitedFrom(
            java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /** Protobuf type {@code spark.connect.Read.NamedTable} */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Read.NamedTable)
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
            .internal_static_spark_connect_Read_NamedTable_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(int number) {
        switch (number) {
          case 2:
            return internalGetOptions();
          default:
            throw new RuntimeException("Invalid map field number: " + number);
        }
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(int number) {
        switch (number) {
          case 2:
            return internalGetMutableOptions();
          default:
            throw new RuntimeException("Invalid map field number: " + number);
        }
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
            .internal_static_spark_connect_Read_NamedTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.class,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.Builder.class);
      }

      // Construct using
      // org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        unparsedIdentifier_ = "";

        internalGetMutableOptions().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
            .internal_static_spark_connect_Read_NamedTable_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
          getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
            .getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable build() {
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable buildPartial() {
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable result =
            new org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable(this);
        int from_bitField0_ = bitField0_;
        result.unparsedIdentifier_ = unparsedIdentifier_;
        result.options_ = internalGetOptions();
        result.options_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) {
          return mergeFrom(
              (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(
          org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable other) {
        if (other
            == org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
                .getDefaultInstance()) return this;
        if (!other.getUnparsedIdentifier().isEmpty()) {
          unparsedIdentifier_ = other.unparsedIdentifier_;
          onChanged();
        }
        internalGetMutableOptions().mergeFrom(other.internalGetOptions());
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  unparsedIdentifier_ = input.readStringRequireUtf8();

                  break;
                } // case 10
              case 18:
                {
                  com.google.protobuf.MapEntry<java.lang.String, java.lang.String> options__ =
                      input.readMessage(
                          OptionsDefaultEntryHolder.defaultEntry.getParserForType(),
                          extensionRegistry);
                  internalGetMutableOptions()
                      .getMutableMap()
                      .put(options__.getKey(), options__.getValue());
                  break;
                } // case 18
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private java.lang.Object unparsedIdentifier_ = "";
      /**
       *
       *
       * <pre>
       * (Required) Unparsed identifier for the table.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       *
       * @return The unparsedIdentifier.
       */
      public java.lang.String getUnparsedIdentifier() {
        java.lang.Object ref = unparsedIdentifier_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          unparsedIdentifier_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * (Required) Unparsed identifier for the table.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       *
       * @return The bytes for unparsedIdentifier.
       */
      public com.google.protobuf.ByteString getUnparsedIdentifierBytes() {
        java.lang.Object ref = unparsedIdentifier_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
          unparsedIdentifier_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * (Required) Unparsed identifier for the table.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       *
       * @param value The unparsedIdentifier to set.
       * @return This builder for chaining.
       */
      public Builder setUnparsedIdentifier(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }

        unparsedIdentifier_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Required) Unparsed identifier for the table.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearUnparsedIdentifier() {

        unparsedIdentifier_ = getDefaultInstance().getUnparsedIdentifier();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Required) Unparsed identifier for the table.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       *
       * @param value The bytes for unparsedIdentifier to set.
       * @return This builder for chaining.
       */
      public Builder setUnparsedIdentifierBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);

        unparsedIdentifier_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<java.lang.String, java.lang.String> options_;

      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetOptions() {
        if (options_ == null) {
          return com.google.protobuf.MapField.emptyMapField(OptionsDefaultEntryHolder.defaultEntry);
        }
        return options_;
      }

      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetMutableOptions() {
        onChanged();
        ;
        if (options_ == null) {
          options_ =
              com.google.protobuf.MapField.newMapField(OptionsDefaultEntryHolder.defaultEntry);
        }
        if (!options_.isMutable()) {
          options_ = options_.copy();
        }
        return options_;
      }

      public int getOptionsCount() {
        return internalGetOptions().getMap().size();
      }
      /**
       *
       *
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      @java.lang.Override
      public boolean containsOptions(java.lang.String key) {
        if (key == null) {
          throw new NullPointerException("map key");
        }
        return internalGetOptions().getMap().containsKey(key);
      }
      /** Use {@link #getOptionsMap()} instead. */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getOptions() {
        return getOptionsMap();
      }
      /**
       *
       *
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getOptionsMap() {
        return internalGetOptions().getMap();
      }
      /**
       *
       *
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      @java.lang.Override
      public java.lang.String getOptionsOrDefault(
          java.lang.String key, java.lang.String defaultValue) {
        if (key == null) {
          throw new NullPointerException("map key");
        }
        java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       *
       *
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      @java.lang.Override
      public java.lang.String getOptionsOrThrow(java.lang.String key) {
        if (key == null) {
          throw new NullPointerException("map key");
        }
        java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearOptions() {
        internalGetMutableOptions().getMutableMap().clear();
        return this;
      }
      /**
       *
       *
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      public Builder removeOptions(java.lang.String key) {
        if (key == null) {
          throw new NullPointerException("map key");
        }
        internalGetMutableOptions().getMutableMap().remove(key);
        return this;
      }
      /** Use alternate mutation accessors instead. */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMutableOptions() {
        return internalGetMutableOptions().getMutableMap();
      }
      /**
       *
       *
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      public Builder putOptions(java.lang.String key, java.lang.String value) {
        if (key == null) {
          throw new NullPointerException("map key");
        }
        if (value == null) {
          throw new NullPointerException("map value");
        }

        internalGetMutableOptions().getMutableMap().put(key, value);
        return this;
      }
      /**
       *
       *
       * <pre>
       * Options for the named table. The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 2;</code>
       */
      public Builder putAllOptions(java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableOptions().getMutableMap().putAll(values);
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:spark.connect.Read.NamedTable)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Read.NamedTable)
    private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
        DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable();
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
        getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NamedTable> PARSER =
        new com.google.protobuf.AbstractParser<NamedTable>() {
          @java.lang.Override
          public NamedTable parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<NamedTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NamedTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
        getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface DataSourceOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Read.DataSource)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     *
     * @return Whether the format field is set.
     */
    boolean hasFormat();
    /**
     *
     *
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     *
     * @return The format.
     */
    java.lang.String getFormat();
    /**
     *
     *
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     *
     * @return The bytes for format.
     */
    com.google.protobuf.ByteString getFormatBytes();

    /**
     *
     *
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     *
     * @return Whether the schema field is set.
     */
    boolean hasSchema();
    /**
     *
     *
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     *
     * @return The schema.
     */
    java.lang.String getSchema();
    /**
     *
     *
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     *
     * @return The bytes for schema.
     */
    com.google.protobuf.ByteString getSchemaBytes();

    /**
     *
     *
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    int getOptionsCount();
    /**
     *
     *
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    boolean containsOptions(java.lang.String key);
    /** Use {@link #getOptionsMap()} instead. */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String> getOptions();
    /**
     *
     *
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    java.util.Map<java.lang.String, java.lang.String> getOptionsMap();
    /**
     *
     *
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */

    /* nullable */
    java.lang.String getOptionsOrDefault(
        java.lang.String key,
        /* nullable */
        java.lang.String defaultValue);
    /**
     *
     *
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    java.lang.String getOptionsOrThrow(java.lang.String key);

    /**
     *
     *
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     *
     * @return A list containing the paths.
     */
    java.util.List<java.lang.String> getPathsList();
    /**
     *
     *
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     *
     * @return The count of paths.
     */
    int getPathsCount();
    /**
     *
     *
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     *
     * @param index The index of the element to return.
     * @return The paths at the given index.
     */
    java.lang.String getPaths(int index);
    /**
     *
     *
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     *
     * @param index The index of the value to return.
     * @return The bytes of the paths at the given index.
     */
    com.google.protobuf.ByteString getPathsBytes(int index);

    /**
     *
     *
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     *
     * @return A list containing the predicates.
     */
    java.util.List<java.lang.String> getPredicatesList();
    /**
     *
     *
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     *
     * @return The count of predicates.
     */
    int getPredicatesCount();
    /**
     *
     *
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     *
     * @param index The index of the element to return.
     * @return The predicates at the given index.
     */
    java.lang.String getPredicates(int index);
    /**
     *
     *
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     *
     * @param index The index of the value to return.
     * @return The bytes of the predicates at the given index.
     */
    com.google.protobuf.ByteString getPredicatesBytes(int index);
  }
  /** Protobuf type {@code spark.connect.Read.DataSource} */
  public static final class DataSource extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:spark.connect.Read.DataSource)
      DataSourceOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use DataSource.newBuilder() to construct.
    private DataSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private DataSource() {
      format_ = "";
      schema_ = "";
      paths_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      predicates_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new DataSource();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_Read_DataSource_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(int number) {
      switch (number) {
        case 3:
          return internalGetOptions();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_Read_DataSource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.Builder.class);
    }

    private int bitField0_;
    public static final int FORMAT_FIELD_NUMBER = 1;
    private volatile java.lang.Object format_;
    /**
     *
     *
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     *
     * @return Whether the format field is set.
     */
    @java.lang.Override
    public boolean hasFormat() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     *
     * @return The format.
     */
    @java.lang.Override
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
     * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
     * </pre>
     *
     * <code>optional string format = 1;</code>
     *
     * @return The bytes for format.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCHEMA_FIELD_NUMBER = 2;
    private volatile java.lang.Object schema_;
    /**
     *
     *
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     *
     * @return Whether the schema field is set.
     */
    @java.lang.Override
    public boolean hasSchema() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     *
     * @return The schema.
     */
    @java.lang.Override
    public java.lang.String getSchema() {
      java.lang.Object ref = schema_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        schema_ = s;
        return s;
      }
    }
    /**
     *
     *
     * <pre>
     * (Optional) If not set, Spark will infer the schema.
     * This schema string should be either DDL-formatted or JSON-formatted.
     * </pre>
     *
     * <code>optional string schema = 2;</code>
     *
     * @return The bytes for schema.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSchemaBytes() {
      java.lang.Object ref = schema_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        schema_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPTIONS_FIELD_NUMBER = 3;

    private static final class OptionsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<java.lang.String, java.lang.String> defaultEntry =
          com.google.protobuf.MapEntry.<java.lang.String, java.lang.String>newDefaultInstance(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
                  .internal_static_spark_connect_Read_DataSource_OptionsEntry_descriptor,
              com.google.protobuf.WireFormat.FieldType.STRING,
              "",
              com.google.protobuf.WireFormat.FieldType.STRING,
              "");
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> options_;

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> internalGetOptions() {
      if (options_ == null) {
        return com.google.protobuf.MapField.emptyMapField(OptionsDefaultEntryHolder.defaultEntry);
      }
      return options_;
    }

    public int getOptionsCount() {
      return internalGetOptions().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @java.lang.Override
    public boolean containsOptions(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetOptions().getMap().containsKey(key);
    }
    /** Use {@link #getOptionsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getOptions() {
      return getOptionsMap();
    }
    /**
     *
     *
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getOptionsMap() {
      return internalGetOptions().getMap();
    }
    /**
     *
     *
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @java.lang.Override
    public java.lang.String getOptionsOrDefault(
        java.lang.String key, java.lang.String defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Options for the data source. The context of this map varies based on the
     * data source format. This options could be empty for valid data source format.
     * The map key is case insensitive.
     * </pre>
     *
     * <code>map&lt;string, string&gt; options = 3;</code>
     */
    @java.lang.Override
    public java.lang.String getOptionsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int PATHS_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList paths_;
    /**
     *
     *
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     *
     * @return A list containing the paths.
     */
    public com.google.protobuf.ProtocolStringList getPathsList() {
      return paths_;
    }
    /**
     *
     *
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     *
     * @return The count of paths.
     */
    public int getPathsCount() {
      return paths_.size();
    }
    /**
     *
     *
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     *
     * @param index The index of the element to return.
     * @return The paths at the given index.
     */
    public java.lang.String getPaths(int index) {
      return paths_.get(index);
    }
    /**
     *
     *
     * <pre>
     * (Optional) A list of path for file-system backed data sources.
     * </pre>
     *
     * <code>repeated string paths = 4;</code>
     *
     * @param index The index of the value to return.
     * @return The bytes of the paths at the given index.
     */
    public com.google.protobuf.ByteString getPathsBytes(int index) {
      return paths_.getByteString(index);
    }

    public static final int PREDICATES_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList predicates_;
    /**
     *
     *
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     *
     * @return A list containing the predicates.
     */
    public com.google.protobuf.ProtocolStringList getPredicatesList() {
      return predicates_;
    }
    /**
     *
     *
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     *
     * @return The count of predicates.
     */
    public int getPredicatesCount() {
      return predicates_.size();
    }
    /**
     *
     *
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     *
     * @param index The index of the element to return.
     * @return The predicates at the given index.
     */
    public java.lang.String getPredicates(int index) {
      return predicates_.get(index);
    }
    /**
     *
     *
     * <pre>
     * (Optional) Condition in the where clause for each partition.
     * This is only supported by the JDBC data source.
     * </pre>
     *
     * <code>repeated string predicates = 5;</code>
     *
     * @param index The index of the value to return.
     * @return The bytes of the predicates at the given index.
     */
    public com.google.protobuf.ByteString getPredicatesBytes(int index) {
      return predicates_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, format_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, schema_);
      }
      com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
          output, internalGetOptions(), OptionsDefaultEntryHolder.defaultEntry, 3);
      for (int i = 0; i < paths_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, paths_.getRaw(i));
      }
      for (int i = 0; i < predicates_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, predicates_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, format_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, schema_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry :
          internalGetOptions().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String> options__ =
            OptionsDefaultEntryHolder.defaultEntry
                .newBuilderForType()
                .setKey(entry.getKey())
                .setValue(entry.getValue())
                .build();
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, options__);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < paths_.size(); i++) {
          dataSize += computeStringSizeNoTag(paths_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getPathsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < predicates_.size(); i++) {
          dataSize += computeStringSizeNoTag(predicates_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getPredicatesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource other =
          (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) obj;

      if (hasFormat() != other.hasFormat()) return false;
      if (hasFormat()) {
        if (!getFormat().equals(other.getFormat())) return false;
      }
      if (hasSchema() != other.hasSchema()) return false;
      if (hasSchema()) {
        if (!getSchema().equals(other.getSchema())) return false;
      }
      if (!internalGetOptions().equals(other.internalGetOptions())) return false;
      if (!getPathsList().equals(other.getPathsList())) return false;
      if (!getPredicatesList().equals(other.getPredicatesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFormat()) {
        hash = (37 * hash) + FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + getFormat().hashCode();
      }
      if (hasSchema()) {
        hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
        hash = (53 * hash) + getSchema().hashCode();
      }
      if (!internalGetOptions().getMap().isEmpty()) {
        hash = (37 * hash) + OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetOptions().hashCode();
      }
      if (getPathsCount() > 0) {
        hash = (37 * hash) + PATHS_FIELD_NUMBER;
        hash = (53 * hash) + getPathsList().hashCode();
      }
      if (getPredicatesCount() > 0) {
        hash = (37 * hash) + PREDICATES_FIELD_NUMBER;
        hash = (53 * hash) + getPredicatesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource parseFrom(
        byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
        parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
        parseDelimitedFrom(
            java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /** Protobuf type {@code spark.connect.Read.DataSource} */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Read.DataSource)
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSourceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
            .internal_static_spark_connect_Read_DataSource_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(int number) {
        switch (number) {
          case 3:
            return internalGetOptions();
          default:
            throw new RuntimeException("Invalid map field number: " + number);
        }
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(int number) {
        switch (number) {
          case 3:
            return internalGetMutableOptions();
          default:
            throw new RuntimeException("Invalid map field number: " + number);
        }
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
            .internal_static_spark_connect_Read_DataSource_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.class,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.Builder.class);
      }

      // Construct using
      // org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        format_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        schema_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        internalGetMutableOptions().clear();
        paths_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        predicates_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
            .internal_static_spark_connect_Read_DataSource_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
          getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
            .getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource build() {
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource buildPartial() {
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource result =
            new org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.format_ = format_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.schema_ = schema_;
        result.options_ = internalGetOptions();
        result.options_.makeImmutable();
        if (((bitField0_ & 0x00000008) != 0)) {
          paths_ = paths_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.paths_ = paths_;
        if (((bitField0_ & 0x00000010) != 0)) {
          predicates_ = predicates_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.predicates_ = predicates_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) {
          return mergeFrom(
              (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(
          org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource other) {
        if (other
            == org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
                .getDefaultInstance()) return this;
        if (other.hasFormat()) {
          bitField0_ |= 0x00000001;
          format_ = other.format_;
          onChanged();
        }
        if (other.hasSchema()) {
          bitField0_ |= 0x00000002;
          schema_ = other.schema_;
          onChanged();
        }
        internalGetMutableOptions().mergeFrom(other.internalGetOptions());
        if (!other.paths_.isEmpty()) {
          if (paths_.isEmpty()) {
            paths_ = other.paths_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensurePathsIsMutable();
            paths_.addAll(other.paths_);
          }
          onChanged();
        }
        if (!other.predicates_.isEmpty()) {
          if (predicates_.isEmpty()) {
            predicates_ = other.predicates_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensurePredicatesIsMutable();
            predicates_.addAll(other.predicates_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  format_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
              case 18:
                {
                  schema_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
              case 26:
                {
                  com.google.protobuf.MapEntry<java.lang.String, java.lang.String> options__ =
                      input.readMessage(
                          OptionsDefaultEntryHolder.defaultEntry.getParserForType(),
                          extensionRegistry);
                  internalGetMutableOptions()
                      .getMutableMap()
                      .put(options__.getKey(), options__.getValue());
                  break;
                } // case 26
              case 34:
                {
                  java.lang.String s = input.readStringRequireUtf8();
                  ensurePathsIsMutable();
                  paths_.add(s);
                  break;
                } // case 34
              case 42:
                {
                  java.lang.String s = input.readStringRequireUtf8();
                  ensurePredicatesIsMutable();
                  predicates_.add(s);
                  break;
                } // case 42
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private java.lang.Object format_ = "";
      /**
       *
       *
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       *
       * @return Whether the format field is set.
       */
      public boolean hasFormat() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       *
       *
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       *
       * @return The format.
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       *
       * @return The bytes for format.
       */
      public com.google.protobuf.ByteString getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       *
       * @param value The format to set.
       * @return This builder for chaining.
       */
      public Builder setFormat(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        format_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearFormat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
       * If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
       * </pre>
       *
       * <code>optional string format = 1;</code>
       *
       * @param value The bytes for format to set.
       * @return This builder for chaining.
       */
      public Builder setFormatBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);
        bitField0_ |= 0x00000001;
        format_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object schema_ = "";
      /**
       *
       *
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       *
       * @return Whether the schema field is set.
       */
      public boolean hasSchema() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       *
       *
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       *
       * @return The schema.
       */
      public java.lang.String getSchema() {
        java.lang.Object ref = schema_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          schema_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       *
       * @return The bytes for schema.
       */
      public com.google.protobuf.ByteString getSchemaBytes() {
        java.lang.Object ref = schema_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
          schema_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       *
       * @param value The schema to set.
       * @return This builder for chaining.
       */
      public Builder setSchema(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        schema_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearSchema() {
        bitField0_ = (bitField0_ & ~0x00000002);
        schema_ = getDefaultInstance().getSchema();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) If not set, Spark will infer the schema.
       * This schema string should be either DDL-formatted or JSON-formatted.
       * </pre>
       *
       * <code>optional string schema = 2;</code>
       *
       * @param value The bytes for schema to set.
       * @return This builder for chaining.
       */
      public Builder setSchemaBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);
        bitField0_ |= 0x00000002;
        schema_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<java.lang.String, java.lang.String> options_;

      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetOptions() {
        if (options_ == null) {
          return com.google.protobuf.MapField.emptyMapField(OptionsDefaultEntryHolder.defaultEntry);
        }
        return options_;
      }

      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetMutableOptions() {
        onChanged();
        ;
        if (options_ == null) {
          options_ =
              com.google.protobuf.MapField.newMapField(OptionsDefaultEntryHolder.defaultEntry);
        }
        if (!options_.isMutable()) {
          options_ = options_.copy();
        }
        return options_;
      }

      public int getOptionsCount() {
        return internalGetOptions().getMap().size();
      }
      /**
       *
       *
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      @java.lang.Override
      public boolean containsOptions(java.lang.String key) {
        if (key == null) {
          throw new NullPointerException("map key");
        }
        return internalGetOptions().getMap().containsKey(key);
      }
      /** Use {@link #getOptionsMap()} instead. */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getOptions() {
        return getOptionsMap();
      }
      /**
       *
       *
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getOptionsMap() {
        return internalGetOptions().getMap();
      }
      /**
       *
       *
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      @java.lang.Override
      public java.lang.String getOptionsOrDefault(
          java.lang.String key, java.lang.String defaultValue) {
        if (key == null) {
          throw new NullPointerException("map key");
        }
        java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       *
       *
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      @java.lang.Override
      public java.lang.String getOptionsOrThrow(java.lang.String key) {
        if (key == null) {
          throw new NullPointerException("map key");
        }
        java.util.Map<java.lang.String, java.lang.String> map = internalGetOptions().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearOptions() {
        internalGetMutableOptions().getMutableMap().clear();
        return this;
      }
      /**
       *
       *
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      public Builder removeOptions(java.lang.String key) {
        if (key == null) {
          throw new NullPointerException("map key");
        }
        internalGetMutableOptions().getMutableMap().remove(key);
        return this;
      }
      /** Use alternate mutation accessors instead. */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMutableOptions() {
        return internalGetMutableOptions().getMutableMap();
      }
      /**
       *
       *
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      public Builder putOptions(java.lang.String key, java.lang.String value) {
        if (key == null) {
          throw new NullPointerException("map key");
        }
        if (value == null) {
          throw new NullPointerException("map value");
        }

        internalGetMutableOptions().getMutableMap().put(key, value);
        return this;
      }
      /**
       *
       *
       * <pre>
       * Options for the data source. The context of this map varies based on the
       * data source format. This options could be empty for valid data source format.
       * The map key is case insensitive.
       * </pre>
       *
       * <code>map&lt;string, string&gt; options = 3;</code>
       */
      public Builder putAllOptions(java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableOptions().getMutableMap().putAll(values);
        return this;
      }

      private com.google.protobuf.LazyStringList paths_ =
          com.google.protobuf.LazyStringArrayList.EMPTY;

      private void ensurePathsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          paths_ = new com.google.protobuf.LazyStringArrayList(paths_);
          bitField0_ |= 0x00000008;
        }
      }
      /**
       *
       *
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       *
       * @return A list containing the paths.
       */
      public com.google.protobuf.ProtocolStringList getPathsList() {
        return paths_.getUnmodifiableView();
      }
      /**
       *
       *
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       *
       * @return The count of paths.
       */
      public int getPathsCount() {
        return paths_.size();
      }
      /**
       *
       *
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       *
       * @param index The index of the element to return.
       * @return The paths at the given index.
       */
      public java.lang.String getPaths(int index) {
        return paths_.get(index);
      }
      /**
       *
       *
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       *
       * @param index The index of the value to return.
       * @return The bytes of the paths at the given index.
       */
      public com.google.protobuf.ByteString getPathsBytes(int index) {
        return paths_.getByteString(index);
      }
      /**
       *
       *
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       *
       * @param index The index to set the value at.
       * @param value The paths to set.
       * @return This builder for chaining.
       */
      public Builder setPaths(int index, java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePathsIsMutable();
        paths_.set(index, value);
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       *
       * @param value The paths to add.
       * @return This builder for chaining.
       */
      public Builder addPaths(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePathsIsMutable();
        paths_.add(value);
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       *
       * @param values The paths to add.
       * @return This builder for chaining.
       */
      public Builder addAllPaths(java.lang.Iterable<java.lang.String> values) {
        ensurePathsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, paths_);
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearPaths() {
        paths_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) A list of path for file-system backed data sources.
       * </pre>
       *
       * <code>repeated string paths = 4;</code>
       *
       * @param value The bytes of the paths to add.
       * @return This builder for chaining.
       */
      public Builder addPathsBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);
        ensurePathsIsMutable();
        paths_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList predicates_ =
          com.google.protobuf.LazyStringArrayList.EMPTY;

      private void ensurePredicatesIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          predicates_ = new com.google.protobuf.LazyStringArrayList(predicates_);
          bitField0_ |= 0x00000010;
        }
      }
      /**
       *
       *
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       *
       * @return A list containing the predicates.
       */
      public com.google.protobuf.ProtocolStringList getPredicatesList() {
        return predicates_.getUnmodifiableView();
      }
      /**
       *
       *
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       *
       * @return The count of predicates.
       */
      public int getPredicatesCount() {
        return predicates_.size();
      }
      /**
       *
       *
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       *
       * @param index The index of the element to return.
       * @return The predicates at the given index.
       */
      public java.lang.String getPredicates(int index) {
        return predicates_.get(index);
      }
      /**
       *
       *
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       *
       * @param index The index of the value to return.
       * @return The bytes of the predicates at the given index.
       */
      public com.google.protobuf.ByteString getPredicatesBytes(int index) {
        return predicates_.getByteString(index);
      }
      /**
       *
       *
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       *
       * @param index The index to set the value at.
       * @param value The predicates to set.
       * @return This builder for chaining.
       */
      public Builder setPredicates(int index, java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePredicatesIsMutable();
        predicates_.set(index, value);
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       *
       * @param value The predicates to add.
       * @return This builder for chaining.
       */
      public Builder addPredicates(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePredicatesIsMutable();
        predicates_.add(value);
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       *
       * @param values The predicates to add.
       * @return This builder for chaining.
       */
      public Builder addAllPredicates(java.lang.Iterable<java.lang.String> values) {
        ensurePredicatesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, predicates_);
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearPredicates() {
        predicates_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * (Optional) Condition in the where clause for each partition.
       * This is only supported by the JDBC data source.
       * </pre>
       *
       * <code>repeated string predicates = 5;</code>
       *
       * @param value The bytes of the predicates to add.
       * @return This builder for chaining.
       */
      public Builder addPredicatesBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);
        ensurePredicatesIsMutable();
        predicates_.add(value);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:spark.connect.Read.DataSource)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Read.DataSource)
    private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
        DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource();
    }

    public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
        getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DataSource> PARSER =
        new com.google.protobuf.AbstractParser<DataSource>() {
          @java.lang.Override
          public DataSource parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<DataSource> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DataSource> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
        getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  private int readTypeCase_ = 0;
  private java.lang.Object readType_;

  public enum ReadTypeCase
      implements
          com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    NAMED_TABLE(1),
    DATA_SOURCE(2),
    READTYPE_NOT_SET(0);
    private final int value;

    private ReadTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ReadTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static ReadTypeCase forNumber(int value) {
      switch (value) {
        case 1:
          return NAMED_TABLE;
        case 2:
          return DATA_SOURCE;
        case 0:
          return READTYPE_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  public ReadTypeCase getReadTypeCase() {
    return ReadTypeCase.forNumber(readTypeCase_);
  }

  public static final int NAMED_TABLE_FIELD_NUMBER = 1;
  /**
   * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
   *
   * @return Whether the namedTable field is set.
   */
  @java.lang.Override
  public boolean hasNamedTable() {
    return readTypeCase_ == 1;
  }
  /**
   * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
   *
   * @return The namedTable.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable getNamedTable() {
    if (readTypeCase_ == 1) {
      return (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) readType_;
    }
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.getDefaultInstance();
  }
  /** <code>.spark.connect.Read.NamedTable named_table = 1;</code> */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTableOrBuilder
      getNamedTableOrBuilder() {
    if (readTypeCase_ == 1) {
      return (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) readType_;
    }
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.getDefaultInstance();
  }

  public static final int DATA_SOURCE_FIELD_NUMBER = 2;
  /**
   * <code>.spark.connect.Read.DataSource data_source = 2;</code>
   *
   * @return Whether the dataSource field is set.
   */
  @java.lang.Override
  public boolean hasDataSource() {
    return readTypeCase_ == 2;
  }
  /**
   * <code>.spark.connect.Read.DataSource data_source = 2;</code>
   *
   * @return The dataSource.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource getDataSource() {
    if (readTypeCase_ == 2) {
      return (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) readType_;
    }
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.getDefaultInstance();
  }
  /** <code>.spark.connect.Read.DataSource data_source = 2;</code> */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSourceOrBuilder
      getDataSourceOrBuilder() {
    if (readTypeCase_ == 2) {
      return (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) readType_;
    }
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.getDefaultInstance();
  }

  public static final int IS_STREAMING_FIELD_NUMBER = 3;
  private boolean isStreaming_;
  /**
   *
   *
   * <pre>
   * (Optional) Indicates if this is a streaming read.
   * </pre>
   *
   * <code>bool is_streaming = 3;</code>
   *
   * @return The isStreaming.
   */
  @java.lang.Override
  public boolean getIsStreaming() {
    return isStreaming_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (readTypeCase_ == 1) {
      output.writeMessage(
          1, (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) readType_);
    }
    if (readTypeCase_ == 2) {
      output.writeMessage(
          2, (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) readType_);
    }
    if (isStreaming_ != false) {
      output.writeBool(3, isStreaming_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (readTypeCase_ == 1) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              1, (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) readType_);
    }
    if (readTypeCase_ == 2) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              2, (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) readType_);
    }
    if (isStreaming_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(3, isStreaming_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.Read)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.grpc.proto.Read other =
        (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read) obj;

    if (getIsStreaming() != other.getIsStreaming()) return false;
    if (!getReadTypeCase().equals(other.getReadTypeCase())) return false;
    switch (readTypeCase_) {
      case 1:
        if (!getNamedTable().equals(other.getNamedTable())) return false;
        break;
      case 2:
        if (!getDataSource().equals(other.getDataSource())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + IS_STREAMING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getIsStreaming());
    switch (readTypeCase_) {
      case 1:
        hash = (37 * hash) + NAMED_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getNamedTable().hashCode();
        break;
      case 2:
        hash = (37 * hash) + DATA_SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getDataSource().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Read prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Relation that reads from a file / table or other data source. Does not have additional
   * inputs.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Read}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:spark.connect.Read)
      org.apache.kyuubi.engine.spark.connect.grpc.proto.ReadOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_Read_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_Read_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (namedTableBuilder_ != null) {
        namedTableBuilder_.clear();
      }
      if (dataSourceBuilder_ != null) {
        dataSourceBuilder_.clear();
      }
      isStreaming_ = false;

      readTypeCase_ = 0;
      readType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Relations
          .internal_static_spark_connect_Read_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read build() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Read result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read buildPartial() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Read result =
          new org.apache.kyuubi.engine.spark.connect.grpc.proto.Read(this);
      if (readTypeCase_ == 1) {
        if (namedTableBuilder_ == null) {
          result.readType_ = readType_;
        } else {
          result.readType_ = namedTableBuilder_.build();
        }
      }
      if (readTypeCase_ == 2) {
        if (dataSourceBuilder_ == null) {
          result.readType_ = readType_;
        } else {
          result.readType_ = dataSourceBuilder_.build();
        }
      }
      result.isStreaming_ = isStreaming_;
      result.readTypeCase_ = readTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.Read) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.grpc.proto.Read) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.grpc.proto.Read other) {
      if (other == org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.getDefaultInstance())
        return this;
      if (other.getIsStreaming() != false) {
        setIsStreaming(other.getIsStreaming());
      }
      switch (other.getReadTypeCase()) {
        case NAMED_TABLE:
          {
            mergeNamedTable(other.getNamedTable());
            break;
          }
        case DATA_SOURCE:
          {
            mergeDataSource(other.getDataSource());
            break;
          }
        case READTYPE_NOT_SET:
          {
            break;
          }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getNamedTableFieldBuilder().getBuilder(), extensionRegistry);
                readTypeCase_ = 1;
                break;
              } // case 10
            case 18:
              {
                input.readMessage(getDataSourceFieldBuilder().getBuilder(), extensionRegistry);
                readTypeCase_ = 2;
                break;
              } // case 18
            case 24:
              {
                isStreaming_ = input.readBool();

                break;
              } // case 24
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int readTypeCase_ = 0;
    private java.lang.Object readType_;

    public ReadTypeCase getReadTypeCase() {
      return ReadTypeCase.forNumber(readTypeCase_);
    }

    public Builder clearReadType() {
      readTypeCase_ = 0;
      readType_ = null;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTableOrBuilder>
        namedTableBuilder_;
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     *
     * @return Whether the namedTable field is set.
     */
    @java.lang.Override
    public boolean hasNamedTable() {
      return readTypeCase_ == 1;
    }
    /**
     * <code>.spark.connect.Read.NamedTable named_table = 1;</code>
     *
     * @return The namedTable.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable getNamedTable() {
      if (namedTableBuilder_ == null) {
        if (readTypeCase_ == 1) {
          return (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) readType_;
        }
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
            .getDefaultInstance();
      } else {
        if (readTypeCase_ == 1) {
          return namedTableBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
            .getDefaultInstance();
      }
    }
    /** <code>.spark.connect.Read.NamedTable named_table = 1;</code> */
    public Builder setNamedTable(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable value) {
      if (namedTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        readType_ = value;
        onChanged();
      } else {
        namedTableBuilder_.setMessage(value);
      }
      readTypeCase_ = 1;
      return this;
    }
    /** <code>.spark.connect.Read.NamedTable named_table = 1;</code> */
    public Builder setNamedTable(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.Builder builderForValue) {
      if (namedTableBuilder_ == null) {
        readType_ = builderForValue.build();
        onChanged();
      } else {
        namedTableBuilder_.setMessage(builderForValue.build());
      }
      readTypeCase_ = 1;
      return this;
    }
    /** <code>.spark.connect.Read.NamedTable named_table = 1;</code> */
    public Builder mergeNamedTable(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable value) {
      if (namedTableBuilder_ == null) {
        if (readTypeCase_ == 1
            && readType_
                != org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
                    .getDefaultInstance()) {
          readType_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.newBuilder(
                      (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) readType_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          readType_ = value;
        }
        onChanged();
      } else {
        if (readTypeCase_ == 1) {
          namedTableBuilder_.mergeFrom(value);
        } else {
          namedTableBuilder_.setMessage(value);
        }
      }
      readTypeCase_ = 1;
      return this;
    }
    /** <code>.spark.connect.Read.NamedTable named_table = 1;</code> */
    public Builder clearNamedTable() {
      if (namedTableBuilder_ == null) {
        if (readTypeCase_ == 1) {
          readTypeCase_ = 0;
          readType_ = null;
          onChanged();
        }
      } else {
        if (readTypeCase_ == 1) {
          readTypeCase_ = 0;
          readType_ = null;
        }
        namedTableBuilder_.clear();
      }
      return this;
    }
    /** <code>.spark.connect.Read.NamedTable named_table = 1;</code> */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.Builder
        getNamedTableBuilder() {
      return getNamedTableFieldBuilder().getBuilder();
    }
    /** <code>.spark.connect.Read.NamedTable named_table = 1;</code> */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTableOrBuilder
        getNamedTableOrBuilder() {
      if ((readTypeCase_ == 1) && (namedTableBuilder_ != null)) {
        return namedTableBuilder_.getMessageOrBuilder();
      } else {
        if (readTypeCase_ == 1) {
          return (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) readType_;
        }
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
            .getDefaultInstance();
      }
    }
    /** <code>.spark.connect.Read.NamedTable named_table = 1;</code> */
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTableOrBuilder>
        getNamedTableFieldBuilder() {
      if (namedTableBuilder_ == null) {
        if (!(readTypeCase_ == 1)) {
          readType_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable
                  .getDefaultInstance();
        }
        namedTableBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTableOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.NamedTable) readType_,
                getParentForChildren(),
                isClean());
        readType_ = null;
      }
      readTypeCase_ = 1;
      onChanged();
      ;
      return namedTableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSourceOrBuilder>
        dataSourceBuilder_;
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     *
     * @return Whether the dataSource field is set.
     */
    @java.lang.Override
    public boolean hasDataSource() {
      return readTypeCase_ == 2;
    }
    /**
     * <code>.spark.connect.Read.DataSource data_source = 2;</code>
     *
     * @return The dataSource.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource getDataSource() {
      if (dataSourceBuilder_ == null) {
        if (readTypeCase_ == 2) {
          return (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) readType_;
        }
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
            .getDefaultInstance();
      } else {
        if (readTypeCase_ == 2) {
          return dataSourceBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
            .getDefaultInstance();
      }
    }
    /** <code>.spark.connect.Read.DataSource data_source = 2;</code> */
    public Builder setDataSource(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource value) {
      if (dataSourceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        readType_ = value;
        onChanged();
      } else {
        dataSourceBuilder_.setMessage(value);
      }
      readTypeCase_ = 2;
      return this;
    }
    /** <code>.spark.connect.Read.DataSource data_source = 2;</code> */
    public Builder setDataSource(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.Builder builderForValue) {
      if (dataSourceBuilder_ == null) {
        readType_ = builderForValue.build();
        onChanged();
      } else {
        dataSourceBuilder_.setMessage(builderForValue.build());
      }
      readTypeCase_ = 2;
      return this;
    }
    /** <code>.spark.connect.Read.DataSource data_source = 2;</code> */
    public Builder mergeDataSource(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource value) {
      if (dataSourceBuilder_ == null) {
        if (readTypeCase_ == 2
            && readType_
                != org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
                    .getDefaultInstance()) {
          readType_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.newBuilder(
                      (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) readType_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          readType_ = value;
        }
        onChanged();
      } else {
        if (readTypeCase_ == 2) {
          dataSourceBuilder_.mergeFrom(value);
        } else {
          dataSourceBuilder_.setMessage(value);
        }
      }
      readTypeCase_ = 2;
      return this;
    }
    /** <code>.spark.connect.Read.DataSource data_source = 2;</code> */
    public Builder clearDataSource() {
      if (dataSourceBuilder_ == null) {
        if (readTypeCase_ == 2) {
          readTypeCase_ = 0;
          readType_ = null;
          onChanged();
        }
      } else {
        if (readTypeCase_ == 2) {
          readTypeCase_ = 0;
          readType_ = null;
        }
        dataSourceBuilder_.clear();
      }
      return this;
    }
    /** <code>.spark.connect.Read.DataSource data_source = 2;</code> */
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.Builder
        getDataSourceBuilder() {
      return getDataSourceFieldBuilder().getBuilder();
    }
    /** <code>.spark.connect.Read.DataSource data_source = 2;</code> */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSourceOrBuilder
        getDataSourceOrBuilder() {
      if ((readTypeCase_ == 2) && (dataSourceBuilder_ != null)) {
        return dataSourceBuilder_.getMessageOrBuilder();
      } else {
        if (readTypeCase_ == 2) {
          return (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) readType_;
        }
        return org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
            .getDefaultInstance();
      }
    }
    /** <code>.spark.connect.Read.DataSource data_source = 2;</code> */
    private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.Builder,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSourceOrBuilder>
        getDataSourceFieldBuilder() {
      if (dataSourceBuilder_ == null) {
        if (!(readTypeCase_ == 2)) {
          readType_ =
              org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource
                  .getDefaultInstance();
        }
        dataSourceBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource.Builder,
                org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSourceOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.grpc.proto.Read.DataSource) readType_,
                getParentForChildren(),
                isClean());
        readType_ = null;
      }
      readTypeCase_ = 2;
      onChanged();
      ;
      return dataSourceBuilder_;
    }

    private boolean isStreaming_;
    /**
     *
     *
     * <pre>
     * (Optional) Indicates if this is a streaming read.
     * </pre>
     *
     * <code>bool is_streaming = 3;</code>
     *
     * @return The isStreaming.
     */
    @java.lang.Override
    public boolean getIsStreaming() {
      return isStreaming_;
    }
    /**
     *
     *
     * <pre>
     * (Optional) Indicates if this is a streaming read.
     * </pre>
     *
     * <code>bool is_streaming = 3;</code>
     *
     * @param value The isStreaming to set.
     * @return This builder for chaining.
     */
    public Builder setIsStreaming(boolean value) {

      isStreaming_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Optional) Indicates if this is a streaming read.
     * </pre>
     *
     * <code>bool is_streaming = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearIsStreaming() {

      isStreaming_ = false;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:spark.connect.Read)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.Read)
  private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.Read DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.grpc.proto.Read();
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.Read getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Read> PARSER =
      new com.google.protobuf.AbstractParser<Read>() {
        @java.lang.Override
        public Read parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<Read> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Read> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.Read getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
