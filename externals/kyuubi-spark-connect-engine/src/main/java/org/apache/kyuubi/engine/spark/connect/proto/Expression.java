// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/expressions.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Expression used to refer to fields, functions and similar. This can be used everywhere
 * expressions in SQL appear.
 * </pre>
 *
 * Protobuf type {@code spark.connect.Expression}
 */
public final class Expression extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.Expression)
    ExpressionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Expression.newBuilder() to construct.
  private Expression(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Expression() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Expression();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder.class);
  }

  public interface WindowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Window)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The window function.
     * </pre>
     *
     * <code>.spark.connect.Expression window_function = 1;</code>
     * @return Whether the windowFunction field is set.
     */
    boolean hasWindowFunction();
    /**
     * <pre>
     * (Required) The window function.
     * </pre>
     *
     * <code>.spark.connect.Expression window_function = 1;</code>
     * @return The windowFunction.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getWindowFunction();
    /**
     * <pre>
     * (Required) The window function.
     * </pre>
     *
     * <code>.spark.connect.Expression window_function = 1;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getWindowFunctionOrBuilder();

    /**
     * <pre>
     * (Optional) The way that input rows are partitioned.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
     */
    java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> 
        getPartitionSpecList();
    /**
     * <pre>
     * (Optional) The way that input rows are partitioned.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getPartitionSpec(int index);
    /**
     * <pre>
     * (Optional) The way that input rows are partitioned.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
     */
    int getPartitionSpecCount();
    /**
     * <pre>
     * (Optional) The way that input rows are partitioned.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
     */
    java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
        getPartitionSpecOrBuilderList();
    /**
     * <pre>
     * (Optional) The way that input rows are partitioned.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getPartitionSpecOrBuilder(
        int index);

    /**
     * <pre>
     * (Optional) Ordering of rows in a partition.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
     */
    java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder> 
        getOrderSpecList();
    /**
     * <pre>
     * (Optional) Ordering of rows in a partition.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder getOrderSpec(int index);
    /**
     * <pre>
     * (Optional) Ordering of rows in a partition.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
     */
    int getOrderSpecCount();
    /**
     * <pre>
     * (Optional) Ordering of rows in a partition.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
     */
    java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder> 
        getOrderSpecOrBuilderList();
    /**
     * <pre>
     * (Optional) Ordering of rows in a partition.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder getOrderSpecOrBuilder(
        int index);

    /**
     * <pre>
     * (Optional) Window frame in a partition.
     * If not set, it will be treated as 'UnspecifiedFrame'.
     * </pre>
     *
     * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
     * @return Whether the frameSpec field is set.
     */
    boolean hasFrameSpec();
    /**
     * <pre>
     * (Optional) Window frame in a partition.
     * If not set, it will be treated as 'UnspecifiedFrame'.
     * </pre>
     *
     * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
     * @return The frameSpec.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame getFrameSpec();
    /**
     * <pre>
     * (Optional) Window frame in a partition.
     * If not set, it will be treated as 'UnspecifiedFrame'.
     * </pre>
     *
     * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrameOrBuilder getFrameSpecOrBuilder();
  }
  /**
   * <pre>
   * Expression for the OVER clause or WINDOW clause.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Expression.Window}
   */
  public static final class Window extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.Window)
      WindowOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Window.newBuilder() to construct.
    private Window(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Window() {
      partitionSpec_ = java.util.Collections.emptyList();
      orderSpec_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Window();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.Builder.class);
    }

    public interface WindowFrameOrBuilder extends
        // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Window.WindowFrame)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) The type of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameType frame_type = 1;</code>
       * @return The enum numeric value on the wire for frameType.
       */
      int getFrameTypeValue();
      /**
       * <pre>
       * (Required) The type of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameType frame_type = 1;</code>
       * @return The frameType.
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType getFrameType();

      /**
       * <pre>
       * (Required) The lower bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
       * @return Whether the lower field is set.
       */
      boolean hasLower();
      /**
       * <pre>
       * (Required) The lower bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
       * @return The lower.
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary getLower();
      /**
       * <pre>
       * (Required) The lower bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder getLowerOrBuilder();

      /**
       * <pre>
       * (Required) The upper bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
       * @return Whether the upper field is set.
       */
      boolean hasUpper();
      /**
       * <pre>
       * (Required) The upper bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
       * @return The upper.
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary getUpper();
      /**
       * <pre>
       * (Required) The upper bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder getUpperOrBuilder();
    }
    /**
     * <pre>
     * The window frame
     * </pre>
     *
     * Protobuf type {@code spark.connect.Expression.Window.WindowFrame}
     */
    public static final class WindowFrame extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:spark.connect.Expression.Window.WindowFrame)
        WindowFrameOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use WindowFrame.newBuilder() to construct.
      private WindowFrame(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private WindowFrame() {
        frameType_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new WindowFrame();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_WindowFrame_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_WindowFrame_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.Builder.class);
      }

      /**
       * Protobuf enum {@code spark.connect.Expression.Window.WindowFrame.FrameType}
       */
      public enum FrameType
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>FRAME_TYPE_UNDEFINED = 0;</code>
         */
        FRAME_TYPE_UNDEFINED(0),
        /**
         * <pre>
         * RowFrame treats rows in a partition individually.
         * </pre>
         *
         * <code>FRAME_TYPE_ROW = 1;</code>
         */
        FRAME_TYPE_ROW(1),
        /**
         * <pre>
         * RangeFrame treats rows in a partition as groups of peers.
         * All rows having the same 'ORDER BY' ordering are considered as peers.
         * </pre>
         *
         * <code>FRAME_TYPE_RANGE = 2;</code>
         */
        FRAME_TYPE_RANGE(2),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>FRAME_TYPE_UNDEFINED = 0;</code>
         */
        public static final int FRAME_TYPE_UNDEFINED_VALUE = 0;
        /**
         * <pre>
         * RowFrame treats rows in a partition individually.
         * </pre>
         *
         * <code>FRAME_TYPE_ROW = 1;</code>
         */
        public static final int FRAME_TYPE_ROW_VALUE = 1;
        /**
         * <pre>
         * RangeFrame treats rows in a partition as groups of peers.
         * All rows having the same 'ORDER BY' ordering are considered as peers.
         * </pre>
         *
         * <code>FRAME_TYPE_RANGE = 2;</code>
         */
        public static final int FRAME_TYPE_RANGE_VALUE = 2;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static FrameType valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static FrameType forNumber(int value) {
          switch (value) {
            case 0: return FRAME_TYPE_UNDEFINED;
            case 1: return FRAME_TYPE_ROW;
            case 2: return FRAME_TYPE_RANGE;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<FrameType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            FrameType> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<FrameType>() {
                public FrameType findValueByNumber(int number) {
                  return FrameType.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException(
                "Can't get the descriptor of an unrecognized enum value.");
          }
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.getDescriptor().getEnumTypes().get(0);
        }

        private static final FrameType[] VALUES = values();

        public static FrameType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private FrameType(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:spark.connect.Expression.Window.WindowFrame.FrameType)
      }

      public interface FrameBoundaryOrBuilder extends
          // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Window.WindowFrame.FrameBoundary)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * CURRENT ROW boundary
         * </pre>
         *
         * <code>bool current_row = 1;</code>
         * @return Whether the currentRow field is set.
         */
        boolean hasCurrentRow();
        /**
         * <pre>
         * CURRENT ROW boundary
         * </pre>
         *
         * <code>bool current_row = 1;</code>
         * @return The currentRow.
         */
        boolean getCurrentRow();

        /**
         * <pre>
         * UNBOUNDED boundary.
         * For lower bound, it will be converted to 'UnboundedPreceding'.
         * for upper bound, it will be converted to 'UnboundedFollowing'.
         * </pre>
         *
         * <code>bool unbounded = 2;</code>
         * @return Whether the unbounded field is set.
         */
        boolean hasUnbounded();
        /**
         * <pre>
         * UNBOUNDED boundary.
         * For lower bound, it will be converted to 'UnboundedPreceding'.
         * for upper bound, it will be converted to 'UnboundedFollowing'.
         * </pre>
         *
         * <code>bool unbounded = 2;</code>
         * @return The unbounded.
         */
        boolean getUnbounded();

        /**
         * <pre>
         * This is an expression for future proofing. We are expecting literals on the server side.
         * </pre>
         *
         * <code>.spark.connect.Expression value = 3;</code>
         * @return Whether the value field is set.
         */
        boolean hasValue();
        /**
         * <pre>
         * This is an expression for future proofing. We are expecting literals on the server side.
         * </pre>
         *
         * <code>.spark.connect.Expression value = 3;</code>
         * @return The value.
         */
        org.apache.kyuubi.engine.spark.connect.proto.Expression getValue();
        /**
         * <pre>
         * This is an expression for future proofing. We are expecting literals on the server side.
         * </pre>
         *
         * <code>.spark.connect.Expression value = 3;</code>
         */
        org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getValueOrBuilder();

        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.BoundaryCase getBoundaryCase();
      }
      /**
       * Protobuf type {@code spark.connect.Expression.Window.WindowFrame.FrameBoundary}
       */
      public static final class FrameBoundary extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:spark.connect.Expression.Window.WindowFrame.FrameBoundary)
          FrameBoundaryOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use FrameBoundary.newBuilder() to construct.
        private FrameBoundary(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private FrameBoundary() {
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new FrameBoundary();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_WindowFrame_FrameBoundary_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_WindowFrame_FrameBoundary_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder.class);
        }

        private int boundaryCase_ = 0;
        private java.lang.Object boundary_;
        public enum BoundaryCase
            implements com.google.protobuf.Internal.EnumLite,
                com.google.protobuf.AbstractMessage.InternalOneOfEnum {
          CURRENT_ROW(1),
          UNBOUNDED(2),
          VALUE(3),
          BOUNDARY_NOT_SET(0);
          private final int value;
          private BoundaryCase(int value) {
            this.value = value;
          }
          /**
           * @param value The number of the enum to look for.
           * @return The enum associated with the given number.
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @java.lang.Deprecated
          public static BoundaryCase valueOf(int value) {
            return forNumber(value);
          }

          public static BoundaryCase forNumber(int value) {
            switch (value) {
              case 1: return CURRENT_ROW;
              case 2: return UNBOUNDED;
              case 3: return VALUE;
              case 0: return BOUNDARY_NOT_SET;
              default: return null;
            }
          }
          public int getNumber() {
            return this.value;
          }
        };

        public BoundaryCase
        getBoundaryCase() {
          return BoundaryCase.forNumber(
              boundaryCase_);
        }

        public static final int CURRENT_ROW_FIELD_NUMBER = 1;
        /**
         * <pre>
         * CURRENT ROW boundary
         * </pre>
         *
         * <code>bool current_row = 1;</code>
         * @return Whether the currentRow field is set.
         */
        @java.lang.Override
        public boolean hasCurrentRow() {
          return boundaryCase_ == 1;
        }
        /**
         * <pre>
         * CURRENT ROW boundary
         * </pre>
         *
         * <code>bool current_row = 1;</code>
         * @return The currentRow.
         */
        @java.lang.Override
        public boolean getCurrentRow() {
          if (boundaryCase_ == 1) {
            return (java.lang.Boolean) boundary_;
          }
          return false;
        }

        public static final int UNBOUNDED_FIELD_NUMBER = 2;
        /**
         * <pre>
         * UNBOUNDED boundary.
         * For lower bound, it will be converted to 'UnboundedPreceding'.
         * for upper bound, it will be converted to 'UnboundedFollowing'.
         * </pre>
         *
         * <code>bool unbounded = 2;</code>
         * @return Whether the unbounded field is set.
         */
        @java.lang.Override
        public boolean hasUnbounded() {
          return boundaryCase_ == 2;
        }
        /**
         * <pre>
         * UNBOUNDED boundary.
         * For lower bound, it will be converted to 'UnboundedPreceding'.
         * for upper bound, it will be converted to 'UnboundedFollowing'.
         * </pre>
         *
         * <code>bool unbounded = 2;</code>
         * @return The unbounded.
         */
        @java.lang.Override
        public boolean getUnbounded() {
          if (boundaryCase_ == 2) {
            return (java.lang.Boolean) boundary_;
          }
          return false;
        }

        public static final int VALUE_FIELD_NUMBER = 3;
        /**
         * <pre>
         * This is an expression for future proofing. We are expecting literals on the server side.
         * </pre>
         *
         * <code>.spark.connect.Expression value = 3;</code>
         * @return Whether the value field is set.
         */
        @java.lang.Override
        public boolean hasValue() {
          return boundaryCase_ == 3;
        }
        /**
         * <pre>
         * This is an expression for future proofing. We are expecting literals on the server side.
         * </pre>
         *
         * <code>.spark.connect.Expression value = 3;</code>
         * @return The value.
         */
        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression getValue() {
          if (boundaryCase_ == 3) {
             return (org.apache.kyuubi.engine.spark.connect.proto.Expression) boundary_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance();
        }
        /**
         * <pre>
         * This is an expression for future proofing. We are expecting literals on the server side.
         * </pre>
         *
         * <code>.spark.connect.Expression value = 3;</code>
         */
        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getValueOrBuilder() {
          if (boundaryCase_ == 3) {
             return (org.apache.kyuubi.engine.spark.connect.proto.Expression) boundary_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (boundaryCase_ == 1) {
            output.writeBool(
                1, (boolean)((java.lang.Boolean) boundary_));
          }
          if (boundaryCase_ == 2) {
            output.writeBool(
                2, (boolean)((java.lang.Boolean) boundary_));
          }
          if (boundaryCase_ == 3) {
            output.writeMessage(3, (org.apache.kyuubi.engine.spark.connect.proto.Expression) boundary_);
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (boundaryCase_ == 1) {
            size += com.google.protobuf.CodedOutputStream
              .computeBoolSize(
                  1, (boolean)((java.lang.Boolean) boundary_));
          }
          if (boundaryCase_ == 2) {
            size += com.google.protobuf.CodedOutputStream
              .computeBoolSize(
                  2, (boolean)((java.lang.Boolean) boundary_));
          }
          if (boundaryCase_ == 3) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(3, (org.apache.kyuubi.engine.spark.connect.proto.Expression) boundary_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary)) {
            return super.equals(obj);
          }
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary) obj;

          if (!getBoundaryCase().equals(other.getBoundaryCase())) return false;
          switch (boundaryCase_) {
            case 1:
              if (getCurrentRow()
                  != other.getCurrentRow()) return false;
              break;
            case 2:
              if (getUnbounded()
                  != other.getUnbounded()) return false;
              break;
            case 3:
              if (!getValue()
                  .equals(other.getValue())) return false;
              break;
            case 0:
            default:
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          switch (boundaryCase_) {
            case 1:
              hash = (37 * hash) + CURRENT_ROW_FIELD_NUMBER;
              hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                  getCurrentRow());
              break;
            case 2:
              hash = (37 * hash) + UNBOUNDED_FIELD_NUMBER;
              hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                  getUnbounded());
              break;
            case 3:
              hash = (37 * hash) + VALUE_FIELD_NUMBER;
              hash = (53 * hash) + getValue().hashCode();
              break;
            case 0:
            default:
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code spark.connect.Expression.Window.WindowFrame.FrameBoundary}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Window.WindowFrame.FrameBoundary)
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_WindowFrame_FrameBoundary_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_WindowFrame_FrameBoundary_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder.class);
          }

          // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            if (valueBuilder_ != null) {
              valueBuilder_.clear();
            }
            boundaryCase_ = 0;
            boundary_ = null;
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_WindowFrame_FrameBoundary_descriptor;
          }

          @java.lang.Override
          public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary getDefaultInstanceForType() {
            return org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.getDefaultInstance();
          }

          @java.lang.Override
          public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary build() {
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary buildPartial() {
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary(this);
            if (boundaryCase_ == 1) {
              result.boundary_ = boundary_;
            }
            if (boundaryCase_ == 2) {
              result.boundary_ = boundary_;
            }
            if (boundaryCase_ == 3) {
              if (valueBuilder_ == null) {
                result.boundary_ = boundary_;
              } else {
                result.boundary_ = valueBuilder_.build();
              }
            }
            result.boundaryCase_ = boundaryCase_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary) {
              return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary other) {
            if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.getDefaultInstance()) return this;
            switch (other.getBoundaryCase()) {
              case CURRENT_ROW: {
                setCurrentRow(other.getCurrentRow());
                break;
              }
              case UNBOUNDED: {
                setUnbounded(other.getUnbounded());
                break;
              }
              case VALUE: {
                mergeValue(other.getValue());
                break;
              }
              case BOUNDARY_NOT_SET: {
                break;
              }
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 8: {
                    boundary_ = input.readBool();
                    boundaryCase_ = 1;
                    break;
                  } // case 8
                  case 16: {
                    boundary_ = input.readBool();
                    boundaryCase_ = 2;
                    break;
                  } // case 16
                  case 26: {
                    input.readMessage(
                        getValueFieldBuilder().getBuilder(),
                        extensionRegistry);
                    boundaryCase_ = 3;
                    break;
                  } // case 26
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int boundaryCase_ = 0;
          private java.lang.Object boundary_;
          public BoundaryCase
              getBoundaryCase() {
            return BoundaryCase.forNumber(
                boundaryCase_);
          }

          public Builder clearBoundary() {
            boundaryCase_ = 0;
            boundary_ = null;
            onChanged();
            return this;
          }


          /**
           * <pre>
           * CURRENT ROW boundary
           * </pre>
           *
           * <code>bool current_row = 1;</code>
           * @return Whether the currentRow field is set.
           */
          public boolean hasCurrentRow() {
            return boundaryCase_ == 1;
          }
          /**
           * <pre>
           * CURRENT ROW boundary
           * </pre>
           *
           * <code>bool current_row = 1;</code>
           * @return The currentRow.
           */
          public boolean getCurrentRow() {
            if (boundaryCase_ == 1) {
              return (java.lang.Boolean) boundary_;
            }
            return false;
          }
          /**
           * <pre>
           * CURRENT ROW boundary
           * </pre>
           *
           * <code>bool current_row = 1;</code>
           * @param value The currentRow to set.
           * @return This builder for chaining.
           */
          public Builder setCurrentRow(boolean value) {
            boundaryCase_ = 1;
            boundary_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * CURRENT ROW boundary
           * </pre>
           *
           * <code>bool current_row = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearCurrentRow() {
            if (boundaryCase_ == 1) {
              boundaryCase_ = 0;
              boundary_ = null;
              onChanged();
            }
            return this;
          }

          /**
           * <pre>
           * UNBOUNDED boundary.
           * For lower bound, it will be converted to 'UnboundedPreceding'.
           * for upper bound, it will be converted to 'UnboundedFollowing'.
           * </pre>
           *
           * <code>bool unbounded = 2;</code>
           * @return Whether the unbounded field is set.
           */
          public boolean hasUnbounded() {
            return boundaryCase_ == 2;
          }
          /**
           * <pre>
           * UNBOUNDED boundary.
           * For lower bound, it will be converted to 'UnboundedPreceding'.
           * for upper bound, it will be converted to 'UnboundedFollowing'.
           * </pre>
           *
           * <code>bool unbounded = 2;</code>
           * @return The unbounded.
           */
          public boolean getUnbounded() {
            if (boundaryCase_ == 2) {
              return (java.lang.Boolean) boundary_;
            }
            return false;
          }
          /**
           * <pre>
           * UNBOUNDED boundary.
           * For lower bound, it will be converted to 'UnboundedPreceding'.
           * for upper bound, it will be converted to 'UnboundedFollowing'.
           * </pre>
           *
           * <code>bool unbounded = 2;</code>
           * @param value The unbounded to set.
           * @return This builder for chaining.
           */
          public Builder setUnbounded(boolean value) {
            boundaryCase_ = 2;
            boundary_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * UNBOUNDED boundary.
           * For lower bound, it will be converted to 'UnboundedPreceding'.
           * for upper bound, it will be converted to 'UnboundedFollowing'.
           * </pre>
           *
           * <code>bool unbounded = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearUnbounded() {
            if (boundaryCase_ == 2) {
              boundaryCase_ = 0;
              boundary_ = null;
              onChanged();
            }
            return this;
          }

          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> valueBuilder_;
          /**
           * <pre>
           * This is an expression for future proofing. We are expecting literals on the server side.
           * </pre>
           *
           * <code>.spark.connect.Expression value = 3;</code>
           * @return Whether the value field is set.
           */
          @java.lang.Override
          public boolean hasValue() {
            return boundaryCase_ == 3;
          }
          /**
           * <pre>
           * This is an expression for future proofing. We are expecting literals on the server side.
           * </pre>
           *
           * <code>.spark.connect.Expression value = 3;</code>
           * @return The value.
           */
          @java.lang.Override
          public org.apache.kyuubi.engine.spark.connect.proto.Expression getValue() {
            if (valueBuilder_ == null) {
              if (boundaryCase_ == 3) {
                return (org.apache.kyuubi.engine.spark.connect.proto.Expression) boundary_;
              }
              return org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance();
            } else {
              if (boundaryCase_ == 3) {
                return valueBuilder_.getMessage();
              }
              return org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance();
            }
          }
          /**
           * <pre>
           * This is an expression for future proofing. We are expecting literals on the server side.
           * </pre>
           *
           * <code>.spark.connect.Expression value = 3;</code>
           */
          public Builder setValue(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
            if (valueBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              boundary_ = value;
              onChanged();
            } else {
              valueBuilder_.setMessage(value);
            }
            boundaryCase_ = 3;
            return this;
          }
          /**
           * <pre>
           * This is an expression for future proofing. We are expecting literals on the server side.
           * </pre>
           *
           * <code>.spark.connect.Expression value = 3;</code>
           */
          public Builder setValue(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
            if (valueBuilder_ == null) {
              boundary_ = builderForValue.build();
              onChanged();
            } else {
              valueBuilder_.setMessage(builderForValue.build());
            }
            boundaryCase_ = 3;
            return this;
          }
          /**
           * <pre>
           * This is an expression for future proofing. We are expecting literals on the server side.
           * </pre>
           *
           * <code>.spark.connect.Expression value = 3;</code>
           */
          public Builder mergeValue(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
            if (valueBuilder_ == null) {
              if (boundaryCase_ == 3 &&
                  boundary_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance()) {
                boundary_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression) boundary_)
                    .mergeFrom(value).buildPartial();
              } else {
                boundary_ = value;
              }
              onChanged();
            } else {
              if (boundaryCase_ == 3) {
                valueBuilder_.mergeFrom(value);
              } else {
                valueBuilder_.setMessage(value);
              }
            }
            boundaryCase_ = 3;
            return this;
          }
          /**
           * <pre>
           * This is an expression for future proofing. We are expecting literals on the server side.
           * </pre>
           *
           * <code>.spark.connect.Expression value = 3;</code>
           */
          public Builder clearValue() {
            if (valueBuilder_ == null) {
              if (boundaryCase_ == 3) {
                boundaryCase_ = 0;
                boundary_ = null;
                onChanged();
              }
            } else {
              if (boundaryCase_ == 3) {
                boundaryCase_ = 0;
                boundary_ = null;
              }
              valueBuilder_.clear();
            }
            return this;
          }
          /**
           * <pre>
           * This is an expression for future proofing. We are expecting literals on the server side.
           * </pre>
           *
           * <code>.spark.connect.Expression value = 3;</code>
           */
          public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getValueBuilder() {
            return getValueFieldBuilder().getBuilder();
          }
          /**
           * <pre>
           * This is an expression for future proofing. We are expecting literals on the server side.
           * </pre>
           *
           * <code>.spark.connect.Expression value = 3;</code>
           */
          @java.lang.Override
          public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getValueOrBuilder() {
            if ((boundaryCase_ == 3) && (valueBuilder_ != null)) {
              return valueBuilder_.getMessageOrBuilder();
            } else {
              if (boundaryCase_ == 3) {
                return (org.apache.kyuubi.engine.spark.connect.proto.Expression) boundary_;
              }
              return org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance();
            }
          }
          /**
           * <pre>
           * This is an expression for future proofing. We are expecting literals on the server side.
           * </pre>
           *
           * <code>.spark.connect.Expression value = 3;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
              getValueFieldBuilder() {
            if (valueBuilder_ == null) {
              if (!(boundaryCase_ == 3)) {
                boundary_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance();
              }
              valueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                      (org.apache.kyuubi.engine.spark.connect.proto.Expression) boundary_,
                      getParentForChildren(),
                      isClean());
              boundary_ = null;
            }
            boundaryCase_ = 3;
            onChanged();;
            return valueBuilder_;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Window.WindowFrame.FrameBoundary)
        }

        // @@protoc_insertion_point(class_scope:spark.connect.Expression.Window.WindowFrame.FrameBoundary)
        private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary();
        }

        public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<FrameBoundary>
            PARSER = new com.google.protobuf.AbstractParser<FrameBoundary>() {
          @java.lang.Override
          public FrameBoundary parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<FrameBoundary> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<FrameBoundary> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public static final int FRAME_TYPE_FIELD_NUMBER = 1;
      private int frameType_;
      /**
       * <pre>
       * (Required) The type of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameType frame_type = 1;</code>
       * @return The enum numeric value on the wire for frameType.
       */
      @java.lang.Override public int getFrameTypeValue() {
        return frameType_;
      }
      /**
       * <pre>
       * (Required) The type of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameType frame_type = 1;</code>
       * @return The frameType.
       */
      @java.lang.Override public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType getFrameType() {
        @SuppressWarnings("deprecation")
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType result = org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType.valueOf(frameType_);
        return result == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType.UNRECOGNIZED : result;
      }

      public static final int LOWER_FIELD_NUMBER = 2;
      private org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary lower_;
      /**
       * <pre>
       * (Required) The lower bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
       * @return Whether the lower field is set.
       */
      @java.lang.Override
      public boolean hasLower() {
        return lower_ != null;
      }
      /**
       * <pre>
       * (Required) The lower bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
       * @return The lower.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary getLower() {
        return lower_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.getDefaultInstance() : lower_;
      }
      /**
       * <pre>
       * (Required) The lower bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder getLowerOrBuilder() {
        return getLower();
      }

      public static final int UPPER_FIELD_NUMBER = 3;
      private org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary upper_;
      /**
       * <pre>
       * (Required) The upper bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
       * @return Whether the upper field is set.
       */
      @java.lang.Override
      public boolean hasUpper() {
        return upper_ != null;
      }
      /**
       * <pre>
       * (Required) The upper bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
       * @return The upper.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary getUpper() {
        return upper_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.getDefaultInstance() : upper_;
      }
      /**
       * <pre>
       * (Required) The upper bound of the frame.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder getUpperOrBuilder() {
        return getUpper();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (frameType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType.FRAME_TYPE_UNDEFINED.getNumber()) {
          output.writeEnum(1, frameType_);
        }
        if (lower_ != null) {
          output.writeMessage(2, getLower());
        }
        if (upper_ != null) {
          output.writeMessage(3, getUpper());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (frameType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType.FRAME_TYPE_UNDEFINED.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, frameType_);
        }
        if (lower_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getLower());
        }
        if (upper_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getUpper());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame)) {
          return super.equals(obj);
        }
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame) obj;

        if (frameType_ != other.frameType_) return false;
        if (hasLower() != other.hasLower()) return false;
        if (hasLower()) {
          if (!getLower()
              .equals(other.getLower())) return false;
        }
        if (hasUpper() != other.hasUpper()) return false;
        if (hasUpper()) {
          if (!getUpper()
              .equals(other.getUpper())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + FRAME_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + frameType_;
        if (hasLower()) {
          hash = (37 * hash) + LOWER_FIELD_NUMBER;
          hash = (53 * hash) + getLower().hashCode();
        }
        if (hasUpper()) {
          hash = (37 * hash) + UPPER_FIELD_NUMBER;
          hash = (53 * hash) + getUpper().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * The window frame
       * </pre>
       *
       * Protobuf type {@code spark.connect.Expression.Window.WindowFrame}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Window.WindowFrame)
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrameOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_WindowFrame_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_WindowFrame_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.Builder.class);
        }

        // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          frameType_ = 0;

          if (lowerBuilder_ == null) {
            lower_ = null;
          } else {
            lower_ = null;
            lowerBuilder_ = null;
          }
          if (upperBuilder_ == null) {
            upper_ = null;
          } else {
            upper_ = null;
            upperBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_WindowFrame_descriptor;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame getDefaultInstanceForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame build() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame buildPartial() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame(this);
          result.frameType_ = frameType_;
          if (lowerBuilder_ == null) {
            result.lower_ = lower_;
          } else {
            result.lower_ = lowerBuilder_.build();
          }
          if (upperBuilder_ == null) {
            result.upper_ = upper_;
          } else {
            result.upper_ = upperBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame) {
            return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame other) {
          if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.getDefaultInstance()) return this;
          if (other.frameType_ != 0) {
            setFrameTypeValue(other.getFrameTypeValue());
          }
          if (other.hasLower()) {
            mergeLower(other.getLower());
          }
          if (other.hasUpper()) {
            mergeUpper(other.getUpper());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  frameType_ = input.readEnum();

                  break;
                } // case 8
                case 18: {
                  input.readMessage(
                      getLowerFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 18
                case 26: {
                  input.readMessage(
                      getUpperFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 26
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int frameType_ = 0;
        /**
         * <pre>
         * (Required) The type of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameType frame_type = 1;</code>
         * @return The enum numeric value on the wire for frameType.
         */
        @java.lang.Override public int getFrameTypeValue() {
          return frameType_;
        }
        /**
         * <pre>
         * (Required) The type of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameType frame_type = 1;</code>
         * @param value The enum numeric value on the wire for frameType to set.
         * @return This builder for chaining.
         */
        public Builder setFrameTypeValue(int value) {
          
          frameType_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The type of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameType frame_type = 1;</code>
         * @return The frameType.
         */
        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType getFrameType() {
          @SuppressWarnings("deprecation")
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType result = org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType.valueOf(frameType_);
          return result == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType.UNRECOGNIZED : result;
        }
        /**
         * <pre>
         * (Required) The type of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameType frame_type = 1;</code>
         * @param value The frameType to set.
         * @return This builder for chaining.
         */
        public Builder setFrameType(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          frameType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The type of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameType frame_type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearFrameType() {
          
          frameType_ = 0;
          onChanged();
          return this;
        }

        private org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary lower_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder> lowerBuilder_;
        /**
         * <pre>
         * (Required) The lower bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
         * @return Whether the lower field is set.
         */
        public boolean hasLower() {
          return lowerBuilder_ != null || lower_ != null;
        }
        /**
         * <pre>
         * (Required) The lower bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
         * @return The lower.
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary getLower() {
          if (lowerBuilder_ == null) {
            return lower_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.getDefaultInstance() : lower_;
          } else {
            return lowerBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * (Required) The lower bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
         */
        public Builder setLower(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary value) {
          if (lowerBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            lower_ = value;
            onChanged();
          } else {
            lowerBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * (Required) The lower bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
         */
        public Builder setLower(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder builderForValue) {
          if (lowerBuilder_ == null) {
            lower_ = builderForValue.build();
            onChanged();
          } else {
            lowerBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * (Required) The lower bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
         */
        public Builder mergeLower(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary value) {
          if (lowerBuilder_ == null) {
            if (lower_ != null) {
              lower_ =
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.newBuilder(lower_).mergeFrom(value).buildPartial();
            } else {
              lower_ = value;
            }
            onChanged();
          } else {
            lowerBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * (Required) The lower bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
         */
        public Builder clearLower() {
          if (lowerBuilder_ == null) {
            lower_ = null;
            onChanged();
          } else {
            lower_ = null;
            lowerBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * (Required) The lower bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder getLowerBuilder() {
          
          onChanged();
          return getLowerFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * (Required) The lower bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder getLowerOrBuilder() {
          if (lowerBuilder_ != null) {
            return lowerBuilder_.getMessageOrBuilder();
          } else {
            return lower_ == null ?
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.getDefaultInstance() : lower_;
          }
        }
        /**
         * <pre>
         * (Required) The lower bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary lower = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder> 
            getLowerFieldBuilder() {
          if (lowerBuilder_ == null) {
            lowerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder>(
                    getLower(),
                    getParentForChildren(),
                    isClean());
            lower_ = null;
          }
          return lowerBuilder_;
        }

        private org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary upper_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder> upperBuilder_;
        /**
         * <pre>
         * (Required) The upper bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
         * @return Whether the upper field is set.
         */
        public boolean hasUpper() {
          return upperBuilder_ != null || upper_ != null;
        }
        /**
         * <pre>
         * (Required) The upper bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
         * @return The upper.
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary getUpper() {
          if (upperBuilder_ == null) {
            return upper_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.getDefaultInstance() : upper_;
          } else {
            return upperBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * (Required) The upper bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
         */
        public Builder setUpper(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary value) {
          if (upperBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            upper_ = value;
            onChanged();
          } else {
            upperBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * (Required) The upper bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
         */
        public Builder setUpper(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder builderForValue) {
          if (upperBuilder_ == null) {
            upper_ = builderForValue.build();
            onChanged();
          } else {
            upperBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * (Required) The upper bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
         */
        public Builder mergeUpper(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary value) {
          if (upperBuilder_ == null) {
            if (upper_ != null) {
              upper_ =
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.newBuilder(upper_).mergeFrom(value).buildPartial();
            } else {
              upper_ = value;
            }
            onChanged();
          } else {
            upperBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * (Required) The upper bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
         */
        public Builder clearUpper() {
          if (upperBuilder_ == null) {
            upper_ = null;
            onChanged();
          } else {
            upper_ = null;
            upperBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * (Required) The upper bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder getUpperBuilder() {
          
          onChanged();
          return getUpperFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * (Required) The upper bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder getUpperOrBuilder() {
          if (upperBuilder_ != null) {
            return upperBuilder_.getMessageOrBuilder();
          } else {
            return upper_ == null ?
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.getDefaultInstance() : upper_;
          }
        }
        /**
         * <pre>
         * (Required) The upper bound of the frame.
         * </pre>
         *
         * <code>.spark.connect.Expression.Window.WindowFrame.FrameBoundary upper = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder> 
            getUpperFieldBuilder() {
          if (upperBuilder_ == null) {
            upperBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundary.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.FrameBoundaryOrBuilder>(
                    getUpper(),
                    getParentForChildren(),
                    isClean());
            upper_ = null;
          }
          return upperBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Window.WindowFrame)
      }

      // @@protoc_insertion_point(class_scope:spark.connect.Expression.Window.WindowFrame)
      private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame();
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<WindowFrame>
          PARSER = new com.google.protobuf.AbstractParser<WindowFrame>() {
        @java.lang.Override
        public WindowFrame parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<WindowFrame> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<WindowFrame> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int WINDOW_FUNCTION_FIELD_NUMBER = 1;
    private org.apache.kyuubi.engine.spark.connect.proto.Expression windowFunction_;
    /**
     * <pre>
     * (Required) The window function.
     * </pre>
     *
     * <code>.spark.connect.Expression window_function = 1;</code>
     * @return Whether the windowFunction field is set.
     */
    @java.lang.Override
    public boolean hasWindowFunction() {
      return windowFunction_ != null;
    }
    /**
     * <pre>
     * (Required) The window function.
     * </pre>
     *
     * <code>.spark.connect.Expression window_function = 1;</code>
     * @return The windowFunction.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getWindowFunction() {
      return windowFunction_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : windowFunction_;
    }
    /**
     * <pre>
     * (Required) The window function.
     * </pre>
     *
     * <code>.spark.connect.Expression window_function = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getWindowFunctionOrBuilder() {
      return getWindowFunction();
    }

    public static final int PARTITION_SPEC_FIELD_NUMBER = 2;
    private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> partitionSpec_;
    /**
     * <pre>
     * (Optional) The way that input rows are partitioned.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> getPartitionSpecList() {
      return partitionSpec_;
    }
    /**
     * <pre>
     * (Optional) The way that input rows are partitioned.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
        getPartitionSpecOrBuilderList() {
      return partitionSpec_;
    }
    /**
     * <pre>
     * (Optional) The way that input rows are partitioned.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
     */
    @java.lang.Override
    public int getPartitionSpecCount() {
      return partitionSpec_.size();
    }
    /**
     * <pre>
     * (Optional) The way that input rows are partitioned.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getPartitionSpec(int index) {
      return partitionSpec_.get(index);
    }
    /**
     * <pre>
     * (Optional) The way that input rows are partitioned.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getPartitionSpecOrBuilder(
        int index) {
      return partitionSpec_.get(index);
    }

    public static final int ORDER_SPEC_FIELD_NUMBER = 3;
    private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder> orderSpec_;
    /**
     * <pre>
     * (Optional) Ordering of rows in a partition.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder> getOrderSpecList() {
      return orderSpec_;
    }
    /**
     * <pre>
     * (Optional) Ordering of rows in a partition.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder> 
        getOrderSpecOrBuilderList() {
      return orderSpec_;
    }
    /**
     * <pre>
     * (Optional) Ordering of rows in a partition.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
     */
    @java.lang.Override
    public int getOrderSpecCount() {
      return orderSpec_.size();
    }
    /**
     * <pre>
     * (Optional) Ordering of rows in a partition.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder getOrderSpec(int index) {
      return orderSpec_.get(index);
    }
    /**
     * <pre>
     * (Optional) Ordering of rows in a partition.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder getOrderSpecOrBuilder(
        int index) {
      return orderSpec_.get(index);
    }

    public static final int FRAME_SPEC_FIELD_NUMBER = 4;
    private org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame frameSpec_;
    /**
     * <pre>
     * (Optional) Window frame in a partition.
     * If not set, it will be treated as 'UnspecifiedFrame'.
     * </pre>
     *
     * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
     * @return Whether the frameSpec field is set.
     */
    @java.lang.Override
    public boolean hasFrameSpec() {
      return frameSpec_ != null;
    }
    /**
     * <pre>
     * (Optional) Window frame in a partition.
     * If not set, it will be treated as 'UnspecifiedFrame'.
     * </pre>
     *
     * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
     * @return The frameSpec.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame getFrameSpec() {
      return frameSpec_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.getDefaultInstance() : frameSpec_;
    }
    /**
     * <pre>
     * (Optional) Window frame in a partition.
     * If not set, it will be treated as 'UnspecifiedFrame'.
     * </pre>
     *
     * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrameOrBuilder getFrameSpecOrBuilder() {
      return getFrameSpec();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (windowFunction_ != null) {
        output.writeMessage(1, getWindowFunction());
      }
      for (int i = 0; i < partitionSpec_.size(); i++) {
        output.writeMessage(2, partitionSpec_.get(i));
      }
      for (int i = 0; i < orderSpec_.size(); i++) {
        output.writeMessage(3, orderSpec_.get(i));
      }
      if (frameSpec_ != null) {
        output.writeMessage(4, getFrameSpec());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (windowFunction_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getWindowFunction());
      }
      for (int i = 0; i < partitionSpec_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, partitionSpec_.get(i));
      }
      for (int i = 0; i < orderSpec_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, orderSpec_.get(i));
      }
      if (frameSpec_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getFrameSpec());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Window)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Window other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Window) obj;

      if (hasWindowFunction() != other.hasWindowFunction()) return false;
      if (hasWindowFunction()) {
        if (!getWindowFunction()
            .equals(other.getWindowFunction())) return false;
      }
      if (!getPartitionSpecList()
          .equals(other.getPartitionSpecList())) return false;
      if (!getOrderSpecList()
          .equals(other.getOrderSpecList())) return false;
      if (hasFrameSpec() != other.hasFrameSpec()) return false;
      if (hasFrameSpec()) {
        if (!getFrameSpec()
            .equals(other.getFrameSpec())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasWindowFunction()) {
        hash = (37 * hash) + WINDOW_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getWindowFunction().hashCode();
      }
      if (getPartitionSpecCount() > 0) {
        hash = (37 * hash) + PARTITION_SPEC_FIELD_NUMBER;
        hash = (53 * hash) + getPartitionSpecList().hashCode();
      }
      if (getOrderSpecCount() > 0) {
        hash = (37 * hash) + ORDER_SPEC_FIELD_NUMBER;
        hash = (53 * hash) + getOrderSpecList().hashCode();
      }
      if (hasFrameSpec()) {
        hash = (37 * hash) + FRAME_SPEC_FIELD_NUMBER;
        hash = (53 * hash) + getFrameSpec().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Expression for the OVER clause or WINDOW clause.
     * </pre>
     *
     * Protobuf type {@code spark.connect.Expression.Window}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Window)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.WindowOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (windowFunctionBuilder_ == null) {
          windowFunction_ = null;
        } else {
          windowFunction_ = null;
          windowFunctionBuilder_ = null;
        }
        if (partitionSpecBuilder_ == null) {
          partitionSpec_ = java.util.Collections.emptyList();
        } else {
          partitionSpec_ = null;
          partitionSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (orderSpecBuilder_ == null) {
          orderSpec_ = java.util.Collections.emptyList();
        } else {
          orderSpec_ = null;
          orderSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (frameSpecBuilder_ == null) {
          frameSpec_ = null;
        } else {
          frameSpec_ = null;
          frameSpecBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Window_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Window result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Window result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Window(this);
        int from_bitField0_ = bitField0_;
        if (windowFunctionBuilder_ == null) {
          result.windowFunction_ = windowFunction_;
        } else {
          result.windowFunction_ = windowFunctionBuilder_.build();
        }
        if (partitionSpecBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            partitionSpec_ = java.util.Collections.unmodifiableList(partitionSpec_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.partitionSpec_ = partitionSpec_;
        } else {
          result.partitionSpec_ = partitionSpecBuilder_.build();
        }
        if (orderSpecBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            orderSpec_ = java.util.Collections.unmodifiableList(orderSpec_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.orderSpec_ = orderSpec_;
        } else {
          result.orderSpec_ = orderSpecBuilder_.build();
        }
        if (frameSpecBuilder_ == null) {
          result.frameSpec_ = frameSpec_;
        } else {
          result.frameSpec_ = frameSpecBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Window) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Window)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.getDefaultInstance()) return this;
        if (other.hasWindowFunction()) {
          mergeWindowFunction(other.getWindowFunction());
        }
        if (partitionSpecBuilder_ == null) {
          if (!other.partitionSpec_.isEmpty()) {
            if (partitionSpec_.isEmpty()) {
              partitionSpec_ = other.partitionSpec_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePartitionSpecIsMutable();
              partitionSpec_.addAll(other.partitionSpec_);
            }
            onChanged();
          }
        } else {
          if (!other.partitionSpec_.isEmpty()) {
            if (partitionSpecBuilder_.isEmpty()) {
              partitionSpecBuilder_.dispose();
              partitionSpecBuilder_ = null;
              partitionSpec_ = other.partitionSpec_;
              bitField0_ = (bitField0_ & ~0x00000001);
              partitionSpecBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPartitionSpecFieldBuilder() : null;
            } else {
              partitionSpecBuilder_.addAllMessages(other.partitionSpec_);
            }
          }
        }
        if (orderSpecBuilder_ == null) {
          if (!other.orderSpec_.isEmpty()) {
            if (orderSpec_.isEmpty()) {
              orderSpec_ = other.orderSpec_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureOrderSpecIsMutable();
              orderSpec_.addAll(other.orderSpec_);
            }
            onChanged();
          }
        } else {
          if (!other.orderSpec_.isEmpty()) {
            if (orderSpecBuilder_.isEmpty()) {
              orderSpecBuilder_.dispose();
              orderSpecBuilder_ = null;
              orderSpec_ = other.orderSpec_;
              bitField0_ = (bitField0_ & ~0x00000002);
              orderSpecBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOrderSpecFieldBuilder() : null;
            } else {
              orderSpecBuilder_.addAllMessages(other.orderSpec_);
            }
          }
        }
        if (other.hasFrameSpec()) {
          mergeFrameSpec(other.getFrameSpec());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getWindowFunctionFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 10
              case 18: {
                org.apache.kyuubi.engine.spark.connect.proto.Expression m =
                    input.readMessage(
                        org.apache.kyuubi.engine.spark.connect.proto.Expression.parser(),
                        extensionRegistry);
                if (partitionSpecBuilder_ == null) {
                  ensurePartitionSpecIsMutable();
                  partitionSpec_.add(m);
                } else {
                  partitionSpecBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder m =
                    input.readMessage(
                        org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.parser(),
                        extensionRegistry);
                if (orderSpecBuilder_ == null) {
                  ensureOrderSpecIsMutable();
                  orderSpec_.add(m);
                } else {
                  orderSpecBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getFrameSpecFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.kyuubi.engine.spark.connect.proto.Expression windowFunction_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> windowFunctionBuilder_;
      /**
       * <pre>
       * (Required) The window function.
       * </pre>
       *
       * <code>.spark.connect.Expression window_function = 1;</code>
       * @return Whether the windowFunction field is set.
       */
      public boolean hasWindowFunction() {
        return windowFunctionBuilder_ != null || windowFunction_ != null;
      }
      /**
       * <pre>
       * (Required) The window function.
       * </pre>
       *
       * <code>.spark.connect.Expression window_function = 1;</code>
       * @return The windowFunction.
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getWindowFunction() {
        if (windowFunctionBuilder_ == null) {
          return windowFunction_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : windowFunction_;
        } else {
          return windowFunctionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The window function.
       * </pre>
       *
       * <code>.spark.connect.Expression window_function = 1;</code>
       */
      public Builder setWindowFunction(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (windowFunctionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          windowFunction_ = value;
          onChanged();
        } else {
          windowFunctionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The window function.
       * </pre>
       *
       * <code>.spark.connect.Expression window_function = 1;</code>
       */
      public Builder setWindowFunction(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (windowFunctionBuilder_ == null) {
          windowFunction_ = builderForValue.build();
          onChanged();
        } else {
          windowFunctionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The window function.
       * </pre>
       *
       * <code>.spark.connect.Expression window_function = 1;</code>
       */
      public Builder mergeWindowFunction(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (windowFunctionBuilder_ == null) {
          if (windowFunction_ != null) {
            windowFunction_ =
              org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(windowFunction_).mergeFrom(value).buildPartial();
          } else {
            windowFunction_ = value;
          }
          onChanged();
        } else {
          windowFunctionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The window function.
       * </pre>
       *
       * <code>.spark.connect.Expression window_function = 1;</code>
       */
      public Builder clearWindowFunction() {
        if (windowFunctionBuilder_ == null) {
          windowFunction_ = null;
          onChanged();
        } else {
          windowFunction_ = null;
          windowFunctionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The window function.
       * </pre>
       *
       * <code>.spark.connect.Expression window_function = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getWindowFunctionBuilder() {
        
        onChanged();
        return getWindowFunctionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The window function.
       * </pre>
       *
       * <code>.spark.connect.Expression window_function = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getWindowFunctionOrBuilder() {
        if (windowFunctionBuilder_ != null) {
          return windowFunctionBuilder_.getMessageOrBuilder();
        } else {
          return windowFunction_ == null ?
              org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : windowFunction_;
        }
      }
      /**
       * <pre>
       * (Required) The window function.
       * </pre>
       *
       * <code>.spark.connect.Expression window_function = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getWindowFunctionFieldBuilder() {
        if (windowFunctionBuilder_ == null) {
          windowFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  getWindowFunction(),
                  getParentForChildren(),
                  isClean());
          windowFunction_ = null;
        }
        return windowFunctionBuilder_;
      }

      private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> partitionSpec_ =
        java.util.Collections.emptyList();
      private void ensurePartitionSpecIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          partitionSpec_ = new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.proto.Expression>(partitionSpec_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> partitionSpecBuilder_;

      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> getPartitionSpecList() {
        if (partitionSpecBuilder_ == null) {
          return java.util.Collections.unmodifiableList(partitionSpec_);
        } else {
          return partitionSpecBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public int getPartitionSpecCount() {
        if (partitionSpecBuilder_ == null) {
          return partitionSpec_.size();
        } else {
          return partitionSpecBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getPartitionSpec(int index) {
        if (partitionSpecBuilder_ == null) {
          return partitionSpec_.get(index);
        } else {
          return partitionSpecBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public Builder setPartitionSpec(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (partitionSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePartitionSpecIsMutable();
          partitionSpec_.set(index, value);
          onChanged();
        } else {
          partitionSpecBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public Builder setPartitionSpec(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (partitionSpecBuilder_ == null) {
          ensurePartitionSpecIsMutable();
          partitionSpec_.set(index, builderForValue.build());
          onChanged();
        } else {
          partitionSpecBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public Builder addPartitionSpec(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (partitionSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePartitionSpecIsMutable();
          partitionSpec_.add(value);
          onChanged();
        } else {
          partitionSpecBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public Builder addPartitionSpec(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (partitionSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePartitionSpecIsMutable();
          partitionSpec_.add(index, value);
          onChanged();
        } else {
          partitionSpecBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public Builder addPartitionSpec(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (partitionSpecBuilder_ == null) {
          ensurePartitionSpecIsMutable();
          partitionSpec_.add(builderForValue.build());
          onChanged();
        } else {
          partitionSpecBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public Builder addPartitionSpec(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (partitionSpecBuilder_ == null) {
          ensurePartitionSpecIsMutable();
          partitionSpec_.add(index, builderForValue.build());
          onChanged();
        } else {
          partitionSpecBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public Builder addAllPartitionSpec(
          java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression> values) {
        if (partitionSpecBuilder_ == null) {
          ensurePartitionSpecIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, partitionSpec_);
          onChanged();
        } else {
          partitionSpecBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public Builder clearPartitionSpec() {
        if (partitionSpecBuilder_ == null) {
          partitionSpec_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          partitionSpecBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public Builder removePartitionSpec(int index) {
        if (partitionSpecBuilder_ == null) {
          ensurePartitionSpecIsMutable();
          partitionSpec_.remove(index);
          onChanged();
        } else {
          partitionSpecBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getPartitionSpecBuilder(
          int index) {
        return getPartitionSpecFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getPartitionSpecOrBuilder(
          int index) {
        if (partitionSpecBuilder_ == null) {
          return partitionSpec_.get(index);  } else {
          return partitionSpecBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
           getPartitionSpecOrBuilderList() {
        if (partitionSpecBuilder_ != null) {
          return partitionSpecBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(partitionSpec_);
        }
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder addPartitionSpecBuilder() {
        return getPartitionSpecFieldBuilder().addBuilder(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder addPartitionSpecBuilder(
          int index) {
        return getPartitionSpecFieldBuilder().addBuilder(
            index, org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) The way that input rows are partitioned.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression partition_spec = 2;</code>
       */
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder> 
           getPartitionSpecBuilderList() {
        return getPartitionSpecFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getPartitionSpecFieldBuilder() {
        if (partitionSpecBuilder_ == null) {
          partitionSpecBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  partitionSpec_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          partitionSpec_ = null;
        }
        return partitionSpecBuilder_;
      }

      private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder> orderSpec_ =
        java.util.Collections.emptyList();
      private void ensureOrderSpecIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          orderSpec_ = new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder>(orderSpec_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder> orderSpecBuilder_;

      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder> getOrderSpecList() {
        if (orderSpecBuilder_ == null) {
          return java.util.Collections.unmodifiableList(orderSpec_);
        } else {
          return orderSpecBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public int getOrderSpecCount() {
        if (orderSpecBuilder_ == null) {
          return orderSpec_.size();
        } else {
          return orderSpecBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder getOrderSpec(int index) {
        if (orderSpecBuilder_ == null) {
          return orderSpec_.get(index);
        } else {
          return orderSpecBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public Builder setOrderSpec(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder value) {
        if (orderSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrderSpecIsMutable();
          orderSpec_.set(index, value);
          onChanged();
        } else {
          orderSpecBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public Builder setOrderSpec(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder builderForValue) {
        if (orderSpecBuilder_ == null) {
          ensureOrderSpecIsMutable();
          orderSpec_.set(index, builderForValue.build());
          onChanged();
        } else {
          orderSpecBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public Builder addOrderSpec(org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder value) {
        if (orderSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrderSpecIsMutable();
          orderSpec_.add(value);
          onChanged();
        } else {
          orderSpecBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public Builder addOrderSpec(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder value) {
        if (orderSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrderSpecIsMutable();
          orderSpec_.add(index, value);
          onChanged();
        } else {
          orderSpecBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public Builder addOrderSpec(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder builderForValue) {
        if (orderSpecBuilder_ == null) {
          ensureOrderSpecIsMutable();
          orderSpec_.add(builderForValue.build());
          onChanged();
        } else {
          orderSpecBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public Builder addOrderSpec(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder builderForValue) {
        if (orderSpecBuilder_ == null) {
          ensureOrderSpecIsMutable();
          orderSpec_.add(index, builderForValue.build());
          onChanged();
        } else {
          orderSpecBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public Builder addAllOrderSpec(
          java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder> values) {
        if (orderSpecBuilder_ == null) {
          ensureOrderSpecIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, orderSpec_);
          onChanged();
        } else {
          orderSpecBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public Builder clearOrderSpec() {
        if (orderSpecBuilder_ == null) {
          orderSpec_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          orderSpecBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public Builder removeOrderSpec(int index) {
        if (orderSpecBuilder_ == null) {
          ensureOrderSpecIsMutable();
          orderSpec_.remove(index);
          onChanged();
        } else {
          orderSpecBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder getOrderSpecBuilder(
          int index) {
        return getOrderSpecFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder getOrderSpecOrBuilder(
          int index) {
        if (orderSpecBuilder_ == null) {
          return orderSpec_.get(index);  } else {
          return orderSpecBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder> 
           getOrderSpecOrBuilderList() {
        if (orderSpecBuilder_ != null) {
          return orderSpecBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(orderSpec_);
        }
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder addOrderSpecBuilder() {
        return getOrderSpecFieldBuilder().addBuilder(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder addOrderSpecBuilder(
          int index) {
        return getOrderSpecFieldBuilder().addBuilder(
            index, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) Ordering of rows in a partition.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.SortOrder order_spec = 3;</code>
       */
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder> 
           getOrderSpecBuilderList() {
        return getOrderSpecFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder> 
          getOrderSpecFieldBuilder() {
        if (orderSpecBuilder_ == null) {
          orderSpecBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder>(
                  orderSpec_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          orderSpec_ = null;
        }
        return orderSpecBuilder_;
      }

      private org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame frameSpec_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrameOrBuilder> frameSpecBuilder_;
      /**
       * <pre>
       * (Optional) Window frame in a partition.
       * If not set, it will be treated as 'UnspecifiedFrame'.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
       * @return Whether the frameSpec field is set.
       */
      public boolean hasFrameSpec() {
        return frameSpecBuilder_ != null || frameSpec_ != null;
      }
      /**
       * <pre>
       * (Optional) Window frame in a partition.
       * If not set, it will be treated as 'UnspecifiedFrame'.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
       * @return The frameSpec.
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame getFrameSpec() {
        if (frameSpecBuilder_ == null) {
          return frameSpec_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.getDefaultInstance() : frameSpec_;
        } else {
          return frameSpecBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Optional) Window frame in a partition.
       * If not set, it will be treated as 'UnspecifiedFrame'.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
       */
      public Builder setFrameSpec(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame value) {
        if (frameSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          frameSpec_ = value;
          onChanged();
        } else {
          frameSpecBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Window frame in a partition.
       * If not set, it will be treated as 'UnspecifiedFrame'.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
       */
      public Builder setFrameSpec(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.Builder builderForValue) {
        if (frameSpecBuilder_ == null) {
          frameSpec_ = builderForValue.build();
          onChanged();
        } else {
          frameSpecBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Window frame in a partition.
       * If not set, it will be treated as 'UnspecifiedFrame'.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
       */
      public Builder mergeFrameSpec(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame value) {
        if (frameSpecBuilder_ == null) {
          if (frameSpec_ != null) {
            frameSpec_ =
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.newBuilder(frameSpec_).mergeFrom(value).buildPartial();
          } else {
            frameSpec_ = value;
          }
          onChanged();
        } else {
          frameSpecBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Window frame in a partition.
       * If not set, it will be treated as 'UnspecifiedFrame'.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
       */
      public Builder clearFrameSpec() {
        if (frameSpecBuilder_ == null) {
          frameSpec_ = null;
          onChanged();
        } else {
          frameSpec_ = null;
          frameSpecBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Window frame in a partition.
       * If not set, it will be treated as 'UnspecifiedFrame'.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.Builder getFrameSpecBuilder() {
        
        onChanged();
        return getFrameSpecFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Optional) Window frame in a partition.
       * If not set, it will be treated as 'UnspecifiedFrame'.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrameOrBuilder getFrameSpecOrBuilder() {
        if (frameSpecBuilder_ != null) {
          return frameSpecBuilder_.getMessageOrBuilder();
        } else {
          return frameSpec_ == null ?
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.getDefaultInstance() : frameSpec_;
        }
      }
      /**
       * <pre>
       * (Optional) Window frame in a partition.
       * If not set, it will be treated as 'UnspecifiedFrame'.
       * </pre>
       *
       * <code>.spark.connect.Expression.Window.WindowFrame frame_spec = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrameOrBuilder> 
          getFrameSpecFieldBuilder() {
        if (frameSpecBuilder_ == null) {
          frameSpecBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrame.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.WindowFrameOrBuilder>(
                  getFrameSpec(),
                  getParentForChildren(),
                  isClean());
          frameSpec_ = null;
        }
        return frameSpecBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Window)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.Window)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Window DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Window();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Window getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Window>
        PARSER = new com.google.protobuf.AbstractParser<Window>() {
      @java.lang.Override
      public Window parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Window> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Window> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SortOrderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.SortOrder)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The expression to be sorted.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     * @return Whether the child field is set.
     */
    boolean hasChild();
    /**
     * <pre>
     * (Required) The expression to be sorted.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     * @return The child.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getChild();
    /**
     * <pre>
     * (Required) The expression to be sorted.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getChildOrBuilder();

    /**
     * <pre>
     * (Required) The sort direction, should be ASCENDING or DESCENDING.
     * </pre>
     *
     * <code>.spark.connect.Expression.SortOrder.SortDirection direction = 2;</code>
     * @return The enum numeric value on the wire for direction.
     */
    int getDirectionValue();
    /**
     * <pre>
     * (Required) The sort direction, should be ASCENDING or DESCENDING.
     * </pre>
     *
     * <code>.spark.connect.Expression.SortOrder.SortDirection direction = 2;</code>
     * @return The direction.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection getDirection();

    /**
     * <pre>
     * (Required) How to deal with NULLs, should be NULLS_FIRST or NULLS_LAST.
     * </pre>
     *
     * <code>.spark.connect.Expression.SortOrder.NullOrdering null_ordering = 3;</code>
     * @return The enum numeric value on the wire for nullOrdering.
     */
    int getNullOrderingValue();
    /**
     * <pre>
     * (Required) How to deal with NULLs, should be NULLS_FIRST or NULLS_LAST.
     * </pre>
     *
     * <code>.spark.connect.Expression.SortOrder.NullOrdering null_ordering = 3;</code>
     * @return The nullOrdering.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering getNullOrdering();
  }
  /**
   * <pre>
   * SortOrder is used to specify the  data ordering, it is normally used in Sort and Window.
   * It is an unevaluable expression and cannot be evaluated, so can not be used in Projection.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Expression.SortOrder}
   */
  public static final class SortOrder extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.SortOrder)
      SortOrderOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SortOrder.newBuilder() to construct.
    private SortOrder(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SortOrder() {
      direction_ = 0;
      nullOrdering_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SortOrder();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_SortOrder_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_SortOrder_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder.class);
    }

    /**
     * Protobuf enum {@code spark.connect.Expression.SortOrder.SortDirection}
     */
    public enum SortDirection
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SORT_DIRECTION_UNSPECIFIED = 0;</code>
       */
      SORT_DIRECTION_UNSPECIFIED(0),
      /**
       * <code>SORT_DIRECTION_ASCENDING = 1;</code>
       */
      SORT_DIRECTION_ASCENDING(1),
      /**
       * <code>SORT_DIRECTION_DESCENDING = 2;</code>
       */
      SORT_DIRECTION_DESCENDING(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SORT_DIRECTION_UNSPECIFIED = 0;</code>
       */
      public static final int SORT_DIRECTION_UNSPECIFIED_VALUE = 0;
      /**
       * <code>SORT_DIRECTION_ASCENDING = 1;</code>
       */
      public static final int SORT_DIRECTION_ASCENDING_VALUE = 1;
      /**
       * <code>SORT_DIRECTION_DESCENDING = 2;</code>
       */
      public static final int SORT_DIRECTION_DESCENDING_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SortDirection valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static SortDirection forNumber(int value) {
        switch (value) {
          case 0: return SORT_DIRECTION_UNSPECIFIED;
          case 1: return SORT_DIRECTION_ASCENDING;
          case 2: return SORT_DIRECTION_DESCENDING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SortDirection>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SortDirection> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SortDirection>() {
              public SortDirection findValueByNumber(int number) {
                return SortDirection.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDescriptor().getEnumTypes().get(0);
      }

      private static final SortDirection[] VALUES = values();

      public static SortDirection valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SortDirection(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:spark.connect.Expression.SortOrder.SortDirection)
    }

    /**
     * Protobuf enum {@code spark.connect.Expression.SortOrder.NullOrdering}
     */
    public enum NullOrdering
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SORT_NULLS_UNSPECIFIED = 0;</code>
       */
      SORT_NULLS_UNSPECIFIED(0),
      /**
       * <code>SORT_NULLS_FIRST = 1;</code>
       */
      SORT_NULLS_FIRST(1),
      /**
       * <code>SORT_NULLS_LAST = 2;</code>
       */
      SORT_NULLS_LAST(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SORT_NULLS_UNSPECIFIED = 0;</code>
       */
      public static final int SORT_NULLS_UNSPECIFIED_VALUE = 0;
      /**
       * <code>SORT_NULLS_FIRST = 1;</code>
       */
      public static final int SORT_NULLS_FIRST_VALUE = 1;
      /**
       * <code>SORT_NULLS_LAST = 2;</code>
       */
      public static final int SORT_NULLS_LAST_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static NullOrdering valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static NullOrdering forNumber(int value) {
        switch (value) {
          case 0: return SORT_NULLS_UNSPECIFIED;
          case 1: return SORT_NULLS_FIRST;
          case 2: return SORT_NULLS_LAST;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NullOrdering>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          NullOrdering> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NullOrdering>() {
              public NullOrdering findValueByNumber(int number) {
                return NullOrdering.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDescriptor().getEnumTypes().get(1);
      }

      private static final NullOrdering[] VALUES = values();

      public static NullOrdering valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private NullOrdering(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:spark.connect.Expression.SortOrder.NullOrdering)
    }

    public static final int CHILD_FIELD_NUMBER = 1;
    private org.apache.kyuubi.engine.spark.connect.proto.Expression child_;
    /**
     * <pre>
     * (Required) The expression to be sorted.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     * @return Whether the child field is set.
     */
    @java.lang.Override
    public boolean hasChild() {
      return child_ != null;
    }
    /**
     * <pre>
     * (Required) The expression to be sorted.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     * @return The child.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getChild() {
      return child_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : child_;
    }
    /**
     * <pre>
     * (Required) The expression to be sorted.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getChildOrBuilder() {
      return getChild();
    }

    public static final int DIRECTION_FIELD_NUMBER = 2;
    private int direction_;
    /**
     * <pre>
     * (Required) The sort direction, should be ASCENDING or DESCENDING.
     * </pre>
     *
     * <code>.spark.connect.Expression.SortOrder.SortDirection direction = 2;</code>
     * @return The enum numeric value on the wire for direction.
     */
    @java.lang.Override public int getDirectionValue() {
      return direction_;
    }
    /**
     * <pre>
     * (Required) The sort direction, should be ASCENDING or DESCENDING.
     * </pre>
     *
     * <code>.spark.connect.Expression.SortOrder.SortDirection direction = 2;</code>
     * @return The direction.
     */
    @java.lang.Override public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection getDirection() {
      @SuppressWarnings("deprecation")
      org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection result = org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection.valueOf(direction_);
      return result == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection.UNRECOGNIZED : result;
    }

    public static final int NULL_ORDERING_FIELD_NUMBER = 3;
    private int nullOrdering_;
    /**
     * <pre>
     * (Required) How to deal with NULLs, should be NULLS_FIRST or NULLS_LAST.
     * </pre>
     *
     * <code>.spark.connect.Expression.SortOrder.NullOrdering null_ordering = 3;</code>
     * @return The enum numeric value on the wire for nullOrdering.
     */
    @java.lang.Override public int getNullOrderingValue() {
      return nullOrdering_;
    }
    /**
     * <pre>
     * (Required) How to deal with NULLs, should be NULLS_FIRST or NULLS_LAST.
     * </pre>
     *
     * <code>.spark.connect.Expression.SortOrder.NullOrdering null_ordering = 3;</code>
     * @return The nullOrdering.
     */
    @java.lang.Override public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering getNullOrdering() {
      @SuppressWarnings("deprecation")
      org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering result = org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering.valueOf(nullOrdering_);
      return result == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (child_ != null) {
        output.writeMessage(1, getChild());
      }
      if (direction_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection.SORT_DIRECTION_UNSPECIFIED.getNumber()) {
        output.writeEnum(2, direction_);
      }
      if (nullOrdering_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering.SORT_NULLS_UNSPECIFIED.getNumber()) {
        output.writeEnum(3, nullOrdering_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (child_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getChild());
      }
      if (direction_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection.SORT_DIRECTION_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, direction_);
      }
      if (nullOrdering_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering.SORT_NULLS_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, nullOrdering_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder) obj;

      if (hasChild() != other.hasChild()) return false;
      if (hasChild()) {
        if (!getChild()
            .equals(other.getChild())) return false;
      }
      if (direction_ != other.direction_) return false;
      if (nullOrdering_ != other.nullOrdering_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasChild()) {
        hash = (37 * hash) + CHILD_FIELD_NUMBER;
        hash = (53 * hash) + getChild().hashCode();
      }
      hash = (37 * hash) + DIRECTION_FIELD_NUMBER;
      hash = (53 * hash) + direction_;
      hash = (37 * hash) + NULL_ORDERING_FIELD_NUMBER;
      hash = (53 * hash) + nullOrdering_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SortOrder is used to specify the  data ordering, it is normally used in Sort and Window.
     * It is an unevaluable expression and cannot be evaluated, so can not be used in Projection.
     * </pre>
     *
     * Protobuf type {@code spark.connect.Expression.SortOrder}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.SortOrder)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_SortOrder_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_SortOrder_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (childBuilder_ == null) {
          child_ = null;
        } else {
          child_ = null;
          childBuilder_ = null;
        }
        direction_ = 0;

        nullOrdering_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_SortOrder_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder(this);
        if (childBuilder_ == null) {
          result.child_ = child_;
        } else {
          result.child_ = childBuilder_.build();
        }
        result.direction_ = direction_;
        result.nullOrdering_ = nullOrdering_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance()) return this;
        if (other.hasChild()) {
          mergeChild(other.getChild());
        }
        if (other.direction_ != 0) {
          setDirectionValue(other.getDirectionValue());
        }
        if (other.nullOrdering_ != 0) {
          setNullOrderingValue(other.getNullOrderingValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getChildFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 10
              case 16: {
                direction_ = input.readEnum();

                break;
              } // case 16
              case 24: {
                nullOrdering_ = input.readEnum();

                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private org.apache.kyuubi.engine.spark.connect.proto.Expression child_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> childBuilder_;
      /**
       * <pre>
       * (Required) The expression to be sorted.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       * @return Whether the child field is set.
       */
      public boolean hasChild() {
        return childBuilder_ != null || child_ != null;
      }
      /**
       * <pre>
       * (Required) The expression to be sorted.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       * @return The child.
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getChild() {
        if (childBuilder_ == null) {
          return child_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : child_;
        } else {
          return childBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The expression to be sorted.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public Builder setChild(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (childBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          child_ = value;
          onChanged();
        } else {
          childBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to be sorted.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public Builder setChild(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (childBuilder_ == null) {
          child_ = builderForValue.build();
          onChanged();
        } else {
          childBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to be sorted.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public Builder mergeChild(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (childBuilder_ == null) {
          if (child_ != null) {
            child_ =
              org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(child_).mergeFrom(value).buildPartial();
          } else {
            child_ = value;
          }
          onChanged();
        } else {
          childBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to be sorted.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public Builder clearChild() {
        if (childBuilder_ == null) {
          child_ = null;
          onChanged();
        } else {
          child_ = null;
          childBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to be sorted.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getChildBuilder() {
        
        onChanged();
        return getChildFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The expression to be sorted.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getChildOrBuilder() {
        if (childBuilder_ != null) {
          return childBuilder_.getMessageOrBuilder();
        } else {
          return child_ == null ?
              org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : child_;
        }
      }
      /**
       * <pre>
       * (Required) The expression to be sorted.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getChildFieldBuilder() {
        if (childBuilder_ == null) {
          childBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  getChild(),
                  getParentForChildren(),
                  isClean());
          child_ = null;
        }
        return childBuilder_;
      }

      private int direction_ = 0;
      /**
       * <pre>
       * (Required) The sort direction, should be ASCENDING or DESCENDING.
       * </pre>
       *
       * <code>.spark.connect.Expression.SortOrder.SortDirection direction = 2;</code>
       * @return The enum numeric value on the wire for direction.
       */
      @java.lang.Override public int getDirectionValue() {
        return direction_;
      }
      /**
       * <pre>
       * (Required) The sort direction, should be ASCENDING or DESCENDING.
       * </pre>
       *
       * <code>.spark.connect.Expression.SortOrder.SortDirection direction = 2;</code>
       * @param value The enum numeric value on the wire for direction to set.
       * @return This builder for chaining.
       */
      public Builder setDirectionValue(int value) {
        
        direction_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The sort direction, should be ASCENDING or DESCENDING.
       * </pre>
       *
       * <code>.spark.connect.Expression.SortOrder.SortDirection direction = 2;</code>
       * @return The direction.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection getDirection() {
        @SuppressWarnings("deprecation")
        org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection result = org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection.valueOf(direction_);
        return result == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * (Required) The sort direction, should be ASCENDING or DESCENDING.
       * </pre>
       *
       * <code>.spark.connect.Expression.SortOrder.SortDirection direction = 2;</code>
       * @param value The direction to set.
       * @return This builder for chaining.
       */
      public Builder setDirection(org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.SortDirection value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        direction_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The sort direction, should be ASCENDING or DESCENDING.
       * </pre>
       *
       * <code>.spark.connect.Expression.SortOrder.SortDirection direction = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDirection() {
        
        direction_ = 0;
        onChanged();
        return this;
      }

      private int nullOrdering_ = 0;
      /**
       * <pre>
       * (Required) How to deal with NULLs, should be NULLS_FIRST or NULLS_LAST.
       * </pre>
       *
       * <code>.spark.connect.Expression.SortOrder.NullOrdering null_ordering = 3;</code>
       * @return The enum numeric value on the wire for nullOrdering.
       */
      @java.lang.Override public int getNullOrderingValue() {
        return nullOrdering_;
      }
      /**
       * <pre>
       * (Required) How to deal with NULLs, should be NULLS_FIRST or NULLS_LAST.
       * </pre>
       *
       * <code>.spark.connect.Expression.SortOrder.NullOrdering null_ordering = 3;</code>
       * @param value The enum numeric value on the wire for nullOrdering to set.
       * @return This builder for chaining.
       */
      public Builder setNullOrderingValue(int value) {
        
        nullOrdering_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) How to deal with NULLs, should be NULLS_FIRST or NULLS_LAST.
       * </pre>
       *
       * <code>.spark.connect.Expression.SortOrder.NullOrdering null_ordering = 3;</code>
       * @return The nullOrdering.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering getNullOrdering() {
        @SuppressWarnings("deprecation")
        org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering result = org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering.valueOf(nullOrdering_);
        return result == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * (Required) How to deal with NULLs, should be NULLS_FIRST or NULLS_LAST.
       * </pre>
       *
       * <code>.spark.connect.Expression.SortOrder.NullOrdering null_ordering = 3;</code>
       * @param value The nullOrdering to set.
       * @return This builder for chaining.
       */
      public Builder setNullOrdering(org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.NullOrdering value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        nullOrdering_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) How to deal with NULLs, should be NULLS_FIRST or NULLS_LAST.
       * </pre>
       *
       * <code>.spark.connect.Expression.SortOrder.NullOrdering null_ordering = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearNullOrdering() {
        
        nullOrdering_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.SortOrder)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.SortOrder)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SortOrder>
        PARSER = new com.google.protobuf.AbstractParser<SortOrder>() {
      @java.lang.Override
      public SortOrder parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SortOrder> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SortOrder> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CastOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Cast)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) the expression to be casted.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     * @return Whether the expr field is set.
     */
    boolean hasExpr();
    /**
     * <pre>
     * (Required) the expression to be casted.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     * @return The expr.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getExpr();
    /**
     * <pre>
     * (Required) the expression to be casted.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getExprOrBuilder();

    /**
     * <code>.spark.connect.DataType type = 2;</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>.spark.connect.DataType type = 2;</code>
     * @return The type.
     */
    org.apache.kyuubi.engine.spark.connect.proto.DataType getType();
    /**
     * <code>.spark.connect.DataType type = 2;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getTypeOrBuilder();

    /**
     * <pre>
     * If this is set, Server will use Catalyst parser to parse this string to DataType.
     * </pre>
     *
     * <code>string type_str = 3;</code>
     * @return Whether the typeStr field is set.
     */
    boolean hasTypeStr();
    /**
     * <pre>
     * If this is set, Server will use Catalyst parser to parse this string to DataType.
     * </pre>
     *
     * <code>string type_str = 3;</code>
     * @return The typeStr.
     */
    java.lang.String getTypeStr();
    /**
     * <pre>
     * If this is set, Server will use Catalyst parser to parse this string to DataType.
     * </pre>
     *
     * <code>string type_str = 3;</code>
     * @return The bytes for typeStr.
     */
    com.google.protobuf.ByteString
        getTypeStrBytes();

    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.CastToTypeCase getCastToTypeCase();
  }
  /**
   * Protobuf type {@code spark.connect.Expression.Cast}
   */
  public static final class Cast extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.Cast)
      CastOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Cast.newBuilder() to construct.
    private Cast(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Cast() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Cast();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Cast_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Cast_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.Builder.class);
    }

    private int castToTypeCase_ = 0;
    private java.lang.Object castToType_;
    public enum CastToTypeCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      TYPE(2),
      TYPE_STR(3),
      CASTTOTYPE_NOT_SET(0);
      private final int value;
      private CastToTypeCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CastToTypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static CastToTypeCase forNumber(int value) {
        switch (value) {
          case 2: return TYPE;
          case 3: return TYPE_STR;
          case 0: return CASTTOTYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public CastToTypeCase
    getCastToTypeCase() {
      return CastToTypeCase.forNumber(
          castToTypeCase_);
    }

    public static final int EXPR_FIELD_NUMBER = 1;
    private org.apache.kyuubi.engine.spark.connect.proto.Expression expr_;
    /**
     * <pre>
     * (Required) the expression to be casted.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     * @return Whether the expr field is set.
     */
    @java.lang.Override
    public boolean hasExpr() {
      return expr_ != null;
    }
    /**
     * <pre>
     * (Required) the expression to be casted.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     * @return The expr.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getExpr() {
      return expr_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : expr_;
    }
    /**
     * <pre>
     * (Required) the expression to be casted.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getExprOrBuilder() {
      return getExpr();
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    /**
     * <code>.spark.connect.DataType type = 2;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override
    public boolean hasType() {
      return castToTypeCase_ == 2;
    }
    /**
     * <code>.spark.connect.DataType type = 2;</code>
     * @return The type.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.DataType getType() {
      if (castToTypeCase_ == 2) {
         return (org.apache.kyuubi.engine.spark.connect.proto.DataType) castToType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
    }
    /**
     * <code>.spark.connect.DataType type = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getTypeOrBuilder() {
      if (castToTypeCase_ == 2) {
         return (org.apache.kyuubi.engine.spark.connect.proto.DataType) castToType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
    }

    public static final int TYPE_STR_FIELD_NUMBER = 3;
    /**
     * <pre>
     * If this is set, Server will use Catalyst parser to parse this string to DataType.
     * </pre>
     *
     * <code>string type_str = 3;</code>
     * @return Whether the typeStr field is set.
     */
    public boolean hasTypeStr() {
      return castToTypeCase_ == 3;
    }
    /**
     * <pre>
     * If this is set, Server will use Catalyst parser to parse this string to DataType.
     * </pre>
     *
     * <code>string type_str = 3;</code>
     * @return The typeStr.
     */
    public java.lang.String getTypeStr() {
      java.lang.Object ref = "";
      if (castToTypeCase_ == 3) {
        ref = castToType_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (castToTypeCase_ == 3) {
          castToType_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * If this is set, Server will use Catalyst parser to parse this string to DataType.
     * </pre>
     *
     * <code>string type_str = 3;</code>
     * @return The bytes for typeStr.
     */
    public com.google.protobuf.ByteString
        getTypeStrBytes() {
      java.lang.Object ref = "";
      if (castToTypeCase_ == 3) {
        ref = castToType_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (castToTypeCase_ == 3) {
          castToType_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (expr_ != null) {
        output.writeMessage(1, getExpr());
      }
      if (castToTypeCase_ == 2) {
        output.writeMessage(2, (org.apache.kyuubi.engine.spark.connect.proto.DataType) castToType_);
      }
      if (castToTypeCase_ == 3) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, castToType_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (expr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getExpr());
      }
      if (castToTypeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.kyuubi.engine.spark.connect.proto.DataType) castToType_);
      }
      if (castToTypeCase_ == 3) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, castToType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast) obj;

      if (hasExpr() != other.hasExpr()) return false;
      if (hasExpr()) {
        if (!getExpr()
            .equals(other.getExpr())) return false;
      }
      if (!getCastToTypeCase().equals(other.getCastToTypeCase())) return false;
      switch (castToTypeCase_) {
        case 2:
          if (!getType()
              .equals(other.getType())) return false;
          break;
        case 3:
          if (!getTypeStr()
              .equals(other.getTypeStr())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasExpr()) {
        hash = (37 * hash) + EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getExpr().hashCode();
      }
      switch (castToTypeCase_) {
        case 2:
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getType().hashCode();
          break;
        case 3:
          hash = (37 * hash) + TYPE_STR_FIELD_NUMBER;
          hash = (53 * hash) + getTypeStr().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.Expression.Cast}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Cast)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.CastOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Cast_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Cast_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (exprBuilder_ == null) {
          expr_ = null;
        } else {
          expr_ = null;
          exprBuilder_ = null;
        }
        if (typeBuilder_ != null) {
          typeBuilder_.clear();
        }
        castToTypeCase_ = 0;
        castToType_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Cast_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast(this);
        if (exprBuilder_ == null) {
          result.expr_ = expr_;
        } else {
          result.expr_ = exprBuilder_.build();
        }
        if (castToTypeCase_ == 2) {
          if (typeBuilder_ == null) {
            result.castToType_ = castToType_;
          } else {
            result.castToType_ = typeBuilder_.build();
          }
        }
        if (castToTypeCase_ == 3) {
          result.castToType_ = castToType_;
        }
        result.castToTypeCase_ = castToTypeCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.getDefaultInstance()) return this;
        if (other.hasExpr()) {
          mergeExpr(other.getExpr());
        }
        switch (other.getCastToTypeCase()) {
          case TYPE: {
            mergeType(other.getType());
            break;
          }
          case TYPE_STR: {
            castToTypeCase_ = 3;
            castToType_ = other.castToType_;
            onChanged();
            break;
          }
          case CASTTOTYPE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getExprFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                castToTypeCase_ = 2;
                break;
              } // case 18
              case 26: {
                java.lang.String s = input.readStringRequireUtf8();
                castToTypeCase_ = 3;
                castToType_ = s;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int castToTypeCase_ = 0;
      private java.lang.Object castToType_;
      public CastToTypeCase
          getCastToTypeCase() {
        return CastToTypeCase.forNumber(
            castToTypeCase_);
      }

      public Builder clearCastToType() {
        castToTypeCase_ = 0;
        castToType_ = null;
        onChanged();
        return this;
      }


      private org.apache.kyuubi.engine.spark.connect.proto.Expression expr_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> exprBuilder_;
      /**
       * <pre>
       * (Required) the expression to be casted.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       * @return Whether the expr field is set.
       */
      public boolean hasExpr() {
        return exprBuilder_ != null || expr_ != null;
      }
      /**
       * <pre>
       * (Required) the expression to be casted.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       * @return The expr.
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getExpr() {
        if (exprBuilder_ == null) {
          return expr_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : expr_;
        } else {
          return exprBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) the expression to be casted.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public Builder setExpr(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (exprBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expr_ = value;
          onChanged();
        } else {
          exprBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) the expression to be casted.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public Builder setExpr(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (exprBuilder_ == null) {
          expr_ = builderForValue.build();
          onChanged();
        } else {
          exprBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) the expression to be casted.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public Builder mergeExpr(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (exprBuilder_ == null) {
          if (expr_ != null) {
            expr_ =
              org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(expr_).mergeFrom(value).buildPartial();
          } else {
            expr_ = value;
          }
          onChanged();
        } else {
          exprBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) the expression to be casted.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public Builder clearExpr() {
        if (exprBuilder_ == null) {
          expr_ = null;
          onChanged();
        } else {
          expr_ = null;
          exprBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) the expression to be casted.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getExprBuilder() {
        
        onChanged();
        return getExprFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) the expression to be casted.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getExprOrBuilder() {
        if (exprBuilder_ != null) {
          return exprBuilder_.getMessageOrBuilder();
        } else {
          return expr_ == null ?
              org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : expr_;
        }
      }
      /**
       * <pre>
       * (Required) the expression to be casted.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getExprFieldBuilder() {
        if (exprBuilder_ == null) {
          exprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  getExpr(),
                  getParentForChildren(),
                  isClean());
          expr_ = null;
        }
        return exprBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> typeBuilder_;
      /**
       * <code>.spark.connect.DataType type = 2;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override
      public boolean hasType() {
        return castToTypeCase_ == 2;
      }
      /**
       * <code>.spark.connect.DataType type = 2;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataType getType() {
        if (typeBuilder_ == null) {
          if (castToTypeCase_ == 2) {
            return (org.apache.kyuubi.engine.spark.connect.proto.DataType) castToType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
        } else {
          if (castToTypeCase_ == 2) {
            return typeBuilder_.getMessage();
          }
          return org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.DataType type = 2;</code>
       */
      public Builder setType(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          castToType_ = value;
          onChanged();
        } else {
          typeBuilder_.setMessage(value);
        }
        castToTypeCase_ = 2;
        return this;
      }
      /**
       * <code>.spark.connect.DataType type = 2;</code>
       */
      public Builder setType(
          org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder builderForValue) {
        if (typeBuilder_ == null) {
          castToType_ = builderForValue.build();
          onChanged();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }
        castToTypeCase_ = 2;
        return this;
      }
      /**
       * <code>.spark.connect.DataType type = 2;</code>
       */
      public Builder mergeType(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
        if (typeBuilder_ == null) {
          if (castToTypeCase_ == 2 &&
              castToType_ != org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance()) {
            castToType_ = org.apache.kyuubi.engine.spark.connect.proto.DataType.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.DataType) castToType_)
                .mergeFrom(value).buildPartial();
          } else {
            castToType_ = value;
          }
          onChanged();
        } else {
          if (castToTypeCase_ == 2) {
            typeBuilder_.mergeFrom(value);
          } else {
            typeBuilder_.setMessage(value);
          }
        }
        castToTypeCase_ = 2;
        return this;
      }
      /**
       * <code>.spark.connect.DataType type = 2;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          if (castToTypeCase_ == 2) {
            castToTypeCase_ = 0;
            castToType_ = null;
            onChanged();
          }
        } else {
          if (castToTypeCase_ == 2) {
            castToTypeCase_ = 0;
            castToType_ = null;
          }
          typeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.spark.connect.DataType type = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder getTypeBuilder() {
        return getTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.spark.connect.DataType type = 2;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getTypeOrBuilder() {
        if ((castToTypeCase_ == 2) && (typeBuilder_ != null)) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          if (castToTypeCase_ == 2) {
            return (org.apache.kyuubi.engine.spark.connect.proto.DataType) castToType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.DataType type = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          if (!(castToTypeCase_ == 2)) {
            castToType_ = org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
          }
          typeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder>(
                  (org.apache.kyuubi.engine.spark.connect.proto.DataType) castToType_,
                  getParentForChildren(),
                  isClean());
          castToType_ = null;
        }
        castToTypeCase_ = 2;
        onChanged();;
        return typeBuilder_;
      }

      /**
       * <pre>
       * If this is set, Server will use Catalyst parser to parse this string to DataType.
       * </pre>
       *
       * <code>string type_str = 3;</code>
       * @return Whether the typeStr field is set.
       */
      @java.lang.Override
      public boolean hasTypeStr() {
        return castToTypeCase_ == 3;
      }
      /**
       * <pre>
       * If this is set, Server will use Catalyst parser to parse this string to DataType.
       * </pre>
       *
       * <code>string type_str = 3;</code>
       * @return The typeStr.
       */
      @java.lang.Override
      public java.lang.String getTypeStr() {
        java.lang.Object ref = "";
        if (castToTypeCase_ == 3) {
          ref = castToType_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (castToTypeCase_ == 3) {
            castToType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If this is set, Server will use Catalyst parser to parse this string to DataType.
       * </pre>
       *
       * <code>string type_str = 3;</code>
       * @return The bytes for typeStr.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTypeStrBytes() {
        java.lang.Object ref = "";
        if (castToTypeCase_ == 3) {
          ref = castToType_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (castToTypeCase_ == 3) {
            castToType_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If this is set, Server will use Catalyst parser to parse this string to DataType.
       * </pre>
       *
       * <code>string type_str = 3;</code>
       * @param value The typeStr to set.
       * @return This builder for chaining.
       */
      public Builder setTypeStr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  castToTypeCase_ = 3;
        castToType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If this is set, Server will use Catalyst parser to parse this string to DataType.
       * </pre>
       *
       * <code>string type_str = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeStr() {
        if (castToTypeCase_ == 3) {
          castToTypeCase_ = 0;
          castToType_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * If this is set, Server will use Catalyst parser to parse this string to DataType.
       * </pre>
       *
       * <code>string type_str = 3;</code>
       * @param value The bytes for typeStr to set.
       * @return This builder for chaining.
       */
      public Builder setTypeStrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        castToTypeCase_ = 3;
        castToType_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Cast)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.Cast)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Cast>
        PARSER = new com.google.protobuf.AbstractParser<Cast>() {
      @java.lang.Override
      public Cast parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Cast> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Cast> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Literal)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.spark.connect.DataType null = 1;</code>
     * @return Whether the null field is set.
     */
    boolean hasNull();
    /**
     * <code>.spark.connect.DataType null = 1;</code>
     * @return The null.
     */
    org.apache.kyuubi.engine.spark.connect.proto.DataType getNull();
    /**
     * <code>.spark.connect.DataType null = 1;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getNullOrBuilder();

    /**
     * <code>bytes binary = 2;</code>
     * @return Whether the binary field is set.
     */
    boolean hasBinary();
    /**
     * <code>bytes binary = 2;</code>
     * @return The binary.
     */
    com.google.protobuf.ByteString getBinary();

    /**
     * <code>bool boolean = 3;</code>
     * @return Whether the boolean field is set.
     */
    boolean hasBoolean();
    /**
     * <code>bool boolean = 3;</code>
     * @return The boolean.
     */
    boolean getBoolean();

    /**
     * <code>int32 byte = 4;</code>
     * @return Whether the byte field is set.
     */
    boolean hasByte();
    /**
     * <code>int32 byte = 4;</code>
     * @return The byte.
     */
    int getByte();

    /**
     * <code>int32 short = 5;</code>
     * @return Whether the short field is set.
     */
    boolean hasShort();
    /**
     * <code>int32 short = 5;</code>
     * @return The short.
     */
    int getShort();

    /**
     * <code>int32 integer = 6;</code>
     * @return Whether the integer field is set.
     */
    boolean hasInteger();
    /**
     * <code>int32 integer = 6;</code>
     * @return The integer.
     */
    int getInteger();

    /**
     * <code>int64 long = 7;</code>
     * @return Whether the long field is set.
     */
    boolean hasLong();
    /**
     * <code>int64 long = 7;</code>
     * @return The long.
     */
    long getLong();

    /**
     * <code>float float = 10;</code>
     * @return Whether the float field is set.
     */
    boolean hasFloat();
    /**
     * <code>float float = 10;</code>
     * @return The float.
     */
    float getFloat();

    /**
     * <code>double double = 11;</code>
     * @return Whether the double field is set.
     */
    boolean hasDouble();
    /**
     * <code>double double = 11;</code>
     * @return The double.
     */
    double getDouble();

    /**
     * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
     * @return Whether the decimal field is set.
     */
    boolean hasDecimal();
    /**
     * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
     * @return The decimal.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal getDecimal();
    /**
     * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.DecimalOrBuilder getDecimalOrBuilder();

    /**
     * <code>string string = 13;</code>
     * @return Whether the string field is set.
     */
    boolean hasString();
    /**
     * <code>string string = 13;</code>
     * @return The string.
     */
    java.lang.String getString();
    /**
     * <code>string string = 13;</code>
     * @return The bytes for string.
     */
    com.google.protobuf.ByteString
        getStringBytes();

    /**
     * <pre>
     * Date in units of days since the UNIX epoch.
     * </pre>
     *
     * <code>int32 date = 16;</code>
     * @return Whether the date field is set.
     */
    boolean hasDate();
    /**
     * <pre>
     * Date in units of days since the UNIX epoch.
     * </pre>
     *
     * <code>int32 date = 16;</code>
     * @return The date.
     */
    int getDate();

    /**
     * <pre>
     * Timestamp in units of microseconds since the UNIX epoch.
     * </pre>
     *
     * <code>int64 timestamp = 17;</code>
     * @return Whether the timestamp field is set.
     */
    boolean hasTimestamp();
    /**
     * <pre>
     * Timestamp in units of microseconds since the UNIX epoch.
     * </pre>
     *
     * <code>int64 timestamp = 17;</code>
     * @return The timestamp.
     */
    long getTimestamp();

    /**
     * <pre>
     * Timestamp in units of microseconds since the UNIX epoch (without timezone information).
     * </pre>
     *
     * <code>int64 timestamp_ntz = 18;</code>
     * @return Whether the timestampNtz field is set.
     */
    boolean hasTimestampNtz();
    /**
     * <pre>
     * Timestamp in units of microseconds since the UNIX epoch (without timezone information).
     * </pre>
     *
     * <code>int64 timestamp_ntz = 18;</code>
     * @return The timestampNtz.
     */
    long getTimestampNtz();

    /**
     * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
     * @return Whether the calendarInterval field is set.
     */
    boolean hasCalendarInterval();
    /**
     * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
     * @return The calendarInterval.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval getCalendarInterval();
    /**
     * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarIntervalOrBuilder getCalendarIntervalOrBuilder();

    /**
     * <code>int32 year_month_interval = 20;</code>
     * @return Whether the yearMonthInterval field is set.
     */
    boolean hasYearMonthInterval();
    /**
     * <code>int32 year_month_interval = 20;</code>
     * @return The yearMonthInterval.
     */
    int getYearMonthInterval();

    /**
     * <code>int64 day_time_interval = 21;</code>
     * @return Whether the dayTimeInterval field is set.
     */
    boolean hasDayTimeInterval();
    /**
     * <code>int64 day_time_interval = 21;</code>
     * @return The dayTimeInterval.
     */
    long getDayTimeInterval();

    /**
     * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
     * @return Whether the array field is set.
     */
    boolean hasArray();
    /**
     * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
     * @return The array.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array getArray();
    /**
     * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.ArrayOrBuilder getArrayOrBuilder();

    /**
     * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
     * @return Whether the map field is set.
     */
    boolean hasMap();
    /**
     * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
     * @return The map.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map getMap();
    /**
     * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.MapOrBuilder getMapOrBuilder();

    /**
     * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
     * @return Whether the struct field is set.
     */
    boolean hasStruct();
    /**
     * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
     * @return The struct.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct getStruct();
    /**
     * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.StructOrBuilder getStructOrBuilder();

    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.LiteralTypeCase getLiteralTypeCase();
  }
  /**
   * Protobuf type {@code spark.connect.Expression.Literal}
   */
  public static final class Literal extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.Literal)
      LiteralOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Literal.newBuilder() to construct.
    private Literal(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Literal() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Literal();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder.class);
    }

    public interface DecimalOrBuilder extends
        // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Literal.Decimal)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * the string representation.
       * </pre>
       *
       * <code>string value = 1;</code>
       * @return The value.
       */
      java.lang.String getValue();
      /**
       * <pre>
       * the string representation.
       * </pre>
       *
       * <code>string value = 1;</code>
       * @return The bytes for value.
       */
      com.google.protobuf.ByteString
          getValueBytes();

      /**
       * <pre>
       * The maximum number of digits allowed in the value.
       * the maximum precision is 38.
       * </pre>
       *
       * <code>optional int32 precision = 2;</code>
       * @return Whether the precision field is set.
       */
      boolean hasPrecision();
      /**
       * <pre>
       * The maximum number of digits allowed in the value.
       * the maximum precision is 38.
       * </pre>
       *
       * <code>optional int32 precision = 2;</code>
       * @return The precision.
       */
      int getPrecision();

      /**
       * <pre>
       * declared scale of decimal literal
       * </pre>
       *
       * <code>optional int32 scale = 3;</code>
       * @return Whether the scale field is set.
       */
      boolean hasScale();
      /**
       * <pre>
       * declared scale of decimal literal
       * </pre>
       *
       * <code>optional int32 scale = 3;</code>
       * @return The scale.
       */
      int getScale();
    }
    /**
     * Protobuf type {@code spark.connect.Expression.Literal.Decimal}
     */
    public static final class Decimal extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:spark.connect.Expression.Literal.Decimal)
        DecimalOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Decimal.newBuilder() to construct.
      private Decimal(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Decimal() {
        value_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Decimal();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Decimal_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Decimal_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.Builder.class);
      }

      private int bitField0_;
      public static final int VALUE_FIELD_NUMBER = 1;
      private volatile java.lang.Object value_;
      /**
       * <pre>
       * the string representation.
       * </pre>
       *
       * <code>string value = 1;</code>
       * @return The value.
       */
      @java.lang.Override
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * the string representation.
       * </pre>
       *
       * <code>string value = 1;</code>
       * @return The bytes for value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int PRECISION_FIELD_NUMBER = 2;
      private int precision_;
      /**
       * <pre>
       * The maximum number of digits allowed in the value.
       * the maximum precision is 38.
       * </pre>
       *
       * <code>optional int32 precision = 2;</code>
       * @return Whether the precision field is set.
       */
      @java.lang.Override
      public boolean hasPrecision() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The maximum number of digits allowed in the value.
       * the maximum precision is 38.
       * </pre>
       *
       * <code>optional int32 precision = 2;</code>
       * @return The precision.
       */
      @java.lang.Override
      public int getPrecision() {
        return precision_;
      }

      public static final int SCALE_FIELD_NUMBER = 3;
      private int scale_;
      /**
       * <pre>
       * declared scale of decimal literal
       * </pre>
       *
       * <code>optional int32 scale = 3;</code>
       * @return Whether the scale field is set.
       */
      @java.lang.Override
      public boolean hasScale() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * declared scale of decimal literal
       * </pre>
       *
       * <code>optional int32 scale = 3;</code>
       * @return The scale.
       */
      @java.lang.Override
      public int getScale() {
        return scale_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, value_);
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(2, precision_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(3, scale_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, value_);
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, precision_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, scale_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal)) {
          return super.equals(obj);
        }
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal) obj;

        if (!getValue()
            .equals(other.getValue())) return false;
        if (hasPrecision() != other.hasPrecision()) return false;
        if (hasPrecision()) {
          if (getPrecision()
              != other.getPrecision()) return false;
        }
        if (hasScale() != other.hasScale()) return false;
        if (hasScale()) {
          if (getScale()
              != other.getScale()) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
        if (hasPrecision()) {
          hash = (37 * hash) + PRECISION_FIELD_NUMBER;
          hash = (53 * hash) + getPrecision();
        }
        if (hasScale()) {
          hash = (37 * hash) + SCALE_FIELD_NUMBER;
          hash = (53 * hash) + getScale();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code spark.connect.Expression.Literal.Decimal}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Literal.Decimal)
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.DecimalOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Decimal_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Decimal_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.Builder.class);
        }

        // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          value_ = "";

          precision_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          scale_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Decimal_descriptor;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal getDefaultInstanceForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal build() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal buildPartial() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.value_ = value_;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.precision_ = precision_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.scale_ = scale_;
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal) {
            return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal other) {
          if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.getDefaultInstance()) return this;
          if (!other.getValue().isEmpty()) {
            value_ = other.value_;
            onChanged();
          }
          if (other.hasPrecision()) {
            setPrecision(other.getPrecision());
          }
          if (other.hasScale()) {
            setScale(other.getScale());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  value_ = input.readStringRequireUtf8();

                  break;
                } // case 10
                case 16: {
                  precision_ = input.readInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 16
                case 24: {
                  scale_ = input.readInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 24
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object value_ = "";
        /**
         * <pre>
         * the string representation.
         * </pre>
         *
         * <code>string value = 1;</code>
         * @return The value.
         */
        public java.lang.String getValue() {
          java.lang.Object ref = value_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            value_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * the string representation.
         * </pre>
         *
         * <code>string value = 1;</code>
         * @return The bytes for value.
         */
        public com.google.protobuf.ByteString
            getValueBytes() {
          java.lang.Object ref = value_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            value_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * the string representation.
         * </pre>
         *
         * <code>string value = 1;</code>
         * @param value The value to set.
         * @return This builder for chaining.
         */
        public Builder setValue(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          value_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the string representation.
         * </pre>
         *
         * <code>string value = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearValue() {
          
          value_ = getDefaultInstance().getValue();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the string representation.
         * </pre>
         *
         * <code>string value = 1;</code>
         * @param value The bytes for value to set.
         * @return This builder for chaining.
         */
        public Builder setValueBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          value_ = value;
          onChanged();
          return this;
        }

        private int precision_ ;
        /**
         * <pre>
         * The maximum number of digits allowed in the value.
         * the maximum precision is 38.
         * </pre>
         *
         * <code>optional int32 precision = 2;</code>
         * @return Whether the precision field is set.
         */
        @java.lang.Override
        public boolean hasPrecision() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The maximum number of digits allowed in the value.
         * the maximum precision is 38.
         * </pre>
         *
         * <code>optional int32 precision = 2;</code>
         * @return The precision.
         */
        @java.lang.Override
        public int getPrecision() {
          return precision_;
        }
        /**
         * <pre>
         * The maximum number of digits allowed in the value.
         * the maximum precision is 38.
         * </pre>
         *
         * <code>optional int32 precision = 2;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          bitField0_ |= 0x00000001;
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The maximum number of digits allowed in the value.
         * the maximum precision is 38.
         * </pre>
         *
         * <code>optional int32 precision = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          bitField0_ = (bitField0_ & ~0x00000001);
          precision_ = 0;
          onChanged();
          return this;
        }

        private int scale_ ;
        /**
         * <pre>
         * declared scale of decimal literal
         * </pre>
         *
         * <code>optional int32 scale = 3;</code>
         * @return Whether the scale field is set.
         */
        @java.lang.Override
        public boolean hasScale() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * declared scale of decimal literal
         * </pre>
         *
         * <code>optional int32 scale = 3;</code>
         * @return The scale.
         */
        @java.lang.Override
        public int getScale() {
          return scale_;
        }
        /**
         * <pre>
         * declared scale of decimal literal
         * </pre>
         *
         * <code>optional int32 scale = 3;</code>
         * @param value The scale to set.
         * @return This builder for chaining.
         */
        public Builder setScale(int value) {
          bitField0_ |= 0x00000002;
          scale_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * declared scale of decimal literal
         * </pre>
         *
         * <code>optional int32 scale = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearScale() {
          bitField0_ = (bitField0_ & ~0x00000002);
          scale_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Literal.Decimal)
      }

      // @@protoc_insertion_point(class_scope:spark.connect.Expression.Literal.Decimal)
      private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal();
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Decimal>
          PARSER = new com.google.protobuf.AbstractParser<Decimal>() {
        @java.lang.Override
        public Decimal parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Decimal> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Decimal> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface CalendarIntervalOrBuilder extends
        // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Literal.CalendarInterval)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 months = 1;</code>
       * @return The months.
       */
      int getMonths();

      /**
       * <code>int32 days = 2;</code>
       * @return The days.
       */
      int getDays();

      /**
       * <code>int64 microseconds = 3;</code>
       * @return The microseconds.
       */
      long getMicroseconds();
    }
    /**
     * Protobuf type {@code spark.connect.Expression.Literal.CalendarInterval}
     */
    public static final class CalendarInterval extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:spark.connect.Expression.Literal.CalendarInterval)
        CalendarIntervalOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use CalendarInterval.newBuilder() to construct.
      private CalendarInterval(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private CalendarInterval() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new CalendarInterval();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_CalendarInterval_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_CalendarInterval_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.Builder.class);
      }

      public static final int MONTHS_FIELD_NUMBER = 1;
      private int months_;
      /**
       * <code>int32 months = 1;</code>
       * @return The months.
       */
      @java.lang.Override
      public int getMonths() {
        return months_;
      }

      public static final int DAYS_FIELD_NUMBER = 2;
      private int days_;
      /**
       * <code>int32 days = 2;</code>
       * @return The days.
       */
      @java.lang.Override
      public int getDays() {
        return days_;
      }

      public static final int MICROSECONDS_FIELD_NUMBER = 3;
      private long microseconds_;
      /**
       * <code>int64 microseconds = 3;</code>
       * @return The microseconds.
       */
      @java.lang.Override
      public long getMicroseconds() {
        return microseconds_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (months_ != 0) {
          output.writeInt32(1, months_);
        }
        if (days_ != 0) {
          output.writeInt32(2, days_);
        }
        if (microseconds_ != 0L) {
          output.writeInt64(3, microseconds_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (months_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, months_);
        }
        if (days_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, days_);
        }
        if (microseconds_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(3, microseconds_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval)) {
          return super.equals(obj);
        }
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval) obj;

        if (getMonths()
            != other.getMonths()) return false;
        if (getDays()
            != other.getDays()) return false;
        if (getMicroseconds()
            != other.getMicroseconds()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + MONTHS_FIELD_NUMBER;
        hash = (53 * hash) + getMonths();
        hash = (37 * hash) + DAYS_FIELD_NUMBER;
        hash = (53 * hash) + getDays();
        hash = (37 * hash) + MICROSECONDS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getMicroseconds());
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code spark.connect.Expression.Literal.CalendarInterval}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Literal.CalendarInterval)
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarIntervalOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_CalendarInterval_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_CalendarInterval_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.Builder.class);
        }

        // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          months_ = 0;

          days_ = 0;

          microseconds_ = 0L;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_CalendarInterval_descriptor;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval getDefaultInstanceForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval build() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval buildPartial() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval(this);
          result.months_ = months_;
          result.days_ = days_;
          result.microseconds_ = microseconds_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval) {
            return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval other) {
          if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.getDefaultInstance()) return this;
          if (other.getMonths() != 0) {
            setMonths(other.getMonths());
          }
          if (other.getDays() != 0) {
            setDays(other.getDays());
          }
          if (other.getMicroseconds() != 0L) {
            setMicroseconds(other.getMicroseconds());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  months_ = input.readInt32();

                  break;
                } // case 8
                case 16: {
                  days_ = input.readInt32();

                  break;
                } // case 16
                case 24: {
                  microseconds_ = input.readInt64();

                  break;
                } // case 24
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int months_ ;
        /**
         * <code>int32 months = 1;</code>
         * @return The months.
         */
        @java.lang.Override
        public int getMonths() {
          return months_;
        }
        /**
         * <code>int32 months = 1;</code>
         * @param value The months to set.
         * @return This builder for chaining.
         */
        public Builder setMonths(int value) {
          
          months_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 months = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearMonths() {
          
          months_ = 0;
          onChanged();
          return this;
        }

        private int days_ ;
        /**
         * <code>int32 days = 2;</code>
         * @return The days.
         */
        @java.lang.Override
        public int getDays() {
          return days_;
        }
        /**
         * <code>int32 days = 2;</code>
         * @param value The days to set.
         * @return This builder for chaining.
         */
        public Builder setDays(int value) {
          
          days_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 days = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDays() {
          
          days_ = 0;
          onChanged();
          return this;
        }

        private long microseconds_ ;
        /**
         * <code>int64 microseconds = 3;</code>
         * @return The microseconds.
         */
        @java.lang.Override
        public long getMicroseconds() {
          return microseconds_;
        }
        /**
         * <code>int64 microseconds = 3;</code>
         * @param value The microseconds to set.
         * @return This builder for chaining.
         */
        public Builder setMicroseconds(long value) {
          
          microseconds_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int64 microseconds = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearMicroseconds() {
          
          microseconds_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Literal.CalendarInterval)
      }

      // @@protoc_insertion_point(class_scope:spark.connect.Expression.Literal.CalendarInterval)
      private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval();
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<CalendarInterval>
          PARSER = new com.google.protobuf.AbstractParser<CalendarInterval>() {
        @java.lang.Override
        public CalendarInterval parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<CalendarInterval> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<CalendarInterval> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ArrayOrBuilder extends
        // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Literal.Array)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.spark.connect.DataType element_type = 1;</code>
       * @return Whether the elementType field is set.
       */
      boolean hasElementType();
      /**
       * <code>.spark.connect.DataType element_type = 1;</code>
       * @return The elementType.
       */
      org.apache.kyuubi.engine.spark.connect.proto.DataType getElementType();
      /**
       * <code>.spark.connect.DataType element_type = 1;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getElementTypeOrBuilder();

      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> 
          getElementsList();
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getElements(int index);
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      int getElementsCount();
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
          getElementsOrBuilderList();
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getElementsOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code spark.connect.Expression.Literal.Array}
     */
    public static final class Array extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:spark.connect.Expression.Literal.Array)
        ArrayOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Array.newBuilder() to construct.
      private Array(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Array() {
        elements_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Array();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Array_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Array_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.Builder.class);
      }

      public static final int ELEMENT_TYPE_FIELD_NUMBER = 1;
      private org.apache.kyuubi.engine.spark.connect.proto.DataType elementType_;
      /**
       * <code>.spark.connect.DataType element_type = 1;</code>
       * @return Whether the elementType field is set.
       */
      @java.lang.Override
      public boolean hasElementType() {
        return elementType_ != null;
      }
      /**
       * <code>.spark.connect.DataType element_type = 1;</code>
       * @return The elementType.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataType getElementType() {
        return elementType_ == null ? org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : elementType_;
      }
      /**
       * <code>.spark.connect.DataType element_type = 1;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getElementTypeOrBuilder() {
        return getElementType();
      }

      public static final int ELEMENTS_FIELD_NUMBER = 2;
      private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> elements_;
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> getElementsList() {
        return elements_;
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      @java.lang.Override
      public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
          getElementsOrBuilderList() {
        return elements_;
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      @java.lang.Override
      public int getElementsCount() {
        return elements_.size();
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getElements(int index) {
        return elements_.get(index);
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getElementsOrBuilder(
          int index) {
        return elements_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (elementType_ != null) {
          output.writeMessage(1, getElementType());
        }
        for (int i = 0; i < elements_.size(); i++) {
          output.writeMessage(2, elements_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (elementType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getElementType());
        }
        for (int i = 0; i < elements_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, elements_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array)) {
          return super.equals(obj);
        }
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array) obj;

        if (hasElementType() != other.hasElementType()) return false;
        if (hasElementType()) {
          if (!getElementType()
              .equals(other.getElementType())) return false;
        }
        if (!getElementsList()
            .equals(other.getElementsList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasElementType()) {
          hash = (37 * hash) + ELEMENT_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getElementType().hashCode();
        }
        if (getElementsCount() > 0) {
          hash = (37 * hash) + ELEMENTS_FIELD_NUMBER;
          hash = (53 * hash) + getElementsList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code spark.connect.Expression.Literal.Array}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Literal.Array)
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.ArrayOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Array_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Array_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.Builder.class);
        }

        // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (elementTypeBuilder_ == null) {
            elementType_ = null;
          } else {
            elementType_ = null;
            elementTypeBuilder_ = null;
          }
          if (elementsBuilder_ == null) {
            elements_ = java.util.Collections.emptyList();
          } else {
            elements_ = null;
            elementsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Array_descriptor;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array getDefaultInstanceForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array build() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array buildPartial() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array(this);
          int from_bitField0_ = bitField0_;
          if (elementTypeBuilder_ == null) {
            result.elementType_ = elementType_;
          } else {
            result.elementType_ = elementTypeBuilder_.build();
          }
          if (elementsBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              elements_ = java.util.Collections.unmodifiableList(elements_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.elements_ = elements_;
          } else {
            result.elements_ = elementsBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array) {
            return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array other) {
          if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.getDefaultInstance()) return this;
          if (other.hasElementType()) {
            mergeElementType(other.getElementType());
          }
          if (elementsBuilder_ == null) {
            if (!other.elements_.isEmpty()) {
              if (elements_.isEmpty()) {
                elements_ = other.elements_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureElementsIsMutable();
                elements_.addAll(other.elements_);
              }
              onChanged();
            }
          } else {
            if (!other.elements_.isEmpty()) {
              if (elementsBuilder_.isEmpty()) {
                elementsBuilder_.dispose();
                elementsBuilder_ = null;
                elements_ = other.elements_;
                bitField0_ = (bitField0_ & ~0x00000001);
                elementsBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getElementsFieldBuilder() : null;
              } else {
                elementsBuilder_.addAllMessages(other.elements_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getElementTypeFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 10
                case 18: {
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal m =
                      input.readMessage(
                          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.parser(),
                          extensionRegistry);
                  if (elementsBuilder_ == null) {
                    ensureElementsIsMutable();
                    elements_.add(m);
                  } else {
                    elementsBuilder_.addMessage(m);
                  }
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private org.apache.kyuubi.engine.spark.connect.proto.DataType elementType_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> elementTypeBuilder_;
        /**
         * <code>.spark.connect.DataType element_type = 1;</code>
         * @return Whether the elementType field is set.
         */
        public boolean hasElementType() {
          return elementTypeBuilder_ != null || elementType_ != null;
        }
        /**
         * <code>.spark.connect.DataType element_type = 1;</code>
         * @return The elementType.
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataType getElementType() {
          if (elementTypeBuilder_ == null) {
            return elementType_ == null ? org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : elementType_;
          } else {
            return elementTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>.spark.connect.DataType element_type = 1;</code>
         */
        public Builder setElementType(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
          if (elementTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            elementType_ = value;
            onChanged();
          } else {
            elementTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType element_type = 1;</code>
         */
        public Builder setElementType(
            org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder builderForValue) {
          if (elementTypeBuilder_ == null) {
            elementType_ = builderForValue.build();
            onChanged();
          } else {
            elementTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType element_type = 1;</code>
         */
        public Builder mergeElementType(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
          if (elementTypeBuilder_ == null) {
            if (elementType_ != null) {
              elementType_ =
                org.apache.kyuubi.engine.spark.connect.proto.DataType.newBuilder(elementType_).mergeFrom(value).buildPartial();
            } else {
              elementType_ = value;
            }
            onChanged();
          } else {
            elementTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType element_type = 1;</code>
         */
        public Builder clearElementType() {
          if (elementTypeBuilder_ == null) {
            elementType_ = null;
            onChanged();
          } else {
            elementType_ = null;
            elementTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType element_type = 1;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder getElementTypeBuilder() {
          
          onChanged();
          return getElementTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.spark.connect.DataType element_type = 1;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getElementTypeOrBuilder() {
          if (elementTypeBuilder_ != null) {
            return elementTypeBuilder_.getMessageOrBuilder();
          } else {
            return elementType_ == null ?
                org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : elementType_;
          }
        }
        /**
         * <code>.spark.connect.DataType element_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> 
            getElementTypeFieldBuilder() {
          if (elementTypeBuilder_ == null) {
            elementTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder>(
                    getElementType(),
                    getParentForChildren(),
                    isClean());
            elementType_ = null;
          }
          return elementTypeBuilder_;
        }

        private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> elements_ =
          java.util.Collections.emptyList();
        private void ensureElementsIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            elements_ = new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal>(elements_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> elementsBuilder_;

        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> getElementsList() {
          if (elementsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(elements_);
          } else {
            return elementsBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public int getElementsCount() {
          if (elementsBuilder_ == null) {
            return elements_.size();
          } else {
            return elementsBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getElements(int index) {
          if (elementsBuilder_ == null) {
            return elements_.get(index);
          } else {
            return elementsBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder setElements(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (elementsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureElementsIsMutable();
            elements_.set(index, value);
            onChanged();
          } else {
            elementsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder setElements(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (elementsBuilder_ == null) {
            ensureElementsIsMutable();
            elements_.set(index, builderForValue.build());
            onChanged();
          } else {
            elementsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder addElements(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (elementsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureElementsIsMutable();
            elements_.add(value);
            onChanged();
          } else {
            elementsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder addElements(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (elementsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureElementsIsMutable();
            elements_.add(index, value);
            onChanged();
          } else {
            elementsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder addElements(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (elementsBuilder_ == null) {
            ensureElementsIsMutable();
            elements_.add(builderForValue.build());
            onChanged();
          } else {
            elementsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder addElements(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (elementsBuilder_ == null) {
            ensureElementsIsMutable();
            elements_.add(index, builderForValue.build());
            onChanged();
          } else {
            elementsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder addAllElements(
            java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> values) {
          if (elementsBuilder_ == null) {
            ensureElementsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, elements_);
            onChanged();
          } else {
            elementsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder clearElements() {
          if (elementsBuilder_ == null) {
            elements_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            elementsBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder removeElements(int index) {
          if (elementsBuilder_ == null) {
            ensureElementsIsMutable();
            elements_.remove(index);
            onChanged();
          } else {
            elementsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder getElementsBuilder(
            int index) {
          return getElementsFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getElementsOrBuilder(
            int index) {
          if (elementsBuilder_ == null) {
            return elements_.get(index);  } else {
            return elementsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
             getElementsOrBuilderList() {
          if (elementsBuilder_ != null) {
            return elementsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(elements_);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder addElementsBuilder() {
          return getElementsFieldBuilder().addBuilder(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance());
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder addElementsBuilder(
            int index) {
          return getElementsFieldBuilder().addBuilder(
              index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance());
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder> 
             getElementsBuilderList() {
          return getElementsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
            getElementsFieldBuilder() {
          if (elementsBuilder_ == null) {
            elementsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder>(
                    elements_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            elements_ = null;
          }
          return elementsBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Literal.Array)
      }

      // @@protoc_insertion_point(class_scope:spark.connect.Expression.Literal.Array)
      private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array();
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Array>
          PARSER = new com.google.protobuf.AbstractParser<Array>() {
        @java.lang.Override
        public Array parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Array> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Array> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface MapOrBuilder extends
        // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Literal.Map)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.spark.connect.DataType key_type = 1;</code>
       * @return Whether the keyType field is set.
       */
      boolean hasKeyType();
      /**
       * <code>.spark.connect.DataType key_type = 1;</code>
       * @return The keyType.
       */
      org.apache.kyuubi.engine.spark.connect.proto.DataType getKeyType();
      /**
       * <code>.spark.connect.DataType key_type = 1;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getKeyTypeOrBuilder();

      /**
       * <code>.spark.connect.DataType value_type = 2;</code>
       * @return Whether the valueType field is set.
       */
      boolean hasValueType();
      /**
       * <code>.spark.connect.DataType value_type = 2;</code>
       * @return The valueType.
       */
      org.apache.kyuubi.engine.spark.connect.proto.DataType getValueType();
      /**
       * <code>.spark.connect.DataType value_type = 2;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getValueTypeOrBuilder();

      /**
       * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
       */
      java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> 
          getKeysList();
      /**
       * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getKeys(int index);
      /**
       * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
       */
      int getKeysCount();
      /**
       * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
       */
      java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
          getKeysOrBuilderList();
      /**
       * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getKeysOrBuilder(
          int index);

      /**
       * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
       */
      java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> 
          getValuesList();
      /**
       * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getValues(int index);
      /**
       * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
       */
      int getValuesCount();
      /**
       * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
       */
      java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
          getValuesOrBuilderList();
      /**
       * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getValuesOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code spark.connect.Expression.Literal.Map}
     */
    public static final class Map extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:spark.connect.Expression.Literal.Map)
        MapOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Map.newBuilder() to construct.
      private Map(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Map() {
        keys_ = java.util.Collections.emptyList();
        values_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Map();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Map_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Map_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.Builder.class);
      }

      public static final int KEY_TYPE_FIELD_NUMBER = 1;
      private org.apache.kyuubi.engine.spark.connect.proto.DataType keyType_;
      /**
       * <code>.spark.connect.DataType key_type = 1;</code>
       * @return Whether the keyType field is set.
       */
      @java.lang.Override
      public boolean hasKeyType() {
        return keyType_ != null;
      }
      /**
       * <code>.spark.connect.DataType key_type = 1;</code>
       * @return The keyType.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataType getKeyType() {
        return keyType_ == null ? org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : keyType_;
      }
      /**
       * <code>.spark.connect.DataType key_type = 1;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getKeyTypeOrBuilder() {
        return getKeyType();
      }

      public static final int VALUE_TYPE_FIELD_NUMBER = 2;
      private org.apache.kyuubi.engine.spark.connect.proto.DataType valueType_;
      /**
       * <code>.spark.connect.DataType value_type = 2;</code>
       * @return Whether the valueType field is set.
       */
      @java.lang.Override
      public boolean hasValueType() {
        return valueType_ != null;
      }
      /**
       * <code>.spark.connect.DataType value_type = 2;</code>
       * @return The valueType.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataType getValueType() {
        return valueType_ == null ? org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : valueType_;
      }
      /**
       * <code>.spark.connect.DataType value_type = 2;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getValueTypeOrBuilder() {
        return getValueType();
      }

      public static final int KEYS_FIELD_NUMBER = 3;
      private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> keys_;
      /**
       * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
       */
      @java.lang.Override
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> getKeysList() {
        return keys_;
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
       */
      @java.lang.Override
      public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
          getKeysOrBuilderList() {
        return keys_;
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
       */
      @java.lang.Override
      public int getKeysCount() {
        return keys_.size();
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getKeys(int index) {
        return keys_.get(index);
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getKeysOrBuilder(
          int index) {
        return keys_.get(index);
      }

      public static final int VALUES_FIELD_NUMBER = 4;
      private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> values_;
      /**
       * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
       */
      @java.lang.Override
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> getValuesList() {
        return values_;
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
       */
      @java.lang.Override
      public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
          getValuesOrBuilderList() {
        return values_;
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
       */
      @java.lang.Override
      public int getValuesCount() {
        return values_.size();
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getValues(int index) {
        return values_.get(index);
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getValuesOrBuilder(
          int index) {
        return values_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (keyType_ != null) {
          output.writeMessage(1, getKeyType());
        }
        if (valueType_ != null) {
          output.writeMessage(2, getValueType());
        }
        for (int i = 0; i < keys_.size(); i++) {
          output.writeMessage(3, keys_.get(i));
        }
        for (int i = 0; i < values_.size(); i++) {
          output.writeMessage(4, values_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (keyType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getKeyType());
        }
        if (valueType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getValueType());
        }
        for (int i = 0; i < keys_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, keys_.get(i));
        }
        for (int i = 0; i < values_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, values_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map)) {
          return super.equals(obj);
        }
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map) obj;

        if (hasKeyType() != other.hasKeyType()) return false;
        if (hasKeyType()) {
          if (!getKeyType()
              .equals(other.getKeyType())) return false;
        }
        if (hasValueType() != other.hasValueType()) return false;
        if (hasValueType()) {
          if (!getValueType()
              .equals(other.getValueType())) return false;
        }
        if (!getKeysList()
            .equals(other.getKeysList())) return false;
        if (!getValuesList()
            .equals(other.getValuesList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasKeyType()) {
          hash = (37 * hash) + KEY_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getKeyType().hashCode();
        }
        if (hasValueType()) {
          hash = (37 * hash) + VALUE_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getValueType().hashCode();
        }
        if (getKeysCount() > 0) {
          hash = (37 * hash) + KEYS_FIELD_NUMBER;
          hash = (53 * hash) + getKeysList().hashCode();
        }
        if (getValuesCount() > 0) {
          hash = (37 * hash) + VALUES_FIELD_NUMBER;
          hash = (53 * hash) + getValuesList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code spark.connect.Expression.Literal.Map}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Literal.Map)
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.MapOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Map_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Map_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.Builder.class);
        }

        // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (keyTypeBuilder_ == null) {
            keyType_ = null;
          } else {
            keyType_ = null;
            keyTypeBuilder_ = null;
          }
          if (valueTypeBuilder_ == null) {
            valueType_ = null;
          } else {
            valueType_ = null;
            valueTypeBuilder_ = null;
          }
          if (keysBuilder_ == null) {
            keys_ = java.util.Collections.emptyList();
          } else {
            keys_ = null;
            keysBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          if (valuesBuilder_ == null) {
            values_ = java.util.Collections.emptyList();
          } else {
            values_ = null;
            valuesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Map_descriptor;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map getDefaultInstanceForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map build() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map buildPartial() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map(this);
          int from_bitField0_ = bitField0_;
          if (keyTypeBuilder_ == null) {
            result.keyType_ = keyType_;
          } else {
            result.keyType_ = keyTypeBuilder_.build();
          }
          if (valueTypeBuilder_ == null) {
            result.valueType_ = valueType_;
          } else {
            result.valueType_ = valueTypeBuilder_.build();
          }
          if (keysBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              keys_ = java.util.Collections.unmodifiableList(keys_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.keys_ = keys_;
          } else {
            result.keys_ = keysBuilder_.build();
          }
          if (valuesBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0)) {
              values_ = java.util.Collections.unmodifiableList(values_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.values_ = values_;
          } else {
            result.values_ = valuesBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map) {
            return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map other) {
          if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.getDefaultInstance()) return this;
          if (other.hasKeyType()) {
            mergeKeyType(other.getKeyType());
          }
          if (other.hasValueType()) {
            mergeValueType(other.getValueType());
          }
          if (keysBuilder_ == null) {
            if (!other.keys_.isEmpty()) {
              if (keys_.isEmpty()) {
                keys_ = other.keys_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureKeysIsMutable();
                keys_.addAll(other.keys_);
              }
              onChanged();
            }
          } else {
            if (!other.keys_.isEmpty()) {
              if (keysBuilder_.isEmpty()) {
                keysBuilder_.dispose();
                keysBuilder_ = null;
                keys_ = other.keys_;
                bitField0_ = (bitField0_ & ~0x00000001);
                keysBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getKeysFieldBuilder() : null;
              } else {
                keysBuilder_.addAllMessages(other.keys_);
              }
            }
          }
          if (valuesBuilder_ == null) {
            if (!other.values_.isEmpty()) {
              if (values_.isEmpty()) {
                values_ = other.values_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensureValuesIsMutable();
                values_.addAll(other.values_);
              }
              onChanged();
            }
          } else {
            if (!other.values_.isEmpty()) {
              if (valuesBuilder_.isEmpty()) {
                valuesBuilder_.dispose();
                valuesBuilder_ = null;
                values_ = other.values_;
                bitField0_ = (bitField0_ & ~0x00000002);
                valuesBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getValuesFieldBuilder() : null;
              } else {
                valuesBuilder_.addAllMessages(other.values_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getKeyTypeFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 10
                case 18: {
                  input.readMessage(
                      getValueTypeFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 18
                case 26: {
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal m =
                      input.readMessage(
                          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.parser(),
                          extensionRegistry);
                  if (keysBuilder_ == null) {
                    ensureKeysIsMutable();
                    keys_.add(m);
                  } else {
                    keysBuilder_.addMessage(m);
                  }
                  break;
                } // case 26
                case 34: {
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal m =
                      input.readMessage(
                          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.parser(),
                          extensionRegistry);
                  if (valuesBuilder_ == null) {
                    ensureValuesIsMutable();
                    values_.add(m);
                  } else {
                    valuesBuilder_.addMessage(m);
                  }
                  break;
                } // case 34
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private org.apache.kyuubi.engine.spark.connect.proto.DataType keyType_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> keyTypeBuilder_;
        /**
         * <code>.spark.connect.DataType key_type = 1;</code>
         * @return Whether the keyType field is set.
         */
        public boolean hasKeyType() {
          return keyTypeBuilder_ != null || keyType_ != null;
        }
        /**
         * <code>.spark.connect.DataType key_type = 1;</code>
         * @return The keyType.
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataType getKeyType() {
          if (keyTypeBuilder_ == null) {
            return keyType_ == null ? org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : keyType_;
          } else {
            return keyTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>.spark.connect.DataType key_type = 1;</code>
         */
        public Builder setKeyType(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
          if (keyTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            keyType_ = value;
            onChanged();
          } else {
            keyTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType key_type = 1;</code>
         */
        public Builder setKeyType(
            org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder builderForValue) {
          if (keyTypeBuilder_ == null) {
            keyType_ = builderForValue.build();
            onChanged();
          } else {
            keyTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType key_type = 1;</code>
         */
        public Builder mergeKeyType(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
          if (keyTypeBuilder_ == null) {
            if (keyType_ != null) {
              keyType_ =
                org.apache.kyuubi.engine.spark.connect.proto.DataType.newBuilder(keyType_).mergeFrom(value).buildPartial();
            } else {
              keyType_ = value;
            }
            onChanged();
          } else {
            keyTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType key_type = 1;</code>
         */
        public Builder clearKeyType() {
          if (keyTypeBuilder_ == null) {
            keyType_ = null;
            onChanged();
          } else {
            keyType_ = null;
            keyTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType key_type = 1;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder getKeyTypeBuilder() {
          
          onChanged();
          return getKeyTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.spark.connect.DataType key_type = 1;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getKeyTypeOrBuilder() {
          if (keyTypeBuilder_ != null) {
            return keyTypeBuilder_.getMessageOrBuilder();
          } else {
            return keyType_ == null ?
                org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : keyType_;
          }
        }
        /**
         * <code>.spark.connect.DataType key_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> 
            getKeyTypeFieldBuilder() {
          if (keyTypeBuilder_ == null) {
            keyTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder>(
                    getKeyType(),
                    getParentForChildren(),
                    isClean());
            keyType_ = null;
          }
          return keyTypeBuilder_;
        }

        private org.apache.kyuubi.engine.spark.connect.proto.DataType valueType_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> valueTypeBuilder_;
        /**
         * <code>.spark.connect.DataType value_type = 2;</code>
         * @return Whether the valueType field is set.
         */
        public boolean hasValueType() {
          return valueTypeBuilder_ != null || valueType_ != null;
        }
        /**
         * <code>.spark.connect.DataType value_type = 2;</code>
         * @return The valueType.
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataType getValueType() {
          if (valueTypeBuilder_ == null) {
            return valueType_ == null ? org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : valueType_;
          } else {
            return valueTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>.spark.connect.DataType value_type = 2;</code>
         */
        public Builder setValueType(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
          if (valueTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            valueType_ = value;
            onChanged();
          } else {
            valueTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType value_type = 2;</code>
         */
        public Builder setValueType(
            org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder builderForValue) {
          if (valueTypeBuilder_ == null) {
            valueType_ = builderForValue.build();
            onChanged();
          } else {
            valueTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType value_type = 2;</code>
         */
        public Builder mergeValueType(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
          if (valueTypeBuilder_ == null) {
            if (valueType_ != null) {
              valueType_ =
                org.apache.kyuubi.engine.spark.connect.proto.DataType.newBuilder(valueType_).mergeFrom(value).buildPartial();
            } else {
              valueType_ = value;
            }
            onChanged();
          } else {
            valueTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType value_type = 2;</code>
         */
        public Builder clearValueType() {
          if (valueTypeBuilder_ == null) {
            valueType_ = null;
            onChanged();
          } else {
            valueType_ = null;
            valueTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType value_type = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder getValueTypeBuilder() {
          
          onChanged();
          return getValueTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.spark.connect.DataType value_type = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getValueTypeOrBuilder() {
          if (valueTypeBuilder_ != null) {
            return valueTypeBuilder_.getMessageOrBuilder();
          } else {
            return valueType_ == null ?
                org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : valueType_;
          }
        }
        /**
         * <code>.spark.connect.DataType value_type = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> 
            getValueTypeFieldBuilder() {
          if (valueTypeBuilder_ == null) {
            valueTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder>(
                    getValueType(),
                    getParentForChildren(),
                    isClean());
            valueType_ = null;
          }
          return valueTypeBuilder_;
        }

        private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> keys_ =
          java.util.Collections.emptyList();
        private void ensureKeysIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            keys_ = new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal>(keys_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> keysBuilder_;

        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> getKeysList() {
          if (keysBuilder_ == null) {
            return java.util.Collections.unmodifiableList(keys_);
          } else {
            return keysBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public int getKeysCount() {
          if (keysBuilder_ == null) {
            return keys_.size();
          } else {
            return keysBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getKeys(int index) {
          if (keysBuilder_ == null) {
            return keys_.get(index);
          } else {
            return keysBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public Builder setKeys(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (keysBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureKeysIsMutable();
            keys_.set(index, value);
            onChanged();
          } else {
            keysBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public Builder setKeys(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (keysBuilder_ == null) {
            ensureKeysIsMutable();
            keys_.set(index, builderForValue.build());
            onChanged();
          } else {
            keysBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public Builder addKeys(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (keysBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureKeysIsMutable();
            keys_.add(value);
            onChanged();
          } else {
            keysBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public Builder addKeys(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (keysBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureKeysIsMutable();
            keys_.add(index, value);
            onChanged();
          } else {
            keysBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public Builder addKeys(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (keysBuilder_ == null) {
            ensureKeysIsMutable();
            keys_.add(builderForValue.build());
            onChanged();
          } else {
            keysBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public Builder addKeys(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (keysBuilder_ == null) {
            ensureKeysIsMutable();
            keys_.add(index, builderForValue.build());
            onChanged();
          } else {
            keysBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public Builder addAllKeys(
            java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> values) {
          if (keysBuilder_ == null) {
            ensureKeysIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, keys_);
            onChanged();
          } else {
            keysBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public Builder clearKeys() {
          if (keysBuilder_ == null) {
            keys_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            keysBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public Builder removeKeys(int index) {
          if (keysBuilder_ == null) {
            ensureKeysIsMutable();
            keys_.remove(index);
            onChanged();
          } else {
            keysBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder getKeysBuilder(
            int index) {
          return getKeysFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getKeysOrBuilder(
            int index) {
          if (keysBuilder_ == null) {
            return keys_.get(index);  } else {
            return keysBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
             getKeysOrBuilderList() {
          if (keysBuilder_ != null) {
            return keysBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(keys_);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder addKeysBuilder() {
          return getKeysFieldBuilder().addBuilder(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance());
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder addKeysBuilder(
            int index) {
          return getKeysFieldBuilder().addBuilder(
              index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance());
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal keys = 3;</code>
         */
        public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder> 
             getKeysBuilderList() {
          return getKeysFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
            getKeysFieldBuilder() {
          if (keysBuilder_ == null) {
            keysBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder>(
                    keys_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            keys_ = null;
          }
          return keysBuilder_;
        }

        private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> values_ =
          java.util.Collections.emptyList();
        private void ensureValuesIsMutable() {
          if (!((bitField0_ & 0x00000002) != 0)) {
            values_ = new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal>(values_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> valuesBuilder_;

        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> getValuesList() {
          if (valuesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(values_);
          } else {
            return valuesBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public int getValuesCount() {
          if (valuesBuilder_ == null) {
            return values_.size();
          } else {
            return valuesBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getValues(int index) {
          if (valuesBuilder_ == null) {
            return values_.get(index);
          } else {
            return valuesBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public Builder setValues(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (valuesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValuesIsMutable();
            values_.set(index, value);
            onChanged();
          } else {
            valuesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public Builder setValues(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (valuesBuilder_ == null) {
            ensureValuesIsMutable();
            values_.set(index, builderForValue.build());
            onChanged();
          } else {
            valuesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public Builder addValues(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (valuesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValuesIsMutable();
            values_.add(value);
            onChanged();
          } else {
            valuesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public Builder addValues(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (valuesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValuesIsMutable();
            values_.add(index, value);
            onChanged();
          } else {
            valuesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public Builder addValues(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (valuesBuilder_ == null) {
            ensureValuesIsMutable();
            values_.add(builderForValue.build());
            onChanged();
          } else {
            valuesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public Builder addValues(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (valuesBuilder_ == null) {
            ensureValuesIsMutable();
            values_.add(index, builderForValue.build());
            onChanged();
          } else {
            valuesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public Builder addAllValues(
            java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> values) {
          if (valuesBuilder_ == null) {
            ensureValuesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, values_);
            onChanged();
          } else {
            valuesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public Builder clearValues() {
          if (valuesBuilder_ == null) {
            values_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            valuesBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public Builder removeValues(int index) {
          if (valuesBuilder_ == null) {
            ensureValuesIsMutable();
            values_.remove(index);
            onChanged();
          } else {
            valuesBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder getValuesBuilder(
            int index) {
          return getValuesFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getValuesOrBuilder(
            int index) {
          if (valuesBuilder_ == null) {
            return values_.get(index);  } else {
            return valuesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
             getValuesOrBuilderList() {
          if (valuesBuilder_ != null) {
            return valuesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(values_);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder addValuesBuilder() {
          return getValuesFieldBuilder().addBuilder(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance());
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder addValuesBuilder(
            int index) {
          return getValuesFieldBuilder().addBuilder(
              index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance());
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal values = 4;</code>
         */
        public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder> 
             getValuesBuilderList() {
          return getValuesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
            getValuesFieldBuilder() {
          if (valuesBuilder_ == null) {
            valuesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder>(
                    values_,
                    ((bitField0_ & 0x00000002) != 0),
                    getParentForChildren(),
                    isClean());
            values_ = null;
          }
          return valuesBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Literal.Map)
      }

      // @@protoc_insertion_point(class_scope:spark.connect.Expression.Literal.Map)
      private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map();
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Map>
          PARSER = new com.google.protobuf.AbstractParser<Map>() {
        @java.lang.Override
        public Map parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Map> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Map> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface StructOrBuilder extends
        // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Literal.Struct)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.spark.connect.DataType struct_type = 1;</code>
       * @return Whether the structType field is set.
       */
      boolean hasStructType();
      /**
       * <code>.spark.connect.DataType struct_type = 1;</code>
       * @return The structType.
       */
      org.apache.kyuubi.engine.spark.connect.proto.DataType getStructType();
      /**
       * <code>.spark.connect.DataType struct_type = 1;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getStructTypeOrBuilder();

      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> 
          getElementsList();
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getElements(int index);
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      int getElementsCount();
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
          getElementsOrBuilderList();
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getElementsOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code spark.connect.Expression.Literal.Struct}
     */
    public static final class Struct extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:spark.connect.Expression.Literal.Struct)
        StructOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Struct.newBuilder() to construct.
      private Struct(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Struct() {
        elements_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Struct();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Struct_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Struct_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.Builder.class);
      }

      public static final int STRUCT_TYPE_FIELD_NUMBER = 1;
      private org.apache.kyuubi.engine.spark.connect.proto.DataType structType_;
      /**
       * <code>.spark.connect.DataType struct_type = 1;</code>
       * @return Whether the structType field is set.
       */
      @java.lang.Override
      public boolean hasStructType() {
        return structType_ != null;
      }
      /**
       * <code>.spark.connect.DataType struct_type = 1;</code>
       * @return The structType.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataType getStructType() {
        return structType_ == null ? org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : structType_;
      }
      /**
       * <code>.spark.connect.DataType struct_type = 1;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getStructTypeOrBuilder() {
        return getStructType();
      }

      public static final int ELEMENTS_FIELD_NUMBER = 2;
      private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> elements_;
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> getElementsList() {
        return elements_;
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      @java.lang.Override
      public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
          getElementsOrBuilderList() {
        return elements_;
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      @java.lang.Override
      public int getElementsCount() {
        return elements_.size();
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getElements(int index) {
        return elements_.get(index);
      }
      /**
       * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getElementsOrBuilder(
          int index) {
        return elements_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (structType_ != null) {
          output.writeMessage(1, getStructType());
        }
        for (int i = 0; i < elements_.size(); i++) {
          output.writeMessage(2, elements_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (structType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getStructType());
        }
        for (int i = 0; i < elements_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, elements_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct)) {
          return super.equals(obj);
        }
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct) obj;

        if (hasStructType() != other.hasStructType()) return false;
        if (hasStructType()) {
          if (!getStructType()
              .equals(other.getStructType())) return false;
        }
        if (!getElementsList()
            .equals(other.getElementsList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasStructType()) {
          hash = (37 * hash) + STRUCT_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getStructType().hashCode();
        }
        if (getElementsCount() > 0) {
          hash = (37 * hash) + ELEMENTS_FIELD_NUMBER;
          hash = (53 * hash) + getElementsList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code spark.connect.Expression.Literal.Struct}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Literal.Struct)
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.StructOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Struct_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Struct_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.Builder.class);
        }

        // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (structTypeBuilder_ == null) {
            structType_ = null;
          } else {
            structType_ = null;
            structTypeBuilder_ = null;
          }
          if (elementsBuilder_ == null) {
            elements_ = java.util.Collections.emptyList();
          } else {
            elements_ = null;
            elementsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_Struct_descriptor;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct getDefaultInstanceForType() {
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct build() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct buildPartial() {
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct(this);
          int from_bitField0_ = bitField0_;
          if (structTypeBuilder_ == null) {
            result.structType_ = structType_;
          } else {
            result.structType_ = structTypeBuilder_.build();
          }
          if (elementsBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              elements_ = java.util.Collections.unmodifiableList(elements_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.elements_ = elements_;
          } else {
            result.elements_ = elementsBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct) {
            return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct other) {
          if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.getDefaultInstance()) return this;
          if (other.hasStructType()) {
            mergeStructType(other.getStructType());
          }
          if (elementsBuilder_ == null) {
            if (!other.elements_.isEmpty()) {
              if (elements_.isEmpty()) {
                elements_ = other.elements_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureElementsIsMutable();
                elements_.addAll(other.elements_);
              }
              onChanged();
            }
          } else {
            if (!other.elements_.isEmpty()) {
              if (elementsBuilder_.isEmpty()) {
                elementsBuilder_.dispose();
                elementsBuilder_ = null;
                elements_ = other.elements_;
                bitField0_ = (bitField0_ & ~0x00000001);
                elementsBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getElementsFieldBuilder() : null;
              } else {
                elementsBuilder_.addAllMessages(other.elements_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getStructTypeFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 10
                case 18: {
                  org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal m =
                      input.readMessage(
                          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.parser(),
                          extensionRegistry);
                  if (elementsBuilder_ == null) {
                    ensureElementsIsMutable();
                    elements_.add(m);
                  } else {
                    elementsBuilder_.addMessage(m);
                  }
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private org.apache.kyuubi.engine.spark.connect.proto.DataType structType_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> structTypeBuilder_;
        /**
         * <code>.spark.connect.DataType struct_type = 1;</code>
         * @return Whether the structType field is set.
         */
        public boolean hasStructType() {
          return structTypeBuilder_ != null || structType_ != null;
        }
        /**
         * <code>.spark.connect.DataType struct_type = 1;</code>
         * @return The structType.
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataType getStructType() {
          if (structTypeBuilder_ == null) {
            return structType_ == null ? org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : structType_;
          } else {
            return structTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>.spark.connect.DataType struct_type = 1;</code>
         */
        public Builder setStructType(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
          if (structTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            structType_ = value;
            onChanged();
          } else {
            structTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType struct_type = 1;</code>
         */
        public Builder setStructType(
            org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder builderForValue) {
          if (structTypeBuilder_ == null) {
            structType_ = builderForValue.build();
            onChanged();
          } else {
            structTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType struct_type = 1;</code>
         */
        public Builder mergeStructType(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
          if (structTypeBuilder_ == null) {
            if (structType_ != null) {
              structType_ =
                org.apache.kyuubi.engine.spark.connect.proto.DataType.newBuilder(structType_).mergeFrom(value).buildPartial();
            } else {
              structType_ = value;
            }
            onChanged();
          } else {
            structTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType struct_type = 1;</code>
         */
        public Builder clearStructType() {
          if (structTypeBuilder_ == null) {
            structType_ = null;
            onChanged();
          } else {
            structType_ = null;
            structTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.spark.connect.DataType struct_type = 1;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder getStructTypeBuilder() {
          
          onChanged();
          return getStructTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.spark.connect.DataType struct_type = 1;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getStructTypeOrBuilder() {
          if (structTypeBuilder_ != null) {
            return structTypeBuilder_.getMessageOrBuilder();
          } else {
            return structType_ == null ?
                org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance() : structType_;
          }
        }
        /**
         * <code>.spark.connect.DataType struct_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> 
            getStructTypeFieldBuilder() {
          if (structTypeBuilder_ == null) {
            structTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder>(
                    getStructType(),
                    getParentForChildren(),
                    isClean());
            structType_ = null;
          }
          return structTypeBuilder_;
        }

        private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> elements_ =
          java.util.Collections.emptyList();
        private void ensureElementsIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            elements_ = new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal>(elements_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> elementsBuilder_;

        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> getElementsList() {
          if (elementsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(elements_);
          } else {
            return elementsBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public int getElementsCount() {
          if (elementsBuilder_ == null) {
            return elements_.size();
          } else {
            return elementsBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getElements(int index) {
          if (elementsBuilder_ == null) {
            return elements_.get(index);
          } else {
            return elementsBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder setElements(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (elementsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureElementsIsMutable();
            elements_.set(index, value);
            onChanged();
          } else {
            elementsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder setElements(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (elementsBuilder_ == null) {
            ensureElementsIsMutable();
            elements_.set(index, builderForValue.build());
            onChanged();
          } else {
            elementsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder addElements(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (elementsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureElementsIsMutable();
            elements_.add(value);
            onChanged();
          } else {
            elementsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder addElements(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
          if (elementsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureElementsIsMutable();
            elements_.add(index, value);
            onChanged();
          } else {
            elementsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder addElements(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (elementsBuilder_ == null) {
            ensureElementsIsMutable();
            elements_.add(builderForValue.build());
            onChanged();
          } else {
            elementsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder addElements(
            int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
          if (elementsBuilder_ == null) {
            ensureElementsIsMutable();
            elements_.add(index, builderForValue.build());
            onChanged();
          } else {
            elementsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder addAllElements(
            java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal> values) {
          if (elementsBuilder_ == null) {
            ensureElementsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, elements_);
            onChanged();
          } else {
            elementsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder clearElements() {
          if (elementsBuilder_ == null) {
            elements_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            elementsBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public Builder removeElements(int index) {
          if (elementsBuilder_ == null) {
            ensureElementsIsMutable();
            elements_.remove(index);
            onChanged();
          } else {
            elementsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder getElementsBuilder(
            int index) {
          return getElementsFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getElementsOrBuilder(
            int index) {
          if (elementsBuilder_ == null) {
            return elements_.get(index);  } else {
            return elementsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
             getElementsOrBuilderList() {
          if (elementsBuilder_ != null) {
            return elementsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(elements_);
          }
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder addElementsBuilder() {
          return getElementsFieldBuilder().addBuilder(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance());
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder addElementsBuilder(
            int index) {
          return getElementsFieldBuilder().addBuilder(
              index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance());
        }
        /**
         * <code>repeated .spark.connect.Expression.Literal elements = 2;</code>
         */
        public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder> 
             getElementsBuilderList() {
          return getElementsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
            getElementsFieldBuilder() {
          if (elementsBuilder_ == null) {
            elementsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder>(
                    elements_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            elements_ = null;
          }
          return elementsBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Literal.Struct)
      }

      // @@protoc_insertion_point(class_scope:spark.connect.Expression.Literal.Struct)
      private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct();
      }

      public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Struct>
          PARSER = new com.google.protobuf.AbstractParser<Struct>() {
        @java.lang.Override
        public Struct parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Struct> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Struct> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int literalTypeCase_ = 0;
    private java.lang.Object literalType_;
    public enum LiteralTypeCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      NULL(1),
      BINARY(2),
      BOOLEAN(3),
      BYTE(4),
      SHORT(5),
      INTEGER(6),
      LONG(7),
      FLOAT(10),
      DOUBLE(11),
      DECIMAL(12),
      STRING(13),
      DATE(16),
      TIMESTAMP(17),
      TIMESTAMP_NTZ(18),
      CALENDAR_INTERVAL(19),
      YEAR_MONTH_INTERVAL(20),
      DAY_TIME_INTERVAL(21),
      ARRAY(22),
      MAP(23),
      STRUCT(24),
      LITERALTYPE_NOT_SET(0);
      private final int value;
      private LiteralTypeCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LiteralTypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static LiteralTypeCase forNumber(int value) {
        switch (value) {
          case 1: return NULL;
          case 2: return BINARY;
          case 3: return BOOLEAN;
          case 4: return BYTE;
          case 5: return SHORT;
          case 6: return INTEGER;
          case 7: return LONG;
          case 10: return FLOAT;
          case 11: return DOUBLE;
          case 12: return DECIMAL;
          case 13: return STRING;
          case 16: return DATE;
          case 17: return TIMESTAMP;
          case 18: return TIMESTAMP_NTZ;
          case 19: return CALENDAR_INTERVAL;
          case 20: return YEAR_MONTH_INTERVAL;
          case 21: return DAY_TIME_INTERVAL;
          case 22: return ARRAY;
          case 23: return MAP;
          case 24: return STRUCT;
          case 0: return LITERALTYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public LiteralTypeCase
    getLiteralTypeCase() {
      return LiteralTypeCase.forNumber(
          literalTypeCase_);
    }

    public static final int NULL_FIELD_NUMBER = 1;
    /**
     * <code>.spark.connect.DataType null = 1;</code>
     * @return Whether the null field is set.
     */
    @java.lang.Override
    public boolean hasNull() {
      return literalTypeCase_ == 1;
    }
    /**
     * <code>.spark.connect.DataType null = 1;</code>
     * @return The null.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.DataType getNull() {
      if (literalTypeCase_ == 1) {
         return (org.apache.kyuubi.engine.spark.connect.proto.DataType) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
    }
    /**
     * <code>.spark.connect.DataType null = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getNullOrBuilder() {
      if (literalTypeCase_ == 1) {
         return (org.apache.kyuubi.engine.spark.connect.proto.DataType) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
    }

    public static final int BINARY_FIELD_NUMBER = 2;
    /**
     * <code>bytes binary = 2;</code>
     * @return Whether the binary field is set.
     */
    @java.lang.Override
    public boolean hasBinary() {
      return literalTypeCase_ == 2;
    }
    /**
     * <code>bytes binary = 2;</code>
     * @return The binary.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getBinary() {
      if (literalTypeCase_ == 2) {
        return (com.google.protobuf.ByteString) literalType_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }

    public static final int BOOLEAN_FIELD_NUMBER = 3;
    /**
     * <code>bool boolean = 3;</code>
     * @return Whether the boolean field is set.
     */
    @java.lang.Override
    public boolean hasBoolean() {
      return literalTypeCase_ == 3;
    }
    /**
     * <code>bool boolean = 3;</code>
     * @return The boolean.
     */
    @java.lang.Override
    public boolean getBoolean() {
      if (literalTypeCase_ == 3) {
        return (java.lang.Boolean) literalType_;
      }
      return false;
    }

    public static final int BYTE_FIELD_NUMBER = 4;
    /**
     * <code>int32 byte = 4;</code>
     * @return Whether the byte field is set.
     */
    @java.lang.Override
    public boolean hasByte() {
      return literalTypeCase_ == 4;
    }
    /**
     * <code>int32 byte = 4;</code>
     * @return The byte.
     */
    @java.lang.Override
    public int getByte() {
      if (literalTypeCase_ == 4) {
        return (java.lang.Integer) literalType_;
      }
      return 0;
    }

    public static final int SHORT_FIELD_NUMBER = 5;
    /**
     * <code>int32 short = 5;</code>
     * @return Whether the short field is set.
     */
    @java.lang.Override
    public boolean hasShort() {
      return literalTypeCase_ == 5;
    }
    /**
     * <code>int32 short = 5;</code>
     * @return The short.
     */
    @java.lang.Override
    public int getShort() {
      if (literalTypeCase_ == 5) {
        return (java.lang.Integer) literalType_;
      }
      return 0;
    }

    public static final int INTEGER_FIELD_NUMBER = 6;
    /**
     * <code>int32 integer = 6;</code>
     * @return Whether the integer field is set.
     */
    @java.lang.Override
    public boolean hasInteger() {
      return literalTypeCase_ == 6;
    }
    /**
     * <code>int32 integer = 6;</code>
     * @return The integer.
     */
    @java.lang.Override
    public int getInteger() {
      if (literalTypeCase_ == 6) {
        return (java.lang.Integer) literalType_;
      }
      return 0;
    }

    public static final int LONG_FIELD_NUMBER = 7;
    /**
     * <code>int64 long = 7;</code>
     * @return Whether the long field is set.
     */
    @java.lang.Override
    public boolean hasLong() {
      return literalTypeCase_ == 7;
    }
    /**
     * <code>int64 long = 7;</code>
     * @return The long.
     */
    @java.lang.Override
    public long getLong() {
      if (literalTypeCase_ == 7) {
        return (java.lang.Long) literalType_;
      }
      return 0L;
    }

    public static final int FLOAT_FIELD_NUMBER = 10;
    /**
     * <code>float float = 10;</code>
     * @return Whether the float field is set.
     */
    @java.lang.Override
    public boolean hasFloat() {
      return literalTypeCase_ == 10;
    }
    /**
     * <code>float float = 10;</code>
     * @return The float.
     */
    @java.lang.Override
    public float getFloat() {
      if (literalTypeCase_ == 10) {
        return (java.lang.Float) literalType_;
      }
      return 0F;
    }

    public static final int DOUBLE_FIELD_NUMBER = 11;
    /**
     * <code>double double = 11;</code>
     * @return Whether the double field is set.
     */
    @java.lang.Override
    public boolean hasDouble() {
      return literalTypeCase_ == 11;
    }
    /**
     * <code>double double = 11;</code>
     * @return The double.
     */
    @java.lang.Override
    public double getDouble() {
      if (literalTypeCase_ == 11) {
        return (java.lang.Double) literalType_;
      }
      return 0D;
    }

    public static final int DECIMAL_FIELD_NUMBER = 12;
    /**
     * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
     * @return Whether the decimal field is set.
     */
    @java.lang.Override
    public boolean hasDecimal() {
      return literalTypeCase_ == 12;
    }
    /**
     * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
     * @return The decimal.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal getDecimal() {
      if (literalTypeCase_ == 12) {
         return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.getDefaultInstance();
    }
    /**
     * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.DecimalOrBuilder getDecimalOrBuilder() {
      if (literalTypeCase_ == 12) {
         return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.getDefaultInstance();
    }

    public static final int STRING_FIELD_NUMBER = 13;
    /**
     * <code>string string = 13;</code>
     * @return Whether the string field is set.
     */
    public boolean hasString() {
      return literalTypeCase_ == 13;
    }
    /**
     * <code>string string = 13;</code>
     * @return The string.
     */
    public java.lang.String getString() {
      java.lang.Object ref = "";
      if (literalTypeCase_ == 13) {
        ref = literalType_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (literalTypeCase_ == 13) {
          literalType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string string = 13;</code>
     * @return The bytes for string.
     */
    public com.google.protobuf.ByteString
        getStringBytes() {
      java.lang.Object ref = "";
      if (literalTypeCase_ == 13) {
        ref = literalType_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (literalTypeCase_ == 13) {
          literalType_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DATE_FIELD_NUMBER = 16;
    /**
     * <pre>
     * Date in units of days since the UNIX epoch.
     * </pre>
     *
     * <code>int32 date = 16;</code>
     * @return Whether the date field is set.
     */
    @java.lang.Override
    public boolean hasDate() {
      return literalTypeCase_ == 16;
    }
    /**
     * <pre>
     * Date in units of days since the UNIX epoch.
     * </pre>
     *
     * <code>int32 date = 16;</code>
     * @return The date.
     */
    @java.lang.Override
    public int getDate() {
      if (literalTypeCase_ == 16) {
        return (java.lang.Integer) literalType_;
      }
      return 0;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 17;
    /**
     * <pre>
     * Timestamp in units of microseconds since the UNIX epoch.
     * </pre>
     *
     * <code>int64 timestamp = 17;</code>
     * @return Whether the timestamp field is set.
     */
    @java.lang.Override
    public boolean hasTimestamp() {
      return literalTypeCase_ == 17;
    }
    /**
     * <pre>
     * Timestamp in units of microseconds since the UNIX epoch.
     * </pre>
     *
     * <code>int64 timestamp = 17;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      if (literalTypeCase_ == 17) {
        return (java.lang.Long) literalType_;
      }
      return 0L;
    }

    public static final int TIMESTAMP_NTZ_FIELD_NUMBER = 18;
    /**
     * <pre>
     * Timestamp in units of microseconds since the UNIX epoch (without timezone information).
     * </pre>
     *
     * <code>int64 timestamp_ntz = 18;</code>
     * @return Whether the timestampNtz field is set.
     */
    @java.lang.Override
    public boolean hasTimestampNtz() {
      return literalTypeCase_ == 18;
    }
    /**
     * <pre>
     * Timestamp in units of microseconds since the UNIX epoch (without timezone information).
     * </pre>
     *
     * <code>int64 timestamp_ntz = 18;</code>
     * @return The timestampNtz.
     */
    @java.lang.Override
    public long getTimestampNtz() {
      if (literalTypeCase_ == 18) {
        return (java.lang.Long) literalType_;
      }
      return 0L;
    }

    public static final int CALENDAR_INTERVAL_FIELD_NUMBER = 19;
    /**
     * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
     * @return Whether the calendarInterval field is set.
     */
    @java.lang.Override
    public boolean hasCalendarInterval() {
      return literalTypeCase_ == 19;
    }
    /**
     * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
     * @return The calendarInterval.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval getCalendarInterval() {
      if (literalTypeCase_ == 19) {
         return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.getDefaultInstance();
    }
    /**
     * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarIntervalOrBuilder getCalendarIntervalOrBuilder() {
      if (literalTypeCase_ == 19) {
         return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.getDefaultInstance();
    }

    public static final int YEAR_MONTH_INTERVAL_FIELD_NUMBER = 20;
    /**
     * <code>int32 year_month_interval = 20;</code>
     * @return Whether the yearMonthInterval field is set.
     */
    @java.lang.Override
    public boolean hasYearMonthInterval() {
      return literalTypeCase_ == 20;
    }
    /**
     * <code>int32 year_month_interval = 20;</code>
     * @return The yearMonthInterval.
     */
    @java.lang.Override
    public int getYearMonthInterval() {
      if (literalTypeCase_ == 20) {
        return (java.lang.Integer) literalType_;
      }
      return 0;
    }

    public static final int DAY_TIME_INTERVAL_FIELD_NUMBER = 21;
    /**
     * <code>int64 day_time_interval = 21;</code>
     * @return Whether the dayTimeInterval field is set.
     */
    @java.lang.Override
    public boolean hasDayTimeInterval() {
      return literalTypeCase_ == 21;
    }
    /**
     * <code>int64 day_time_interval = 21;</code>
     * @return The dayTimeInterval.
     */
    @java.lang.Override
    public long getDayTimeInterval() {
      if (literalTypeCase_ == 21) {
        return (java.lang.Long) literalType_;
      }
      return 0L;
    }

    public static final int ARRAY_FIELD_NUMBER = 22;
    /**
     * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
     * @return Whether the array field is set.
     */
    @java.lang.Override
    public boolean hasArray() {
      return literalTypeCase_ == 22;
    }
    /**
     * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
     * @return The array.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array getArray() {
      if (literalTypeCase_ == 22) {
         return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.getDefaultInstance();
    }
    /**
     * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.ArrayOrBuilder getArrayOrBuilder() {
      if (literalTypeCase_ == 22) {
         return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.getDefaultInstance();
    }

    public static final int MAP_FIELD_NUMBER = 23;
    /**
     * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
     * @return Whether the map field is set.
     */
    @java.lang.Override
    public boolean hasMap() {
      return literalTypeCase_ == 23;
    }
    /**
     * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
     * @return The map.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map getMap() {
      if (literalTypeCase_ == 23) {
         return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.getDefaultInstance();
    }
    /**
     * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.MapOrBuilder getMapOrBuilder() {
      if (literalTypeCase_ == 23) {
         return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.getDefaultInstance();
    }

    public static final int STRUCT_FIELD_NUMBER = 24;
    /**
     * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
     * @return Whether the struct field is set.
     */
    @java.lang.Override
    public boolean hasStruct() {
      return literalTypeCase_ == 24;
    }
    /**
     * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
     * @return The struct.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct getStruct() {
      if (literalTypeCase_ == 24) {
         return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.getDefaultInstance();
    }
    /**
     * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.StructOrBuilder getStructOrBuilder() {
      if (literalTypeCase_ == 24) {
         return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct) literalType_;
      }
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (literalTypeCase_ == 1) {
        output.writeMessage(1, (org.apache.kyuubi.engine.spark.connect.proto.DataType) literalType_);
      }
      if (literalTypeCase_ == 2) {
        output.writeBytes(
            2, (com.google.protobuf.ByteString) literalType_);
      }
      if (literalTypeCase_ == 3) {
        output.writeBool(
            3, (boolean)((java.lang.Boolean) literalType_));
      }
      if (literalTypeCase_ == 4) {
        output.writeInt32(
            4, (int)((java.lang.Integer) literalType_));
      }
      if (literalTypeCase_ == 5) {
        output.writeInt32(
            5, (int)((java.lang.Integer) literalType_));
      }
      if (literalTypeCase_ == 6) {
        output.writeInt32(
            6, (int)((java.lang.Integer) literalType_));
      }
      if (literalTypeCase_ == 7) {
        output.writeInt64(
            7, (long)((java.lang.Long) literalType_));
      }
      if (literalTypeCase_ == 10) {
        output.writeFloat(
            10, (float)((java.lang.Float) literalType_));
      }
      if (literalTypeCase_ == 11) {
        output.writeDouble(
            11, (double)((java.lang.Double) literalType_));
      }
      if (literalTypeCase_ == 12) {
        output.writeMessage(12, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal) literalType_);
      }
      if (literalTypeCase_ == 13) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 13, literalType_);
      }
      if (literalTypeCase_ == 16) {
        output.writeInt32(
            16, (int)((java.lang.Integer) literalType_));
      }
      if (literalTypeCase_ == 17) {
        output.writeInt64(
            17, (long)((java.lang.Long) literalType_));
      }
      if (literalTypeCase_ == 18) {
        output.writeInt64(
            18, (long)((java.lang.Long) literalType_));
      }
      if (literalTypeCase_ == 19) {
        output.writeMessage(19, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval) literalType_);
      }
      if (literalTypeCase_ == 20) {
        output.writeInt32(
            20, (int)((java.lang.Integer) literalType_));
      }
      if (literalTypeCase_ == 21) {
        output.writeInt64(
            21, (long)((java.lang.Long) literalType_));
      }
      if (literalTypeCase_ == 22) {
        output.writeMessage(22, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array) literalType_);
      }
      if (literalTypeCase_ == 23) {
        output.writeMessage(23, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map) literalType_);
      }
      if (literalTypeCase_ == 24) {
        output.writeMessage(24, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct) literalType_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (literalTypeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.kyuubi.engine.spark.connect.proto.DataType) literalType_);
      }
      if (literalTypeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              2, (com.google.protobuf.ByteString) literalType_);
      }
      if (literalTypeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              3, (boolean)((java.lang.Boolean) literalType_));
      }
      if (literalTypeCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              4, (int)((java.lang.Integer) literalType_));
      }
      if (literalTypeCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              5, (int)((java.lang.Integer) literalType_));
      }
      if (literalTypeCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              6, (int)((java.lang.Integer) literalType_));
      }
      if (literalTypeCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              7, (long)((java.lang.Long) literalType_));
      }
      if (literalTypeCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(
              10, (float)((java.lang.Float) literalType_));
      }
      if (literalTypeCase_ == 11) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              11, (double)((java.lang.Double) literalType_));
      }
      if (literalTypeCase_ == 12) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal) literalType_);
      }
      if (literalTypeCase_ == 13) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, literalType_);
      }
      if (literalTypeCase_ == 16) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              16, (int)((java.lang.Integer) literalType_));
      }
      if (literalTypeCase_ == 17) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              17, (long)((java.lang.Long) literalType_));
      }
      if (literalTypeCase_ == 18) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              18, (long)((java.lang.Long) literalType_));
      }
      if (literalTypeCase_ == 19) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval) literalType_);
      }
      if (literalTypeCase_ == 20) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              20, (int)((java.lang.Integer) literalType_));
      }
      if (literalTypeCase_ == 21) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              21, (long)((java.lang.Long) literalType_));
      }
      if (literalTypeCase_ == 22) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array) literalType_);
      }
      if (literalTypeCase_ == 23) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map) literalType_);
      }
      if (literalTypeCase_ == 24) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct) literalType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal) obj;

      if (!getLiteralTypeCase().equals(other.getLiteralTypeCase())) return false;
      switch (literalTypeCase_) {
        case 1:
          if (!getNull()
              .equals(other.getNull())) return false;
          break;
        case 2:
          if (!getBinary()
              .equals(other.getBinary())) return false;
          break;
        case 3:
          if (getBoolean()
              != other.getBoolean()) return false;
          break;
        case 4:
          if (getByte()
              != other.getByte()) return false;
          break;
        case 5:
          if (getShort()
              != other.getShort()) return false;
          break;
        case 6:
          if (getInteger()
              != other.getInteger()) return false;
          break;
        case 7:
          if (getLong()
              != other.getLong()) return false;
          break;
        case 10:
          if (java.lang.Float.floatToIntBits(getFloat())
              != java.lang.Float.floatToIntBits(
                  other.getFloat())) return false;
          break;
        case 11:
          if (java.lang.Double.doubleToLongBits(getDouble())
              != java.lang.Double.doubleToLongBits(
                  other.getDouble())) return false;
          break;
        case 12:
          if (!getDecimal()
              .equals(other.getDecimal())) return false;
          break;
        case 13:
          if (!getString()
              .equals(other.getString())) return false;
          break;
        case 16:
          if (getDate()
              != other.getDate()) return false;
          break;
        case 17:
          if (getTimestamp()
              != other.getTimestamp()) return false;
          break;
        case 18:
          if (getTimestampNtz()
              != other.getTimestampNtz()) return false;
          break;
        case 19:
          if (!getCalendarInterval()
              .equals(other.getCalendarInterval())) return false;
          break;
        case 20:
          if (getYearMonthInterval()
              != other.getYearMonthInterval()) return false;
          break;
        case 21:
          if (getDayTimeInterval()
              != other.getDayTimeInterval()) return false;
          break;
        case 22:
          if (!getArray()
              .equals(other.getArray())) return false;
          break;
        case 23:
          if (!getMap()
              .equals(other.getMap())) return false;
          break;
        case 24:
          if (!getStruct()
              .equals(other.getStruct())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (literalTypeCase_) {
        case 1:
          hash = (37 * hash) + NULL_FIELD_NUMBER;
          hash = (53 * hash) + getNull().hashCode();
          break;
        case 2:
          hash = (37 * hash) + BINARY_FIELD_NUMBER;
          hash = (53 * hash) + getBinary().hashCode();
          break;
        case 3:
          hash = (37 * hash) + BOOLEAN_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getBoolean());
          break;
        case 4:
          hash = (37 * hash) + BYTE_FIELD_NUMBER;
          hash = (53 * hash) + getByte();
          break;
        case 5:
          hash = (37 * hash) + SHORT_FIELD_NUMBER;
          hash = (53 * hash) + getShort();
          break;
        case 6:
          hash = (37 * hash) + INTEGER_FIELD_NUMBER;
          hash = (53 * hash) + getInteger();
          break;
        case 7:
          hash = (37 * hash) + LONG_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getLong());
          break;
        case 10:
          hash = (37 * hash) + FLOAT_FIELD_NUMBER;
          hash = (53 * hash) + java.lang.Float.floatToIntBits(
              getFloat());
          break;
        case 11:
          hash = (37 * hash) + DOUBLE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getDouble()));
          break;
        case 12:
          hash = (37 * hash) + DECIMAL_FIELD_NUMBER;
          hash = (53 * hash) + getDecimal().hashCode();
          break;
        case 13:
          hash = (37 * hash) + STRING_FIELD_NUMBER;
          hash = (53 * hash) + getString().hashCode();
          break;
        case 16:
          hash = (37 * hash) + DATE_FIELD_NUMBER;
          hash = (53 * hash) + getDate();
          break;
        case 17:
          hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTimestamp());
          break;
        case 18:
          hash = (37 * hash) + TIMESTAMP_NTZ_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTimestampNtz());
          break;
        case 19:
          hash = (37 * hash) + CALENDAR_INTERVAL_FIELD_NUMBER;
          hash = (53 * hash) + getCalendarInterval().hashCode();
          break;
        case 20:
          hash = (37 * hash) + YEAR_MONTH_INTERVAL_FIELD_NUMBER;
          hash = (53 * hash) + getYearMonthInterval();
          break;
        case 21:
          hash = (37 * hash) + DAY_TIME_INTERVAL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getDayTimeInterval());
          break;
        case 22:
          hash = (37 * hash) + ARRAY_FIELD_NUMBER;
          hash = (53 * hash) + getArray().hashCode();
          break;
        case 23:
          hash = (37 * hash) + MAP_FIELD_NUMBER;
          hash = (53 * hash) + getMap().hashCode();
          break;
        case 24:
          hash = (37 * hash) + STRUCT_FIELD_NUMBER;
          hash = (53 * hash) + getStruct().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.Expression.Literal}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Literal)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (nullBuilder_ != null) {
          nullBuilder_.clear();
        }
        if (decimalBuilder_ != null) {
          decimalBuilder_.clear();
        }
        if (calendarIntervalBuilder_ != null) {
          calendarIntervalBuilder_.clear();
        }
        if (arrayBuilder_ != null) {
          arrayBuilder_.clear();
        }
        if (mapBuilder_ != null) {
          mapBuilder_.clear();
        }
        if (structBuilder_ != null) {
          structBuilder_.clear();
        }
        literalTypeCase_ = 0;
        literalType_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Literal_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal(this);
        if (literalTypeCase_ == 1) {
          if (nullBuilder_ == null) {
            result.literalType_ = literalType_;
          } else {
            result.literalType_ = nullBuilder_.build();
          }
        }
        if (literalTypeCase_ == 2) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 3) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 4) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 5) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 6) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 7) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 10) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 11) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 12) {
          if (decimalBuilder_ == null) {
            result.literalType_ = literalType_;
          } else {
            result.literalType_ = decimalBuilder_.build();
          }
        }
        if (literalTypeCase_ == 13) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 16) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 17) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 18) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 19) {
          if (calendarIntervalBuilder_ == null) {
            result.literalType_ = literalType_;
          } else {
            result.literalType_ = calendarIntervalBuilder_.build();
          }
        }
        if (literalTypeCase_ == 20) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 21) {
          result.literalType_ = literalType_;
        }
        if (literalTypeCase_ == 22) {
          if (arrayBuilder_ == null) {
            result.literalType_ = literalType_;
          } else {
            result.literalType_ = arrayBuilder_.build();
          }
        }
        if (literalTypeCase_ == 23) {
          if (mapBuilder_ == null) {
            result.literalType_ = literalType_;
          } else {
            result.literalType_ = mapBuilder_.build();
          }
        }
        if (literalTypeCase_ == 24) {
          if (structBuilder_ == null) {
            result.literalType_ = literalType_;
          } else {
            result.literalType_ = structBuilder_.build();
          }
        }
        result.literalTypeCase_ = literalTypeCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance()) return this;
        switch (other.getLiteralTypeCase()) {
          case NULL: {
            mergeNull(other.getNull());
            break;
          }
          case BINARY: {
            setBinary(other.getBinary());
            break;
          }
          case BOOLEAN: {
            setBoolean(other.getBoolean());
            break;
          }
          case BYTE: {
            setByte(other.getByte());
            break;
          }
          case SHORT: {
            setShort(other.getShort());
            break;
          }
          case INTEGER: {
            setInteger(other.getInteger());
            break;
          }
          case LONG: {
            setLong(other.getLong());
            break;
          }
          case FLOAT: {
            setFloat(other.getFloat());
            break;
          }
          case DOUBLE: {
            setDouble(other.getDouble());
            break;
          }
          case DECIMAL: {
            mergeDecimal(other.getDecimal());
            break;
          }
          case STRING: {
            literalTypeCase_ = 13;
            literalType_ = other.literalType_;
            onChanged();
            break;
          }
          case DATE: {
            setDate(other.getDate());
            break;
          }
          case TIMESTAMP: {
            setTimestamp(other.getTimestamp());
            break;
          }
          case TIMESTAMP_NTZ: {
            setTimestampNtz(other.getTimestampNtz());
            break;
          }
          case CALENDAR_INTERVAL: {
            mergeCalendarInterval(other.getCalendarInterval());
            break;
          }
          case YEAR_MONTH_INTERVAL: {
            setYearMonthInterval(other.getYearMonthInterval());
            break;
          }
          case DAY_TIME_INTERVAL: {
            setDayTimeInterval(other.getDayTimeInterval());
            break;
          }
          case ARRAY: {
            mergeArray(other.getArray());
            break;
          }
          case MAP: {
            mergeMap(other.getMap());
            break;
          }
          case STRUCT: {
            mergeStruct(other.getStruct());
            break;
          }
          case LITERALTYPE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getNullFieldBuilder().getBuilder(),
                    extensionRegistry);
                literalTypeCase_ = 1;
                break;
              } // case 10
              case 18: {
                literalType_ = input.readBytes();
                literalTypeCase_ = 2;
                break;
              } // case 18
              case 24: {
                literalType_ = input.readBool();
                literalTypeCase_ = 3;
                break;
              } // case 24
              case 32: {
                literalType_ = input.readInt32();
                literalTypeCase_ = 4;
                break;
              } // case 32
              case 40: {
                literalType_ = input.readInt32();
                literalTypeCase_ = 5;
                break;
              } // case 40
              case 48: {
                literalType_ = input.readInt32();
                literalTypeCase_ = 6;
                break;
              } // case 48
              case 56: {
                literalType_ = input.readInt64();
                literalTypeCase_ = 7;
                break;
              } // case 56
              case 85: {
                literalType_ = input.readFloat();
                literalTypeCase_ = 10;
                break;
              } // case 85
              case 89: {
                literalType_ = input.readDouble();
                literalTypeCase_ = 11;
                break;
              } // case 89
              case 98: {
                input.readMessage(
                    getDecimalFieldBuilder().getBuilder(),
                    extensionRegistry);
                literalTypeCase_ = 12;
                break;
              } // case 98
              case 106: {
                java.lang.String s = input.readStringRequireUtf8();
                literalTypeCase_ = 13;
                literalType_ = s;
                break;
              } // case 106
              case 128: {
                literalType_ = input.readInt32();
                literalTypeCase_ = 16;
                break;
              } // case 128
              case 136: {
                literalType_ = input.readInt64();
                literalTypeCase_ = 17;
                break;
              } // case 136
              case 144: {
                literalType_ = input.readInt64();
                literalTypeCase_ = 18;
                break;
              } // case 144
              case 154: {
                input.readMessage(
                    getCalendarIntervalFieldBuilder().getBuilder(),
                    extensionRegistry);
                literalTypeCase_ = 19;
                break;
              } // case 154
              case 160: {
                literalType_ = input.readInt32();
                literalTypeCase_ = 20;
                break;
              } // case 160
              case 168: {
                literalType_ = input.readInt64();
                literalTypeCase_ = 21;
                break;
              } // case 168
              case 178: {
                input.readMessage(
                    getArrayFieldBuilder().getBuilder(),
                    extensionRegistry);
                literalTypeCase_ = 22;
                break;
              } // case 178
              case 186: {
                input.readMessage(
                    getMapFieldBuilder().getBuilder(),
                    extensionRegistry);
                literalTypeCase_ = 23;
                break;
              } // case 186
              case 194: {
                input.readMessage(
                    getStructFieldBuilder().getBuilder(),
                    extensionRegistry);
                literalTypeCase_ = 24;
                break;
              } // case 194
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int literalTypeCase_ = 0;
      private java.lang.Object literalType_;
      public LiteralTypeCase
          getLiteralTypeCase() {
        return LiteralTypeCase.forNumber(
            literalTypeCase_);
      }

      public Builder clearLiteralType() {
        literalTypeCase_ = 0;
        literalType_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> nullBuilder_;
      /**
       * <code>.spark.connect.DataType null = 1;</code>
       * @return Whether the null field is set.
       */
      @java.lang.Override
      public boolean hasNull() {
        return literalTypeCase_ == 1;
      }
      /**
       * <code>.spark.connect.DataType null = 1;</code>
       * @return The null.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataType getNull() {
        if (nullBuilder_ == null) {
          if (literalTypeCase_ == 1) {
            return (org.apache.kyuubi.engine.spark.connect.proto.DataType) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
        } else {
          if (literalTypeCase_ == 1) {
            return nullBuilder_.getMessage();
          }
          return org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.DataType null = 1;</code>
       */
      public Builder setNull(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
        if (nullBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          literalType_ = value;
          onChanged();
        } else {
          nullBuilder_.setMessage(value);
        }
        literalTypeCase_ = 1;
        return this;
      }
      /**
       * <code>.spark.connect.DataType null = 1;</code>
       */
      public Builder setNull(
          org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder builderForValue) {
        if (nullBuilder_ == null) {
          literalType_ = builderForValue.build();
          onChanged();
        } else {
          nullBuilder_.setMessage(builderForValue.build());
        }
        literalTypeCase_ = 1;
        return this;
      }
      /**
       * <code>.spark.connect.DataType null = 1;</code>
       */
      public Builder mergeNull(org.apache.kyuubi.engine.spark.connect.proto.DataType value) {
        if (nullBuilder_ == null) {
          if (literalTypeCase_ == 1 &&
              literalType_ != org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance()) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.DataType.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.DataType) literalType_)
                .mergeFrom(value).buildPartial();
          } else {
            literalType_ = value;
          }
          onChanged();
        } else {
          if (literalTypeCase_ == 1) {
            nullBuilder_.mergeFrom(value);
          } else {
            nullBuilder_.setMessage(value);
          }
        }
        literalTypeCase_ = 1;
        return this;
      }
      /**
       * <code>.spark.connect.DataType null = 1;</code>
       */
      public Builder clearNull() {
        if (nullBuilder_ == null) {
          if (literalTypeCase_ == 1) {
            literalTypeCase_ = 0;
            literalType_ = null;
            onChanged();
          }
        } else {
          if (literalTypeCase_ == 1) {
            literalTypeCase_ = 0;
            literalType_ = null;
          }
          nullBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.spark.connect.DataType null = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder getNullBuilder() {
        return getNullFieldBuilder().getBuilder();
      }
      /**
       * <code>.spark.connect.DataType null = 1;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder getNullOrBuilder() {
        if ((literalTypeCase_ == 1) && (nullBuilder_ != null)) {
          return nullBuilder_.getMessageOrBuilder();
        } else {
          if (literalTypeCase_ == 1) {
            return (org.apache.kyuubi.engine.spark.connect.proto.DataType) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.DataType null = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder> 
          getNullFieldBuilder() {
        if (nullBuilder_ == null) {
          if (!(literalTypeCase_ == 1)) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.DataType.getDefaultInstance();
          }
          nullBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.DataType, org.apache.kyuubi.engine.spark.connect.proto.DataType.Builder, org.apache.kyuubi.engine.spark.connect.proto.DataTypeOrBuilder>(
                  (org.apache.kyuubi.engine.spark.connect.proto.DataType) literalType_,
                  getParentForChildren(),
                  isClean());
          literalType_ = null;
        }
        literalTypeCase_ = 1;
        onChanged();;
        return nullBuilder_;
      }

      /**
       * <code>bytes binary = 2;</code>
       * @return Whether the binary field is set.
       */
      public boolean hasBinary() {
        return literalTypeCase_ == 2;
      }
      /**
       * <code>bytes binary = 2;</code>
       * @return The binary.
       */
      public com.google.protobuf.ByteString getBinary() {
        if (literalTypeCase_ == 2) {
          return (com.google.protobuf.ByteString) literalType_;
        }
        return com.google.protobuf.ByteString.EMPTY;
      }
      /**
       * <code>bytes binary = 2;</code>
       * @param value The binary to set.
       * @return This builder for chaining.
       */
      public Builder setBinary(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  literalTypeCase_ = 2;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes binary = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearBinary() {
        if (literalTypeCase_ == 2) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>bool boolean = 3;</code>
       * @return Whether the boolean field is set.
       */
      public boolean hasBoolean() {
        return literalTypeCase_ == 3;
      }
      /**
       * <code>bool boolean = 3;</code>
       * @return The boolean.
       */
      public boolean getBoolean() {
        if (literalTypeCase_ == 3) {
          return (java.lang.Boolean) literalType_;
        }
        return false;
      }
      /**
       * <code>bool boolean = 3;</code>
       * @param value The boolean to set.
       * @return This builder for chaining.
       */
      public Builder setBoolean(boolean value) {
        literalTypeCase_ = 3;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool boolean = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearBoolean() {
        if (literalTypeCase_ == 3) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int32 byte = 4;</code>
       * @return Whether the byte field is set.
       */
      public boolean hasByte() {
        return literalTypeCase_ == 4;
      }
      /**
       * <code>int32 byte = 4;</code>
       * @return The byte.
       */
      public int getByte() {
        if (literalTypeCase_ == 4) {
          return (java.lang.Integer) literalType_;
        }
        return 0;
      }
      /**
       * <code>int32 byte = 4;</code>
       * @param value The byte to set.
       * @return This builder for chaining.
       */
      public Builder setByte(int value) {
        literalTypeCase_ = 4;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 byte = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearByte() {
        if (literalTypeCase_ == 4) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int32 short = 5;</code>
       * @return Whether the short field is set.
       */
      public boolean hasShort() {
        return literalTypeCase_ == 5;
      }
      /**
       * <code>int32 short = 5;</code>
       * @return The short.
       */
      public int getShort() {
        if (literalTypeCase_ == 5) {
          return (java.lang.Integer) literalType_;
        }
        return 0;
      }
      /**
       * <code>int32 short = 5;</code>
       * @param value The short to set.
       * @return This builder for chaining.
       */
      public Builder setShort(int value) {
        literalTypeCase_ = 5;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 short = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearShort() {
        if (literalTypeCase_ == 5) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int32 integer = 6;</code>
       * @return Whether the integer field is set.
       */
      public boolean hasInteger() {
        return literalTypeCase_ == 6;
      }
      /**
       * <code>int32 integer = 6;</code>
       * @return The integer.
       */
      public int getInteger() {
        if (literalTypeCase_ == 6) {
          return (java.lang.Integer) literalType_;
        }
        return 0;
      }
      /**
       * <code>int32 integer = 6;</code>
       * @param value The integer to set.
       * @return This builder for chaining.
       */
      public Builder setInteger(int value) {
        literalTypeCase_ = 6;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 integer = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearInteger() {
        if (literalTypeCase_ == 6) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int64 long = 7;</code>
       * @return Whether the long field is set.
       */
      public boolean hasLong() {
        return literalTypeCase_ == 7;
      }
      /**
       * <code>int64 long = 7;</code>
       * @return The long.
       */
      public long getLong() {
        if (literalTypeCase_ == 7) {
          return (java.lang.Long) literalType_;
        }
        return 0L;
      }
      /**
       * <code>int64 long = 7;</code>
       * @param value The long to set.
       * @return This builder for chaining.
       */
      public Builder setLong(long value) {
        literalTypeCase_ = 7;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 long = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearLong() {
        if (literalTypeCase_ == 7) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>float float = 10;</code>
       * @return Whether the float field is set.
       */
      public boolean hasFloat() {
        return literalTypeCase_ == 10;
      }
      /**
       * <code>float float = 10;</code>
       * @return The float.
       */
      public float getFloat() {
        if (literalTypeCase_ == 10) {
          return (java.lang.Float) literalType_;
        }
        return 0F;
      }
      /**
       * <code>float float = 10;</code>
       * @param value The float to set.
       * @return This builder for chaining.
       */
      public Builder setFloat(float value) {
        literalTypeCase_ = 10;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float float = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearFloat() {
        if (literalTypeCase_ == 10) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>double double = 11;</code>
       * @return Whether the double field is set.
       */
      public boolean hasDouble() {
        return literalTypeCase_ == 11;
      }
      /**
       * <code>double double = 11;</code>
       * @return The double.
       */
      public double getDouble() {
        if (literalTypeCase_ == 11) {
          return (java.lang.Double) literalType_;
        }
        return 0D;
      }
      /**
       * <code>double double = 11;</code>
       * @param value The double to set.
       * @return This builder for chaining.
       */
      public Builder setDouble(double value) {
        literalTypeCase_ = 11;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double double = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearDouble() {
        if (literalTypeCase_ == 11) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.DecimalOrBuilder> decimalBuilder_;
      /**
       * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
       * @return Whether the decimal field is set.
       */
      @java.lang.Override
      public boolean hasDecimal() {
        return literalTypeCase_ == 12;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
       * @return The decimal.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal getDecimal() {
        if (decimalBuilder_ == null) {
          if (literalTypeCase_ == 12) {
            return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.getDefaultInstance();
        } else {
          if (literalTypeCase_ == 12) {
            return decimalBuilder_.getMessage();
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
       */
      public Builder setDecimal(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal value) {
        if (decimalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          literalType_ = value;
          onChanged();
        } else {
          decimalBuilder_.setMessage(value);
        }
        literalTypeCase_ = 12;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
       */
      public Builder setDecimal(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.Builder builderForValue) {
        if (decimalBuilder_ == null) {
          literalType_ = builderForValue.build();
          onChanged();
        } else {
          decimalBuilder_.setMessage(builderForValue.build());
        }
        literalTypeCase_ = 12;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
       */
      public Builder mergeDecimal(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal value) {
        if (decimalBuilder_ == null) {
          if (literalTypeCase_ == 12 &&
              literalType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.getDefaultInstance()) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal) literalType_)
                .mergeFrom(value).buildPartial();
          } else {
            literalType_ = value;
          }
          onChanged();
        } else {
          if (literalTypeCase_ == 12) {
            decimalBuilder_.mergeFrom(value);
          } else {
            decimalBuilder_.setMessage(value);
          }
        }
        literalTypeCase_ = 12;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
       */
      public Builder clearDecimal() {
        if (decimalBuilder_ == null) {
          if (literalTypeCase_ == 12) {
            literalTypeCase_ = 0;
            literalType_ = null;
            onChanged();
          }
        } else {
          if (literalTypeCase_ == 12) {
            literalTypeCase_ = 0;
            literalType_ = null;
          }
          decimalBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.Builder getDecimalBuilder() {
        return getDecimalFieldBuilder().getBuilder();
      }
      /**
       * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.DecimalOrBuilder getDecimalOrBuilder() {
        if ((literalTypeCase_ == 12) && (decimalBuilder_ != null)) {
          return decimalBuilder_.getMessageOrBuilder();
        } else {
          if (literalTypeCase_ == 12) {
            return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.Expression.Literal.Decimal decimal = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.DecimalOrBuilder> 
          getDecimalFieldBuilder() {
        if (decimalBuilder_ == null) {
          if (!(literalTypeCase_ == 12)) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.getDefaultInstance();
          }
          decimalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.DecimalOrBuilder>(
                  (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Decimal) literalType_,
                  getParentForChildren(),
                  isClean());
          literalType_ = null;
        }
        literalTypeCase_ = 12;
        onChanged();;
        return decimalBuilder_;
      }

      /**
       * <code>string string = 13;</code>
       * @return Whether the string field is set.
       */
      @java.lang.Override
      public boolean hasString() {
        return literalTypeCase_ == 13;
      }
      /**
       * <code>string string = 13;</code>
       * @return The string.
       */
      @java.lang.Override
      public java.lang.String getString() {
        java.lang.Object ref = "";
        if (literalTypeCase_ == 13) {
          ref = literalType_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (literalTypeCase_ == 13) {
            literalType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string string = 13;</code>
       * @return The bytes for string.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getStringBytes() {
        java.lang.Object ref = "";
        if (literalTypeCase_ == 13) {
          ref = literalType_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (literalTypeCase_ == 13) {
            literalType_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string string = 13;</code>
       * @param value The string to set.
       * @return This builder for chaining.
       */
      public Builder setString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  literalTypeCase_ = 13;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string string = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearString() {
        if (literalTypeCase_ == 13) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>string string = 13;</code>
       * @param value The bytes for string to set.
       * @return This builder for chaining.
       */
      public Builder setStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        literalTypeCase_ = 13;
        literalType_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * Date in units of days since the UNIX epoch.
       * </pre>
       *
       * <code>int32 date = 16;</code>
       * @return Whether the date field is set.
       */
      public boolean hasDate() {
        return literalTypeCase_ == 16;
      }
      /**
       * <pre>
       * Date in units of days since the UNIX epoch.
       * </pre>
       *
       * <code>int32 date = 16;</code>
       * @return The date.
       */
      public int getDate() {
        if (literalTypeCase_ == 16) {
          return (java.lang.Integer) literalType_;
        }
        return 0;
      }
      /**
       * <pre>
       * Date in units of days since the UNIX epoch.
       * </pre>
       *
       * <code>int32 date = 16;</code>
       * @param value The date to set.
       * @return This builder for chaining.
       */
      public Builder setDate(int value) {
        literalTypeCase_ = 16;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Date in units of days since the UNIX epoch.
       * </pre>
       *
       * <code>int32 date = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearDate() {
        if (literalTypeCase_ == 16) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Timestamp in units of microseconds since the UNIX epoch.
       * </pre>
       *
       * <code>int64 timestamp = 17;</code>
       * @return Whether the timestamp field is set.
       */
      public boolean hasTimestamp() {
        return literalTypeCase_ == 17;
      }
      /**
       * <pre>
       * Timestamp in units of microseconds since the UNIX epoch.
       * </pre>
       *
       * <code>int64 timestamp = 17;</code>
       * @return The timestamp.
       */
      public long getTimestamp() {
        if (literalTypeCase_ == 17) {
          return (java.lang.Long) literalType_;
        }
        return 0L;
      }
      /**
       * <pre>
       * Timestamp in units of microseconds since the UNIX epoch.
       * </pre>
       *
       * <code>int64 timestamp = 17;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {
        literalTypeCase_ = 17;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Timestamp in units of microseconds since the UNIX epoch.
       * </pre>
       *
       * <code>int64 timestamp = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        if (literalTypeCase_ == 17) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Timestamp in units of microseconds since the UNIX epoch (without timezone information).
       * </pre>
       *
       * <code>int64 timestamp_ntz = 18;</code>
       * @return Whether the timestampNtz field is set.
       */
      public boolean hasTimestampNtz() {
        return literalTypeCase_ == 18;
      }
      /**
       * <pre>
       * Timestamp in units of microseconds since the UNIX epoch (without timezone information).
       * </pre>
       *
       * <code>int64 timestamp_ntz = 18;</code>
       * @return The timestampNtz.
       */
      public long getTimestampNtz() {
        if (literalTypeCase_ == 18) {
          return (java.lang.Long) literalType_;
        }
        return 0L;
      }
      /**
       * <pre>
       * Timestamp in units of microseconds since the UNIX epoch (without timezone information).
       * </pre>
       *
       * <code>int64 timestamp_ntz = 18;</code>
       * @param value The timestampNtz to set.
       * @return This builder for chaining.
       */
      public Builder setTimestampNtz(long value) {
        literalTypeCase_ = 18;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Timestamp in units of microseconds since the UNIX epoch (without timezone information).
       * </pre>
       *
       * <code>int64 timestamp_ntz = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestampNtz() {
        if (literalTypeCase_ == 18) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarIntervalOrBuilder> calendarIntervalBuilder_;
      /**
       * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
       * @return Whether the calendarInterval field is set.
       */
      @java.lang.Override
      public boolean hasCalendarInterval() {
        return literalTypeCase_ == 19;
      }
      /**
       * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
       * @return The calendarInterval.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval getCalendarInterval() {
        if (calendarIntervalBuilder_ == null) {
          if (literalTypeCase_ == 19) {
            return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.getDefaultInstance();
        } else {
          if (literalTypeCase_ == 19) {
            return calendarIntervalBuilder_.getMessage();
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
       */
      public Builder setCalendarInterval(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval value) {
        if (calendarIntervalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          literalType_ = value;
          onChanged();
        } else {
          calendarIntervalBuilder_.setMessage(value);
        }
        literalTypeCase_ = 19;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
       */
      public Builder setCalendarInterval(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.Builder builderForValue) {
        if (calendarIntervalBuilder_ == null) {
          literalType_ = builderForValue.build();
          onChanged();
        } else {
          calendarIntervalBuilder_.setMessage(builderForValue.build());
        }
        literalTypeCase_ = 19;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
       */
      public Builder mergeCalendarInterval(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval value) {
        if (calendarIntervalBuilder_ == null) {
          if (literalTypeCase_ == 19 &&
              literalType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.getDefaultInstance()) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval) literalType_)
                .mergeFrom(value).buildPartial();
          } else {
            literalType_ = value;
          }
          onChanged();
        } else {
          if (literalTypeCase_ == 19) {
            calendarIntervalBuilder_.mergeFrom(value);
          } else {
            calendarIntervalBuilder_.setMessage(value);
          }
        }
        literalTypeCase_ = 19;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
       */
      public Builder clearCalendarInterval() {
        if (calendarIntervalBuilder_ == null) {
          if (literalTypeCase_ == 19) {
            literalTypeCase_ = 0;
            literalType_ = null;
            onChanged();
          }
        } else {
          if (literalTypeCase_ == 19) {
            literalTypeCase_ = 0;
            literalType_ = null;
          }
          calendarIntervalBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.Builder getCalendarIntervalBuilder() {
        return getCalendarIntervalFieldBuilder().getBuilder();
      }
      /**
       * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarIntervalOrBuilder getCalendarIntervalOrBuilder() {
        if ((literalTypeCase_ == 19) && (calendarIntervalBuilder_ != null)) {
          return calendarIntervalBuilder_.getMessageOrBuilder();
        } else {
          if (literalTypeCase_ == 19) {
            return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.Expression.Literal.CalendarInterval calendar_interval = 19;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarIntervalOrBuilder> 
          getCalendarIntervalFieldBuilder() {
        if (calendarIntervalBuilder_ == null) {
          if (!(literalTypeCase_ == 19)) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.getDefaultInstance();
          }
          calendarIntervalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarIntervalOrBuilder>(
                  (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.CalendarInterval) literalType_,
                  getParentForChildren(),
                  isClean());
          literalType_ = null;
        }
        literalTypeCase_ = 19;
        onChanged();;
        return calendarIntervalBuilder_;
      }

      /**
       * <code>int32 year_month_interval = 20;</code>
       * @return Whether the yearMonthInterval field is set.
       */
      public boolean hasYearMonthInterval() {
        return literalTypeCase_ == 20;
      }
      /**
       * <code>int32 year_month_interval = 20;</code>
       * @return The yearMonthInterval.
       */
      public int getYearMonthInterval() {
        if (literalTypeCase_ == 20) {
          return (java.lang.Integer) literalType_;
        }
        return 0;
      }
      /**
       * <code>int32 year_month_interval = 20;</code>
       * @param value The yearMonthInterval to set.
       * @return This builder for chaining.
       */
      public Builder setYearMonthInterval(int value) {
        literalTypeCase_ = 20;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 year_month_interval = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearYearMonthInterval() {
        if (literalTypeCase_ == 20) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int64 day_time_interval = 21;</code>
       * @return Whether the dayTimeInterval field is set.
       */
      public boolean hasDayTimeInterval() {
        return literalTypeCase_ == 21;
      }
      /**
       * <code>int64 day_time_interval = 21;</code>
       * @return The dayTimeInterval.
       */
      public long getDayTimeInterval() {
        if (literalTypeCase_ == 21) {
          return (java.lang.Long) literalType_;
        }
        return 0L;
      }
      /**
       * <code>int64 day_time_interval = 21;</code>
       * @param value The dayTimeInterval to set.
       * @return This builder for chaining.
       */
      public Builder setDayTimeInterval(long value) {
        literalTypeCase_ = 21;
        literalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 day_time_interval = 21;</code>
       * @return This builder for chaining.
       */
      public Builder clearDayTimeInterval() {
        if (literalTypeCase_ == 21) {
          literalTypeCase_ = 0;
          literalType_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.ArrayOrBuilder> arrayBuilder_;
      /**
       * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
       * @return Whether the array field is set.
       */
      @java.lang.Override
      public boolean hasArray() {
        return literalTypeCase_ == 22;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
       * @return The array.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array getArray() {
        if (arrayBuilder_ == null) {
          if (literalTypeCase_ == 22) {
            return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.getDefaultInstance();
        } else {
          if (literalTypeCase_ == 22) {
            return arrayBuilder_.getMessage();
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
       */
      public Builder setArray(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array value) {
        if (arrayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          literalType_ = value;
          onChanged();
        } else {
          arrayBuilder_.setMessage(value);
        }
        literalTypeCase_ = 22;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
       */
      public Builder setArray(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.Builder builderForValue) {
        if (arrayBuilder_ == null) {
          literalType_ = builderForValue.build();
          onChanged();
        } else {
          arrayBuilder_.setMessage(builderForValue.build());
        }
        literalTypeCase_ = 22;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
       */
      public Builder mergeArray(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array value) {
        if (arrayBuilder_ == null) {
          if (literalTypeCase_ == 22 &&
              literalType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.getDefaultInstance()) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array) literalType_)
                .mergeFrom(value).buildPartial();
          } else {
            literalType_ = value;
          }
          onChanged();
        } else {
          if (literalTypeCase_ == 22) {
            arrayBuilder_.mergeFrom(value);
          } else {
            arrayBuilder_.setMessage(value);
          }
        }
        literalTypeCase_ = 22;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
       */
      public Builder clearArray() {
        if (arrayBuilder_ == null) {
          if (literalTypeCase_ == 22) {
            literalTypeCase_ = 0;
            literalType_ = null;
            onChanged();
          }
        } else {
          if (literalTypeCase_ == 22) {
            literalTypeCase_ = 0;
            literalType_ = null;
          }
          arrayBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.Builder getArrayBuilder() {
        return getArrayFieldBuilder().getBuilder();
      }
      /**
       * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.ArrayOrBuilder getArrayOrBuilder() {
        if ((literalTypeCase_ == 22) && (arrayBuilder_ != null)) {
          return arrayBuilder_.getMessageOrBuilder();
        } else {
          if (literalTypeCase_ == 22) {
            return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.Expression.Literal.Array array = 22;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.ArrayOrBuilder> 
          getArrayFieldBuilder() {
        if (arrayBuilder_ == null) {
          if (!(literalTypeCase_ == 22)) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.getDefaultInstance();
          }
          arrayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.ArrayOrBuilder>(
                  (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Array) literalType_,
                  getParentForChildren(),
                  isClean());
          literalType_ = null;
        }
        literalTypeCase_ = 22;
        onChanged();;
        return arrayBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.MapOrBuilder> mapBuilder_;
      /**
       * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
       * @return Whether the map field is set.
       */
      @java.lang.Override
      public boolean hasMap() {
        return literalTypeCase_ == 23;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
       * @return The map.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map getMap() {
        if (mapBuilder_ == null) {
          if (literalTypeCase_ == 23) {
            return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.getDefaultInstance();
        } else {
          if (literalTypeCase_ == 23) {
            return mapBuilder_.getMessage();
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
       */
      public Builder setMap(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map value) {
        if (mapBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          literalType_ = value;
          onChanged();
        } else {
          mapBuilder_.setMessage(value);
        }
        literalTypeCase_ = 23;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
       */
      public Builder setMap(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.Builder builderForValue) {
        if (mapBuilder_ == null) {
          literalType_ = builderForValue.build();
          onChanged();
        } else {
          mapBuilder_.setMessage(builderForValue.build());
        }
        literalTypeCase_ = 23;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
       */
      public Builder mergeMap(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map value) {
        if (mapBuilder_ == null) {
          if (literalTypeCase_ == 23 &&
              literalType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.getDefaultInstance()) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map) literalType_)
                .mergeFrom(value).buildPartial();
          } else {
            literalType_ = value;
          }
          onChanged();
        } else {
          if (literalTypeCase_ == 23) {
            mapBuilder_.mergeFrom(value);
          } else {
            mapBuilder_.setMessage(value);
          }
        }
        literalTypeCase_ = 23;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
       */
      public Builder clearMap() {
        if (mapBuilder_ == null) {
          if (literalTypeCase_ == 23) {
            literalTypeCase_ = 0;
            literalType_ = null;
            onChanged();
          }
        } else {
          if (literalTypeCase_ == 23) {
            literalTypeCase_ = 0;
            literalType_ = null;
          }
          mapBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.Builder getMapBuilder() {
        return getMapFieldBuilder().getBuilder();
      }
      /**
       * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.MapOrBuilder getMapOrBuilder() {
        if ((literalTypeCase_ == 23) && (mapBuilder_ != null)) {
          return mapBuilder_.getMessageOrBuilder();
        } else {
          if (literalTypeCase_ == 23) {
            return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.Expression.Literal.Map map = 23;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.MapOrBuilder> 
          getMapFieldBuilder() {
        if (mapBuilder_ == null) {
          if (!(literalTypeCase_ == 23)) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.getDefaultInstance();
          }
          mapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.MapOrBuilder>(
                  (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Map) literalType_,
                  getParentForChildren(),
                  isClean());
          literalType_ = null;
        }
        literalTypeCase_ = 23;
        onChanged();;
        return mapBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.StructOrBuilder> structBuilder_;
      /**
       * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
       * @return Whether the struct field is set.
       */
      @java.lang.Override
      public boolean hasStruct() {
        return literalTypeCase_ == 24;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
       * @return The struct.
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct getStruct() {
        if (structBuilder_ == null) {
          if (literalTypeCase_ == 24) {
            return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.getDefaultInstance();
        } else {
          if (literalTypeCase_ == 24) {
            return structBuilder_.getMessage();
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
       */
      public Builder setStruct(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct value) {
        if (structBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          literalType_ = value;
          onChanged();
        } else {
          structBuilder_.setMessage(value);
        }
        literalTypeCase_ = 24;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
       */
      public Builder setStruct(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.Builder builderForValue) {
        if (structBuilder_ == null) {
          literalType_ = builderForValue.build();
          onChanged();
        } else {
          structBuilder_.setMessage(builderForValue.build());
        }
        literalTypeCase_ = 24;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
       */
      public Builder mergeStruct(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct value) {
        if (structBuilder_ == null) {
          if (literalTypeCase_ == 24 &&
              literalType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.getDefaultInstance()) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct) literalType_)
                .mergeFrom(value).buildPartial();
          } else {
            literalType_ = value;
          }
          onChanged();
        } else {
          if (literalTypeCase_ == 24) {
            structBuilder_.mergeFrom(value);
          } else {
            structBuilder_.setMessage(value);
          }
        }
        literalTypeCase_ = 24;
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
       */
      public Builder clearStruct() {
        if (structBuilder_ == null) {
          if (literalTypeCase_ == 24) {
            literalTypeCase_ = 0;
            literalType_ = null;
            onChanged();
          }
        } else {
          if (literalTypeCase_ == 24) {
            literalTypeCase_ = 0;
            literalType_ = null;
          }
          structBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.Builder getStructBuilder() {
        return getStructFieldBuilder().getBuilder();
      }
      /**
       * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
       */
      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.StructOrBuilder getStructOrBuilder() {
        if ((literalTypeCase_ == 24) && (structBuilder_ != null)) {
          return structBuilder_.getMessageOrBuilder();
        } else {
          if (literalTypeCase_ == 24) {
            return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct) literalType_;
          }
          return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.connect.Expression.Literal.Struct struct = 24;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.StructOrBuilder> 
          getStructFieldBuilder() {
        if (structBuilder_ == null) {
          if (!(literalTypeCase_ == 24)) {
            literalType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.getDefaultInstance();
          }
          structBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.StructOrBuilder>(
                  (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Struct) literalType_,
                  getParentForChildren(),
                  isClean());
          literalType_ = null;
        }
        literalTypeCase_ = 24;
        onChanged();;
        return structBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Literal)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.Literal)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Literal>
        PARSER = new com.google.protobuf.AbstractParser<Literal>() {
      @java.lang.Override
      public Literal parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Literal> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Literal> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnresolvedAttributeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.UnresolvedAttribute)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) An identifier that will be parsed by Catalyst parser. This should follow the
     * Spark SQL identifier syntax.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     * @return The unparsedIdentifier.
     */
    java.lang.String getUnparsedIdentifier();
    /**
     * <pre>
     * (Required) An identifier that will be parsed by Catalyst parser. This should follow the
     * Spark SQL identifier syntax.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     * @return The bytes for unparsedIdentifier.
     */
    com.google.protobuf.ByteString
        getUnparsedIdentifierBytes();

    /**
     * <pre>
     * (Optional) The id of corresponding connect plan.
     * </pre>
     *
     * <code>optional int64 plan_id = 2;</code>
     * @return Whether the planId field is set.
     */
    boolean hasPlanId();
    /**
     * <pre>
     * (Optional) The id of corresponding connect plan.
     * </pre>
     *
     * <code>optional int64 plan_id = 2;</code>
     * @return The planId.
     */
    long getPlanId();

    /**
     * <pre>
     * (Optional) The requested column is a metadata column.
     * </pre>
     *
     * <code>optional bool is_metadata_column = 3;</code>
     * @return Whether the isMetadataColumn field is set.
     */
    boolean hasIsMetadataColumn();
    /**
     * <pre>
     * (Optional) The requested column is a metadata column.
     * </pre>
     *
     * <code>optional bool is_metadata_column = 3;</code>
     * @return The isMetadataColumn.
     */
    boolean getIsMetadataColumn();
  }
  /**
   * <pre>
   * An unresolved attribute that is not explicitly bound to a specific column, but the column
   * is resolved during analysis by name.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Expression.UnresolvedAttribute}
   */
  public static final class UnresolvedAttribute extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.UnresolvedAttribute)
      UnresolvedAttributeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UnresolvedAttribute.newBuilder() to construct.
    private UnresolvedAttribute(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UnresolvedAttribute() {
      unparsedIdentifier_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UnresolvedAttribute();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedAttribute_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedAttribute_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.Builder.class);
    }

    private int bitField0_;
    public static final int UNPARSED_IDENTIFIER_FIELD_NUMBER = 1;
    private volatile java.lang.Object unparsedIdentifier_;
    /**
     * <pre>
     * (Required) An identifier that will be parsed by Catalyst parser. This should follow the
     * Spark SQL identifier syntax.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     * @return The unparsedIdentifier.
     */
    @java.lang.Override
    public java.lang.String getUnparsedIdentifier() {
      java.lang.Object ref = unparsedIdentifier_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        unparsedIdentifier_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) An identifier that will be parsed by Catalyst parser. This should follow the
     * Spark SQL identifier syntax.
     * </pre>
     *
     * <code>string unparsed_identifier = 1;</code>
     * @return The bytes for unparsedIdentifier.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUnparsedIdentifierBytes() {
      java.lang.Object ref = unparsedIdentifier_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        unparsedIdentifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PLAN_ID_FIELD_NUMBER = 2;
    private long planId_;
    /**
     * <pre>
     * (Optional) The id of corresponding connect plan.
     * </pre>
     *
     * <code>optional int64 plan_id = 2;</code>
     * @return Whether the planId field is set.
     */
    @java.lang.Override
    public boolean hasPlanId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Optional) The id of corresponding connect plan.
     * </pre>
     *
     * <code>optional int64 plan_id = 2;</code>
     * @return The planId.
     */
    @java.lang.Override
    public long getPlanId() {
      return planId_;
    }

    public static final int IS_METADATA_COLUMN_FIELD_NUMBER = 3;
    private boolean isMetadataColumn_;
    /**
     * <pre>
     * (Optional) The requested column is a metadata column.
     * </pre>
     *
     * <code>optional bool is_metadata_column = 3;</code>
     * @return Whether the isMetadataColumn field is set.
     */
    @java.lang.Override
    public boolean hasIsMetadataColumn() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * (Optional) The requested column is a metadata column.
     * </pre>
     *
     * <code>optional bool is_metadata_column = 3;</code>
     * @return The isMetadataColumn.
     */
    @java.lang.Override
    public boolean getIsMetadataColumn() {
      return isMetadataColumn_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(unparsedIdentifier_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, unparsedIdentifier_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt64(2, planId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(3, isMetadataColumn_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(unparsedIdentifier_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, unparsedIdentifier_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, planId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isMetadataColumn_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute) obj;

      if (!getUnparsedIdentifier()
          .equals(other.getUnparsedIdentifier())) return false;
      if (hasPlanId() != other.hasPlanId()) return false;
      if (hasPlanId()) {
        if (getPlanId()
            != other.getPlanId()) return false;
      }
      if (hasIsMetadataColumn() != other.hasIsMetadataColumn()) return false;
      if (hasIsMetadataColumn()) {
        if (getIsMetadataColumn()
            != other.getIsMetadataColumn()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UNPARSED_IDENTIFIER_FIELD_NUMBER;
      hash = (53 * hash) + getUnparsedIdentifier().hashCode();
      if (hasPlanId()) {
        hash = (37 * hash) + PLAN_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPlanId());
      }
      if (hasIsMetadataColumn()) {
        hash = (37 * hash) + IS_METADATA_COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsMetadataColumn());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An unresolved attribute that is not explicitly bound to a specific column, but the column
     * is resolved during analysis by name.
     * </pre>
     *
     * Protobuf type {@code spark.connect.Expression.UnresolvedAttribute}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.UnresolvedAttribute)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttributeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedAttribute_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedAttribute_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        unparsedIdentifier_ = "";

        planId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        isMetadataColumn_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedAttribute_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.unparsedIdentifier_ = unparsedIdentifier_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.planId_ = planId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.isMetadataColumn_ = isMetadataColumn_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.getDefaultInstance()) return this;
        if (!other.getUnparsedIdentifier().isEmpty()) {
          unparsedIdentifier_ = other.unparsedIdentifier_;
          onChanged();
        }
        if (other.hasPlanId()) {
          setPlanId(other.getPlanId());
        }
        if (other.hasIsMetadataColumn()) {
          setIsMetadataColumn(other.getIsMetadataColumn());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                unparsedIdentifier_ = input.readStringRequireUtf8();

                break;
              } // case 10
              case 16: {
                planId_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 16
              case 24: {
                isMetadataColumn_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object unparsedIdentifier_ = "";
      /**
       * <pre>
       * (Required) An identifier that will be parsed by Catalyst parser. This should follow the
       * Spark SQL identifier syntax.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       * @return The unparsedIdentifier.
       */
      public java.lang.String getUnparsedIdentifier() {
        java.lang.Object ref = unparsedIdentifier_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          unparsedIdentifier_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) An identifier that will be parsed by Catalyst parser. This should follow the
       * Spark SQL identifier syntax.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       * @return The bytes for unparsedIdentifier.
       */
      public com.google.protobuf.ByteString
          getUnparsedIdentifierBytes() {
        java.lang.Object ref = unparsedIdentifier_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          unparsedIdentifier_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) An identifier that will be parsed by Catalyst parser. This should follow the
       * Spark SQL identifier syntax.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       * @param value The unparsedIdentifier to set.
       * @return This builder for chaining.
       */
      public Builder setUnparsedIdentifier(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        unparsedIdentifier_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) An identifier that will be parsed by Catalyst parser. This should follow the
       * Spark SQL identifier syntax.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnparsedIdentifier() {
        
        unparsedIdentifier_ = getDefaultInstance().getUnparsedIdentifier();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) An identifier that will be parsed by Catalyst parser. This should follow the
       * Spark SQL identifier syntax.
       * </pre>
       *
       * <code>string unparsed_identifier = 1;</code>
       * @param value The bytes for unparsedIdentifier to set.
       * @return This builder for chaining.
       */
      public Builder setUnparsedIdentifierBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        unparsedIdentifier_ = value;
        onChanged();
        return this;
      }

      private long planId_ ;
      /**
       * <pre>
       * (Optional) The id of corresponding connect plan.
       * </pre>
       *
       * <code>optional int64 plan_id = 2;</code>
       * @return Whether the planId field is set.
       */
      @java.lang.Override
      public boolean hasPlanId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * (Optional) The id of corresponding connect plan.
       * </pre>
       *
       * <code>optional int64 plan_id = 2;</code>
       * @return The planId.
       */
      @java.lang.Override
      public long getPlanId() {
        return planId_;
      }
      /**
       * <pre>
       * (Optional) The id of corresponding connect plan.
       * </pre>
       *
       * <code>optional int64 plan_id = 2;</code>
       * @param value The planId to set.
       * @return This builder for chaining.
       */
      public Builder setPlanId(long value) {
        bitField0_ |= 0x00000001;
        planId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) The id of corresponding connect plan.
       * </pre>
       *
       * <code>optional int64 plan_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPlanId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        planId_ = 0L;
        onChanged();
        return this;
      }

      private boolean isMetadataColumn_ ;
      /**
       * <pre>
       * (Optional) The requested column is a metadata column.
       * </pre>
       *
       * <code>optional bool is_metadata_column = 3;</code>
       * @return Whether the isMetadataColumn field is set.
       */
      @java.lang.Override
      public boolean hasIsMetadataColumn() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * (Optional) The requested column is a metadata column.
       * </pre>
       *
       * <code>optional bool is_metadata_column = 3;</code>
       * @return The isMetadataColumn.
       */
      @java.lang.Override
      public boolean getIsMetadataColumn() {
        return isMetadataColumn_;
      }
      /**
       * <pre>
       * (Optional) The requested column is a metadata column.
       * </pre>
       *
       * <code>optional bool is_metadata_column = 3;</code>
       * @param value The isMetadataColumn to set.
       * @return This builder for chaining.
       */
      public Builder setIsMetadataColumn(boolean value) {
        bitField0_ |= 0x00000002;
        isMetadataColumn_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) The requested column is a metadata column.
       * </pre>
       *
       * <code>optional bool is_metadata_column = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsMetadataColumn() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isMetadataColumn_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.UnresolvedAttribute)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.UnresolvedAttribute)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UnresolvedAttribute>
        PARSER = new com.google.protobuf.AbstractParser<UnresolvedAttribute>() {
      @java.lang.Override
      public UnresolvedAttribute parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UnresolvedAttribute> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UnresolvedAttribute> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnresolvedFunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.UnresolvedFunction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) name (or unparsed name for user defined function) for the unresolved function.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     * @return The functionName.
     */
    java.lang.String getFunctionName();
    /**
     * <pre>
     * (Required) name (or unparsed name for user defined function) for the unresolved function.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     * @return The bytes for functionName.
     */
    com.google.protobuf.ByteString
        getFunctionNameBytes();

    /**
     * <pre>
     * (Optional) Function arguments. Empty arguments are allowed.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression arguments = 2;</code>
     */
    java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> 
        getArgumentsList();
    /**
     * <pre>
     * (Optional) Function arguments. Empty arguments are allowed.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression arguments = 2;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getArguments(int index);
    /**
     * <pre>
     * (Optional) Function arguments. Empty arguments are allowed.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression arguments = 2;</code>
     */
    int getArgumentsCount();
    /**
     * <pre>
     * (Optional) Function arguments. Empty arguments are allowed.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression arguments = 2;</code>
     */
    java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
        getArgumentsOrBuilderList();
    /**
     * <pre>
     * (Optional) Function arguments. Empty arguments are allowed.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression arguments = 2;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getArgumentsOrBuilder(
        int index);

    /**
     * <pre>
     * (Required) Indicate if this function should be applied on distinct values.
     * </pre>
     *
     * <code>bool is_distinct = 3;</code>
     * @return The isDistinct.
     */
    boolean getIsDistinct();

    /**
     * <pre>
     * (Required) Indicate if this is a user defined function.
     * When it is not a user defined function, Connect will use the function name directly.
     * When it is a user defined function, Connect will parse the function name first.
     * </pre>
     *
     * <code>bool is_user_defined_function = 4;</code>
     * @return The isUserDefinedFunction.
     */
    boolean getIsUserDefinedFunction();
  }
  /**
   * <pre>
   * An unresolved function is not explicitly bound to one explicit function, but the function
   * is resolved during analysis following Sparks name resolution rules.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Expression.UnresolvedFunction}
   */
  public static final class UnresolvedFunction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.UnresolvedFunction)
      UnresolvedFunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UnresolvedFunction.newBuilder() to construct.
    private UnresolvedFunction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UnresolvedFunction() {
      functionName_ = "";
      arguments_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UnresolvedFunction();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedFunction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.Builder.class);
    }

    public static final int FUNCTION_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object functionName_;
    /**
     * <pre>
     * (Required) name (or unparsed name for user defined function) for the unresolved function.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     * @return The functionName.
     */
    @java.lang.Override
    public java.lang.String getFunctionName() {
      java.lang.Object ref = functionName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        functionName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) name (or unparsed name for user defined function) for the unresolved function.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     * @return The bytes for functionName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFunctionNameBytes() {
      java.lang.Object ref = functionName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        functionName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARGUMENTS_FIELD_NUMBER = 2;
    private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> arguments_;
    /**
     * <pre>
     * (Optional) Function arguments. Empty arguments are allowed.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression arguments = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> getArgumentsList() {
      return arguments_;
    }
    /**
     * <pre>
     * (Optional) Function arguments. Empty arguments are allowed.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression arguments = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
        getArgumentsOrBuilderList() {
      return arguments_;
    }
    /**
     * <pre>
     * (Optional) Function arguments. Empty arguments are allowed.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression arguments = 2;</code>
     */
    @java.lang.Override
    public int getArgumentsCount() {
      return arguments_.size();
    }
    /**
     * <pre>
     * (Optional) Function arguments. Empty arguments are allowed.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression arguments = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getArguments(int index) {
      return arguments_.get(index);
    }
    /**
     * <pre>
     * (Optional) Function arguments. Empty arguments are allowed.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression arguments = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getArgumentsOrBuilder(
        int index) {
      return arguments_.get(index);
    }

    public static final int IS_DISTINCT_FIELD_NUMBER = 3;
    private boolean isDistinct_;
    /**
     * <pre>
     * (Required) Indicate if this function should be applied on distinct values.
     * </pre>
     *
     * <code>bool is_distinct = 3;</code>
     * @return The isDistinct.
     */
    @java.lang.Override
    public boolean getIsDistinct() {
      return isDistinct_;
    }

    public static final int IS_USER_DEFINED_FUNCTION_FIELD_NUMBER = 4;
    private boolean isUserDefinedFunction_;
    /**
     * <pre>
     * (Required) Indicate if this is a user defined function.
     * When it is not a user defined function, Connect will use the function name directly.
     * When it is a user defined function, Connect will parse the function name first.
     * </pre>
     *
     * <code>bool is_user_defined_function = 4;</code>
     * @return The isUserDefinedFunction.
     */
    @java.lang.Override
    public boolean getIsUserDefinedFunction() {
      return isUserDefinedFunction_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(functionName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, functionName_);
      }
      for (int i = 0; i < arguments_.size(); i++) {
        output.writeMessage(2, arguments_.get(i));
      }
      if (isDistinct_ != false) {
        output.writeBool(3, isDistinct_);
      }
      if (isUserDefinedFunction_ != false) {
        output.writeBool(4, isUserDefinedFunction_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(functionName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, functionName_);
      }
      for (int i = 0; i < arguments_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, arguments_.get(i));
      }
      if (isDistinct_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isDistinct_);
      }
      if (isUserDefinedFunction_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, isUserDefinedFunction_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction) obj;

      if (!getFunctionName()
          .equals(other.getFunctionName())) return false;
      if (!getArgumentsList()
          .equals(other.getArgumentsList())) return false;
      if (getIsDistinct()
          != other.getIsDistinct()) return false;
      if (getIsUserDefinedFunction()
          != other.getIsUserDefinedFunction()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FUNCTION_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getFunctionName().hashCode();
      if (getArgumentsCount() > 0) {
        hash = (37 * hash) + ARGUMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getArgumentsList().hashCode();
      }
      hash = (37 * hash) + IS_DISTINCT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsDistinct());
      hash = (37 * hash) + IS_USER_DEFINED_FUNCTION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsUserDefinedFunction());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An unresolved function is not explicitly bound to one explicit function, but the function
     * is resolved during analysis following Sparks name resolution rules.
     * </pre>
     *
     * Protobuf type {@code spark.connect.Expression.UnresolvedFunction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.UnresolvedFunction)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunctionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedFunction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedFunction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        functionName_ = "";

        if (argumentsBuilder_ == null) {
          arguments_ = java.util.Collections.emptyList();
        } else {
          arguments_ = null;
          argumentsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        isDistinct_ = false;

        isUserDefinedFunction_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedFunction_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction(this);
        int from_bitField0_ = bitField0_;
        result.functionName_ = functionName_;
        if (argumentsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            arguments_ = java.util.Collections.unmodifiableList(arguments_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.arguments_ = arguments_;
        } else {
          result.arguments_ = argumentsBuilder_.build();
        }
        result.isDistinct_ = isDistinct_;
        result.isUserDefinedFunction_ = isUserDefinedFunction_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.getDefaultInstance()) return this;
        if (!other.getFunctionName().isEmpty()) {
          functionName_ = other.functionName_;
          onChanged();
        }
        if (argumentsBuilder_ == null) {
          if (!other.arguments_.isEmpty()) {
            if (arguments_.isEmpty()) {
              arguments_ = other.arguments_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgumentsIsMutable();
              arguments_.addAll(other.arguments_);
            }
            onChanged();
          }
        } else {
          if (!other.arguments_.isEmpty()) {
            if (argumentsBuilder_.isEmpty()) {
              argumentsBuilder_.dispose();
              argumentsBuilder_ = null;
              arguments_ = other.arguments_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argumentsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgumentsFieldBuilder() : null;
            } else {
              argumentsBuilder_.addAllMessages(other.arguments_);
            }
          }
        }
        if (other.getIsDistinct() != false) {
          setIsDistinct(other.getIsDistinct());
        }
        if (other.getIsUserDefinedFunction() != false) {
          setIsUserDefinedFunction(other.getIsUserDefinedFunction());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                functionName_ = input.readStringRequireUtf8();

                break;
              } // case 10
              case 18: {
                org.apache.kyuubi.engine.spark.connect.proto.Expression m =
                    input.readMessage(
                        org.apache.kyuubi.engine.spark.connect.proto.Expression.parser(),
                        extensionRegistry);
                if (argumentsBuilder_ == null) {
                  ensureArgumentsIsMutable();
                  arguments_.add(m);
                } else {
                  argumentsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                isDistinct_ = input.readBool();

                break;
              } // case 24
              case 32: {
                isUserDefinedFunction_ = input.readBool();

                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object functionName_ = "";
      /**
       * <pre>
       * (Required) name (or unparsed name for user defined function) for the unresolved function.
       * </pre>
       *
       * <code>string function_name = 1;</code>
       * @return The functionName.
       */
      public java.lang.String getFunctionName() {
        java.lang.Object ref = functionName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          functionName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) name (or unparsed name for user defined function) for the unresolved function.
       * </pre>
       *
       * <code>string function_name = 1;</code>
       * @return The bytes for functionName.
       */
      public com.google.protobuf.ByteString
          getFunctionNameBytes() {
        java.lang.Object ref = functionName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          functionName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) name (or unparsed name for user defined function) for the unresolved function.
       * </pre>
       *
       * <code>string function_name = 1;</code>
       * @param value The functionName to set.
       * @return This builder for chaining.
       */
      public Builder setFunctionName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        functionName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) name (or unparsed name for user defined function) for the unresolved function.
       * </pre>
       *
       * <code>string function_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFunctionName() {
        
        functionName_ = getDefaultInstance().getFunctionName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) name (or unparsed name for user defined function) for the unresolved function.
       * </pre>
       *
       * <code>string function_name = 1;</code>
       * @param value The bytes for functionName to set.
       * @return This builder for chaining.
       */
      public Builder setFunctionNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        functionName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> arguments_ =
        java.util.Collections.emptyList();
      private void ensureArgumentsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          arguments_ = new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.proto.Expression>(arguments_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> argumentsBuilder_;

      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression> getArgumentsList() {
        if (argumentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(arguments_);
        } else {
          return argumentsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public int getArgumentsCount() {
        if (argumentsBuilder_ == null) {
          return arguments_.size();
        } else {
          return argumentsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getArguments(int index) {
        if (argumentsBuilder_ == null) {
          return arguments_.get(index);
        } else {
          return argumentsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public Builder setArguments(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.set(index, value);
          onChanged();
        } else {
          argumentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public Builder setArguments(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public Builder addArguments(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.add(value);
          onChanged();
        } else {
          argumentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public Builder addArguments(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.add(index, value);
          onChanged();
        } else {
          argumentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public Builder addArguments(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.add(builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public Builder addArguments(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public Builder addAllArguments(
          java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression> values) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, arguments_);
          onChanged();
        } else {
          argumentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public Builder clearArguments() {
        if (argumentsBuilder_ == null) {
          arguments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argumentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public Builder removeArguments(int index) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.remove(index);
          onChanged();
        } else {
          argumentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getArgumentsBuilder(
          int index) {
        return getArgumentsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getArgumentsOrBuilder(
          int index) {
        if (argumentsBuilder_ == null) {
          return arguments_.get(index);  } else {
          return argumentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
           getArgumentsOrBuilderList() {
        if (argumentsBuilder_ != null) {
          return argumentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(arguments_);
        }
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder addArgumentsBuilder() {
        return getArgumentsFieldBuilder().addBuilder(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder addArgumentsBuilder(
          int index) {
        return getArgumentsFieldBuilder().addBuilder(
            index, org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) Function arguments. Empty arguments are allowed.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression arguments = 2;</code>
       */
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder> 
           getArgumentsBuilderList() {
        return getArgumentsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getArgumentsFieldBuilder() {
        if (argumentsBuilder_ == null) {
          argumentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  arguments_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          arguments_ = null;
        }
        return argumentsBuilder_;
      }

      private boolean isDistinct_ ;
      /**
       * <pre>
       * (Required) Indicate if this function should be applied on distinct values.
       * </pre>
       *
       * <code>bool is_distinct = 3;</code>
       * @return The isDistinct.
       */
      @java.lang.Override
      public boolean getIsDistinct() {
        return isDistinct_;
      }
      /**
       * <pre>
       * (Required) Indicate if this function should be applied on distinct values.
       * </pre>
       *
       * <code>bool is_distinct = 3;</code>
       * @param value The isDistinct to set.
       * @return This builder for chaining.
       */
      public Builder setIsDistinct(boolean value) {
        
        isDistinct_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Indicate if this function should be applied on distinct values.
       * </pre>
       *
       * <code>bool is_distinct = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsDistinct() {
        
        isDistinct_ = false;
        onChanged();
        return this;
      }

      private boolean isUserDefinedFunction_ ;
      /**
       * <pre>
       * (Required) Indicate if this is a user defined function.
       * When it is not a user defined function, Connect will use the function name directly.
       * When it is a user defined function, Connect will parse the function name first.
       * </pre>
       *
       * <code>bool is_user_defined_function = 4;</code>
       * @return The isUserDefinedFunction.
       */
      @java.lang.Override
      public boolean getIsUserDefinedFunction() {
        return isUserDefinedFunction_;
      }
      /**
       * <pre>
       * (Required) Indicate if this is a user defined function.
       * When it is not a user defined function, Connect will use the function name directly.
       * When it is a user defined function, Connect will parse the function name first.
       * </pre>
       *
       * <code>bool is_user_defined_function = 4;</code>
       * @param value The isUserDefinedFunction to set.
       * @return This builder for chaining.
       */
      public Builder setIsUserDefinedFunction(boolean value) {
        
        isUserDefinedFunction_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Indicate if this is a user defined function.
       * When it is not a user defined function, Connect will use the function name directly.
       * When it is a user defined function, Connect will parse the function name first.
       * </pre>
       *
       * <code>bool is_user_defined_function = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsUserDefinedFunction() {
        
        isUserDefinedFunction_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.UnresolvedFunction)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.UnresolvedFunction)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UnresolvedFunction>
        PARSER = new com.google.protobuf.AbstractParser<UnresolvedFunction>() {
      @java.lang.Override
      public UnresolvedFunction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UnresolvedFunction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UnresolvedFunction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExpressionStringOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.ExpressionString)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) A SQL expression that will be parsed by Catalyst parser.
     * </pre>
     *
     * <code>string expression = 1;</code>
     * @return The expression.
     */
    java.lang.String getExpression();
    /**
     * <pre>
     * (Required) A SQL expression that will be parsed by Catalyst parser.
     * </pre>
     *
     * <code>string expression = 1;</code>
     * @return The bytes for expression.
     */
    com.google.protobuf.ByteString
        getExpressionBytes();
  }
  /**
   * <pre>
   * Expression as string.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Expression.ExpressionString}
   */
  public static final class ExpressionString extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.ExpressionString)
      ExpressionStringOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExpressionString.newBuilder() to construct.
    private ExpressionString(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExpressionString() {
      expression_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExpressionString();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_ExpressionString_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_ExpressionString_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.Builder.class);
    }

    public static final int EXPRESSION_FIELD_NUMBER = 1;
    private volatile java.lang.Object expression_;
    /**
     * <pre>
     * (Required) A SQL expression that will be parsed by Catalyst parser.
     * </pre>
     *
     * <code>string expression = 1;</code>
     * @return The expression.
     */
    @java.lang.Override
    public java.lang.String getExpression() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        expression_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A SQL expression that will be parsed by Catalyst parser.
     * </pre>
     *
     * <code>string expression = 1;</code>
     * @return The bytes for expression.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getExpressionBytes() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        expression_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(expression_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, expression_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(expression_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, expression_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString) obj;

      if (!getExpression()
          .equals(other.getExpression())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
      hash = (53 * hash) + getExpression().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Expression as string.
     * </pre>
     *
     * Protobuf type {@code spark.connect.Expression.ExpressionString}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.ExpressionString)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionStringOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_ExpressionString_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_ExpressionString_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        expression_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_ExpressionString_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString(this);
        result.expression_ = expression_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.getDefaultInstance()) return this;
        if (!other.getExpression().isEmpty()) {
          expression_ = other.expression_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                expression_ = input.readStringRequireUtf8();

                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private java.lang.Object expression_ = "";
      /**
       * <pre>
       * (Required) A SQL expression that will be parsed by Catalyst parser.
       * </pre>
       *
       * <code>string expression = 1;</code>
       * @return The expression.
       */
      public java.lang.String getExpression() {
        java.lang.Object ref = expression_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          expression_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A SQL expression that will be parsed by Catalyst parser.
       * </pre>
       *
       * <code>string expression = 1;</code>
       * @return The bytes for expression.
       */
      public com.google.protobuf.ByteString
          getExpressionBytes() {
        java.lang.Object ref = expression_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          expression_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A SQL expression that will be parsed by Catalyst parser.
       * </pre>
       *
       * <code>string expression = 1;</code>
       * @param value The expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpression(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A SQL expression that will be parsed by Catalyst parser.
       * </pre>
       *
       * <code>string expression = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpression() {
        
        expression_ = getDefaultInstance().getExpression();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A SQL expression that will be parsed by Catalyst parser.
       * </pre>
       *
       * <code>string expression = 1;</code>
       * @param value The bytes for expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpressionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        expression_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.ExpressionString)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.ExpressionString)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExpressionString>
        PARSER = new com.google.protobuf.AbstractParser<ExpressionString>() {
      @java.lang.Override
      public ExpressionString parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ExpressionString> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExpressionString> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnresolvedStarOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.UnresolvedStar)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Optional) The target of the expansion.
     * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
     * in the server side.
     * </pre>
     *
     * <code>optional string unparsed_target = 1;</code>
     * @return Whether the unparsedTarget field is set.
     */
    boolean hasUnparsedTarget();
    /**
     * <pre>
     * (Optional) The target of the expansion.
     * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
     * in the server side.
     * </pre>
     *
     * <code>optional string unparsed_target = 1;</code>
     * @return The unparsedTarget.
     */
    java.lang.String getUnparsedTarget();
    /**
     * <pre>
     * (Optional) The target of the expansion.
     * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
     * in the server side.
     * </pre>
     *
     * <code>optional string unparsed_target = 1;</code>
     * @return The bytes for unparsedTarget.
     */
    com.google.protobuf.ByteString
        getUnparsedTargetBytes();
  }
  /**
   * <pre>
   * UnresolvedStar is used to expand all the fields of a relation or struct.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Expression.UnresolvedStar}
   */
  public static final class UnresolvedStar extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.UnresolvedStar)
      UnresolvedStarOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UnresolvedStar.newBuilder() to construct.
    private UnresolvedStar(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UnresolvedStar() {
      unparsedTarget_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UnresolvedStar();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedStar_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedStar_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.Builder.class);
    }

    private int bitField0_;
    public static final int UNPARSED_TARGET_FIELD_NUMBER = 1;
    private volatile java.lang.Object unparsedTarget_;
    /**
     * <pre>
     * (Optional) The target of the expansion.
     * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
     * in the server side.
     * </pre>
     *
     * <code>optional string unparsed_target = 1;</code>
     * @return Whether the unparsedTarget field is set.
     */
    @java.lang.Override
    public boolean hasUnparsedTarget() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Optional) The target of the expansion.
     * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
     * in the server side.
     * </pre>
     *
     * <code>optional string unparsed_target = 1;</code>
     * @return The unparsedTarget.
     */
    @java.lang.Override
    public java.lang.String getUnparsedTarget() {
      java.lang.Object ref = unparsedTarget_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        unparsedTarget_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) The target of the expansion.
     * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
     * in the server side.
     * </pre>
     *
     * <code>optional string unparsed_target = 1;</code>
     * @return The bytes for unparsedTarget.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUnparsedTargetBytes() {
      java.lang.Object ref = unparsedTarget_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        unparsedTarget_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, unparsedTarget_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, unparsedTarget_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar) obj;

      if (hasUnparsedTarget() != other.hasUnparsedTarget()) return false;
      if (hasUnparsedTarget()) {
        if (!getUnparsedTarget()
            .equals(other.getUnparsedTarget())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasUnparsedTarget()) {
        hash = (37 * hash) + UNPARSED_TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getUnparsedTarget().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * UnresolvedStar is used to expand all the fields of a relation or struct.
     * </pre>
     *
     * Protobuf type {@code spark.connect.Expression.UnresolvedStar}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.UnresolvedStar)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStarOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedStar_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedStar_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        unparsedTarget_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedStar_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.unparsedTarget_ = unparsedTarget_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.getDefaultInstance()) return this;
        if (other.hasUnparsedTarget()) {
          bitField0_ |= 0x00000001;
          unparsedTarget_ = other.unparsedTarget_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                unparsedTarget_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object unparsedTarget_ = "";
      /**
       * <pre>
       * (Optional) The target of the expansion.
       * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
       * in the server side.
       * </pre>
       *
       * <code>optional string unparsed_target = 1;</code>
       * @return Whether the unparsedTarget field is set.
       */
      public boolean hasUnparsedTarget() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * (Optional) The target of the expansion.
       * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
       * in the server side.
       * </pre>
       *
       * <code>optional string unparsed_target = 1;</code>
       * @return The unparsedTarget.
       */
      public java.lang.String getUnparsedTarget() {
        java.lang.Object ref = unparsedTarget_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          unparsedTarget_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) The target of the expansion.
       * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
       * in the server side.
       * </pre>
       *
       * <code>optional string unparsed_target = 1;</code>
       * @return The bytes for unparsedTarget.
       */
      public com.google.protobuf.ByteString
          getUnparsedTargetBytes() {
        java.lang.Object ref = unparsedTarget_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          unparsedTarget_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) The target of the expansion.
       * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
       * in the server side.
       * </pre>
       *
       * <code>optional string unparsed_target = 1;</code>
       * @param value The unparsedTarget to set.
       * @return This builder for chaining.
       */
      public Builder setUnparsedTarget(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        unparsedTarget_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) The target of the expansion.
       * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
       * in the server side.
       * </pre>
       *
       * <code>optional string unparsed_target = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnparsedTarget() {
        bitField0_ = (bitField0_ & ~0x00000001);
        unparsedTarget_ = getDefaultInstance().getUnparsedTarget();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) The target of the expansion.
       * If set, it should end with '.*' and will be parsed by 'parseAttributeName'
       * in the server side.
       * </pre>
       *
       * <code>optional string unparsed_target = 1;</code>
       * @param value The bytes for unparsedTarget to set.
       * @return This builder for chaining.
       */
      public Builder setUnparsedTargetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        bitField0_ |= 0x00000001;
        unparsedTarget_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.UnresolvedStar)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.UnresolvedStar)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UnresolvedStar>
        PARSER = new com.google.protobuf.AbstractParser<UnresolvedStar>() {
      @java.lang.Override
      public UnresolvedStar parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UnresolvedStar> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UnresolvedStar> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnresolvedRegexOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.UnresolvedRegex)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The column name used to extract column with regex.
     * </pre>
     *
     * <code>string col_name = 1;</code>
     * @return The colName.
     */
    java.lang.String getColName();
    /**
     * <pre>
     * (Required) The column name used to extract column with regex.
     * </pre>
     *
     * <code>string col_name = 1;</code>
     * @return The bytes for colName.
     */
    com.google.protobuf.ByteString
        getColNameBytes();

    /**
     * <pre>
     * (Optional) The id of corresponding connect plan.
     * </pre>
     *
     * <code>optional int64 plan_id = 2;</code>
     * @return Whether the planId field is set.
     */
    boolean hasPlanId();
    /**
     * <pre>
     * (Optional) The id of corresponding connect plan.
     * </pre>
     *
     * <code>optional int64 plan_id = 2;</code>
     * @return The planId.
     */
    long getPlanId();
  }
  /**
   * <pre>
   * Represents all of the input attributes to a given relational operator, for example in
   * "SELECT `(id)?+.+` FROM ...".
   * </pre>
   *
   * Protobuf type {@code spark.connect.Expression.UnresolvedRegex}
   */
  public static final class UnresolvedRegex extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.UnresolvedRegex)
      UnresolvedRegexOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UnresolvedRegex.newBuilder() to construct.
    private UnresolvedRegex(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UnresolvedRegex() {
      colName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UnresolvedRegex();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedRegex_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedRegex_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.Builder.class);
    }

    private int bitField0_;
    public static final int COL_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object colName_;
    /**
     * <pre>
     * (Required) The column name used to extract column with regex.
     * </pre>
     *
     * <code>string col_name = 1;</code>
     * @return The colName.
     */
    @java.lang.Override
    public java.lang.String getColName() {
      java.lang.Object ref = colName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        colName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) The column name used to extract column with regex.
     * </pre>
     *
     * <code>string col_name = 1;</code>
     * @return The bytes for colName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getColNameBytes() {
      java.lang.Object ref = colName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        colName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PLAN_ID_FIELD_NUMBER = 2;
    private long planId_;
    /**
     * <pre>
     * (Optional) The id of corresponding connect plan.
     * </pre>
     *
     * <code>optional int64 plan_id = 2;</code>
     * @return Whether the planId field is set.
     */
    @java.lang.Override
    public boolean hasPlanId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Optional) The id of corresponding connect plan.
     * </pre>
     *
     * <code>optional int64 plan_id = 2;</code>
     * @return The planId.
     */
    @java.lang.Override
    public long getPlanId() {
      return planId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(colName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, colName_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt64(2, planId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(colName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, colName_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, planId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex) obj;

      if (!getColName()
          .equals(other.getColName())) return false;
      if (hasPlanId() != other.hasPlanId()) return false;
      if (hasPlanId()) {
        if (getPlanId()
            != other.getPlanId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COL_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getColName().hashCode();
      if (hasPlanId()) {
        hash = (37 * hash) + PLAN_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPlanId());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Represents all of the input attributes to a given relational operator, for example in
     * "SELECT `(id)?+.+` FROM ...".
     * </pre>
     *
     * Protobuf type {@code spark.connect.Expression.UnresolvedRegex}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.UnresolvedRegex)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegexOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedRegex_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedRegex_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        colName_ = "";

        planId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedRegex_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.colName_ = colName_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.planId_ = planId_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.getDefaultInstance()) return this;
        if (!other.getColName().isEmpty()) {
          colName_ = other.colName_;
          onChanged();
        }
        if (other.hasPlanId()) {
          setPlanId(other.getPlanId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                colName_ = input.readStringRequireUtf8();

                break;
              } // case 10
              case 16: {
                planId_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object colName_ = "";
      /**
       * <pre>
       * (Required) The column name used to extract column with regex.
       * </pre>
       *
       * <code>string col_name = 1;</code>
       * @return The colName.
       */
      public java.lang.String getColName() {
        java.lang.Object ref = colName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          colName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) The column name used to extract column with regex.
       * </pre>
       *
       * <code>string col_name = 1;</code>
       * @return The bytes for colName.
       */
      public com.google.protobuf.ByteString
          getColNameBytes() {
        java.lang.Object ref = colName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          colName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) The column name used to extract column with regex.
       * </pre>
       *
       * <code>string col_name = 1;</code>
       * @param value The colName to set.
       * @return This builder for chaining.
       */
      public Builder setColName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        colName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The column name used to extract column with regex.
       * </pre>
       *
       * <code>string col_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearColName() {
        
        colName_ = getDefaultInstance().getColName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The column name used to extract column with regex.
       * </pre>
       *
       * <code>string col_name = 1;</code>
       * @param value The bytes for colName to set.
       * @return This builder for chaining.
       */
      public Builder setColNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        colName_ = value;
        onChanged();
        return this;
      }

      private long planId_ ;
      /**
       * <pre>
       * (Optional) The id of corresponding connect plan.
       * </pre>
       *
       * <code>optional int64 plan_id = 2;</code>
       * @return Whether the planId field is set.
       */
      @java.lang.Override
      public boolean hasPlanId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * (Optional) The id of corresponding connect plan.
       * </pre>
       *
       * <code>optional int64 plan_id = 2;</code>
       * @return The planId.
       */
      @java.lang.Override
      public long getPlanId() {
        return planId_;
      }
      /**
       * <pre>
       * (Optional) The id of corresponding connect plan.
       * </pre>
       *
       * <code>optional int64 plan_id = 2;</code>
       * @param value The planId to set.
       * @return This builder for chaining.
       */
      public Builder setPlanId(long value) {
        bitField0_ |= 0x00000001;
        planId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) The id of corresponding connect plan.
       * </pre>
       *
       * <code>optional int64 plan_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPlanId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        planId_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.UnresolvedRegex)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.UnresolvedRegex)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UnresolvedRegex>
        PARSER = new com.google.protobuf.AbstractParser<UnresolvedRegex>() {
      @java.lang.Override
      public UnresolvedRegex parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UnresolvedRegex> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UnresolvedRegex> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnresolvedExtractValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.UnresolvedExtractValue)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The expression to extract value from, can be
     * Map, Array, Struct or array of Structs.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     * @return Whether the child field is set.
     */
    boolean hasChild();
    /**
     * <pre>
     * (Required) The expression to extract value from, can be
     * Map, Array, Struct or array of Structs.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     * @return The child.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getChild();
    /**
     * <pre>
     * (Required) The expression to extract value from, can be
     * Map, Array, Struct or array of Structs.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getChildOrBuilder();

    /**
     * <pre>
     * (Required) The expression to describe the extraction, can be
     * key of Map, index of Array, field name of Struct.
     * </pre>
     *
     * <code>.spark.connect.Expression extraction = 2;</code>
     * @return Whether the extraction field is set.
     */
    boolean hasExtraction();
    /**
     * <pre>
     * (Required) The expression to describe the extraction, can be
     * key of Map, index of Array, field name of Struct.
     * </pre>
     *
     * <code>.spark.connect.Expression extraction = 2;</code>
     * @return The extraction.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getExtraction();
    /**
     * <pre>
     * (Required) The expression to describe the extraction, can be
     * key of Map, index of Array, field name of Struct.
     * </pre>
     *
     * <code>.spark.connect.Expression extraction = 2;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getExtractionOrBuilder();
  }
  /**
   * <pre>
   * Extracts a value or values from an Expression
   * </pre>
   *
   * Protobuf type {@code spark.connect.Expression.UnresolvedExtractValue}
   */
  public static final class UnresolvedExtractValue extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.UnresolvedExtractValue)
      UnresolvedExtractValueOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UnresolvedExtractValue.newBuilder() to construct.
    private UnresolvedExtractValue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UnresolvedExtractValue() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UnresolvedExtractValue();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedExtractValue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedExtractValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.Builder.class);
    }

    public static final int CHILD_FIELD_NUMBER = 1;
    private org.apache.kyuubi.engine.spark.connect.proto.Expression child_;
    /**
     * <pre>
     * (Required) The expression to extract value from, can be
     * Map, Array, Struct or array of Structs.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     * @return Whether the child field is set.
     */
    @java.lang.Override
    public boolean hasChild() {
      return child_ != null;
    }
    /**
     * <pre>
     * (Required) The expression to extract value from, can be
     * Map, Array, Struct or array of Structs.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     * @return The child.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getChild() {
      return child_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : child_;
    }
    /**
     * <pre>
     * (Required) The expression to extract value from, can be
     * Map, Array, Struct or array of Structs.
     * </pre>
     *
     * <code>.spark.connect.Expression child = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getChildOrBuilder() {
      return getChild();
    }

    public static final int EXTRACTION_FIELD_NUMBER = 2;
    private org.apache.kyuubi.engine.spark.connect.proto.Expression extraction_;
    /**
     * <pre>
     * (Required) The expression to describe the extraction, can be
     * key of Map, index of Array, field name of Struct.
     * </pre>
     *
     * <code>.spark.connect.Expression extraction = 2;</code>
     * @return Whether the extraction field is set.
     */
    @java.lang.Override
    public boolean hasExtraction() {
      return extraction_ != null;
    }
    /**
     * <pre>
     * (Required) The expression to describe the extraction, can be
     * key of Map, index of Array, field name of Struct.
     * </pre>
     *
     * <code>.spark.connect.Expression extraction = 2;</code>
     * @return The extraction.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getExtraction() {
      return extraction_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : extraction_;
    }
    /**
     * <pre>
     * (Required) The expression to describe the extraction, can be
     * key of Map, index of Array, field name of Struct.
     * </pre>
     *
     * <code>.spark.connect.Expression extraction = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getExtractionOrBuilder() {
      return getExtraction();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (child_ != null) {
        output.writeMessage(1, getChild());
      }
      if (extraction_ != null) {
        output.writeMessage(2, getExtraction());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (child_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getChild());
      }
      if (extraction_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getExtraction());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue) obj;

      if (hasChild() != other.hasChild()) return false;
      if (hasChild()) {
        if (!getChild()
            .equals(other.getChild())) return false;
      }
      if (hasExtraction() != other.hasExtraction()) return false;
      if (hasExtraction()) {
        if (!getExtraction()
            .equals(other.getExtraction())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasChild()) {
        hash = (37 * hash) + CHILD_FIELD_NUMBER;
        hash = (53 * hash) + getChild().hashCode();
      }
      if (hasExtraction()) {
        hash = (37 * hash) + EXTRACTION_FIELD_NUMBER;
        hash = (53 * hash) + getExtraction().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Extracts a value or values from an Expression
     * </pre>
     *
     * Protobuf type {@code spark.connect.Expression.UnresolvedExtractValue}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.UnresolvedExtractValue)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedExtractValue_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedExtractValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (childBuilder_ == null) {
          child_ = null;
        } else {
          child_ = null;
          childBuilder_ = null;
        }
        if (extractionBuilder_ == null) {
          extraction_ = null;
        } else {
          extraction_ = null;
          extractionBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedExtractValue_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue(this);
        if (childBuilder_ == null) {
          result.child_ = child_;
        } else {
          result.child_ = childBuilder_.build();
        }
        if (extractionBuilder_ == null) {
          result.extraction_ = extraction_;
        } else {
          result.extraction_ = extractionBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.getDefaultInstance()) return this;
        if (other.hasChild()) {
          mergeChild(other.getChild());
        }
        if (other.hasExtraction()) {
          mergeExtraction(other.getExtraction());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getChildFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getExtractionFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private org.apache.kyuubi.engine.spark.connect.proto.Expression child_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> childBuilder_;
      /**
       * <pre>
       * (Required) The expression to extract value from, can be
       * Map, Array, Struct or array of Structs.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       * @return Whether the child field is set.
       */
      public boolean hasChild() {
        return childBuilder_ != null || child_ != null;
      }
      /**
       * <pre>
       * (Required) The expression to extract value from, can be
       * Map, Array, Struct or array of Structs.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       * @return The child.
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getChild() {
        if (childBuilder_ == null) {
          return child_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : child_;
        } else {
          return childBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The expression to extract value from, can be
       * Map, Array, Struct or array of Structs.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public Builder setChild(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (childBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          child_ = value;
          onChanged();
        } else {
          childBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to extract value from, can be
       * Map, Array, Struct or array of Structs.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public Builder setChild(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (childBuilder_ == null) {
          child_ = builderForValue.build();
          onChanged();
        } else {
          childBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to extract value from, can be
       * Map, Array, Struct or array of Structs.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public Builder mergeChild(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (childBuilder_ == null) {
          if (child_ != null) {
            child_ =
              org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(child_).mergeFrom(value).buildPartial();
          } else {
            child_ = value;
          }
          onChanged();
        } else {
          childBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to extract value from, can be
       * Map, Array, Struct or array of Structs.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public Builder clearChild() {
        if (childBuilder_ == null) {
          child_ = null;
          onChanged();
        } else {
          child_ = null;
          childBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to extract value from, can be
       * Map, Array, Struct or array of Structs.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getChildBuilder() {
        
        onChanged();
        return getChildFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The expression to extract value from, can be
       * Map, Array, Struct or array of Structs.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getChildOrBuilder() {
        if (childBuilder_ != null) {
          return childBuilder_.getMessageOrBuilder();
        } else {
          return child_ == null ?
              org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : child_;
        }
      }
      /**
       * <pre>
       * (Required) The expression to extract value from, can be
       * Map, Array, Struct or array of Structs.
       * </pre>
       *
       * <code>.spark.connect.Expression child = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getChildFieldBuilder() {
        if (childBuilder_ == null) {
          childBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  getChild(),
                  getParentForChildren(),
                  isClean());
          child_ = null;
        }
        return childBuilder_;
      }

      private org.apache.kyuubi.engine.spark.connect.proto.Expression extraction_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> extractionBuilder_;
      /**
       * <pre>
       * (Required) The expression to describe the extraction, can be
       * key of Map, index of Array, field name of Struct.
       * </pre>
       *
       * <code>.spark.connect.Expression extraction = 2;</code>
       * @return Whether the extraction field is set.
       */
      public boolean hasExtraction() {
        return extractionBuilder_ != null || extraction_ != null;
      }
      /**
       * <pre>
       * (Required) The expression to describe the extraction, can be
       * key of Map, index of Array, field name of Struct.
       * </pre>
       *
       * <code>.spark.connect.Expression extraction = 2;</code>
       * @return The extraction.
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getExtraction() {
        if (extractionBuilder_ == null) {
          return extraction_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : extraction_;
        } else {
          return extractionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The expression to describe the extraction, can be
       * key of Map, index of Array, field name of Struct.
       * </pre>
       *
       * <code>.spark.connect.Expression extraction = 2;</code>
       */
      public Builder setExtraction(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (extractionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          extraction_ = value;
          onChanged();
        } else {
          extractionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to describe the extraction, can be
       * key of Map, index of Array, field name of Struct.
       * </pre>
       *
       * <code>.spark.connect.Expression extraction = 2;</code>
       */
      public Builder setExtraction(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (extractionBuilder_ == null) {
          extraction_ = builderForValue.build();
          onChanged();
        } else {
          extractionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to describe the extraction, can be
       * key of Map, index of Array, field name of Struct.
       * </pre>
       *
       * <code>.spark.connect.Expression extraction = 2;</code>
       */
      public Builder mergeExtraction(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (extractionBuilder_ == null) {
          if (extraction_ != null) {
            extraction_ =
              org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(extraction_).mergeFrom(value).buildPartial();
          } else {
            extraction_ = value;
          }
          onChanged();
        } else {
          extractionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to describe the extraction, can be
       * key of Map, index of Array, field name of Struct.
       * </pre>
       *
       * <code>.spark.connect.Expression extraction = 2;</code>
       */
      public Builder clearExtraction() {
        if (extractionBuilder_ == null) {
          extraction_ = null;
          onChanged();
        } else {
          extraction_ = null;
          extractionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression to describe the extraction, can be
       * key of Map, index of Array, field name of Struct.
       * </pre>
       *
       * <code>.spark.connect.Expression extraction = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getExtractionBuilder() {
        
        onChanged();
        return getExtractionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The expression to describe the extraction, can be
       * key of Map, index of Array, field name of Struct.
       * </pre>
       *
       * <code>.spark.connect.Expression extraction = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getExtractionOrBuilder() {
        if (extractionBuilder_ != null) {
          return extractionBuilder_.getMessageOrBuilder();
        } else {
          return extraction_ == null ?
              org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : extraction_;
        }
      }
      /**
       * <pre>
       * (Required) The expression to describe the extraction, can be
       * key of Map, index of Array, field name of Struct.
       * </pre>
       *
       * <code>.spark.connect.Expression extraction = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getExtractionFieldBuilder() {
        if (extractionBuilder_ == null) {
          extractionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  getExtraction(),
                  getParentForChildren(),
                  isClean());
          extraction_ = null;
        }
        return extractionBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.UnresolvedExtractValue)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.UnresolvedExtractValue)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UnresolvedExtractValue>
        PARSER = new com.google.protobuf.AbstractParser<UnresolvedExtractValue>() {
      @java.lang.Override
      public UnresolvedExtractValue parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UnresolvedExtractValue> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UnresolvedExtractValue> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UpdateFieldsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.UpdateFields)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The struct expression.
     * </pre>
     *
     * <code>.spark.connect.Expression struct_expression = 1;</code>
     * @return Whether the structExpression field is set.
     */
    boolean hasStructExpression();
    /**
     * <pre>
     * (Required) The struct expression.
     * </pre>
     *
     * <code>.spark.connect.Expression struct_expression = 1;</code>
     * @return The structExpression.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getStructExpression();
    /**
     * <pre>
     * (Required) The struct expression.
     * </pre>
     *
     * <code>.spark.connect.Expression struct_expression = 1;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getStructExpressionOrBuilder();

    /**
     * <pre>
     * (Required) The field name.
     * </pre>
     *
     * <code>string field_name = 2;</code>
     * @return The fieldName.
     */
    java.lang.String getFieldName();
    /**
     * <pre>
     * (Required) The field name.
     * </pre>
     *
     * <code>string field_name = 2;</code>
     * @return The bytes for fieldName.
     */
    com.google.protobuf.ByteString
        getFieldNameBytes();

    /**
     * <pre>
     * (Optional) The expression to add or replace.
     * When not set, it means this field will be dropped.
     * </pre>
     *
     * <code>.spark.connect.Expression value_expression = 3;</code>
     * @return Whether the valueExpression field is set.
     */
    boolean hasValueExpression();
    /**
     * <pre>
     * (Optional) The expression to add or replace.
     * When not set, it means this field will be dropped.
     * </pre>
     *
     * <code>.spark.connect.Expression value_expression = 3;</code>
     * @return The valueExpression.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getValueExpression();
    /**
     * <pre>
     * (Optional) The expression to add or replace.
     * When not set, it means this field will be dropped.
     * </pre>
     *
     * <code>.spark.connect.Expression value_expression = 3;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getValueExpressionOrBuilder();
  }
  /**
   * <pre>
   * Add, replace or drop a field of `StructType` expression by name.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Expression.UpdateFields}
   */
  public static final class UpdateFields extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.UpdateFields)
      UpdateFieldsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UpdateFields.newBuilder() to construct.
    private UpdateFields(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UpdateFields() {
      fieldName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UpdateFields();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UpdateFields_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UpdateFields_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.Builder.class);
    }

    public static final int STRUCT_EXPRESSION_FIELD_NUMBER = 1;
    private org.apache.kyuubi.engine.spark.connect.proto.Expression structExpression_;
    /**
     * <pre>
     * (Required) The struct expression.
     * </pre>
     *
     * <code>.spark.connect.Expression struct_expression = 1;</code>
     * @return Whether the structExpression field is set.
     */
    @java.lang.Override
    public boolean hasStructExpression() {
      return structExpression_ != null;
    }
    /**
     * <pre>
     * (Required) The struct expression.
     * </pre>
     *
     * <code>.spark.connect.Expression struct_expression = 1;</code>
     * @return The structExpression.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getStructExpression() {
      return structExpression_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : structExpression_;
    }
    /**
     * <pre>
     * (Required) The struct expression.
     * </pre>
     *
     * <code>.spark.connect.Expression struct_expression = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getStructExpressionOrBuilder() {
      return getStructExpression();
    }

    public static final int FIELD_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object fieldName_;
    /**
     * <pre>
     * (Required) The field name.
     * </pre>
     *
     * <code>string field_name = 2;</code>
     * @return The fieldName.
     */
    @java.lang.Override
    public java.lang.String getFieldName() {
      java.lang.Object ref = fieldName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        fieldName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) The field name.
     * </pre>
     *
     * <code>string field_name = 2;</code>
     * @return The bytes for fieldName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFieldNameBytes() {
      java.lang.Object ref = fieldName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fieldName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_EXPRESSION_FIELD_NUMBER = 3;
    private org.apache.kyuubi.engine.spark.connect.proto.Expression valueExpression_;
    /**
     * <pre>
     * (Optional) The expression to add or replace.
     * When not set, it means this field will be dropped.
     * </pre>
     *
     * <code>.spark.connect.Expression value_expression = 3;</code>
     * @return Whether the valueExpression field is set.
     */
    @java.lang.Override
    public boolean hasValueExpression() {
      return valueExpression_ != null;
    }
    /**
     * <pre>
     * (Optional) The expression to add or replace.
     * When not set, it means this field will be dropped.
     * </pre>
     *
     * <code>.spark.connect.Expression value_expression = 3;</code>
     * @return The valueExpression.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getValueExpression() {
      return valueExpression_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : valueExpression_;
    }
    /**
     * <pre>
     * (Optional) The expression to add or replace.
     * When not set, it means this field will be dropped.
     * </pre>
     *
     * <code>.spark.connect.Expression value_expression = 3;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getValueExpressionOrBuilder() {
      return getValueExpression();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (structExpression_ != null) {
        output.writeMessage(1, getStructExpression());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(fieldName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, fieldName_);
      }
      if (valueExpression_ != null) {
        output.writeMessage(3, getValueExpression());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (structExpression_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getStructExpression());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(fieldName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, fieldName_);
      }
      if (valueExpression_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getValueExpression());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields) obj;

      if (hasStructExpression() != other.hasStructExpression()) return false;
      if (hasStructExpression()) {
        if (!getStructExpression()
            .equals(other.getStructExpression())) return false;
      }
      if (!getFieldName()
          .equals(other.getFieldName())) return false;
      if (hasValueExpression() != other.hasValueExpression()) return false;
      if (hasValueExpression()) {
        if (!getValueExpression()
            .equals(other.getValueExpression())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStructExpression()) {
        hash = (37 * hash) + STRUCT_EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getStructExpression().hashCode();
      }
      hash = (37 * hash) + FIELD_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getFieldName().hashCode();
      if (hasValueExpression()) {
        hash = (37 * hash) + VALUE_EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getValueExpression().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Add, replace or drop a field of `StructType` expression by name.
     * </pre>
     *
     * Protobuf type {@code spark.connect.Expression.UpdateFields}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.UpdateFields)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFieldsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UpdateFields_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UpdateFields_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (structExpressionBuilder_ == null) {
          structExpression_ = null;
        } else {
          structExpression_ = null;
          structExpressionBuilder_ = null;
        }
        fieldName_ = "";

        if (valueExpressionBuilder_ == null) {
          valueExpression_ = null;
        } else {
          valueExpression_ = null;
          valueExpressionBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UpdateFields_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields(this);
        if (structExpressionBuilder_ == null) {
          result.structExpression_ = structExpression_;
        } else {
          result.structExpression_ = structExpressionBuilder_.build();
        }
        result.fieldName_ = fieldName_;
        if (valueExpressionBuilder_ == null) {
          result.valueExpression_ = valueExpression_;
        } else {
          result.valueExpression_ = valueExpressionBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.getDefaultInstance()) return this;
        if (other.hasStructExpression()) {
          mergeStructExpression(other.getStructExpression());
        }
        if (!other.getFieldName().isEmpty()) {
          fieldName_ = other.fieldName_;
          onChanged();
        }
        if (other.hasValueExpression()) {
          mergeValueExpression(other.getValueExpression());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getStructExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 10
              case 18: {
                fieldName_ = input.readStringRequireUtf8();

                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getValueExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private org.apache.kyuubi.engine.spark.connect.proto.Expression structExpression_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> structExpressionBuilder_;
      /**
       * <pre>
       * (Required) The struct expression.
       * </pre>
       *
       * <code>.spark.connect.Expression struct_expression = 1;</code>
       * @return Whether the structExpression field is set.
       */
      public boolean hasStructExpression() {
        return structExpressionBuilder_ != null || structExpression_ != null;
      }
      /**
       * <pre>
       * (Required) The struct expression.
       * </pre>
       *
       * <code>.spark.connect.Expression struct_expression = 1;</code>
       * @return The structExpression.
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getStructExpression() {
        if (structExpressionBuilder_ == null) {
          return structExpression_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : structExpression_;
        } else {
          return structExpressionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The struct expression.
       * </pre>
       *
       * <code>.spark.connect.Expression struct_expression = 1;</code>
       */
      public Builder setStructExpression(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (structExpressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          structExpression_ = value;
          onChanged();
        } else {
          structExpressionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The struct expression.
       * </pre>
       *
       * <code>.spark.connect.Expression struct_expression = 1;</code>
       */
      public Builder setStructExpression(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (structExpressionBuilder_ == null) {
          structExpression_ = builderForValue.build();
          onChanged();
        } else {
          structExpressionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The struct expression.
       * </pre>
       *
       * <code>.spark.connect.Expression struct_expression = 1;</code>
       */
      public Builder mergeStructExpression(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (structExpressionBuilder_ == null) {
          if (structExpression_ != null) {
            structExpression_ =
              org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(structExpression_).mergeFrom(value).buildPartial();
          } else {
            structExpression_ = value;
          }
          onChanged();
        } else {
          structExpressionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The struct expression.
       * </pre>
       *
       * <code>.spark.connect.Expression struct_expression = 1;</code>
       */
      public Builder clearStructExpression() {
        if (structExpressionBuilder_ == null) {
          structExpression_ = null;
          onChanged();
        } else {
          structExpression_ = null;
          structExpressionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The struct expression.
       * </pre>
       *
       * <code>.spark.connect.Expression struct_expression = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getStructExpressionBuilder() {
        
        onChanged();
        return getStructExpressionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The struct expression.
       * </pre>
       *
       * <code>.spark.connect.Expression struct_expression = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getStructExpressionOrBuilder() {
        if (structExpressionBuilder_ != null) {
          return structExpressionBuilder_.getMessageOrBuilder();
        } else {
          return structExpression_ == null ?
              org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : structExpression_;
        }
      }
      /**
       * <pre>
       * (Required) The struct expression.
       * </pre>
       *
       * <code>.spark.connect.Expression struct_expression = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getStructExpressionFieldBuilder() {
        if (structExpressionBuilder_ == null) {
          structExpressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  getStructExpression(),
                  getParentForChildren(),
                  isClean());
          structExpression_ = null;
        }
        return structExpressionBuilder_;
      }

      private java.lang.Object fieldName_ = "";
      /**
       * <pre>
       * (Required) The field name.
       * </pre>
       *
       * <code>string field_name = 2;</code>
       * @return The fieldName.
       */
      public java.lang.String getFieldName() {
        java.lang.Object ref = fieldName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          fieldName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) The field name.
       * </pre>
       *
       * <code>string field_name = 2;</code>
       * @return The bytes for fieldName.
       */
      public com.google.protobuf.ByteString
          getFieldNameBytes() {
        java.lang.Object ref = fieldName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fieldName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) The field name.
       * </pre>
       *
       * <code>string field_name = 2;</code>
       * @param value The fieldName to set.
       * @return This builder for chaining.
       */
      public Builder setFieldName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        fieldName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The field name.
       * </pre>
       *
       * <code>string field_name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldName() {
        
        fieldName_ = getDefaultInstance().getFieldName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The field name.
       * </pre>
       *
       * <code>string field_name = 2;</code>
       * @param value The bytes for fieldName to set.
       * @return This builder for chaining.
       */
      public Builder setFieldNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        fieldName_ = value;
        onChanged();
        return this;
      }

      private org.apache.kyuubi.engine.spark.connect.proto.Expression valueExpression_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> valueExpressionBuilder_;
      /**
       * <pre>
       * (Optional) The expression to add or replace.
       * When not set, it means this field will be dropped.
       * </pre>
       *
       * <code>.spark.connect.Expression value_expression = 3;</code>
       * @return Whether the valueExpression field is set.
       */
      public boolean hasValueExpression() {
        return valueExpressionBuilder_ != null || valueExpression_ != null;
      }
      /**
       * <pre>
       * (Optional) The expression to add or replace.
       * When not set, it means this field will be dropped.
       * </pre>
       *
       * <code>.spark.connect.Expression value_expression = 3;</code>
       * @return The valueExpression.
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getValueExpression() {
        if (valueExpressionBuilder_ == null) {
          return valueExpression_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : valueExpression_;
        } else {
          return valueExpressionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Optional) The expression to add or replace.
       * When not set, it means this field will be dropped.
       * </pre>
       *
       * <code>.spark.connect.Expression value_expression = 3;</code>
       */
      public Builder setValueExpression(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (valueExpressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          valueExpression_ = value;
          onChanged();
        } else {
          valueExpressionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) The expression to add or replace.
       * When not set, it means this field will be dropped.
       * </pre>
       *
       * <code>.spark.connect.Expression value_expression = 3;</code>
       */
      public Builder setValueExpression(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (valueExpressionBuilder_ == null) {
          valueExpression_ = builderForValue.build();
          onChanged();
        } else {
          valueExpressionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) The expression to add or replace.
       * When not set, it means this field will be dropped.
       * </pre>
       *
       * <code>.spark.connect.Expression value_expression = 3;</code>
       */
      public Builder mergeValueExpression(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (valueExpressionBuilder_ == null) {
          if (valueExpression_ != null) {
            valueExpression_ =
              org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(valueExpression_).mergeFrom(value).buildPartial();
          } else {
            valueExpression_ = value;
          }
          onChanged();
        } else {
          valueExpressionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) The expression to add or replace.
       * When not set, it means this field will be dropped.
       * </pre>
       *
       * <code>.spark.connect.Expression value_expression = 3;</code>
       */
      public Builder clearValueExpression() {
        if (valueExpressionBuilder_ == null) {
          valueExpression_ = null;
          onChanged();
        } else {
          valueExpression_ = null;
          valueExpressionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) The expression to add or replace.
       * When not set, it means this field will be dropped.
       * </pre>
       *
       * <code>.spark.connect.Expression value_expression = 3;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getValueExpressionBuilder() {
        
        onChanged();
        return getValueExpressionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Optional) The expression to add or replace.
       * When not set, it means this field will be dropped.
       * </pre>
       *
       * <code>.spark.connect.Expression value_expression = 3;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getValueExpressionOrBuilder() {
        if (valueExpressionBuilder_ != null) {
          return valueExpressionBuilder_.getMessageOrBuilder();
        } else {
          return valueExpression_ == null ?
              org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : valueExpression_;
        }
      }
      /**
       * <pre>
       * (Optional) The expression to add or replace.
       * When not set, it means this field will be dropped.
       * </pre>
       *
       * <code>.spark.connect.Expression value_expression = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getValueExpressionFieldBuilder() {
        if (valueExpressionBuilder_ == null) {
          valueExpressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  getValueExpression(),
                  getParentForChildren(),
                  isClean());
          valueExpression_ = null;
        }
        return valueExpressionBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.UpdateFields)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.UpdateFields)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UpdateFields>
        PARSER = new com.google.protobuf.AbstractParser<UpdateFields>() {
      @java.lang.Override
      public UpdateFields parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UpdateFields> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UpdateFields> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AliasOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.Alias)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The expression that alias will be added on.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     * @return Whether the expr field is set.
     */
    boolean hasExpr();
    /**
     * <pre>
     * (Required) The expression that alias will be added on.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     * @return The expr.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getExpr();
    /**
     * <pre>
     * (Required) The expression that alias will be added on.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getExprOrBuilder();

    /**
     * <pre>
     * (Required) a list of name parts for the alias.
     * Scalar columns only has one name that presents.
     * </pre>
     *
     * <code>repeated string name = 2;</code>
     * @return A list containing the name.
     */
    java.util.List<java.lang.String>
        getNameList();
    /**
     * <pre>
     * (Required) a list of name parts for the alias.
     * Scalar columns only has one name that presents.
     * </pre>
     *
     * <code>repeated string name = 2;</code>
     * @return The count of name.
     */
    int getNameCount();
    /**
     * <pre>
     * (Required) a list of name parts for the alias.
     * Scalar columns only has one name that presents.
     * </pre>
     *
     * <code>repeated string name = 2;</code>
     * @param index The index of the element to return.
     * @return The name at the given index.
     */
    java.lang.String getName(int index);
    /**
     * <pre>
     * (Required) a list of name parts for the alias.
     * Scalar columns only has one name that presents.
     * </pre>
     *
     * <code>repeated string name = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the name at the given index.
     */
    com.google.protobuf.ByteString
        getNameBytes(int index);

    /**
     * <pre>
     * (Optional) Alias metadata expressed as a JSON map.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     * @return Whether the metadata field is set.
     */
    boolean hasMetadata();
    /**
     * <pre>
     * (Optional) Alias metadata expressed as a JSON map.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     * @return The metadata.
     */
    java.lang.String getMetadata();
    /**
     * <pre>
     * (Optional) Alias metadata expressed as a JSON map.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     * @return The bytes for metadata.
     */
    com.google.protobuf.ByteString
        getMetadataBytes();
  }
  /**
   * Protobuf type {@code spark.connect.Expression.Alias}
   */
  public static final class Alias extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.Alias)
      AliasOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Alias.newBuilder() to construct.
    private Alias(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Alias() {
      name_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      metadata_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Alias();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Alias_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Alias_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.Builder.class);
    }

    private int bitField0_;
    public static final int EXPR_FIELD_NUMBER = 1;
    private org.apache.kyuubi.engine.spark.connect.proto.Expression expr_;
    /**
     * <pre>
     * (Required) The expression that alias will be added on.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     * @return Whether the expr field is set.
     */
    @java.lang.Override
    public boolean hasExpr() {
      return expr_ != null;
    }
    /**
     * <pre>
     * (Required) The expression that alias will be added on.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     * @return The expr.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getExpr() {
      return expr_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : expr_;
    }
    /**
     * <pre>
     * (Required) The expression that alias will be added on.
     * </pre>
     *
     * <code>.spark.connect.Expression expr = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getExprOrBuilder() {
      return getExpr();
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList name_;
    /**
     * <pre>
     * (Required) a list of name parts for the alias.
     * Scalar columns only has one name that presents.
     * </pre>
     *
     * <code>repeated string name = 2;</code>
     * @return A list containing the name.
     */
    public com.google.protobuf.ProtocolStringList
        getNameList() {
      return name_;
    }
    /**
     * <pre>
     * (Required) a list of name parts for the alias.
     * Scalar columns only has one name that presents.
     * </pre>
     *
     * <code>repeated string name = 2;</code>
     * @return The count of name.
     */
    public int getNameCount() {
      return name_.size();
    }
    /**
     * <pre>
     * (Required) a list of name parts for the alias.
     * Scalar columns only has one name that presents.
     * </pre>
     *
     * <code>repeated string name = 2;</code>
     * @param index The index of the element to return.
     * @return The name at the given index.
     */
    public java.lang.String getName(int index) {
      return name_.get(index);
    }
    /**
     * <pre>
     * (Required) a list of name parts for the alias.
     * Scalar columns only has one name that presents.
     * </pre>
     *
     * <code>repeated string name = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the name at the given index.
     */
    public com.google.protobuf.ByteString
        getNameBytes(int index) {
      return name_.getByteString(index);
    }

    public static final int METADATA_FIELD_NUMBER = 3;
    private volatile java.lang.Object metadata_;
    /**
     * <pre>
     * (Optional) Alias metadata expressed as a JSON map.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     * @return Whether the metadata field is set.
     */
    @java.lang.Override
    public boolean hasMetadata() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * (Optional) Alias metadata expressed as a JSON map.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     * @return The metadata.
     */
    @java.lang.Override
    public java.lang.String getMetadata() {
      java.lang.Object ref = metadata_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        metadata_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) Alias metadata expressed as a JSON map.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     * @return The bytes for metadata.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMetadataBytes() {
      java.lang.Object ref = metadata_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        metadata_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (expr_ != null) {
        output.writeMessage(1, getExpr());
      }
      for (int i = 0; i < name_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_.getRaw(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, metadata_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (expr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getExpr());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < name_.size(); i++) {
          dataSize += computeStringSizeNoTag(name_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getNameList().size();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, metadata_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias) obj;

      if (hasExpr() != other.hasExpr()) return false;
      if (hasExpr()) {
        if (!getExpr()
            .equals(other.getExpr())) return false;
      }
      if (!getNameList()
          .equals(other.getNameList())) return false;
      if (hasMetadata() != other.hasMetadata()) return false;
      if (hasMetadata()) {
        if (!getMetadata()
            .equals(other.getMetadata())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasExpr()) {
        hash = (37 * hash) + EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getExpr().hashCode();
      }
      if (getNameCount() > 0) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getNameList().hashCode();
      }
      if (hasMetadata()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + getMetadata().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.Expression.Alias}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.Alias)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.AliasOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Alias_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Alias_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (exprBuilder_ == null) {
          expr_ = null;
        } else {
          expr_ = null;
          exprBuilder_ = null;
        }
        name_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        metadata_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_Alias_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (exprBuilder_ == null) {
          result.expr_ = expr_;
        } else {
          result.expr_ = exprBuilder_.build();
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          name_ = name_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.metadata_ = metadata_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.getDefaultInstance()) return this;
        if (other.hasExpr()) {
          mergeExpr(other.getExpr());
        }
        if (!other.name_.isEmpty()) {
          if (name_.isEmpty()) {
            name_ = other.name_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureNameIsMutable();
            name_.addAll(other.name_);
          }
          onChanged();
        }
        if (other.hasMetadata()) {
          bitField0_ |= 0x00000002;
          metadata_ = other.metadata_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getExprFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 10
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureNameIsMutable();
                name_.add(s);
                break;
              } // case 18
              case 26: {
                metadata_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.kyuubi.engine.spark.connect.proto.Expression expr_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> exprBuilder_;
      /**
       * <pre>
       * (Required) The expression that alias will be added on.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       * @return Whether the expr field is set.
       */
      public boolean hasExpr() {
        return exprBuilder_ != null || expr_ != null;
      }
      /**
       * <pre>
       * (Required) The expression that alias will be added on.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       * @return The expr.
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getExpr() {
        if (exprBuilder_ == null) {
          return expr_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : expr_;
        } else {
          return exprBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The expression that alias will be added on.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public Builder setExpr(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (exprBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expr_ = value;
          onChanged();
        } else {
          exprBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression that alias will be added on.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public Builder setExpr(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (exprBuilder_ == null) {
          expr_ = builderForValue.build();
          onChanged();
        } else {
          exprBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression that alias will be added on.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public Builder mergeExpr(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (exprBuilder_ == null) {
          if (expr_ != null) {
            expr_ =
              org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(expr_).mergeFrom(value).buildPartial();
          } else {
            expr_ = value;
          }
          onChanged();
        } else {
          exprBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression that alias will be added on.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public Builder clearExpr() {
        if (exprBuilder_ == null) {
          expr_ = null;
          onChanged();
        } else {
          expr_ = null;
          exprBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The expression that alias will be added on.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getExprBuilder() {
        
        onChanged();
        return getExprFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The expression that alias will be added on.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getExprOrBuilder() {
        if (exprBuilder_ != null) {
          return exprBuilder_.getMessageOrBuilder();
        } else {
          return expr_ == null ?
              org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : expr_;
        }
      }
      /**
       * <pre>
       * (Required) The expression that alias will be added on.
       * </pre>
       *
       * <code>.spark.connect.Expression expr = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getExprFieldBuilder() {
        if (exprBuilder_ == null) {
          exprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  getExpr(),
                  getParentForChildren(),
                  isClean());
          expr_ = null;
        }
        return exprBuilder_;
      }

      private com.google.protobuf.LazyStringList name_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureNameIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          name_ = new com.google.protobuf.LazyStringArrayList(name_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * (Required) a list of name parts for the alias.
       * Scalar columns only has one name that presents.
       * </pre>
       *
       * <code>repeated string name = 2;</code>
       * @return A list containing the name.
       */
      public com.google.protobuf.ProtocolStringList
          getNameList() {
        return name_.getUnmodifiableView();
      }
      /**
       * <pre>
       * (Required) a list of name parts for the alias.
       * Scalar columns only has one name that presents.
       * </pre>
       *
       * <code>repeated string name = 2;</code>
       * @return The count of name.
       */
      public int getNameCount() {
        return name_.size();
      }
      /**
       * <pre>
       * (Required) a list of name parts for the alias.
       * Scalar columns only has one name that presents.
       * </pre>
       *
       * <code>repeated string name = 2;</code>
       * @param index The index of the element to return.
       * @return The name at the given index.
       */
      public java.lang.String getName(int index) {
        return name_.get(index);
      }
      /**
       * <pre>
       * (Required) a list of name parts for the alias.
       * Scalar columns only has one name that presents.
       * </pre>
       *
       * <code>repeated string name = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the name at the given index.
       */
      public com.google.protobuf.ByteString
          getNameBytes(int index) {
        return name_.getByteString(index);
      }
      /**
       * <pre>
       * (Required) a list of name parts for the alias.
       * Scalar columns only has one name that presents.
       * </pre>
       *
       * <code>repeated string name = 2;</code>
       * @param index The index to set the value at.
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNameIsMutable();
        name_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) a list of name parts for the alias.
       * Scalar columns only has one name that presents.
       * </pre>
       *
       * <code>repeated string name = 2;</code>
       * @param value The name to add.
       * @return This builder for chaining.
       */
      public Builder addName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNameIsMutable();
        name_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) a list of name parts for the alias.
       * Scalar columns only has one name that presents.
       * </pre>
       *
       * <code>repeated string name = 2;</code>
       * @param values The name to add.
       * @return This builder for chaining.
       */
      public Builder addAllName(
          java.lang.Iterable<java.lang.String> values) {
        ensureNameIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, name_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) a list of name parts for the alias.
       * Scalar columns only has one name that presents.
       * </pre>
       *
       * <code>repeated string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) a list of name parts for the alias.
       * Scalar columns only has one name that presents.
       * </pre>
       *
       * <code>repeated string name = 2;</code>
       * @param value The bytes of the name to add.
       * @return This builder for chaining.
       */
      public Builder addNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureNameIsMutable();
        name_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object metadata_ = "";
      /**
       * <pre>
       * (Optional) Alias metadata expressed as a JSON map.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       * @return Whether the metadata field is set.
       */
      public boolean hasMetadata() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * (Optional) Alias metadata expressed as a JSON map.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       * @return The metadata.
       */
      public java.lang.String getMetadata() {
        java.lang.Object ref = metadata_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          metadata_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) Alias metadata expressed as a JSON map.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       * @return The bytes for metadata.
       */
      public com.google.protobuf.ByteString
          getMetadataBytes() {
        java.lang.Object ref = metadata_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          metadata_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) Alias metadata expressed as a JSON map.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       * @param value The metadata to set.
       * @return This builder for chaining.
       */
      public Builder setMetadata(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        metadata_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Alias metadata expressed as a JSON map.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetadata() {
        bitField0_ = (bitField0_ & ~0x00000002);
        metadata_ = getDefaultInstance().getMetadata();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Alias metadata expressed as a JSON map.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       * @param value The bytes for metadata to set.
       * @return This builder for chaining.
       */
      public Builder setMetadataBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        bitField0_ |= 0x00000002;
        metadata_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.Alias)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.Alias)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Alias>
        PARSER = new com.google.protobuf.AbstractParser<Alias>() {
      @java.lang.Override
      public Alias parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Alias> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Alias> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LambdaFunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.LambdaFunction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The lambda function.
     * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
     * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
     * </pre>
     *
     * <code>.spark.connect.Expression function = 1;</code>
     * @return Whether the function field is set.
     */
    boolean hasFunction();
    /**
     * <pre>
     * (Required) The lambda function.
     * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
     * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
     * </pre>
     *
     * <code>.spark.connect.Expression function = 1;</code>
     * @return The function.
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression getFunction();
    /**
     * <pre>
     * (Required) The lambda function.
     * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
     * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
     * </pre>
     *
     * <code>.spark.connect.Expression function = 1;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getFunctionOrBuilder();

    /**
     * <pre>
     * (Required) Function variables. Must contains 1 ~ 3 variables.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
     */
    java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable> 
        getArgumentsList();
    /**
     * <pre>
     * (Required) Function variables. Must contains 1 ~ 3 variables.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable getArguments(int index);
    /**
     * <pre>
     * (Required) Function variables. Must contains 1 ~ 3 variables.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
     */
    int getArgumentsCount();
    /**
     * <pre>
     * (Required) Function variables. Must contains 1 ~ 3 variables.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
     */
    java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder> 
        getArgumentsOrBuilderList();
    /**
     * <pre>
     * (Required) Function variables. Must contains 1 ~ 3 variables.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
     */
    org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder getArgumentsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code spark.connect.Expression.LambdaFunction}
   */
  public static final class LambdaFunction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.LambdaFunction)
      LambdaFunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LambdaFunction.newBuilder() to construct.
    private LambdaFunction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LambdaFunction() {
      arguments_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LambdaFunction();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_LambdaFunction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_LambdaFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.Builder.class);
    }

    public static final int FUNCTION_FIELD_NUMBER = 1;
    private org.apache.kyuubi.engine.spark.connect.proto.Expression function_;
    /**
     * <pre>
     * (Required) The lambda function.
     * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
     * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
     * </pre>
     *
     * <code>.spark.connect.Expression function = 1;</code>
     * @return Whether the function field is set.
     */
    @java.lang.Override
    public boolean hasFunction() {
      return function_ != null;
    }
    /**
     * <pre>
     * (Required) The lambda function.
     * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
     * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
     * </pre>
     *
     * <code>.spark.connect.Expression function = 1;</code>
     * @return The function.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getFunction() {
      return function_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : function_;
    }
    /**
     * <pre>
     * (Required) The lambda function.
     * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
     * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
     * </pre>
     *
     * <code>.spark.connect.Expression function = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getFunctionOrBuilder() {
      return getFunction();
    }

    public static final int ARGUMENTS_FIELD_NUMBER = 2;
    private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable> arguments_;
    /**
     * <pre>
     * (Required) Function variables. Must contains 1 ~ 3 variables.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable> getArgumentsList() {
      return arguments_;
    }
    /**
     * <pre>
     * (Required) Function variables. Must contains 1 ~ 3 variables.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder> 
        getArgumentsOrBuilderList() {
      return arguments_;
    }
    /**
     * <pre>
     * (Required) Function variables. Must contains 1 ~ 3 variables.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
     */
    @java.lang.Override
    public int getArgumentsCount() {
      return arguments_.size();
    }
    /**
     * <pre>
     * (Required) Function variables. Must contains 1 ~ 3 variables.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable getArguments(int index) {
      return arguments_.get(index);
    }
    /**
     * <pre>
     * (Required) Function variables. Must contains 1 ~ 3 variables.
     * </pre>
     *
     * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder getArgumentsOrBuilder(
        int index) {
      return arguments_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (function_ != null) {
        output.writeMessage(1, getFunction());
      }
      for (int i = 0; i < arguments_.size(); i++) {
        output.writeMessage(2, arguments_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (function_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getFunction());
      }
      for (int i = 0; i < arguments_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, arguments_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction) obj;

      if (hasFunction() != other.hasFunction()) return false;
      if (hasFunction()) {
        if (!getFunction()
            .equals(other.getFunction())) return false;
      }
      if (!getArgumentsList()
          .equals(other.getArgumentsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFunction()) {
        hash = (37 * hash) + FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getFunction().hashCode();
      }
      if (getArgumentsCount() > 0) {
        hash = (37 * hash) + ARGUMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getArgumentsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.Expression.LambdaFunction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.LambdaFunction)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunctionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_LambdaFunction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_LambdaFunction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (functionBuilder_ == null) {
          function_ = null;
        } else {
          function_ = null;
          functionBuilder_ = null;
        }
        if (argumentsBuilder_ == null) {
          arguments_ = java.util.Collections.emptyList();
        } else {
          arguments_ = null;
          argumentsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_LambdaFunction_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction(this);
        int from_bitField0_ = bitField0_;
        if (functionBuilder_ == null) {
          result.function_ = function_;
        } else {
          result.function_ = functionBuilder_.build();
        }
        if (argumentsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            arguments_ = java.util.Collections.unmodifiableList(arguments_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.arguments_ = arguments_;
        } else {
          result.arguments_ = argumentsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.getDefaultInstance()) return this;
        if (other.hasFunction()) {
          mergeFunction(other.getFunction());
        }
        if (argumentsBuilder_ == null) {
          if (!other.arguments_.isEmpty()) {
            if (arguments_.isEmpty()) {
              arguments_ = other.arguments_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgumentsIsMutable();
              arguments_.addAll(other.arguments_);
            }
            onChanged();
          }
        } else {
          if (!other.arguments_.isEmpty()) {
            if (argumentsBuilder_.isEmpty()) {
              argumentsBuilder_.dispose();
              argumentsBuilder_ = null;
              arguments_ = other.arguments_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argumentsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgumentsFieldBuilder() : null;
            } else {
              argumentsBuilder_.addAllMessages(other.arguments_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getFunctionFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 10
              case 18: {
                org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable m =
                    input.readMessage(
                        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.parser(),
                        extensionRegistry);
                if (argumentsBuilder_ == null) {
                  ensureArgumentsIsMutable();
                  arguments_.add(m);
                } else {
                  argumentsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.kyuubi.engine.spark.connect.proto.Expression function_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> functionBuilder_;
      /**
       * <pre>
       * (Required) The lambda function.
       * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
       * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
       * </pre>
       *
       * <code>.spark.connect.Expression function = 1;</code>
       * @return Whether the function field is set.
       */
      public boolean hasFunction() {
        return functionBuilder_ != null || function_ != null;
      }
      /**
       * <pre>
       * (Required) The lambda function.
       * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
       * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
       * </pre>
       *
       * <code>.spark.connect.Expression function = 1;</code>
       * @return The function.
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression getFunction() {
        if (functionBuilder_ == null) {
          return function_ == null ? org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : function_;
        } else {
          return functionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The lambda function.
       * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
       * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
       * </pre>
       *
       * <code>.spark.connect.Expression function = 1;</code>
       */
      public Builder setFunction(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          function_ = value;
          onChanged();
        } else {
          functionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The lambda function.
       * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
       * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
       * </pre>
       *
       * <code>.spark.connect.Expression function = 1;</code>
       */
      public Builder setFunction(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder builderForValue) {
        if (functionBuilder_ == null) {
          function_ = builderForValue.build();
          onChanged();
        } else {
          functionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The lambda function.
       * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
       * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
       * </pre>
       *
       * <code>.spark.connect.Expression function = 1;</code>
       */
      public Builder mergeFunction(org.apache.kyuubi.engine.spark.connect.proto.Expression value) {
        if (functionBuilder_ == null) {
          if (function_ != null) {
            function_ =
              org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder(function_).mergeFrom(value).buildPartial();
          } else {
            function_ = value;
          }
          onChanged();
        } else {
          functionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The lambda function.
       * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
       * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
       * </pre>
       *
       * <code>.spark.connect.Expression function = 1;</code>
       */
      public Builder clearFunction() {
        if (functionBuilder_ == null) {
          function_ = null;
          onChanged();
        } else {
          function_ = null;
          functionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The lambda function.
       * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
       * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
       * </pre>
       *
       * <code>.spark.connect.Expression function = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder getFunctionBuilder() {
        
        onChanged();
        return getFunctionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The lambda function.
       * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
       * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
       * </pre>
       *
       * <code>.spark.connect.Expression function = 1;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder getFunctionOrBuilder() {
        if (functionBuilder_ != null) {
          return functionBuilder_.getMessageOrBuilder();
        } else {
          return function_ == null ?
              org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance() : function_;
        }
      }
      /**
       * <pre>
       * (Required) The lambda function.
       * The function body should use 'UnresolvedAttribute' as arguments, the sever side will
       * replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
       * </pre>
       *
       * <code>.spark.connect.Expression function = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder> 
          getFunctionFieldBuilder() {
        if (functionBuilder_ == null) {
          functionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder, org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder>(
                  getFunction(),
                  getParentForChildren(),
                  isClean());
          function_ = null;
        }
        return functionBuilder_;
      }

      private java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable> arguments_ =
        java.util.Collections.emptyList();
      private void ensureArgumentsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          arguments_ = new java.util.ArrayList<org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable>(arguments_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder> argumentsBuilder_;

      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable> getArgumentsList() {
        if (argumentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(arguments_);
        } else {
          return argumentsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public int getArgumentsCount() {
        if (argumentsBuilder_ == null) {
          return arguments_.size();
        } else {
          return argumentsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable getArguments(int index) {
        if (argumentsBuilder_ == null) {
          return arguments_.get(index);
        } else {
          return argumentsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public Builder setArguments(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.set(index, value);
          onChanged();
        } else {
          argumentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public Builder setArguments(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public Builder addArguments(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.add(value);
          onChanged();
        } else {
          argumentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public Builder addArguments(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable value) {
        if (argumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentsIsMutable();
          arguments_.add(index, value);
          onChanged();
        } else {
          argumentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public Builder addArguments(
          org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.add(builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public Builder addArguments(
          int index, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder builderForValue) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public Builder addAllArguments(
          java.lang.Iterable<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable> values) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, arguments_);
          onChanged();
        } else {
          argumentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public Builder clearArguments() {
        if (argumentsBuilder_ == null) {
          arguments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argumentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public Builder removeArguments(int index) {
        if (argumentsBuilder_ == null) {
          ensureArgumentsIsMutable();
          arguments_.remove(index);
          onChanged();
        } else {
          argumentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder getArgumentsBuilder(
          int index) {
        return getArgumentsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder getArgumentsOrBuilder(
          int index) {
        if (argumentsBuilder_ == null) {
          return arguments_.get(index);  } else {
          return argumentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public java.util.List<? extends org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder> 
           getArgumentsOrBuilderList() {
        if (argumentsBuilder_ != null) {
          return argumentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(arguments_);
        }
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder addArgumentsBuilder() {
        return getArgumentsFieldBuilder().addBuilder(
            org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance());
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder addArgumentsBuilder(
          int index) {
        return getArgumentsFieldBuilder().addBuilder(
            index, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance());
      }
      /**
       * <pre>
       * (Required) Function variables. Must contains 1 ~ 3 variables.
       * </pre>
       *
       * <code>repeated .spark.connect.Expression.UnresolvedNamedLambdaVariable arguments = 2;</code>
       */
      public java.util.List<org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder> 
           getArgumentsBuilderList() {
        return getArgumentsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder> 
          getArgumentsFieldBuilder() {
        if (argumentsBuilder_ == null) {
          argumentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder>(
                  arguments_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          arguments_ = null;
        }
        return argumentsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.LambdaFunction)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.LambdaFunction)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LambdaFunction>
        PARSER = new com.google.protobuf.AbstractParser<LambdaFunction>() {
      @java.lang.Override
      public LambdaFunction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<LambdaFunction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LambdaFunction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnresolvedNamedLambdaVariableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.connect.Expression.UnresolvedNamedLambdaVariable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) a list of name parts for the variable. Must not be empty.
     * </pre>
     *
     * <code>repeated string name_parts = 1;</code>
     * @return A list containing the nameParts.
     */
    java.util.List<java.lang.String>
        getNamePartsList();
    /**
     * <pre>
     * (Required) a list of name parts for the variable. Must not be empty.
     * </pre>
     *
     * <code>repeated string name_parts = 1;</code>
     * @return The count of nameParts.
     */
    int getNamePartsCount();
    /**
     * <pre>
     * (Required) a list of name parts for the variable. Must not be empty.
     * </pre>
     *
     * <code>repeated string name_parts = 1;</code>
     * @param index The index of the element to return.
     * @return The nameParts at the given index.
     */
    java.lang.String getNameParts(int index);
    /**
     * <pre>
     * (Required) a list of name parts for the variable. Must not be empty.
     * </pre>
     *
     * <code>repeated string name_parts = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the nameParts at the given index.
     */
    com.google.protobuf.ByteString
        getNamePartsBytes(int index);
  }
  /**
   * Protobuf type {@code spark.connect.Expression.UnresolvedNamedLambdaVariable}
   */
  public static final class UnresolvedNamedLambdaVariable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.connect.Expression.UnresolvedNamedLambdaVariable)
      UnresolvedNamedLambdaVariableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UnresolvedNamedLambdaVariable.newBuilder() to construct.
    private UnresolvedNamedLambdaVariable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UnresolvedNamedLambdaVariable() {
      nameParts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UnresolvedNamedLambdaVariable();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedNamedLambdaVariable_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedNamedLambdaVariable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder.class);
    }

    public static final int NAME_PARTS_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList nameParts_;
    /**
     * <pre>
     * (Required) a list of name parts for the variable. Must not be empty.
     * </pre>
     *
     * <code>repeated string name_parts = 1;</code>
     * @return A list containing the nameParts.
     */
    public com.google.protobuf.ProtocolStringList
        getNamePartsList() {
      return nameParts_;
    }
    /**
     * <pre>
     * (Required) a list of name parts for the variable. Must not be empty.
     * </pre>
     *
     * <code>repeated string name_parts = 1;</code>
     * @return The count of nameParts.
     */
    public int getNamePartsCount() {
      return nameParts_.size();
    }
    /**
     * <pre>
     * (Required) a list of name parts for the variable. Must not be empty.
     * </pre>
     *
     * <code>repeated string name_parts = 1;</code>
     * @param index The index of the element to return.
     * @return The nameParts at the given index.
     */
    public java.lang.String getNameParts(int index) {
      return nameParts_.get(index);
    }
    /**
     * <pre>
     * (Required) a list of name parts for the variable. Must not be empty.
     * </pre>
     *
     * <code>repeated string name_parts = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the nameParts at the given index.
     */
    public com.google.protobuf.ByteString
        getNamePartsBytes(int index) {
      return nameParts_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < nameParts_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, nameParts_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < nameParts_.size(); i++) {
          dataSize += computeStringSizeNoTag(nameParts_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getNamePartsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable)) {
        return super.equals(obj);
      }
      org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable other = (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable) obj;

      if (!getNamePartsList()
          .equals(other.getNamePartsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getNamePartsCount() > 0) {
        hash = (37 * hash) + NAME_PARTS_FIELD_NUMBER;
        hash = (53 * hash) + getNamePartsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.connect.Expression.UnresolvedNamedLambdaVariable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.connect.Expression.UnresolvedNamedLambdaVariable)
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedNamedLambdaVariable_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedNamedLambdaVariable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder.class);
      }

      // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        nameParts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_UnresolvedNamedLambdaVariable_descriptor;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable getDefaultInstanceForType() {
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable build() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable buildPartial() {
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable result = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          nameParts_ = nameParts_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.nameParts_ = nameParts_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable) {
          return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable other) {
        if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance()) return this;
        if (!other.nameParts_.isEmpty()) {
          if (nameParts_.isEmpty()) {
            nameParts_ = other.nameParts_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureNamePartsIsMutable();
            nameParts_.addAll(other.nameParts_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureNamePartsIsMutable();
                nameParts_.add(s);
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList nameParts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureNamePartsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          nameParts_ = new com.google.protobuf.LazyStringArrayList(nameParts_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * (Required) a list of name parts for the variable. Must not be empty.
       * </pre>
       *
       * <code>repeated string name_parts = 1;</code>
       * @return A list containing the nameParts.
       */
      public com.google.protobuf.ProtocolStringList
          getNamePartsList() {
        return nameParts_.getUnmodifiableView();
      }
      /**
       * <pre>
       * (Required) a list of name parts for the variable. Must not be empty.
       * </pre>
       *
       * <code>repeated string name_parts = 1;</code>
       * @return The count of nameParts.
       */
      public int getNamePartsCount() {
        return nameParts_.size();
      }
      /**
       * <pre>
       * (Required) a list of name parts for the variable. Must not be empty.
       * </pre>
       *
       * <code>repeated string name_parts = 1;</code>
       * @param index The index of the element to return.
       * @return The nameParts at the given index.
       */
      public java.lang.String getNameParts(int index) {
        return nameParts_.get(index);
      }
      /**
       * <pre>
       * (Required) a list of name parts for the variable. Must not be empty.
       * </pre>
       *
       * <code>repeated string name_parts = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the nameParts at the given index.
       */
      public com.google.protobuf.ByteString
          getNamePartsBytes(int index) {
        return nameParts_.getByteString(index);
      }
      /**
       * <pre>
       * (Required) a list of name parts for the variable. Must not be empty.
       * </pre>
       *
       * <code>repeated string name_parts = 1;</code>
       * @param index The index to set the value at.
       * @param value The nameParts to set.
       * @return This builder for chaining.
       */
      public Builder setNameParts(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNamePartsIsMutable();
        nameParts_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) a list of name parts for the variable. Must not be empty.
       * </pre>
       *
       * <code>repeated string name_parts = 1;</code>
       * @param value The nameParts to add.
       * @return This builder for chaining.
       */
      public Builder addNameParts(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNamePartsIsMutable();
        nameParts_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) a list of name parts for the variable. Must not be empty.
       * </pre>
       *
       * <code>repeated string name_parts = 1;</code>
       * @param values The nameParts to add.
       * @return This builder for chaining.
       */
      public Builder addAllNameParts(
          java.lang.Iterable<java.lang.String> values) {
        ensureNamePartsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, nameParts_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) a list of name parts for the variable. Must not be empty.
       * </pre>
       *
       * <code>repeated string name_parts = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameParts() {
        nameParts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) a list of name parts for the variable. Must not be empty.
       * </pre>
       *
       * <code>repeated string name_parts = 1;</code>
       * @param value The bytes of the nameParts to add.
       * @return This builder for chaining.
       */
      public Builder addNamePartsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureNamePartsIsMutable();
        nameParts_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.connect.Expression.UnresolvedNamedLambdaVariable)
    }

    // @@protoc_insertion_point(class_scope:spark.connect.Expression.UnresolvedNamedLambdaVariable)
    private static final org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable();
    }

    public static org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UnresolvedNamedLambdaVariable>
        PARSER = new com.google.protobuf.AbstractParser<UnresolvedNamedLambdaVariable>() {
      @java.lang.Override
      public UnresolvedNamedLambdaVariable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UnresolvedNamedLambdaVariable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UnresolvedNamedLambdaVariable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int exprTypeCase_ = 0;
  private java.lang.Object exprType_;
  public enum ExprTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    LITERAL(1),
    UNRESOLVED_ATTRIBUTE(2),
    UNRESOLVED_FUNCTION(3),
    EXPRESSION_STRING(4),
    UNRESOLVED_STAR(5),
    ALIAS(6),
    CAST(7),
    UNRESOLVED_REGEX(8),
    SORT_ORDER(9),
    LAMBDA_FUNCTION(10),
    WINDOW(11),
    UNRESOLVED_EXTRACT_VALUE(12),
    UPDATE_FIELDS(13),
    UNRESOLVED_NAMED_LAMBDA_VARIABLE(14),
    COMMON_INLINE_USER_DEFINED_FUNCTION(15),
    CALL_FUNCTION(16),
    NAMED_ARGUMENT_EXPRESSION(17),
    EXTENSION(999),
    EXPRTYPE_NOT_SET(0);
    private final int value;
    private ExprTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExprTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static ExprTypeCase forNumber(int value) {
      switch (value) {
        case 1: return LITERAL;
        case 2: return UNRESOLVED_ATTRIBUTE;
        case 3: return UNRESOLVED_FUNCTION;
        case 4: return EXPRESSION_STRING;
        case 5: return UNRESOLVED_STAR;
        case 6: return ALIAS;
        case 7: return CAST;
        case 8: return UNRESOLVED_REGEX;
        case 9: return SORT_ORDER;
        case 10: return LAMBDA_FUNCTION;
        case 11: return WINDOW;
        case 12: return UNRESOLVED_EXTRACT_VALUE;
        case 13: return UPDATE_FIELDS;
        case 14: return UNRESOLVED_NAMED_LAMBDA_VARIABLE;
        case 15: return COMMON_INLINE_USER_DEFINED_FUNCTION;
        case 16: return CALL_FUNCTION;
        case 17: return NAMED_ARGUMENT_EXPRESSION;
        case 999: return EXTENSION;
        case 0: return EXPRTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ExprTypeCase
  getExprTypeCase() {
    return ExprTypeCase.forNumber(
        exprTypeCase_);
  }

  public static final int LITERAL_FIELD_NUMBER = 1;
  /**
   * <code>.spark.connect.Expression.Literal literal = 1;</code>
   * @return Whether the literal field is set.
   */
  @java.lang.Override
  public boolean hasLiteral() {
    return exprTypeCase_ == 1;
  }
  /**
   * <code>.spark.connect.Expression.Literal literal = 1;</code>
   * @return The literal.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getLiteral() {
    if (exprTypeCase_ == 1) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.Literal literal = 1;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getLiteralOrBuilder() {
    if (exprTypeCase_ == 1) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance();
  }

  public static final int UNRESOLVED_ATTRIBUTE_FIELD_NUMBER = 2;
  /**
   * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
   * @return Whether the unresolvedAttribute field is set.
   */
  @java.lang.Override
  public boolean hasUnresolvedAttribute() {
    return exprTypeCase_ == 2;
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
   * @return The unresolvedAttribute.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute getUnresolvedAttribute() {
    if (exprTypeCase_ == 2) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttributeOrBuilder getUnresolvedAttributeOrBuilder() {
    if (exprTypeCase_ == 2) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.getDefaultInstance();
  }

  public static final int UNRESOLVED_FUNCTION_FIELD_NUMBER = 3;
  /**
   * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
   * @return Whether the unresolvedFunction field is set.
   */
  @java.lang.Override
  public boolean hasUnresolvedFunction() {
    return exprTypeCase_ == 3;
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
   * @return The unresolvedFunction.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction getUnresolvedFunction() {
    if (exprTypeCase_ == 3) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunctionOrBuilder getUnresolvedFunctionOrBuilder() {
    if (exprTypeCase_ == 3) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.getDefaultInstance();
  }

  public static final int EXPRESSION_STRING_FIELD_NUMBER = 4;
  /**
   * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
   * @return Whether the expressionString field is set.
   */
  @java.lang.Override
  public boolean hasExpressionString() {
    return exprTypeCase_ == 4;
  }
  /**
   * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
   * @return The expressionString.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString getExpressionString() {
    if (exprTypeCase_ == 4) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionStringOrBuilder getExpressionStringOrBuilder() {
    if (exprTypeCase_ == 4) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.getDefaultInstance();
  }

  public static final int UNRESOLVED_STAR_FIELD_NUMBER = 5;
  /**
   * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
   * @return Whether the unresolvedStar field is set.
   */
  @java.lang.Override
  public boolean hasUnresolvedStar() {
    return exprTypeCase_ == 5;
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
   * @return The unresolvedStar.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar getUnresolvedStar() {
    if (exprTypeCase_ == 5) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStarOrBuilder getUnresolvedStarOrBuilder() {
    if (exprTypeCase_ == 5) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.getDefaultInstance();
  }

  public static final int ALIAS_FIELD_NUMBER = 6;
  /**
   * <code>.spark.connect.Expression.Alias alias = 6;</code>
   * @return Whether the alias field is set.
   */
  @java.lang.Override
  public boolean hasAlias() {
    return exprTypeCase_ == 6;
  }
  /**
   * <code>.spark.connect.Expression.Alias alias = 6;</code>
   * @return The alias.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias getAlias() {
    if (exprTypeCase_ == 6) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.Alias alias = 6;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.AliasOrBuilder getAliasOrBuilder() {
    if (exprTypeCase_ == 6) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.getDefaultInstance();
  }

  public static final int CAST_FIELD_NUMBER = 7;
  /**
   * <code>.spark.connect.Expression.Cast cast = 7;</code>
   * @return Whether the cast field is set.
   */
  @java.lang.Override
  public boolean hasCast() {
    return exprTypeCase_ == 7;
  }
  /**
   * <code>.spark.connect.Expression.Cast cast = 7;</code>
   * @return The cast.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast getCast() {
    if (exprTypeCase_ == 7) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.Cast cast = 7;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.CastOrBuilder getCastOrBuilder() {
    if (exprTypeCase_ == 7) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.getDefaultInstance();
  }

  public static final int UNRESOLVED_REGEX_FIELD_NUMBER = 8;
  /**
   * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
   * @return Whether the unresolvedRegex field is set.
   */
  @java.lang.Override
  public boolean hasUnresolvedRegex() {
    return exprTypeCase_ == 8;
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
   * @return The unresolvedRegex.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex getUnresolvedRegex() {
    if (exprTypeCase_ == 8) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegexOrBuilder getUnresolvedRegexOrBuilder() {
    if (exprTypeCase_ == 8) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.getDefaultInstance();
  }

  public static final int SORT_ORDER_FIELD_NUMBER = 9;
  /**
   * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
   * @return Whether the sortOrder field is set.
   */
  @java.lang.Override
  public boolean hasSortOrder() {
    return exprTypeCase_ == 9;
  }
  /**
   * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
   * @return The sortOrder.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder getSortOrder() {
    if (exprTypeCase_ == 9) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder getSortOrderOrBuilder() {
    if (exprTypeCase_ == 9) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance();
  }

  public static final int LAMBDA_FUNCTION_FIELD_NUMBER = 10;
  /**
   * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
   * @return Whether the lambdaFunction field is set.
   */
  @java.lang.Override
  public boolean hasLambdaFunction() {
    return exprTypeCase_ == 10;
  }
  /**
   * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
   * @return The lambdaFunction.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction getLambdaFunction() {
    if (exprTypeCase_ == 10) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunctionOrBuilder getLambdaFunctionOrBuilder() {
    if (exprTypeCase_ == 10) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.getDefaultInstance();
  }

  public static final int WINDOW_FIELD_NUMBER = 11;
  /**
   * <code>.spark.connect.Expression.Window window = 11;</code>
   * @return Whether the window field is set.
   */
  @java.lang.Override
  public boolean hasWindow() {
    return exprTypeCase_ == 11;
  }
  /**
   * <code>.spark.connect.Expression.Window window = 11;</code>
   * @return The window.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window getWindow() {
    if (exprTypeCase_ == 11) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Window) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.Window window = 11;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.WindowOrBuilder getWindowOrBuilder() {
    if (exprTypeCase_ == 11) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Window) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.getDefaultInstance();
  }

  public static final int UNRESOLVED_EXTRACT_VALUE_FIELD_NUMBER = 12;
  /**
   * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
   * @return Whether the unresolvedExtractValue field is set.
   */
  @java.lang.Override
  public boolean hasUnresolvedExtractValue() {
    return exprTypeCase_ == 12;
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
   * @return The unresolvedExtractValue.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue getUnresolvedExtractValue() {
    if (exprTypeCase_ == 12) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValueOrBuilder getUnresolvedExtractValueOrBuilder() {
    if (exprTypeCase_ == 12) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.getDefaultInstance();
  }

  public static final int UPDATE_FIELDS_FIELD_NUMBER = 13;
  /**
   * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
   * @return Whether the updateFields field is set.
   */
  @java.lang.Override
  public boolean hasUpdateFields() {
    return exprTypeCase_ == 13;
  }
  /**
   * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
   * @return The updateFields.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields getUpdateFields() {
    if (exprTypeCase_ == 13) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFieldsOrBuilder getUpdateFieldsOrBuilder() {
    if (exprTypeCase_ == 13) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.getDefaultInstance();
  }

  public static final int UNRESOLVED_NAMED_LAMBDA_VARIABLE_FIELD_NUMBER = 14;
  /**
   * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
   * @return Whether the unresolvedNamedLambdaVariable field is set.
   */
  @java.lang.Override
  public boolean hasUnresolvedNamedLambdaVariable() {
    return exprTypeCase_ == 14;
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
   * @return The unresolvedNamedLambdaVariable.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable getUnresolvedNamedLambdaVariable() {
    if (exprTypeCase_ == 14) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder getUnresolvedNamedLambdaVariableOrBuilder() {
    if (exprTypeCase_ == 14) {
       return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance();
  }

  public static final int COMMON_INLINE_USER_DEFINED_FUNCTION_FIELD_NUMBER = 15;
  /**
   * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
   * @return Whether the commonInlineUserDefinedFunction field is set.
   */
  @java.lang.Override
  public boolean hasCommonInlineUserDefinedFunction() {
    return exprTypeCase_ == 15;
  }
  /**
   * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
   * @return The commonInlineUserDefinedFunction.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction getCommonInlineUserDefinedFunction() {
    if (exprTypeCase_ == 15) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder getCommonInlineUserDefinedFunctionOrBuilder() {
    if (exprTypeCase_ == 15) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
  }

  public static final int CALL_FUNCTION_FIELD_NUMBER = 16;
  /**
   * <code>.spark.connect.CallFunction call_function = 16;</code>
   * @return Whether the callFunction field is set.
   */
  @java.lang.Override
  public boolean hasCallFunction() {
    return exprTypeCase_ == 16;
  }
  /**
   * <code>.spark.connect.CallFunction call_function = 16;</code>
   * @return The callFunction.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CallFunction getCallFunction() {
    if (exprTypeCase_ == 16) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CallFunction) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CallFunction.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CallFunction call_function = 16;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CallFunctionOrBuilder getCallFunctionOrBuilder() {
    if (exprTypeCase_ == 16) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CallFunction) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CallFunction.getDefaultInstance();
  }

  public static final int NAMED_ARGUMENT_EXPRESSION_FIELD_NUMBER = 17;
  /**
   * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
   * @return Whether the namedArgumentExpression field is set.
   */
  @java.lang.Override
  public boolean hasNamedArgumentExpression() {
    return exprTypeCase_ == 17;
  }
  /**
   * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
   * @return The namedArgumentExpression.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression getNamedArgumentExpression() {
    if (exprTypeCase_ == 17) {
       return (org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpressionOrBuilder getNamedArgumentExpressionOrBuilder() {
    if (exprTypeCase_ == 17) {
       return (org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression) exprType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.getDefaultInstance();
  }

  public static final int EXTENSION_FIELD_NUMBER = 999;
  /**
   * <pre>
   * This field is used to mark extensions to the protocol. When plugins generate arbitrary
   * relations they can add them here. During the planning the correct resolution is done.
   * </pre>
   *
   * <code>.google.protobuf.Any extension = 999;</code>
   * @return Whether the extension field is set.
   */
  @java.lang.Override
  public boolean hasExtension() {
    return exprTypeCase_ == 999;
  }
  /**
   * <pre>
   * This field is used to mark extensions to the protocol. When plugins generate arbitrary
   * relations they can add them here. During the planning the correct resolution is done.
   * </pre>
   *
   * <code>.google.protobuf.Any extension = 999;</code>
   * @return The extension.
   */
  @java.lang.Override
  public com.google.protobuf.Any getExtension() {
    if (exprTypeCase_ == 999) {
       return (com.google.protobuf.Any) exprType_;
    }
    return com.google.protobuf.Any.getDefaultInstance();
  }
  /**
   * <pre>
   * This field is used to mark extensions to the protocol. When plugins generate arbitrary
   * relations they can add them here. During the planning the correct resolution is done.
   * </pre>
   *
   * <code>.google.protobuf.Any extension = 999;</code>
   */
  @java.lang.Override
  public com.google.protobuf.AnyOrBuilder getExtensionOrBuilder() {
    if (exprTypeCase_ == 999) {
       return (com.google.protobuf.Any) exprType_;
    }
    return com.google.protobuf.Any.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (exprTypeCase_ == 1) {
      output.writeMessage(1, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal) exprType_);
    }
    if (exprTypeCase_ == 2) {
      output.writeMessage(2, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute) exprType_);
    }
    if (exprTypeCase_ == 3) {
      output.writeMessage(3, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction) exprType_);
    }
    if (exprTypeCase_ == 4) {
      output.writeMessage(4, (org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString) exprType_);
    }
    if (exprTypeCase_ == 5) {
      output.writeMessage(5, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar) exprType_);
    }
    if (exprTypeCase_ == 6) {
      output.writeMessage(6, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias) exprType_);
    }
    if (exprTypeCase_ == 7) {
      output.writeMessage(7, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast) exprType_);
    }
    if (exprTypeCase_ == 8) {
      output.writeMessage(8, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex) exprType_);
    }
    if (exprTypeCase_ == 9) {
      output.writeMessage(9, (org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder) exprType_);
    }
    if (exprTypeCase_ == 10) {
      output.writeMessage(10, (org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction) exprType_);
    }
    if (exprTypeCase_ == 11) {
      output.writeMessage(11, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Window) exprType_);
    }
    if (exprTypeCase_ == 12) {
      output.writeMessage(12, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue) exprType_);
    }
    if (exprTypeCase_ == 13) {
      output.writeMessage(13, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields) exprType_);
    }
    if (exprTypeCase_ == 14) {
      output.writeMessage(14, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable) exprType_);
    }
    if (exprTypeCase_ == 15) {
      output.writeMessage(15, (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) exprType_);
    }
    if (exprTypeCase_ == 16) {
      output.writeMessage(16, (org.apache.kyuubi.engine.spark.connect.proto.CallFunction) exprType_);
    }
    if (exprTypeCase_ == 17) {
      output.writeMessage(17, (org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression) exprType_);
    }
    if (exprTypeCase_ == 999) {
      output.writeMessage(999, (com.google.protobuf.Any) exprType_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (exprTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal) exprType_);
    }
    if (exprTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute) exprType_);
    }
    if (exprTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction) exprType_);
    }
    if (exprTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString) exprType_);
    }
    if (exprTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar) exprType_);
    }
    if (exprTypeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias) exprType_);
    }
    if (exprTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast) exprType_);
    }
    if (exprTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex) exprType_);
    }
    if (exprTypeCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder) exprType_);
    }
    if (exprTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction) exprType_);
    }
    if (exprTypeCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (org.apache.kyuubi.engine.spark.connect.proto.Expression.Window) exprType_);
    }
    if (exprTypeCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue) exprType_);
    }
    if (exprTypeCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields) exprType_);
    }
    if (exprTypeCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable) exprType_);
    }
    if (exprTypeCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) exprType_);
    }
    if (exprTypeCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (org.apache.kyuubi.engine.spark.connect.proto.CallFunction) exprType_);
    }
    if (exprTypeCase_ == 17) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, (org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression) exprType_);
    }
    if (exprTypeCase_ == 999) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(999, (com.google.protobuf.Any) exprType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.proto.Expression other = (org.apache.kyuubi.engine.spark.connect.proto.Expression) obj;

    if (!getExprTypeCase().equals(other.getExprTypeCase())) return false;
    switch (exprTypeCase_) {
      case 1:
        if (!getLiteral()
            .equals(other.getLiteral())) return false;
        break;
      case 2:
        if (!getUnresolvedAttribute()
            .equals(other.getUnresolvedAttribute())) return false;
        break;
      case 3:
        if (!getUnresolvedFunction()
            .equals(other.getUnresolvedFunction())) return false;
        break;
      case 4:
        if (!getExpressionString()
            .equals(other.getExpressionString())) return false;
        break;
      case 5:
        if (!getUnresolvedStar()
            .equals(other.getUnresolvedStar())) return false;
        break;
      case 6:
        if (!getAlias()
            .equals(other.getAlias())) return false;
        break;
      case 7:
        if (!getCast()
            .equals(other.getCast())) return false;
        break;
      case 8:
        if (!getUnresolvedRegex()
            .equals(other.getUnresolvedRegex())) return false;
        break;
      case 9:
        if (!getSortOrder()
            .equals(other.getSortOrder())) return false;
        break;
      case 10:
        if (!getLambdaFunction()
            .equals(other.getLambdaFunction())) return false;
        break;
      case 11:
        if (!getWindow()
            .equals(other.getWindow())) return false;
        break;
      case 12:
        if (!getUnresolvedExtractValue()
            .equals(other.getUnresolvedExtractValue())) return false;
        break;
      case 13:
        if (!getUpdateFields()
            .equals(other.getUpdateFields())) return false;
        break;
      case 14:
        if (!getUnresolvedNamedLambdaVariable()
            .equals(other.getUnresolvedNamedLambdaVariable())) return false;
        break;
      case 15:
        if (!getCommonInlineUserDefinedFunction()
            .equals(other.getCommonInlineUserDefinedFunction())) return false;
        break;
      case 16:
        if (!getCallFunction()
            .equals(other.getCallFunction())) return false;
        break;
      case 17:
        if (!getNamedArgumentExpression()
            .equals(other.getNamedArgumentExpression())) return false;
        break;
      case 999:
        if (!getExtension()
            .equals(other.getExtension())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (exprTypeCase_) {
      case 1:
        hash = (37 * hash) + LITERAL_FIELD_NUMBER;
        hash = (53 * hash) + getLiteral().hashCode();
        break;
      case 2:
        hash = (37 * hash) + UNRESOLVED_ATTRIBUTE_FIELD_NUMBER;
        hash = (53 * hash) + getUnresolvedAttribute().hashCode();
        break;
      case 3:
        hash = (37 * hash) + UNRESOLVED_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getUnresolvedFunction().hashCode();
        break;
      case 4:
        hash = (37 * hash) + EXPRESSION_STRING_FIELD_NUMBER;
        hash = (53 * hash) + getExpressionString().hashCode();
        break;
      case 5:
        hash = (37 * hash) + UNRESOLVED_STAR_FIELD_NUMBER;
        hash = (53 * hash) + getUnresolvedStar().hashCode();
        break;
      case 6:
        hash = (37 * hash) + ALIAS_FIELD_NUMBER;
        hash = (53 * hash) + getAlias().hashCode();
        break;
      case 7:
        hash = (37 * hash) + CAST_FIELD_NUMBER;
        hash = (53 * hash) + getCast().hashCode();
        break;
      case 8:
        hash = (37 * hash) + UNRESOLVED_REGEX_FIELD_NUMBER;
        hash = (53 * hash) + getUnresolvedRegex().hashCode();
        break;
      case 9:
        hash = (37 * hash) + SORT_ORDER_FIELD_NUMBER;
        hash = (53 * hash) + getSortOrder().hashCode();
        break;
      case 10:
        hash = (37 * hash) + LAMBDA_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getLambdaFunction().hashCode();
        break;
      case 11:
        hash = (37 * hash) + WINDOW_FIELD_NUMBER;
        hash = (53 * hash) + getWindow().hashCode();
        break;
      case 12:
        hash = (37 * hash) + UNRESOLVED_EXTRACT_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getUnresolvedExtractValue().hashCode();
        break;
      case 13:
        hash = (37 * hash) + UPDATE_FIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getUpdateFields().hashCode();
        break;
      case 14:
        hash = (37 * hash) + UNRESOLVED_NAMED_LAMBDA_VARIABLE_FIELD_NUMBER;
        hash = (53 * hash) + getUnresolvedNamedLambdaVariable().hashCode();
        break;
      case 15:
        hash = (37 * hash) + COMMON_INLINE_USER_DEFINED_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getCommonInlineUserDefinedFunction().hashCode();
        break;
      case 16:
        hash = (37 * hash) + CALL_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getCallFunction().hashCode();
        break;
      case 17:
        hash = (37 * hash) + NAMED_ARGUMENT_EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getNamedArgumentExpression().hashCode();
        break;
      case 999:
        hash = (37 * hash) + EXTENSION_FIELD_NUMBER;
        hash = (53 * hash) + getExtension().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Expression parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Expression prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Expression used to refer to fields, functions and similar. This can be used everywhere
   * expressions in SQL appear.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Expression}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.Expression)
      org.apache.kyuubi.engine.spark.connect.proto.ExpressionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Expression.class, org.apache.kyuubi.engine.spark.connect.proto.Expression.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.proto.Expression.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (literalBuilder_ != null) {
        literalBuilder_.clear();
      }
      if (unresolvedAttributeBuilder_ != null) {
        unresolvedAttributeBuilder_.clear();
      }
      if (unresolvedFunctionBuilder_ != null) {
        unresolvedFunctionBuilder_.clear();
      }
      if (expressionStringBuilder_ != null) {
        expressionStringBuilder_.clear();
      }
      if (unresolvedStarBuilder_ != null) {
        unresolvedStarBuilder_.clear();
      }
      if (aliasBuilder_ != null) {
        aliasBuilder_.clear();
      }
      if (castBuilder_ != null) {
        castBuilder_.clear();
      }
      if (unresolvedRegexBuilder_ != null) {
        unresolvedRegexBuilder_.clear();
      }
      if (sortOrderBuilder_ != null) {
        sortOrderBuilder_.clear();
      }
      if (lambdaFunctionBuilder_ != null) {
        lambdaFunctionBuilder_.clear();
      }
      if (windowBuilder_ != null) {
        windowBuilder_.clear();
      }
      if (unresolvedExtractValueBuilder_ != null) {
        unresolvedExtractValueBuilder_.clear();
      }
      if (updateFieldsBuilder_ != null) {
        updateFieldsBuilder_.clear();
      }
      if (unresolvedNamedLambdaVariableBuilder_ != null) {
        unresolvedNamedLambdaVariableBuilder_.clear();
      }
      if (commonInlineUserDefinedFunctionBuilder_ != null) {
        commonInlineUserDefinedFunctionBuilder_.clear();
      }
      if (callFunctionBuilder_ != null) {
        callFunctionBuilder_.clear();
      }
      if (namedArgumentExpressionBuilder_ != null) {
        namedArgumentExpressionBuilder_.clear();
      }
      if (extensionBuilder_ != null) {
        extensionBuilder_.clear();
      }
      exprTypeCase_ = 0;
      exprType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expressions.internal_static_spark_connect_Expression_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression build() {
      org.apache.kyuubi.engine.spark.connect.proto.Expression result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression buildPartial() {
      org.apache.kyuubi.engine.spark.connect.proto.Expression result = new org.apache.kyuubi.engine.spark.connect.proto.Expression(this);
      if (exprTypeCase_ == 1) {
        if (literalBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = literalBuilder_.build();
        }
      }
      if (exprTypeCase_ == 2) {
        if (unresolvedAttributeBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = unresolvedAttributeBuilder_.build();
        }
      }
      if (exprTypeCase_ == 3) {
        if (unresolvedFunctionBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = unresolvedFunctionBuilder_.build();
        }
      }
      if (exprTypeCase_ == 4) {
        if (expressionStringBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = expressionStringBuilder_.build();
        }
      }
      if (exprTypeCase_ == 5) {
        if (unresolvedStarBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = unresolvedStarBuilder_.build();
        }
      }
      if (exprTypeCase_ == 6) {
        if (aliasBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = aliasBuilder_.build();
        }
      }
      if (exprTypeCase_ == 7) {
        if (castBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = castBuilder_.build();
        }
      }
      if (exprTypeCase_ == 8) {
        if (unresolvedRegexBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = unresolvedRegexBuilder_.build();
        }
      }
      if (exprTypeCase_ == 9) {
        if (sortOrderBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = sortOrderBuilder_.build();
        }
      }
      if (exprTypeCase_ == 10) {
        if (lambdaFunctionBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = lambdaFunctionBuilder_.build();
        }
      }
      if (exprTypeCase_ == 11) {
        if (windowBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = windowBuilder_.build();
        }
      }
      if (exprTypeCase_ == 12) {
        if (unresolvedExtractValueBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = unresolvedExtractValueBuilder_.build();
        }
      }
      if (exprTypeCase_ == 13) {
        if (updateFieldsBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = updateFieldsBuilder_.build();
        }
      }
      if (exprTypeCase_ == 14) {
        if (unresolvedNamedLambdaVariableBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = unresolvedNamedLambdaVariableBuilder_.build();
        }
      }
      if (exprTypeCase_ == 15) {
        if (commonInlineUserDefinedFunctionBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = commonInlineUserDefinedFunctionBuilder_.build();
        }
      }
      if (exprTypeCase_ == 16) {
        if (callFunctionBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = callFunctionBuilder_.build();
        }
      }
      if (exprTypeCase_ == 17) {
        if (namedArgumentExpressionBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = namedArgumentExpressionBuilder_.build();
        }
      }
      if (exprTypeCase_ == 999) {
        if (extensionBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = extensionBuilder_.build();
        }
      }
      result.exprTypeCase_ = exprTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Expression) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Expression)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Expression other) {
      if (other == org.apache.kyuubi.engine.spark.connect.proto.Expression.getDefaultInstance()) return this;
      switch (other.getExprTypeCase()) {
        case LITERAL: {
          mergeLiteral(other.getLiteral());
          break;
        }
        case UNRESOLVED_ATTRIBUTE: {
          mergeUnresolvedAttribute(other.getUnresolvedAttribute());
          break;
        }
        case UNRESOLVED_FUNCTION: {
          mergeUnresolvedFunction(other.getUnresolvedFunction());
          break;
        }
        case EXPRESSION_STRING: {
          mergeExpressionString(other.getExpressionString());
          break;
        }
        case UNRESOLVED_STAR: {
          mergeUnresolvedStar(other.getUnresolvedStar());
          break;
        }
        case ALIAS: {
          mergeAlias(other.getAlias());
          break;
        }
        case CAST: {
          mergeCast(other.getCast());
          break;
        }
        case UNRESOLVED_REGEX: {
          mergeUnresolvedRegex(other.getUnresolvedRegex());
          break;
        }
        case SORT_ORDER: {
          mergeSortOrder(other.getSortOrder());
          break;
        }
        case LAMBDA_FUNCTION: {
          mergeLambdaFunction(other.getLambdaFunction());
          break;
        }
        case WINDOW: {
          mergeWindow(other.getWindow());
          break;
        }
        case UNRESOLVED_EXTRACT_VALUE: {
          mergeUnresolvedExtractValue(other.getUnresolvedExtractValue());
          break;
        }
        case UPDATE_FIELDS: {
          mergeUpdateFields(other.getUpdateFields());
          break;
        }
        case UNRESOLVED_NAMED_LAMBDA_VARIABLE: {
          mergeUnresolvedNamedLambdaVariable(other.getUnresolvedNamedLambdaVariable());
          break;
        }
        case COMMON_INLINE_USER_DEFINED_FUNCTION: {
          mergeCommonInlineUserDefinedFunction(other.getCommonInlineUserDefinedFunction());
          break;
        }
        case CALL_FUNCTION: {
          mergeCallFunction(other.getCallFunction());
          break;
        }
        case NAMED_ARGUMENT_EXPRESSION: {
          mergeNamedArgumentExpression(other.getNamedArgumentExpression());
          break;
        }
        case EXTENSION: {
          mergeExtension(other.getExtension());
          break;
        }
        case EXPRTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getLiteralFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getUnresolvedAttributeFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getUnresolvedFunctionFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getExpressionStringFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getUnresolvedStarFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getAliasFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getCastFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 7;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getUnresolvedRegexFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 8;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getSortOrderFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 9;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getLambdaFunctionFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 10;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getWindowFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 11;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getUnresolvedExtractValueFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 12;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getUpdateFieldsFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 13;
              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getUnresolvedNamedLambdaVariableFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 14;
              break;
            } // case 114
            case 122: {
              input.readMessage(
                  getCommonInlineUserDefinedFunctionFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 15;
              break;
            } // case 122
            case 130: {
              input.readMessage(
                  getCallFunctionFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 16;
              break;
            } // case 130
            case 138: {
              input.readMessage(
                  getNamedArgumentExpressionFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 17;
              break;
            } // case 138
            case 7994: {
              input.readMessage(
                  getExtensionFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 999;
              break;
            } // case 7994
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int exprTypeCase_ = 0;
    private java.lang.Object exprType_;
    public ExprTypeCase
        getExprTypeCase() {
      return ExprTypeCase.forNumber(
          exprTypeCase_);
    }

    public Builder clearExprType() {
      exprTypeCase_ = 0;
      exprType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> literalBuilder_;
    /**
     * <code>.spark.connect.Expression.Literal literal = 1;</code>
     * @return Whether the literal field is set.
     */
    @java.lang.Override
    public boolean hasLiteral() {
      return exprTypeCase_ == 1;
    }
    /**
     * <code>.spark.connect.Expression.Literal literal = 1;</code>
     * @return The literal.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal getLiteral() {
      if (literalBuilder_ == null) {
        if (exprTypeCase_ == 1) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 1) {
          return literalBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.Literal literal = 1;</code>
     */
    public Builder setLiteral(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
      if (literalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        literalBuilder_.setMessage(value);
      }
      exprTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Literal literal = 1;</code>
     */
    public Builder setLiteral(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder builderForValue) {
      if (literalBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        literalBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Literal literal = 1;</code>
     */
    public Builder mergeLiteral(org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal value) {
      if (literalBuilder_ == null) {
        if (exprTypeCase_ == 1 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 1) {
          literalBuilder_.mergeFrom(value);
        } else {
          literalBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Literal literal = 1;</code>
     */
    public Builder clearLiteral() {
      if (literalBuilder_ == null) {
        if (exprTypeCase_ == 1) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 1) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        literalBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Literal literal = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder getLiteralBuilder() {
      return getLiteralFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.Literal literal = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder getLiteralOrBuilder() {
      if ((exprTypeCase_ == 1) && (literalBuilder_ != null)) {
        return literalBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 1) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.Literal literal = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder> 
        getLiteralFieldBuilder() {
      if (literalBuilder_ == null) {
        if (!(exprTypeCase_ == 1)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.getDefaultInstance();
        }
        literalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal, org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LiteralOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.Literal) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 1;
      onChanged();;
      return literalBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttributeOrBuilder> unresolvedAttributeBuilder_;
    /**
     * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
     * @return Whether the unresolvedAttribute field is set.
     */
    @java.lang.Override
    public boolean hasUnresolvedAttribute() {
      return exprTypeCase_ == 2;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
     * @return The unresolvedAttribute.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute getUnresolvedAttribute() {
      if (unresolvedAttributeBuilder_ == null) {
        if (exprTypeCase_ == 2) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 2) {
          return unresolvedAttributeBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
     */
    public Builder setUnresolvedAttribute(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute value) {
      if (unresolvedAttributeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        unresolvedAttributeBuilder_.setMessage(value);
      }
      exprTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
     */
    public Builder setUnresolvedAttribute(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.Builder builderForValue) {
      if (unresolvedAttributeBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        unresolvedAttributeBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
     */
    public Builder mergeUnresolvedAttribute(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute value) {
      if (unresolvedAttributeBuilder_ == null) {
        if (exprTypeCase_ == 2 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 2) {
          unresolvedAttributeBuilder_.mergeFrom(value);
        } else {
          unresolvedAttributeBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
     */
    public Builder clearUnresolvedAttribute() {
      if (unresolvedAttributeBuilder_ == null) {
        if (exprTypeCase_ == 2) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 2) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        unresolvedAttributeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.Builder getUnresolvedAttributeBuilder() {
      return getUnresolvedAttributeFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttributeOrBuilder getUnresolvedAttributeOrBuilder() {
      if ((exprTypeCase_ == 2) && (unresolvedAttributeBuilder_ != null)) {
        return unresolvedAttributeBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 2) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedAttribute unresolved_attribute = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttributeOrBuilder> 
        getUnresolvedAttributeFieldBuilder() {
      if (unresolvedAttributeBuilder_ == null) {
        if (!(exprTypeCase_ == 2)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.getDefaultInstance();
        }
        unresolvedAttributeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttributeOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedAttribute) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 2;
      onChanged();;
      return unresolvedAttributeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunctionOrBuilder> unresolvedFunctionBuilder_;
    /**
     * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
     * @return Whether the unresolvedFunction field is set.
     */
    @java.lang.Override
    public boolean hasUnresolvedFunction() {
      return exprTypeCase_ == 3;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
     * @return The unresolvedFunction.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction getUnresolvedFunction() {
      if (unresolvedFunctionBuilder_ == null) {
        if (exprTypeCase_ == 3) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 3) {
          return unresolvedFunctionBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
     */
    public Builder setUnresolvedFunction(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction value) {
      if (unresolvedFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        unresolvedFunctionBuilder_.setMessage(value);
      }
      exprTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
     */
    public Builder setUnresolvedFunction(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.Builder builderForValue) {
      if (unresolvedFunctionBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        unresolvedFunctionBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
     */
    public Builder mergeUnresolvedFunction(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction value) {
      if (unresolvedFunctionBuilder_ == null) {
        if (exprTypeCase_ == 3 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 3) {
          unresolvedFunctionBuilder_.mergeFrom(value);
        } else {
          unresolvedFunctionBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
     */
    public Builder clearUnresolvedFunction() {
      if (unresolvedFunctionBuilder_ == null) {
        if (exprTypeCase_ == 3) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 3) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        unresolvedFunctionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.Builder getUnresolvedFunctionBuilder() {
      return getUnresolvedFunctionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunctionOrBuilder getUnresolvedFunctionOrBuilder() {
      if ((exprTypeCase_ == 3) && (unresolvedFunctionBuilder_ != null)) {
        return unresolvedFunctionBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 3) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedFunction unresolved_function = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunctionOrBuilder> 
        getUnresolvedFunctionFieldBuilder() {
      if (unresolvedFunctionBuilder_ == null) {
        if (!(exprTypeCase_ == 3)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.getDefaultInstance();
        }
        unresolvedFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunctionOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedFunction) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 3;
      onChanged();;
      return unresolvedFunctionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString, org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionStringOrBuilder> expressionStringBuilder_;
    /**
     * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
     * @return Whether the expressionString field is set.
     */
    @java.lang.Override
    public boolean hasExpressionString() {
      return exprTypeCase_ == 4;
    }
    /**
     * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
     * @return The expressionString.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString getExpressionString() {
      if (expressionStringBuilder_ == null) {
        if (exprTypeCase_ == 4) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 4) {
          return expressionStringBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
     */
    public Builder setExpressionString(org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString value) {
      if (expressionStringBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        expressionStringBuilder_.setMessage(value);
      }
      exprTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
     */
    public Builder setExpressionString(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.Builder builderForValue) {
      if (expressionStringBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        expressionStringBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
     */
    public Builder mergeExpressionString(org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString value) {
      if (expressionStringBuilder_ == null) {
        if (exprTypeCase_ == 4 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 4) {
          expressionStringBuilder_.mergeFrom(value);
        } else {
          expressionStringBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
     */
    public Builder clearExpressionString() {
      if (expressionStringBuilder_ == null) {
        if (exprTypeCase_ == 4) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 4) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        expressionStringBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.Builder getExpressionStringBuilder() {
      return getExpressionStringFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionStringOrBuilder getExpressionStringOrBuilder() {
      if ((exprTypeCase_ == 4) && (expressionStringBuilder_ != null)) {
        return expressionStringBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 4) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.ExpressionString expression_string = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString, org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionStringOrBuilder> 
        getExpressionStringFieldBuilder() {
      if (expressionStringBuilder_ == null) {
        if (!(exprTypeCase_ == 4)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.getDefaultInstance();
        }
        expressionStringBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString, org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionStringOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.ExpressionString) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 4;
      onChanged();;
      return expressionStringBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStarOrBuilder> unresolvedStarBuilder_;
    /**
     * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
     * @return Whether the unresolvedStar field is set.
     */
    @java.lang.Override
    public boolean hasUnresolvedStar() {
      return exprTypeCase_ == 5;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
     * @return The unresolvedStar.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar getUnresolvedStar() {
      if (unresolvedStarBuilder_ == null) {
        if (exprTypeCase_ == 5) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 5) {
          return unresolvedStarBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
     */
    public Builder setUnresolvedStar(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar value) {
      if (unresolvedStarBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        unresolvedStarBuilder_.setMessage(value);
      }
      exprTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
     */
    public Builder setUnresolvedStar(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.Builder builderForValue) {
      if (unresolvedStarBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        unresolvedStarBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
     */
    public Builder mergeUnresolvedStar(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar value) {
      if (unresolvedStarBuilder_ == null) {
        if (exprTypeCase_ == 5 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 5) {
          unresolvedStarBuilder_.mergeFrom(value);
        } else {
          unresolvedStarBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
     */
    public Builder clearUnresolvedStar() {
      if (unresolvedStarBuilder_ == null) {
        if (exprTypeCase_ == 5) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 5) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        unresolvedStarBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.Builder getUnresolvedStarBuilder() {
      return getUnresolvedStarFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStarOrBuilder getUnresolvedStarOrBuilder() {
      if ((exprTypeCase_ == 5) && (unresolvedStarBuilder_ != null)) {
        return unresolvedStarBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 5) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedStar unresolved_star = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStarOrBuilder> 
        getUnresolvedStarFieldBuilder() {
      if (unresolvedStarBuilder_ == null) {
        if (!(exprTypeCase_ == 5)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.getDefaultInstance();
        }
        unresolvedStarBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStarOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedStar) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 5;
      onChanged();;
      return unresolvedStarBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias, org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.AliasOrBuilder> aliasBuilder_;
    /**
     * <code>.spark.connect.Expression.Alias alias = 6;</code>
     * @return Whether the alias field is set.
     */
    @java.lang.Override
    public boolean hasAlias() {
      return exprTypeCase_ == 6;
    }
    /**
     * <code>.spark.connect.Expression.Alias alias = 6;</code>
     * @return The alias.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias getAlias() {
      if (aliasBuilder_ == null) {
        if (exprTypeCase_ == 6) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 6) {
          return aliasBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.Alias alias = 6;</code>
     */
    public Builder setAlias(org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias value) {
      if (aliasBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        aliasBuilder_.setMessage(value);
      }
      exprTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Alias alias = 6;</code>
     */
    public Builder setAlias(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.Builder builderForValue) {
      if (aliasBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        aliasBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Alias alias = 6;</code>
     */
    public Builder mergeAlias(org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias value) {
      if (aliasBuilder_ == null) {
        if (exprTypeCase_ == 6 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 6) {
          aliasBuilder_.mergeFrom(value);
        } else {
          aliasBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Alias alias = 6;</code>
     */
    public Builder clearAlias() {
      if (aliasBuilder_ == null) {
        if (exprTypeCase_ == 6) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 6) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        aliasBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Alias alias = 6;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.Builder getAliasBuilder() {
      return getAliasFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.Alias alias = 6;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.AliasOrBuilder getAliasOrBuilder() {
      if ((exprTypeCase_ == 6) && (aliasBuilder_ != null)) {
        return aliasBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 6) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.Alias alias = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias, org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.AliasOrBuilder> 
        getAliasFieldBuilder() {
      if (aliasBuilder_ == null) {
        if (!(exprTypeCase_ == 6)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.getDefaultInstance();
        }
        aliasBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias, org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.AliasOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.Alias) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 6;
      onChanged();;
      return aliasBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast, org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.CastOrBuilder> castBuilder_;
    /**
     * <code>.spark.connect.Expression.Cast cast = 7;</code>
     * @return Whether the cast field is set.
     */
    @java.lang.Override
    public boolean hasCast() {
      return exprTypeCase_ == 7;
    }
    /**
     * <code>.spark.connect.Expression.Cast cast = 7;</code>
     * @return The cast.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast getCast() {
      if (castBuilder_ == null) {
        if (exprTypeCase_ == 7) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 7) {
          return castBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.Cast cast = 7;</code>
     */
    public Builder setCast(org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast value) {
      if (castBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        castBuilder_.setMessage(value);
      }
      exprTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Cast cast = 7;</code>
     */
    public Builder setCast(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.Builder builderForValue) {
      if (castBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        castBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Cast cast = 7;</code>
     */
    public Builder mergeCast(org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast value) {
      if (castBuilder_ == null) {
        if (exprTypeCase_ == 7 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 7) {
          castBuilder_.mergeFrom(value);
        } else {
          castBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Cast cast = 7;</code>
     */
    public Builder clearCast() {
      if (castBuilder_ == null) {
        if (exprTypeCase_ == 7) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 7) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        castBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Cast cast = 7;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.Builder getCastBuilder() {
      return getCastFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.Cast cast = 7;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.CastOrBuilder getCastOrBuilder() {
      if ((exprTypeCase_ == 7) && (castBuilder_ != null)) {
        return castBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 7) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.Cast cast = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast, org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.CastOrBuilder> 
        getCastFieldBuilder() {
      if (castBuilder_ == null) {
        if (!(exprTypeCase_ == 7)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.getDefaultInstance();
        }
        castBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast, org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.CastOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.Cast) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 7;
      onChanged();;
      return castBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegexOrBuilder> unresolvedRegexBuilder_;
    /**
     * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
     * @return Whether the unresolvedRegex field is set.
     */
    @java.lang.Override
    public boolean hasUnresolvedRegex() {
      return exprTypeCase_ == 8;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
     * @return The unresolvedRegex.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex getUnresolvedRegex() {
      if (unresolvedRegexBuilder_ == null) {
        if (exprTypeCase_ == 8) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 8) {
          return unresolvedRegexBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
     */
    public Builder setUnresolvedRegex(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex value) {
      if (unresolvedRegexBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        unresolvedRegexBuilder_.setMessage(value);
      }
      exprTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
     */
    public Builder setUnresolvedRegex(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.Builder builderForValue) {
      if (unresolvedRegexBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        unresolvedRegexBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
     */
    public Builder mergeUnresolvedRegex(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex value) {
      if (unresolvedRegexBuilder_ == null) {
        if (exprTypeCase_ == 8 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 8) {
          unresolvedRegexBuilder_.mergeFrom(value);
        } else {
          unresolvedRegexBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
     */
    public Builder clearUnresolvedRegex() {
      if (unresolvedRegexBuilder_ == null) {
        if (exprTypeCase_ == 8) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 8) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        unresolvedRegexBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.Builder getUnresolvedRegexBuilder() {
      return getUnresolvedRegexFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegexOrBuilder getUnresolvedRegexOrBuilder() {
      if ((exprTypeCase_ == 8) && (unresolvedRegexBuilder_ != null)) {
        return unresolvedRegexBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 8) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedRegex unresolved_regex = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegexOrBuilder> 
        getUnresolvedRegexFieldBuilder() {
      if (unresolvedRegexBuilder_ == null) {
        if (!(exprTypeCase_ == 8)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.getDefaultInstance();
        }
        unresolvedRegexBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegexOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedRegex) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 8;
      onChanged();;
      return unresolvedRegexBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder> sortOrderBuilder_;
    /**
     * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
     * @return Whether the sortOrder field is set.
     */
    @java.lang.Override
    public boolean hasSortOrder() {
      return exprTypeCase_ == 9;
    }
    /**
     * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
     * @return The sortOrder.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder getSortOrder() {
      if (sortOrderBuilder_ == null) {
        if (exprTypeCase_ == 9) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 9) {
          return sortOrderBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
     */
    public Builder setSortOrder(org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder value) {
      if (sortOrderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        sortOrderBuilder_.setMessage(value);
      }
      exprTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
     */
    public Builder setSortOrder(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder builderForValue) {
      if (sortOrderBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        sortOrderBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
     */
    public Builder mergeSortOrder(org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder value) {
      if (sortOrderBuilder_ == null) {
        if (exprTypeCase_ == 9 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 9) {
          sortOrderBuilder_.mergeFrom(value);
        } else {
          sortOrderBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
     */
    public Builder clearSortOrder() {
      if (sortOrderBuilder_ == null) {
        if (exprTypeCase_ == 9) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 9) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        sortOrderBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder getSortOrderBuilder() {
      return getSortOrderFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder getSortOrderOrBuilder() {
      if ((exprTypeCase_ == 9) && (sortOrderBuilder_ != null)) {
        return sortOrderBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 9) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.SortOrder sort_order = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder> 
        getSortOrderFieldBuilder() {
      if (sortOrderBuilder_ == null) {
        if (!(exprTypeCase_ == 9)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.getDefaultInstance();
        }
        sortOrderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrderOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.SortOrder) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 9;
      onChanged();;
      return sortOrderBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction, org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunctionOrBuilder> lambdaFunctionBuilder_;
    /**
     * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
     * @return Whether the lambdaFunction field is set.
     */
    @java.lang.Override
    public boolean hasLambdaFunction() {
      return exprTypeCase_ == 10;
    }
    /**
     * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
     * @return The lambdaFunction.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction getLambdaFunction() {
      if (lambdaFunctionBuilder_ == null) {
        if (exprTypeCase_ == 10) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 10) {
          return lambdaFunctionBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
     */
    public Builder setLambdaFunction(org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction value) {
      if (lambdaFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        lambdaFunctionBuilder_.setMessage(value);
      }
      exprTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
     */
    public Builder setLambdaFunction(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.Builder builderForValue) {
      if (lambdaFunctionBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        lambdaFunctionBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
     */
    public Builder mergeLambdaFunction(org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction value) {
      if (lambdaFunctionBuilder_ == null) {
        if (exprTypeCase_ == 10 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 10) {
          lambdaFunctionBuilder_.mergeFrom(value);
        } else {
          lambdaFunctionBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
     */
    public Builder clearLambdaFunction() {
      if (lambdaFunctionBuilder_ == null) {
        if (exprTypeCase_ == 10) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 10) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        lambdaFunctionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.Builder getLambdaFunctionBuilder() {
      return getLambdaFunctionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunctionOrBuilder getLambdaFunctionOrBuilder() {
      if ((exprTypeCase_ == 10) && (lambdaFunctionBuilder_ != null)) {
        return lambdaFunctionBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 10) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.LambdaFunction lambda_function = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction, org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunctionOrBuilder> 
        getLambdaFunctionFieldBuilder() {
      if (lambdaFunctionBuilder_ == null) {
        if (!(exprTypeCase_ == 10)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.getDefaultInstance();
        }
        lambdaFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction, org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunctionOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.LambdaFunction) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 10;
      onChanged();;
      return lambdaFunctionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Window, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.WindowOrBuilder> windowBuilder_;
    /**
     * <code>.spark.connect.Expression.Window window = 11;</code>
     * @return Whether the window field is set.
     */
    @java.lang.Override
    public boolean hasWindow() {
      return exprTypeCase_ == 11;
    }
    /**
     * <code>.spark.connect.Expression.Window window = 11;</code>
     * @return The window.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window getWindow() {
      if (windowBuilder_ == null) {
        if (exprTypeCase_ == 11) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Window) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 11) {
          return windowBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.Window window = 11;</code>
     */
    public Builder setWindow(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window value) {
      if (windowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        windowBuilder_.setMessage(value);
      }
      exprTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Window window = 11;</code>
     */
    public Builder setWindow(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.Builder builderForValue) {
      if (windowBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        windowBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Window window = 11;</code>
     */
    public Builder mergeWindow(org.apache.kyuubi.engine.spark.connect.proto.Expression.Window value) {
      if (windowBuilder_ == null) {
        if (exprTypeCase_ == 11 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.Window) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 11) {
          windowBuilder_.mergeFrom(value);
        } else {
          windowBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Window window = 11;</code>
     */
    public Builder clearWindow() {
      if (windowBuilder_ == null) {
        if (exprTypeCase_ == 11) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 11) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        windowBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.Window window = 11;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.Builder getWindowBuilder() {
      return getWindowFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.Window window = 11;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.WindowOrBuilder getWindowOrBuilder() {
      if ((exprTypeCase_ == 11) && (windowBuilder_ != null)) {
        return windowBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 11) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.Window) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.Window window = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.Window, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.WindowOrBuilder> 
        getWindowFieldBuilder() {
      if (windowBuilder_ == null) {
        if (!(exprTypeCase_ == 11)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.getDefaultInstance();
        }
        windowBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.Window, org.apache.kyuubi.engine.spark.connect.proto.Expression.Window.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.WindowOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.Window) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 11;
      onChanged();;
      return windowBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValueOrBuilder> unresolvedExtractValueBuilder_;
    /**
     * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
     * @return Whether the unresolvedExtractValue field is set.
     */
    @java.lang.Override
    public boolean hasUnresolvedExtractValue() {
      return exprTypeCase_ == 12;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
     * @return The unresolvedExtractValue.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue getUnresolvedExtractValue() {
      if (unresolvedExtractValueBuilder_ == null) {
        if (exprTypeCase_ == 12) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 12) {
          return unresolvedExtractValueBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
     */
    public Builder setUnresolvedExtractValue(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue value) {
      if (unresolvedExtractValueBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        unresolvedExtractValueBuilder_.setMessage(value);
      }
      exprTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
     */
    public Builder setUnresolvedExtractValue(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.Builder builderForValue) {
      if (unresolvedExtractValueBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        unresolvedExtractValueBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
     */
    public Builder mergeUnresolvedExtractValue(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue value) {
      if (unresolvedExtractValueBuilder_ == null) {
        if (exprTypeCase_ == 12 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 12) {
          unresolvedExtractValueBuilder_.mergeFrom(value);
        } else {
          unresolvedExtractValueBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
     */
    public Builder clearUnresolvedExtractValue() {
      if (unresolvedExtractValueBuilder_ == null) {
        if (exprTypeCase_ == 12) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 12) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        unresolvedExtractValueBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.Builder getUnresolvedExtractValueBuilder() {
      return getUnresolvedExtractValueFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValueOrBuilder getUnresolvedExtractValueOrBuilder() {
      if ((exprTypeCase_ == 12) && (unresolvedExtractValueBuilder_ != null)) {
        return unresolvedExtractValueBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 12) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedExtractValue unresolved_extract_value = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValueOrBuilder> 
        getUnresolvedExtractValueFieldBuilder() {
      if (unresolvedExtractValueBuilder_ == null) {
        if (!(exprTypeCase_ == 12)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.getDefaultInstance();
        }
        unresolvedExtractValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValueOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedExtractValue) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 12;
      onChanged();;
      return unresolvedExtractValueBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields, org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFieldsOrBuilder> updateFieldsBuilder_;
    /**
     * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
     * @return Whether the updateFields field is set.
     */
    @java.lang.Override
    public boolean hasUpdateFields() {
      return exprTypeCase_ == 13;
    }
    /**
     * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
     * @return The updateFields.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields getUpdateFields() {
      if (updateFieldsBuilder_ == null) {
        if (exprTypeCase_ == 13) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 13) {
          return updateFieldsBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
     */
    public Builder setUpdateFields(org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields value) {
      if (updateFieldsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        updateFieldsBuilder_.setMessage(value);
      }
      exprTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
     */
    public Builder setUpdateFields(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.Builder builderForValue) {
      if (updateFieldsBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        updateFieldsBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
     */
    public Builder mergeUpdateFields(org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields value) {
      if (updateFieldsBuilder_ == null) {
        if (exprTypeCase_ == 13 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 13) {
          updateFieldsBuilder_.mergeFrom(value);
        } else {
          updateFieldsBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
     */
    public Builder clearUpdateFields() {
      if (updateFieldsBuilder_ == null) {
        if (exprTypeCase_ == 13) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 13) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        updateFieldsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.Builder getUpdateFieldsBuilder() {
      return getUpdateFieldsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFieldsOrBuilder getUpdateFieldsOrBuilder() {
      if ((exprTypeCase_ == 13) && (updateFieldsBuilder_ != null)) {
        return updateFieldsBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 13) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UpdateFields update_fields = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields, org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFieldsOrBuilder> 
        getUpdateFieldsFieldBuilder() {
      if (updateFieldsBuilder_ == null) {
        if (!(exprTypeCase_ == 13)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.getDefaultInstance();
        }
        updateFieldsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields, org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFieldsOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.UpdateFields) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 13;
      onChanged();;
      return updateFieldsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder> unresolvedNamedLambdaVariableBuilder_;
    /**
     * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
     * @return Whether the unresolvedNamedLambdaVariable field is set.
     */
    @java.lang.Override
    public boolean hasUnresolvedNamedLambdaVariable() {
      return exprTypeCase_ == 14;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
     * @return The unresolvedNamedLambdaVariable.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable getUnresolvedNamedLambdaVariable() {
      if (unresolvedNamedLambdaVariableBuilder_ == null) {
        if (exprTypeCase_ == 14) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 14) {
          return unresolvedNamedLambdaVariableBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
     */
    public Builder setUnresolvedNamedLambdaVariable(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable value) {
      if (unresolvedNamedLambdaVariableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        unresolvedNamedLambdaVariableBuilder_.setMessage(value);
      }
      exprTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
     */
    public Builder setUnresolvedNamedLambdaVariable(
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder builderForValue) {
      if (unresolvedNamedLambdaVariableBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        unresolvedNamedLambdaVariableBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
     */
    public Builder mergeUnresolvedNamedLambdaVariable(org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable value) {
      if (unresolvedNamedLambdaVariableBuilder_ == null) {
        if (exprTypeCase_ == 14 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 14) {
          unresolvedNamedLambdaVariableBuilder_.mergeFrom(value);
        } else {
          unresolvedNamedLambdaVariableBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
     */
    public Builder clearUnresolvedNamedLambdaVariable() {
      if (unresolvedNamedLambdaVariableBuilder_ == null) {
        if (exprTypeCase_ == 14) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 14) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        unresolvedNamedLambdaVariableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder getUnresolvedNamedLambdaVariableBuilder() {
      return getUnresolvedNamedLambdaVariableFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder getUnresolvedNamedLambdaVariableOrBuilder() {
      if ((exprTypeCase_ == 14) && (unresolvedNamedLambdaVariableBuilder_ != null)) {
        return unresolvedNamedLambdaVariableBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 14) {
          return (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.Expression.UnresolvedNamedLambdaVariable unresolved_named_lambda_variable = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder> 
        getUnresolvedNamedLambdaVariableFieldBuilder() {
      if (unresolvedNamedLambdaVariableBuilder_ == null) {
        if (!(exprTypeCase_ == 14)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.getDefaultInstance();
        }
        unresolvedNamedLambdaVariableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable.Builder, org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariableOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.Expression.UnresolvedNamedLambdaVariable) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 14;
      onChanged();;
      return unresolvedNamedLambdaVariableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder> commonInlineUserDefinedFunctionBuilder_;
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
     * @return Whether the commonInlineUserDefinedFunction field is set.
     */
    @java.lang.Override
    public boolean hasCommonInlineUserDefinedFunction() {
      return exprTypeCase_ == 15;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
     * @return The commonInlineUserDefinedFunction.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction getCommonInlineUserDefinedFunction() {
      if (commonInlineUserDefinedFunctionBuilder_ == null) {
        if (exprTypeCase_ == 15) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 15) {
          return commonInlineUserDefinedFunctionBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
     */
    public Builder setCommonInlineUserDefinedFunction(org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction value) {
      if (commonInlineUserDefinedFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        commonInlineUserDefinedFunctionBuilder_.setMessage(value);
      }
      exprTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
     */
    public Builder setCommonInlineUserDefinedFunction(
        org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.Builder builderForValue) {
      if (commonInlineUserDefinedFunctionBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        commonInlineUserDefinedFunctionBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
     */
    public Builder mergeCommonInlineUserDefinedFunction(org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction value) {
      if (commonInlineUserDefinedFunctionBuilder_ == null) {
        if (exprTypeCase_ == 15 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 15) {
          commonInlineUserDefinedFunctionBuilder_.mergeFrom(value);
        } else {
          commonInlineUserDefinedFunctionBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
     */
    public Builder clearCommonInlineUserDefinedFunction() {
      if (commonInlineUserDefinedFunctionBuilder_ == null) {
        if (exprTypeCase_ == 15) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 15) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        commonInlineUserDefinedFunctionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.Builder getCommonInlineUserDefinedFunctionBuilder() {
      return getCommonInlineUserDefinedFunctionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder getCommonInlineUserDefinedFunctionOrBuilder() {
      if ((exprTypeCase_ == 15) && (commonInlineUserDefinedFunctionBuilder_ != null)) {
        return commonInlineUserDefinedFunctionBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 15) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CommonInlineUserDefinedFunction common_inline_user_defined_function = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder> 
        getCommonInlineUserDefinedFunctionFieldBuilder() {
      if (commonInlineUserDefinedFunctionBuilder_ == null) {
        if (!(exprTypeCase_ == 15)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.getDefaultInstance();
        }
        commonInlineUserDefinedFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunctionOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.CommonInlineUserDefinedFunction) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 15;
      onChanged();;
      return commonInlineUserDefinedFunctionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CallFunction, org.apache.kyuubi.engine.spark.connect.proto.CallFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CallFunctionOrBuilder> callFunctionBuilder_;
    /**
     * <code>.spark.connect.CallFunction call_function = 16;</code>
     * @return Whether the callFunction field is set.
     */
    @java.lang.Override
    public boolean hasCallFunction() {
      return exprTypeCase_ == 16;
    }
    /**
     * <code>.spark.connect.CallFunction call_function = 16;</code>
     * @return The callFunction.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CallFunction getCallFunction() {
      if (callFunctionBuilder_ == null) {
        if (exprTypeCase_ == 16) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CallFunction) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CallFunction.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 16) {
          return callFunctionBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CallFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CallFunction call_function = 16;</code>
     */
    public Builder setCallFunction(org.apache.kyuubi.engine.spark.connect.proto.CallFunction value) {
      if (callFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        callFunctionBuilder_.setMessage(value);
      }
      exprTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.spark.connect.CallFunction call_function = 16;</code>
     */
    public Builder setCallFunction(
        org.apache.kyuubi.engine.spark.connect.proto.CallFunction.Builder builderForValue) {
      if (callFunctionBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        callFunctionBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.spark.connect.CallFunction call_function = 16;</code>
     */
    public Builder mergeCallFunction(org.apache.kyuubi.engine.spark.connect.proto.CallFunction value) {
      if (callFunctionBuilder_ == null) {
        if (exprTypeCase_ == 16 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.CallFunction.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.CallFunction.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.CallFunction) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 16) {
          callFunctionBuilder_.mergeFrom(value);
        } else {
          callFunctionBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.spark.connect.CallFunction call_function = 16;</code>
     */
    public Builder clearCallFunction() {
      if (callFunctionBuilder_ == null) {
        if (exprTypeCase_ == 16) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 16) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        callFunctionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CallFunction call_function = 16;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.CallFunction.Builder getCallFunctionBuilder() {
      return getCallFunctionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CallFunction call_function = 16;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CallFunctionOrBuilder getCallFunctionOrBuilder() {
      if ((exprTypeCase_ == 16) && (callFunctionBuilder_ != null)) {
        return callFunctionBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 16) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CallFunction) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CallFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CallFunction call_function = 16;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CallFunction, org.apache.kyuubi.engine.spark.connect.proto.CallFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CallFunctionOrBuilder> 
        getCallFunctionFieldBuilder() {
      if (callFunctionBuilder_ == null) {
        if (!(exprTypeCase_ == 16)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.CallFunction.getDefaultInstance();
        }
        callFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.CallFunction, org.apache.kyuubi.engine.spark.connect.proto.CallFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.CallFunctionOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.CallFunction) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 16;
      onChanged();;
      return callFunctionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression, org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.Builder, org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpressionOrBuilder> namedArgumentExpressionBuilder_;
    /**
     * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
     * @return Whether the namedArgumentExpression field is set.
     */
    @java.lang.Override
    public boolean hasNamedArgumentExpression() {
      return exprTypeCase_ == 17;
    }
    /**
     * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
     * @return The namedArgumentExpression.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression getNamedArgumentExpression() {
      if (namedArgumentExpressionBuilder_ == null) {
        if (exprTypeCase_ == 17) {
          return (org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 17) {
          return namedArgumentExpressionBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
     */
    public Builder setNamedArgumentExpression(org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression value) {
      if (namedArgumentExpressionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        namedArgumentExpressionBuilder_.setMessage(value);
      }
      exprTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
     */
    public Builder setNamedArgumentExpression(
        org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.Builder builderForValue) {
      if (namedArgumentExpressionBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        namedArgumentExpressionBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
     */
    public Builder mergeNamedArgumentExpression(org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression value) {
      if (namedArgumentExpressionBuilder_ == null) {
        if (exprTypeCase_ == 17 &&
            exprType_ != org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.getDefaultInstance()) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 17) {
          namedArgumentExpressionBuilder_.mergeFrom(value);
        } else {
          namedArgumentExpressionBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
     */
    public Builder clearNamedArgumentExpression() {
      if (namedArgumentExpressionBuilder_ == null) {
        if (exprTypeCase_ == 17) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 17) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        namedArgumentExpressionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.Builder getNamedArgumentExpressionBuilder() {
      return getNamedArgumentExpressionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpressionOrBuilder getNamedArgumentExpressionOrBuilder() {
      if ((exprTypeCase_ == 17) && (namedArgumentExpressionBuilder_ != null)) {
        return namedArgumentExpressionBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 17) {
          return (org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression) exprType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.NamedArgumentExpression named_argument_expression = 17;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression, org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.Builder, org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpressionOrBuilder> 
        getNamedArgumentExpressionFieldBuilder() {
      if (namedArgumentExpressionBuilder_ == null) {
        if (!(exprTypeCase_ == 17)) {
          exprType_ = org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.getDefaultInstance();
        }
        namedArgumentExpressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression, org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression.Builder, org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpressionOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.NamedArgumentExpression) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 17;
      onChanged();;
      return namedArgumentExpressionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> extensionBuilder_;
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     * @return Whether the extension field is set.
     */
    @java.lang.Override
    public boolean hasExtension() {
      return exprTypeCase_ == 999;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     * @return The extension.
     */
    @java.lang.Override
    public com.google.protobuf.Any getExtension() {
      if (extensionBuilder_ == null) {
        if (exprTypeCase_ == 999) {
          return (com.google.protobuf.Any) exprType_;
        }
        return com.google.protobuf.Any.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 999) {
          return extensionBuilder_.getMessage();
        }
        return com.google.protobuf.Any.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    public Builder setExtension(com.google.protobuf.Any value) {
      if (extensionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        extensionBuilder_.setMessage(value);
      }
      exprTypeCase_ = 999;
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    public Builder setExtension(
        com.google.protobuf.Any.Builder builderForValue) {
      if (extensionBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        extensionBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 999;
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    public Builder mergeExtension(com.google.protobuf.Any value) {
      if (extensionBuilder_ == null) {
        if (exprTypeCase_ == 999 &&
            exprType_ != com.google.protobuf.Any.getDefaultInstance()) {
          exprType_ = com.google.protobuf.Any.newBuilder((com.google.protobuf.Any) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 999) {
          extensionBuilder_.mergeFrom(value);
        } else {
          extensionBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 999;
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    public Builder clearExtension() {
      if (extensionBuilder_ == null) {
        if (exprTypeCase_ == 999) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 999) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        extensionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    public com.google.protobuf.Any.Builder getExtensionBuilder() {
      return getExtensionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    @java.lang.Override
    public com.google.protobuf.AnyOrBuilder getExtensionOrBuilder() {
      if ((exprTypeCase_ == 999) && (extensionBuilder_ != null)) {
        return extensionBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 999) {
          return (com.google.protobuf.Any) exprType_;
        }
        return com.google.protobuf.Any.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * This field is used to mark extensions to the protocol. When plugins generate arbitrary
     * relations they can add them here. During the planning the correct resolution is done.
     * </pre>
     *
     * <code>.google.protobuf.Any extension = 999;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
        getExtensionFieldBuilder() {
      if (extensionBuilder_ == null) {
        if (!(exprTypeCase_ == 999)) {
          exprType_ = com.google.protobuf.Any.getDefaultInstance();
        }
        extensionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                (com.google.protobuf.Any) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 999;
      onChanged();;
      return extensionBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.Expression)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.Expression)
  private static final org.apache.kyuubi.engine.spark.connect.proto.Expression DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Expression();
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.Expression getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Expression>
      PARSER = new com.google.protobuf.AbstractParser<Expression>() {
    @java.lang.Override
    public Expression parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Expression> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Expression> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Expression getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

