// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/catalog.proto

package org.apache.kyuubi.engine.spark.connect.proto;

/**
 * <pre>
 * Catalog messages are marked as unstable.
 * </pre>
 *
 * Protobuf type {@code spark.connect.Catalog}
 */
public final class Catalog extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:spark.connect.Catalog)
    CatalogOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Catalog.newBuilder() to construct.
  private Catalog(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Catalog() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Catalog();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.proto.CatalogOuterClass.internal_static_spark_connect_Catalog_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.proto.CatalogOuterClass.internal_static_spark_connect_Catalog_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.proto.Catalog.class, org.apache.kyuubi.engine.spark.connect.proto.Catalog.Builder.class);
  }

  private int catTypeCase_ = 0;
  private java.lang.Object catType_;
  public enum CatTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    CURRENT_DATABASE(1),
    SET_CURRENT_DATABASE(2),
    LIST_DATABASES(3),
    LIST_TABLES(4),
    LIST_FUNCTIONS(5),
    LIST_COLUMNS(6),
    GET_DATABASE(7),
    GET_TABLE(8),
    GET_FUNCTION(9),
    DATABASE_EXISTS(10),
    TABLE_EXISTS(11),
    FUNCTION_EXISTS(12),
    CREATE_EXTERNAL_TABLE(13),
    CREATE_TABLE(14),
    DROP_TEMP_VIEW(15),
    DROP_GLOBAL_TEMP_VIEW(16),
    RECOVER_PARTITIONS(17),
    IS_CACHED(18),
    CACHE_TABLE(19),
    UNCACHE_TABLE(20),
    CLEAR_CACHE(21),
    REFRESH_TABLE(22),
    REFRESH_BY_PATH(23),
    CURRENT_CATALOG(24),
    SET_CURRENT_CATALOG(25),
    LIST_CATALOGS(26),
    CATTYPE_NOT_SET(0);
    private final int value;
    private CatTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CatTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static CatTypeCase forNumber(int value) {
      switch (value) {
        case 1: return CURRENT_DATABASE;
        case 2: return SET_CURRENT_DATABASE;
        case 3: return LIST_DATABASES;
        case 4: return LIST_TABLES;
        case 5: return LIST_FUNCTIONS;
        case 6: return LIST_COLUMNS;
        case 7: return GET_DATABASE;
        case 8: return GET_TABLE;
        case 9: return GET_FUNCTION;
        case 10: return DATABASE_EXISTS;
        case 11: return TABLE_EXISTS;
        case 12: return FUNCTION_EXISTS;
        case 13: return CREATE_EXTERNAL_TABLE;
        case 14: return CREATE_TABLE;
        case 15: return DROP_TEMP_VIEW;
        case 16: return DROP_GLOBAL_TEMP_VIEW;
        case 17: return RECOVER_PARTITIONS;
        case 18: return IS_CACHED;
        case 19: return CACHE_TABLE;
        case 20: return UNCACHE_TABLE;
        case 21: return CLEAR_CACHE;
        case 22: return REFRESH_TABLE;
        case 23: return REFRESH_BY_PATH;
        case 24: return CURRENT_CATALOG;
        case 25: return SET_CURRENT_CATALOG;
        case 26: return LIST_CATALOGS;
        case 0: return CATTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public CatTypeCase
  getCatTypeCase() {
    return CatTypeCase.forNumber(
        catTypeCase_);
  }

  public static final int CURRENT_DATABASE_FIELD_NUMBER = 1;
  /**
   * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
   * @return Whether the currentDatabase field is set.
   */
  @java.lang.Override
  public boolean hasCurrentDatabase() {
    return catTypeCase_ == 1;
  }
  /**
   * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
   * @return The currentDatabase.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase getCurrentDatabase() {
    if (catTypeCase_ == 1) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabaseOrBuilder getCurrentDatabaseOrBuilder() {
    if (catTypeCase_ == 1) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.getDefaultInstance();
  }

  public static final int SET_CURRENT_DATABASE_FIELD_NUMBER = 2;
  /**
   * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
   * @return Whether the setCurrentDatabase field is set.
   */
  @java.lang.Override
  public boolean hasSetCurrentDatabase() {
    return catTypeCase_ == 2;
  }
  /**
   * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
   * @return The setCurrentDatabase.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase getSetCurrentDatabase() {
    if (catTypeCase_ == 2) {
       return (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabaseOrBuilder getSetCurrentDatabaseOrBuilder() {
    if (catTypeCase_ == 2) {
       return (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.getDefaultInstance();
  }

  public static final int LIST_DATABASES_FIELD_NUMBER = 3;
  /**
   * <code>.spark.connect.ListDatabases list_databases = 3;</code>
   * @return Whether the listDatabases field is set.
   */
  @java.lang.Override
  public boolean hasListDatabases() {
    return catTypeCase_ == 3;
  }
  /**
   * <code>.spark.connect.ListDatabases list_databases = 3;</code>
   * @return The listDatabases.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ListDatabases getListDatabases() {
    if (catTypeCase_ == 3) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ListDatabases) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.ListDatabases list_databases = 3;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ListDatabasesOrBuilder getListDatabasesOrBuilder() {
    if (catTypeCase_ == 3) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ListDatabases) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.getDefaultInstance();
  }

  public static final int LIST_TABLES_FIELD_NUMBER = 4;
  /**
   * <code>.spark.connect.ListTables list_tables = 4;</code>
   * @return Whether the listTables field is set.
   */
  @java.lang.Override
  public boolean hasListTables() {
    return catTypeCase_ == 4;
  }
  /**
   * <code>.spark.connect.ListTables list_tables = 4;</code>
   * @return The listTables.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ListTables getListTables() {
    if (catTypeCase_ == 4) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ListTables) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ListTables.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.ListTables list_tables = 4;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ListTablesOrBuilder getListTablesOrBuilder() {
    if (catTypeCase_ == 4) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ListTables) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ListTables.getDefaultInstance();
  }

  public static final int LIST_FUNCTIONS_FIELD_NUMBER = 5;
  /**
   * <code>.spark.connect.ListFunctions list_functions = 5;</code>
   * @return Whether the listFunctions field is set.
   */
  @java.lang.Override
  public boolean hasListFunctions() {
    return catTypeCase_ == 5;
  }
  /**
   * <code>.spark.connect.ListFunctions list_functions = 5;</code>
   * @return The listFunctions.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ListFunctions getListFunctions() {
    if (catTypeCase_ == 5) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ListFunctions) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.ListFunctions list_functions = 5;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ListFunctionsOrBuilder getListFunctionsOrBuilder() {
    if (catTypeCase_ == 5) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ListFunctions) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.getDefaultInstance();
  }

  public static final int LIST_COLUMNS_FIELD_NUMBER = 6;
  /**
   * <code>.spark.connect.ListColumns list_columns = 6;</code>
   * @return Whether the listColumns field is set.
   */
  @java.lang.Override
  public boolean hasListColumns() {
    return catTypeCase_ == 6;
  }
  /**
   * <code>.spark.connect.ListColumns list_columns = 6;</code>
   * @return The listColumns.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ListColumns getListColumns() {
    if (catTypeCase_ == 6) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ListColumns) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ListColumns.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.ListColumns list_columns = 6;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ListColumnsOrBuilder getListColumnsOrBuilder() {
    if (catTypeCase_ == 6) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ListColumns) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ListColumns.getDefaultInstance();
  }

  public static final int GET_DATABASE_FIELD_NUMBER = 7;
  /**
   * <code>.spark.connect.GetDatabase get_database = 7;</code>
   * @return Whether the getDatabase field is set.
   */
  @java.lang.Override
  public boolean hasGetDatabase() {
    return catTypeCase_ == 7;
  }
  /**
   * <code>.spark.connect.GetDatabase get_database = 7;</code>
   * @return The getDatabase.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.GetDatabase getGetDatabase() {
    if (catTypeCase_ == 7) {
       return (org.apache.kyuubi.engine.spark.connect.proto.GetDatabase) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.GetDatabase get_database = 7;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.GetDatabaseOrBuilder getGetDatabaseOrBuilder() {
    if (catTypeCase_ == 7) {
       return (org.apache.kyuubi.engine.spark.connect.proto.GetDatabase) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.getDefaultInstance();
  }

  public static final int GET_TABLE_FIELD_NUMBER = 8;
  /**
   * <code>.spark.connect.GetTable get_table = 8;</code>
   * @return Whether the getTable field is set.
   */
  @java.lang.Override
  public boolean hasGetTable() {
    return catTypeCase_ == 8;
  }
  /**
   * <code>.spark.connect.GetTable get_table = 8;</code>
   * @return The getTable.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.GetTable getGetTable() {
    if (catTypeCase_ == 8) {
       return (org.apache.kyuubi.engine.spark.connect.proto.GetTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.GetTable.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.GetTable get_table = 8;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.GetTableOrBuilder getGetTableOrBuilder() {
    if (catTypeCase_ == 8) {
       return (org.apache.kyuubi.engine.spark.connect.proto.GetTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.GetTable.getDefaultInstance();
  }

  public static final int GET_FUNCTION_FIELD_NUMBER = 9;
  /**
   * <code>.spark.connect.GetFunction get_function = 9;</code>
   * @return Whether the getFunction field is set.
   */
  @java.lang.Override
  public boolean hasGetFunction() {
    return catTypeCase_ == 9;
  }
  /**
   * <code>.spark.connect.GetFunction get_function = 9;</code>
   * @return The getFunction.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.GetFunction getGetFunction() {
    if (catTypeCase_ == 9) {
       return (org.apache.kyuubi.engine.spark.connect.proto.GetFunction) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.GetFunction.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.GetFunction get_function = 9;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.GetFunctionOrBuilder getGetFunctionOrBuilder() {
    if (catTypeCase_ == 9) {
       return (org.apache.kyuubi.engine.spark.connect.proto.GetFunction) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.GetFunction.getDefaultInstance();
  }

  public static final int DATABASE_EXISTS_FIELD_NUMBER = 10;
  /**
   * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
   * @return Whether the databaseExists field is set.
   */
  @java.lang.Override
  public boolean hasDatabaseExists() {
    return catTypeCase_ == 10;
  }
  /**
   * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
   * @return The databaseExists.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists getDatabaseExists() {
    if (catTypeCase_ == 10) {
       return (org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.DatabaseExistsOrBuilder getDatabaseExistsOrBuilder() {
    if (catTypeCase_ == 10) {
       return (org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.getDefaultInstance();
  }

  public static final int TABLE_EXISTS_FIELD_NUMBER = 11;
  /**
   * <code>.spark.connect.TableExists table_exists = 11;</code>
   * @return Whether the tableExists field is set.
   */
  @java.lang.Override
  public boolean hasTableExists() {
    return catTypeCase_ == 11;
  }
  /**
   * <code>.spark.connect.TableExists table_exists = 11;</code>
   * @return The tableExists.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.TableExists getTableExists() {
    if (catTypeCase_ == 11) {
       return (org.apache.kyuubi.engine.spark.connect.proto.TableExists) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.TableExists.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.TableExists table_exists = 11;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.TableExistsOrBuilder getTableExistsOrBuilder() {
    if (catTypeCase_ == 11) {
       return (org.apache.kyuubi.engine.spark.connect.proto.TableExists) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.TableExists.getDefaultInstance();
  }

  public static final int FUNCTION_EXISTS_FIELD_NUMBER = 12;
  /**
   * <code>.spark.connect.FunctionExists function_exists = 12;</code>
   * @return Whether the functionExists field is set.
   */
  @java.lang.Override
  public boolean hasFunctionExists() {
    return catTypeCase_ == 12;
  }
  /**
   * <code>.spark.connect.FunctionExists function_exists = 12;</code>
   * @return The functionExists.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.FunctionExists getFunctionExists() {
    if (catTypeCase_ == 12) {
       return (org.apache.kyuubi.engine.spark.connect.proto.FunctionExists) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.FunctionExists function_exists = 12;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.FunctionExistsOrBuilder getFunctionExistsOrBuilder() {
    if (catTypeCase_ == 12) {
       return (org.apache.kyuubi.engine.spark.connect.proto.FunctionExists) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.getDefaultInstance();
  }

  public static final int CREATE_EXTERNAL_TABLE_FIELD_NUMBER = 13;
  /**
   * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
   * @return Whether the createExternalTable field is set.
   */
  @java.lang.Override
  public boolean hasCreateExternalTable() {
    return catTypeCase_ == 13;
  }
  /**
   * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
   * @return The createExternalTable.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable getCreateExternalTable() {
    if (catTypeCase_ == 13) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTableOrBuilder getCreateExternalTableOrBuilder() {
    if (catTypeCase_ == 13) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.getDefaultInstance();
  }

  public static final int CREATE_TABLE_FIELD_NUMBER = 14;
  /**
   * <code>.spark.connect.CreateTable create_table = 14;</code>
   * @return Whether the createTable field is set.
   */
  @java.lang.Override
  public boolean hasCreateTable() {
    return catTypeCase_ == 14;
  }
  /**
   * <code>.spark.connect.CreateTable create_table = 14;</code>
   * @return The createTable.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CreateTable getCreateTable() {
    if (catTypeCase_ == 14) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CreateTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CreateTable.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CreateTable create_table = 14;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CreateTableOrBuilder getCreateTableOrBuilder() {
    if (catTypeCase_ == 14) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CreateTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CreateTable.getDefaultInstance();
  }

  public static final int DROP_TEMP_VIEW_FIELD_NUMBER = 15;
  /**
   * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
   * @return Whether the dropTempView field is set.
   */
  @java.lang.Override
  public boolean hasDropTempView() {
    return catTypeCase_ == 15;
  }
  /**
   * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
   * @return The dropTempView.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.DropTempView getDropTempView() {
    if (catTypeCase_ == 15) {
       return (org.apache.kyuubi.engine.spark.connect.proto.DropTempView) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.DropTempView.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.DropTempViewOrBuilder getDropTempViewOrBuilder() {
    if (catTypeCase_ == 15) {
       return (org.apache.kyuubi.engine.spark.connect.proto.DropTempView) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.DropTempView.getDefaultInstance();
  }

  public static final int DROP_GLOBAL_TEMP_VIEW_FIELD_NUMBER = 16;
  /**
   * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
   * @return Whether the dropGlobalTempView field is set.
   */
  @java.lang.Override
  public boolean hasDropGlobalTempView() {
    return catTypeCase_ == 16;
  }
  /**
   * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
   * @return The dropGlobalTempView.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView getDropGlobalTempView() {
    if (catTypeCase_ == 16) {
       return (org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempViewOrBuilder getDropGlobalTempViewOrBuilder() {
    if (catTypeCase_ == 16) {
       return (org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.getDefaultInstance();
  }

  public static final int RECOVER_PARTITIONS_FIELD_NUMBER = 17;
  /**
   * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
   * @return Whether the recoverPartitions field is set.
   */
  @java.lang.Override
  public boolean hasRecoverPartitions() {
    return catTypeCase_ == 17;
  }
  /**
   * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
   * @return The recoverPartitions.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions getRecoverPartitions() {
    if (catTypeCase_ == 17) {
       return (org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitionsOrBuilder getRecoverPartitionsOrBuilder() {
    if (catTypeCase_ == 17) {
       return (org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.getDefaultInstance();
  }

  public static final int IS_CACHED_FIELD_NUMBER = 18;
  /**
   * <code>.spark.connect.IsCached is_cached = 18;</code>
   * @return Whether the isCached field is set.
   */
  @java.lang.Override
  public boolean hasIsCached() {
    return catTypeCase_ == 18;
  }
  /**
   * <code>.spark.connect.IsCached is_cached = 18;</code>
   * @return The isCached.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.IsCached getIsCached() {
    if (catTypeCase_ == 18) {
       return (org.apache.kyuubi.engine.spark.connect.proto.IsCached) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.IsCached.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.IsCached is_cached = 18;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.IsCachedOrBuilder getIsCachedOrBuilder() {
    if (catTypeCase_ == 18) {
       return (org.apache.kyuubi.engine.spark.connect.proto.IsCached) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.IsCached.getDefaultInstance();
  }

  public static final int CACHE_TABLE_FIELD_NUMBER = 19;
  /**
   * <code>.spark.connect.CacheTable cache_table = 19;</code>
   * @return Whether the cacheTable field is set.
   */
  @java.lang.Override
  public boolean hasCacheTable() {
    return catTypeCase_ == 19;
  }
  /**
   * <code>.spark.connect.CacheTable cache_table = 19;</code>
   * @return The cacheTable.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CacheTable getCacheTable() {
    if (catTypeCase_ == 19) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CacheTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CacheTable.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CacheTable cache_table = 19;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CacheTableOrBuilder getCacheTableOrBuilder() {
    if (catTypeCase_ == 19) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CacheTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CacheTable.getDefaultInstance();
  }

  public static final int UNCACHE_TABLE_FIELD_NUMBER = 20;
  /**
   * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
   * @return Whether the uncacheTable field is set.
   */
  @java.lang.Override
  public boolean hasUncacheTable() {
    return catTypeCase_ == 20;
  }
  /**
   * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
   * @return The uncacheTable.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.UncacheTable getUncacheTable() {
    if (catTypeCase_ == 20) {
       return (org.apache.kyuubi.engine.spark.connect.proto.UncacheTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.UncacheTableOrBuilder getUncacheTableOrBuilder() {
    if (catTypeCase_ == 20) {
       return (org.apache.kyuubi.engine.spark.connect.proto.UncacheTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.getDefaultInstance();
  }

  public static final int CLEAR_CACHE_FIELD_NUMBER = 21;
  /**
   * <code>.spark.connect.ClearCache clear_cache = 21;</code>
   * @return Whether the clearCache field is set.
   */
  @java.lang.Override
  public boolean hasClearCache() {
    return catTypeCase_ == 21;
  }
  /**
   * <code>.spark.connect.ClearCache clear_cache = 21;</code>
   * @return The clearCache.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ClearCache getClearCache() {
    if (catTypeCase_ == 21) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ClearCache) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ClearCache.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.ClearCache clear_cache = 21;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ClearCacheOrBuilder getClearCacheOrBuilder() {
    if (catTypeCase_ == 21) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ClearCache) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ClearCache.getDefaultInstance();
  }

  public static final int REFRESH_TABLE_FIELD_NUMBER = 22;
  /**
   * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
   * @return Whether the refreshTable field is set.
   */
  @java.lang.Override
  public boolean hasRefreshTable() {
    return catTypeCase_ == 22;
  }
  /**
   * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
   * @return The refreshTable.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.RefreshTable getRefreshTable() {
    if (catTypeCase_ == 22) {
       return (org.apache.kyuubi.engine.spark.connect.proto.RefreshTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.RefreshTableOrBuilder getRefreshTableOrBuilder() {
    if (catTypeCase_ == 22) {
       return (org.apache.kyuubi.engine.spark.connect.proto.RefreshTable) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.getDefaultInstance();
  }

  public static final int REFRESH_BY_PATH_FIELD_NUMBER = 23;
  /**
   * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
   * @return Whether the refreshByPath field is set.
   */
  @java.lang.Override
  public boolean hasRefreshByPath() {
    return catTypeCase_ == 23;
  }
  /**
   * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
   * @return The refreshByPath.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath getRefreshByPath() {
    if (catTypeCase_ == 23) {
       return (org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.RefreshByPathOrBuilder getRefreshByPathOrBuilder() {
    if (catTypeCase_ == 23) {
       return (org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.getDefaultInstance();
  }

  public static final int CURRENT_CATALOG_FIELD_NUMBER = 24;
  /**
   * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
   * @return Whether the currentCatalog field is set.
   */
  @java.lang.Override
  public boolean hasCurrentCatalog() {
    return catTypeCase_ == 24;
  }
  /**
   * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
   * @return The currentCatalog.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog getCurrentCatalog() {
    if (catTypeCase_ == 24) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalogOrBuilder getCurrentCatalogOrBuilder() {
    if (catTypeCase_ == 24) {
       return (org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.getDefaultInstance();
  }

  public static final int SET_CURRENT_CATALOG_FIELD_NUMBER = 25;
  /**
   * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
   * @return Whether the setCurrentCatalog field is set.
   */
  @java.lang.Override
  public boolean hasSetCurrentCatalog() {
    return catTypeCase_ == 25;
  }
  /**
   * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
   * @return The setCurrentCatalog.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog getSetCurrentCatalog() {
    if (catTypeCase_ == 25) {
       return (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalogOrBuilder getSetCurrentCatalogOrBuilder() {
    if (catTypeCase_ == 25) {
       return (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.getDefaultInstance();
  }

  public static final int LIST_CATALOGS_FIELD_NUMBER = 26;
  /**
   * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
   * @return Whether the listCatalogs field is set.
   */
  @java.lang.Override
  public boolean hasListCatalogs() {
    return catTypeCase_ == 26;
  }
  /**
   * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
   * @return The listCatalogs.
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs getListCatalogs() {
    if (catTypeCase_ == 26) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.getDefaultInstance();
  }
  /**
   * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
   */
  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.ListCatalogsOrBuilder getListCatalogsOrBuilder() {
    if (catTypeCase_ == 26) {
       return (org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs) catType_;
    }
    return org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (catTypeCase_ == 1) {
      output.writeMessage(1, (org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase) catType_);
    }
    if (catTypeCase_ == 2) {
      output.writeMessage(2, (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase) catType_);
    }
    if (catTypeCase_ == 3) {
      output.writeMessage(3, (org.apache.kyuubi.engine.spark.connect.proto.ListDatabases) catType_);
    }
    if (catTypeCase_ == 4) {
      output.writeMessage(4, (org.apache.kyuubi.engine.spark.connect.proto.ListTables) catType_);
    }
    if (catTypeCase_ == 5) {
      output.writeMessage(5, (org.apache.kyuubi.engine.spark.connect.proto.ListFunctions) catType_);
    }
    if (catTypeCase_ == 6) {
      output.writeMessage(6, (org.apache.kyuubi.engine.spark.connect.proto.ListColumns) catType_);
    }
    if (catTypeCase_ == 7) {
      output.writeMessage(7, (org.apache.kyuubi.engine.spark.connect.proto.GetDatabase) catType_);
    }
    if (catTypeCase_ == 8) {
      output.writeMessage(8, (org.apache.kyuubi.engine.spark.connect.proto.GetTable) catType_);
    }
    if (catTypeCase_ == 9) {
      output.writeMessage(9, (org.apache.kyuubi.engine.spark.connect.proto.GetFunction) catType_);
    }
    if (catTypeCase_ == 10) {
      output.writeMessage(10, (org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists) catType_);
    }
    if (catTypeCase_ == 11) {
      output.writeMessage(11, (org.apache.kyuubi.engine.spark.connect.proto.TableExists) catType_);
    }
    if (catTypeCase_ == 12) {
      output.writeMessage(12, (org.apache.kyuubi.engine.spark.connect.proto.FunctionExists) catType_);
    }
    if (catTypeCase_ == 13) {
      output.writeMessage(13, (org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable) catType_);
    }
    if (catTypeCase_ == 14) {
      output.writeMessage(14, (org.apache.kyuubi.engine.spark.connect.proto.CreateTable) catType_);
    }
    if (catTypeCase_ == 15) {
      output.writeMessage(15, (org.apache.kyuubi.engine.spark.connect.proto.DropTempView) catType_);
    }
    if (catTypeCase_ == 16) {
      output.writeMessage(16, (org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView) catType_);
    }
    if (catTypeCase_ == 17) {
      output.writeMessage(17, (org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions) catType_);
    }
    if (catTypeCase_ == 18) {
      output.writeMessage(18, (org.apache.kyuubi.engine.spark.connect.proto.IsCached) catType_);
    }
    if (catTypeCase_ == 19) {
      output.writeMessage(19, (org.apache.kyuubi.engine.spark.connect.proto.CacheTable) catType_);
    }
    if (catTypeCase_ == 20) {
      output.writeMessage(20, (org.apache.kyuubi.engine.spark.connect.proto.UncacheTable) catType_);
    }
    if (catTypeCase_ == 21) {
      output.writeMessage(21, (org.apache.kyuubi.engine.spark.connect.proto.ClearCache) catType_);
    }
    if (catTypeCase_ == 22) {
      output.writeMessage(22, (org.apache.kyuubi.engine.spark.connect.proto.RefreshTable) catType_);
    }
    if (catTypeCase_ == 23) {
      output.writeMessage(23, (org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath) catType_);
    }
    if (catTypeCase_ == 24) {
      output.writeMessage(24, (org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog) catType_);
    }
    if (catTypeCase_ == 25) {
      output.writeMessage(25, (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog) catType_);
    }
    if (catTypeCase_ == 26) {
      output.writeMessage(26, (org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs) catType_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (catTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase) catType_);
    }
    if (catTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase) catType_);
    }
    if (catTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.apache.kyuubi.engine.spark.connect.proto.ListDatabases) catType_);
    }
    if (catTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.apache.kyuubi.engine.spark.connect.proto.ListTables) catType_);
    }
    if (catTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.apache.kyuubi.engine.spark.connect.proto.ListFunctions) catType_);
    }
    if (catTypeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.apache.kyuubi.engine.spark.connect.proto.ListColumns) catType_);
    }
    if (catTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.apache.kyuubi.engine.spark.connect.proto.GetDatabase) catType_);
    }
    if (catTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (org.apache.kyuubi.engine.spark.connect.proto.GetTable) catType_);
    }
    if (catTypeCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (org.apache.kyuubi.engine.spark.connect.proto.GetFunction) catType_);
    }
    if (catTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists) catType_);
    }
    if (catTypeCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (org.apache.kyuubi.engine.spark.connect.proto.TableExists) catType_);
    }
    if (catTypeCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (org.apache.kyuubi.engine.spark.connect.proto.FunctionExists) catType_);
    }
    if (catTypeCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable) catType_);
    }
    if (catTypeCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (org.apache.kyuubi.engine.spark.connect.proto.CreateTable) catType_);
    }
    if (catTypeCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (org.apache.kyuubi.engine.spark.connect.proto.DropTempView) catType_);
    }
    if (catTypeCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView) catType_);
    }
    if (catTypeCase_ == 17) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, (org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions) catType_);
    }
    if (catTypeCase_ == 18) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, (org.apache.kyuubi.engine.spark.connect.proto.IsCached) catType_);
    }
    if (catTypeCase_ == 19) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, (org.apache.kyuubi.engine.spark.connect.proto.CacheTable) catType_);
    }
    if (catTypeCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (org.apache.kyuubi.engine.spark.connect.proto.UncacheTable) catType_);
    }
    if (catTypeCase_ == 21) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, (org.apache.kyuubi.engine.spark.connect.proto.ClearCache) catType_);
    }
    if (catTypeCase_ == 22) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, (org.apache.kyuubi.engine.spark.connect.proto.RefreshTable) catType_);
    }
    if (catTypeCase_ == 23) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, (org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath) catType_);
    }
    if (catTypeCase_ == 24) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(24, (org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog) catType_);
    }
    if (catTypeCase_ == 25) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(25, (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog) catType_);
    }
    if (catTypeCase_ == 26) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(26, (org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs) catType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.kyuubi.engine.spark.connect.proto.Catalog)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.proto.Catalog other = (org.apache.kyuubi.engine.spark.connect.proto.Catalog) obj;

    if (!getCatTypeCase().equals(other.getCatTypeCase())) return false;
    switch (catTypeCase_) {
      case 1:
        if (!getCurrentDatabase()
            .equals(other.getCurrentDatabase())) return false;
        break;
      case 2:
        if (!getSetCurrentDatabase()
            .equals(other.getSetCurrentDatabase())) return false;
        break;
      case 3:
        if (!getListDatabases()
            .equals(other.getListDatabases())) return false;
        break;
      case 4:
        if (!getListTables()
            .equals(other.getListTables())) return false;
        break;
      case 5:
        if (!getListFunctions()
            .equals(other.getListFunctions())) return false;
        break;
      case 6:
        if (!getListColumns()
            .equals(other.getListColumns())) return false;
        break;
      case 7:
        if (!getGetDatabase()
            .equals(other.getGetDatabase())) return false;
        break;
      case 8:
        if (!getGetTable()
            .equals(other.getGetTable())) return false;
        break;
      case 9:
        if (!getGetFunction()
            .equals(other.getGetFunction())) return false;
        break;
      case 10:
        if (!getDatabaseExists()
            .equals(other.getDatabaseExists())) return false;
        break;
      case 11:
        if (!getTableExists()
            .equals(other.getTableExists())) return false;
        break;
      case 12:
        if (!getFunctionExists()
            .equals(other.getFunctionExists())) return false;
        break;
      case 13:
        if (!getCreateExternalTable()
            .equals(other.getCreateExternalTable())) return false;
        break;
      case 14:
        if (!getCreateTable()
            .equals(other.getCreateTable())) return false;
        break;
      case 15:
        if (!getDropTempView()
            .equals(other.getDropTempView())) return false;
        break;
      case 16:
        if (!getDropGlobalTempView()
            .equals(other.getDropGlobalTempView())) return false;
        break;
      case 17:
        if (!getRecoverPartitions()
            .equals(other.getRecoverPartitions())) return false;
        break;
      case 18:
        if (!getIsCached()
            .equals(other.getIsCached())) return false;
        break;
      case 19:
        if (!getCacheTable()
            .equals(other.getCacheTable())) return false;
        break;
      case 20:
        if (!getUncacheTable()
            .equals(other.getUncacheTable())) return false;
        break;
      case 21:
        if (!getClearCache()
            .equals(other.getClearCache())) return false;
        break;
      case 22:
        if (!getRefreshTable()
            .equals(other.getRefreshTable())) return false;
        break;
      case 23:
        if (!getRefreshByPath()
            .equals(other.getRefreshByPath())) return false;
        break;
      case 24:
        if (!getCurrentCatalog()
            .equals(other.getCurrentCatalog())) return false;
        break;
      case 25:
        if (!getSetCurrentCatalog()
            .equals(other.getSetCurrentCatalog())) return false;
        break;
      case 26:
        if (!getListCatalogs()
            .equals(other.getListCatalogs())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (catTypeCase_) {
      case 1:
        hash = (37 * hash) + CURRENT_DATABASE_FIELD_NUMBER;
        hash = (53 * hash) + getCurrentDatabase().hashCode();
        break;
      case 2:
        hash = (37 * hash) + SET_CURRENT_DATABASE_FIELD_NUMBER;
        hash = (53 * hash) + getSetCurrentDatabase().hashCode();
        break;
      case 3:
        hash = (37 * hash) + LIST_DATABASES_FIELD_NUMBER;
        hash = (53 * hash) + getListDatabases().hashCode();
        break;
      case 4:
        hash = (37 * hash) + LIST_TABLES_FIELD_NUMBER;
        hash = (53 * hash) + getListTables().hashCode();
        break;
      case 5:
        hash = (37 * hash) + LIST_FUNCTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getListFunctions().hashCode();
        break;
      case 6:
        hash = (37 * hash) + LIST_COLUMNS_FIELD_NUMBER;
        hash = (53 * hash) + getListColumns().hashCode();
        break;
      case 7:
        hash = (37 * hash) + GET_DATABASE_FIELD_NUMBER;
        hash = (53 * hash) + getGetDatabase().hashCode();
        break;
      case 8:
        hash = (37 * hash) + GET_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getGetTable().hashCode();
        break;
      case 9:
        hash = (37 * hash) + GET_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getGetFunction().hashCode();
        break;
      case 10:
        hash = (37 * hash) + DATABASE_EXISTS_FIELD_NUMBER;
        hash = (53 * hash) + getDatabaseExists().hashCode();
        break;
      case 11:
        hash = (37 * hash) + TABLE_EXISTS_FIELD_NUMBER;
        hash = (53 * hash) + getTableExists().hashCode();
        break;
      case 12:
        hash = (37 * hash) + FUNCTION_EXISTS_FIELD_NUMBER;
        hash = (53 * hash) + getFunctionExists().hashCode();
        break;
      case 13:
        hash = (37 * hash) + CREATE_EXTERNAL_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getCreateExternalTable().hashCode();
        break;
      case 14:
        hash = (37 * hash) + CREATE_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getCreateTable().hashCode();
        break;
      case 15:
        hash = (37 * hash) + DROP_TEMP_VIEW_FIELD_NUMBER;
        hash = (53 * hash) + getDropTempView().hashCode();
        break;
      case 16:
        hash = (37 * hash) + DROP_GLOBAL_TEMP_VIEW_FIELD_NUMBER;
        hash = (53 * hash) + getDropGlobalTempView().hashCode();
        break;
      case 17:
        hash = (37 * hash) + RECOVER_PARTITIONS_FIELD_NUMBER;
        hash = (53 * hash) + getRecoverPartitions().hashCode();
        break;
      case 18:
        hash = (37 * hash) + IS_CACHED_FIELD_NUMBER;
        hash = (53 * hash) + getIsCached().hashCode();
        break;
      case 19:
        hash = (37 * hash) + CACHE_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getCacheTable().hashCode();
        break;
      case 20:
        hash = (37 * hash) + UNCACHE_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getUncacheTable().hashCode();
        break;
      case 21:
        hash = (37 * hash) + CLEAR_CACHE_FIELD_NUMBER;
        hash = (53 * hash) + getClearCache().hashCode();
        break;
      case 22:
        hash = (37 * hash) + REFRESH_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getRefreshTable().hashCode();
        break;
      case 23:
        hash = (37 * hash) + REFRESH_BY_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getRefreshByPath().hashCode();
        break;
      case 24:
        hash = (37 * hash) + CURRENT_CATALOG_FIELD_NUMBER;
        hash = (53 * hash) + getCurrentCatalog().hashCode();
        break;
      case 25:
        hash = (37 * hash) + SET_CURRENT_CATALOG_FIELD_NUMBER;
        hash = (53 * hash) + getSetCurrentCatalog().hashCode();
        break;
      case 26:
        hash = (37 * hash) + LIST_CATALOGS_FIELD_NUMBER;
        hash = (53 * hash) + getListCatalogs().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.kyuubi.engine.spark.connect.proto.Catalog prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Catalog messages are marked as unstable.
   * </pre>
   *
   * Protobuf type {@code spark.connect.Catalog}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:spark.connect.Catalog)
      org.apache.kyuubi.engine.spark.connect.proto.CatalogOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.proto.CatalogOuterClass.internal_static_spark_connect_Catalog_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.proto.CatalogOuterClass.internal_static_spark_connect_Catalog_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.proto.Catalog.class, org.apache.kyuubi.engine.spark.connect.proto.Catalog.Builder.class);
    }

    // Construct using org.apache.kyuubi.engine.spark.connect.proto.Catalog.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (currentDatabaseBuilder_ != null) {
        currentDatabaseBuilder_.clear();
      }
      if (setCurrentDatabaseBuilder_ != null) {
        setCurrentDatabaseBuilder_.clear();
      }
      if (listDatabasesBuilder_ != null) {
        listDatabasesBuilder_.clear();
      }
      if (listTablesBuilder_ != null) {
        listTablesBuilder_.clear();
      }
      if (listFunctionsBuilder_ != null) {
        listFunctionsBuilder_.clear();
      }
      if (listColumnsBuilder_ != null) {
        listColumnsBuilder_.clear();
      }
      if (getDatabaseBuilder_ != null) {
        getDatabaseBuilder_.clear();
      }
      if (getTableBuilder_ != null) {
        getTableBuilder_.clear();
      }
      if (getFunctionBuilder_ != null) {
        getFunctionBuilder_.clear();
      }
      if (databaseExistsBuilder_ != null) {
        databaseExistsBuilder_.clear();
      }
      if (tableExistsBuilder_ != null) {
        tableExistsBuilder_.clear();
      }
      if (functionExistsBuilder_ != null) {
        functionExistsBuilder_.clear();
      }
      if (createExternalTableBuilder_ != null) {
        createExternalTableBuilder_.clear();
      }
      if (createTableBuilder_ != null) {
        createTableBuilder_.clear();
      }
      if (dropTempViewBuilder_ != null) {
        dropTempViewBuilder_.clear();
      }
      if (dropGlobalTempViewBuilder_ != null) {
        dropGlobalTempViewBuilder_.clear();
      }
      if (recoverPartitionsBuilder_ != null) {
        recoverPartitionsBuilder_.clear();
      }
      if (isCachedBuilder_ != null) {
        isCachedBuilder_.clear();
      }
      if (cacheTableBuilder_ != null) {
        cacheTableBuilder_.clear();
      }
      if (uncacheTableBuilder_ != null) {
        uncacheTableBuilder_.clear();
      }
      if (clearCacheBuilder_ != null) {
        clearCacheBuilder_.clear();
      }
      if (refreshTableBuilder_ != null) {
        refreshTableBuilder_.clear();
      }
      if (refreshByPathBuilder_ != null) {
        refreshByPathBuilder_.clear();
      }
      if (currentCatalogBuilder_ != null) {
        currentCatalogBuilder_.clear();
      }
      if (setCurrentCatalogBuilder_ != null) {
        setCurrentCatalogBuilder_.clear();
      }
      if (listCatalogsBuilder_ != null) {
        listCatalogsBuilder_.clear();
      }
      catTypeCase_ = 0;
      catType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.CatalogOuterClass.internal_static_spark_connect_Catalog_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Catalog getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.proto.Catalog.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Catalog build() {
      org.apache.kyuubi.engine.spark.connect.proto.Catalog result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.Catalog buildPartial() {
      org.apache.kyuubi.engine.spark.connect.proto.Catalog result = new org.apache.kyuubi.engine.spark.connect.proto.Catalog(this);
      if (catTypeCase_ == 1) {
        if (currentDatabaseBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = currentDatabaseBuilder_.build();
        }
      }
      if (catTypeCase_ == 2) {
        if (setCurrentDatabaseBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = setCurrentDatabaseBuilder_.build();
        }
      }
      if (catTypeCase_ == 3) {
        if (listDatabasesBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = listDatabasesBuilder_.build();
        }
      }
      if (catTypeCase_ == 4) {
        if (listTablesBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = listTablesBuilder_.build();
        }
      }
      if (catTypeCase_ == 5) {
        if (listFunctionsBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = listFunctionsBuilder_.build();
        }
      }
      if (catTypeCase_ == 6) {
        if (listColumnsBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = listColumnsBuilder_.build();
        }
      }
      if (catTypeCase_ == 7) {
        if (getDatabaseBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = getDatabaseBuilder_.build();
        }
      }
      if (catTypeCase_ == 8) {
        if (getTableBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = getTableBuilder_.build();
        }
      }
      if (catTypeCase_ == 9) {
        if (getFunctionBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = getFunctionBuilder_.build();
        }
      }
      if (catTypeCase_ == 10) {
        if (databaseExistsBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = databaseExistsBuilder_.build();
        }
      }
      if (catTypeCase_ == 11) {
        if (tableExistsBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = tableExistsBuilder_.build();
        }
      }
      if (catTypeCase_ == 12) {
        if (functionExistsBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = functionExistsBuilder_.build();
        }
      }
      if (catTypeCase_ == 13) {
        if (createExternalTableBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = createExternalTableBuilder_.build();
        }
      }
      if (catTypeCase_ == 14) {
        if (createTableBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = createTableBuilder_.build();
        }
      }
      if (catTypeCase_ == 15) {
        if (dropTempViewBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = dropTempViewBuilder_.build();
        }
      }
      if (catTypeCase_ == 16) {
        if (dropGlobalTempViewBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = dropGlobalTempViewBuilder_.build();
        }
      }
      if (catTypeCase_ == 17) {
        if (recoverPartitionsBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = recoverPartitionsBuilder_.build();
        }
      }
      if (catTypeCase_ == 18) {
        if (isCachedBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = isCachedBuilder_.build();
        }
      }
      if (catTypeCase_ == 19) {
        if (cacheTableBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = cacheTableBuilder_.build();
        }
      }
      if (catTypeCase_ == 20) {
        if (uncacheTableBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = uncacheTableBuilder_.build();
        }
      }
      if (catTypeCase_ == 21) {
        if (clearCacheBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = clearCacheBuilder_.build();
        }
      }
      if (catTypeCase_ == 22) {
        if (refreshTableBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = refreshTableBuilder_.build();
        }
      }
      if (catTypeCase_ == 23) {
        if (refreshByPathBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = refreshByPathBuilder_.build();
        }
      }
      if (catTypeCase_ == 24) {
        if (currentCatalogBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = currentCatalogBuilder_.build();
        }
      }
      if (catTypeCase_ == 25) {
        if (setCurrentCatalogBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = setCurrentCatalogBuilder_.build();
        }
      }
      if (catTypeCase_ == 26) {
        if (listCatalogsBuilder_ == null) {
          result.catType_ = catType_;
        } else {
          result.catType_ = listCatalogsBuilder_.build();
        }
      }
      result.catTypeCase_ = catTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.kyuubi.engine.spark.connect.proto.Catalog) {
        return mergeFrom((org.apache.kyuubi.engine.spark.connect.proto.Catalog)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.kyuubi.engine.spark.connect.proto.Catalog other) {
      if (other == org.apache.kyuubi.engine.spark.connect.proto.Catalog.getDefaultInstance()) return this;
      switch (other.getCatTypeCase()) {
        case CURRENT_DATABASE: {
          mergeCurrentDatabase(other.getCurrentDatabase());
          break;
        }
        case SET_CURRENT_DATABASE: {
          mergeSetCurrentDatabase(other.getSetCurrentDatabase());
          break;
        }
        case LIST_DATABASES: {
          mergeListDatabases(other.getListDatabases());
          break;
        }
        case LIST_TABLES: {
          mergeListTables(other.getListTables());
          break;
        }
        case LIST_FUNCTIONS: {
          mergeListFunctions(other.getListFunctions());
          break;
        }
        case LIST_COLUMNS: {
          mergeListColumns(other.getListColumns());
          break;
        }
        case GET_DATABASE: {
          mergeGetDatabase(other.getGetDatabase());
          break;
        }
        case GET_TABLE: {
          mergeGetTable(other.getGetTable());
          break;
        }
        case GET_FUNCTION: {
          mergeGetFunction(other.getGetFunction());
          break;
        }
        case DATABASE_EXISTS: {
          mergeDatabaseExists(other.getDatabaseExists());
          break;
        }
        case TABLE_EXISTS: {
          mergeTableExists(other.getTableExists());
          break;
        }
        case FUNCTION_EXISTS: {
          mergeFunctionExists(other.getFunctionExists());
          break;
        }
        case CREATE_EXTERNAL_TABLE: {
          mergeCreateExternalTable(other.getCreateExternalTable());
          break;
        }
        case CREATE_TABLE: {
          mergeCreateTable(other.getCreateTable());
          break;
        }
        case DROP_TEMP_VIEW: {
          mergeDropTempView(other.getDropTempView());
          break;
        }
        case DROP_GLOBAL_TEMP_VIEW: {
          mergeDropGlobalTempView(other.getDropGlobalTempView());
          break;
        }
        case RECOVER_PARTITIONS: {
          mergeRecoverPartitions(other.getRecoverPartitions());
          break;
        }
        case IS_CACHED: {
          mergeIsCached(other.getIsCached());
          break;
        }
        case CACHE_TABLE: {
          mergeCacheTable(other.getCacheTable());
          break;
        }
        case UNCACHE_TABLE: {
          mergeUncacheTable(other.getUncacheTable());
          break;
        }
        case CLEAR_CACHE: {
          mergeClearCache(other.getClearCache());
          break;
        }
        case REFRESH_TABLE: {
          mergeRefreshTable(other.getRefreshTable());
          break;
        }
        case REFRESH_BY_PATH: {
          mergeRefreshByPath(other.getRefreshByPath());
          break;
        }
        case CURRENT_CATALOG: {
          mergeCurrentCatalog(other.getCurrentCatalog());
          break;
        }
        case SET_CURRENT_CATALOG: {
          mergeSetCurrentCatalog(other.getSetCurrentCatalog());
          break;
        }
        case LIST_CATALOGS: {
          mergeListCatalogs(other.getListCatalogs());
          break;
        }
        case CATTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getCurrentDatabaseFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getSetCurrentDatabaseFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getListDatabasesFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getListTablesFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getListFunctionsFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getListColumnsFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getGetDatabaseFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 7;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getGetTableFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 8;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getGetFunctionFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 9;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getDatabaseExistsFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 10;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getTableExistsFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 11;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getFunctionExistsFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 12;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getCreateExternalTableFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 13;
              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getCreateTableFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 14;
              break;
            } // case 114
            case 122: {
              input.readMessage(
                  getDropTempViewFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 15;
              break;
            } // case 122
            case 130: {
              input.readMessage(
                  getDropGlobalTempViewFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 16;
              break;
            } // case 130
            case 138: {
              input.readMessage(
                  getRecoverPartitionsFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 17;
              break;
            } // case 138
            case 146: {
              input.readMessage(
                  getIsCachedFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 18;
              break;
            } // case 146
            case 154: {
              input.readMessage(
                  getCacheTableFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 19;
              break;
            } // case 154
            case 162: {
              input.readMessage(
                  getUncacheTableFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 20;
              break;
            } // case 162
            case 170: {
              input.readMessage(
                  getClearCacheFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 21;
              break;
            } // case 170
            case 178: {
              input.readMessage(
                  getRefreshTableFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 22;
              break;
            } // case 178
            case 186: {
              input.readMessage(
                  getRefreshByPathFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 23;
              break;
            } // case 186
            case 194: {
              input.readMessage(
                  getCurrentCatalogFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 24;
              break;
            } // case 194
            case 202: {
              input.readMessage(
                  getSetCurrentCatalogFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 25;
              break;
            } // case 202
            case 210: {
              input.readMessage(
                  getListCatalogsFieldBuilder().getBuilder(),
                  extensionRegistry);
              catTypeCase_ = 26;
              break;
            } // case 210
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int catTypeCase_ = 0;
    private java.lang.Object catType_;
    public CatTypeCase
        getCatTypeCase() {
      return CatTypeCase.forNumber(
          catTypeCase_);
    }

    public Builder clearCatType() {
      catTypeCase_ = 0;
      catType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase, org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.Builder, org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabaseOrBuilder> currentDatabaseBuilder_;
    /**
     * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
     * @return Whether the currentDatabase field is set.
     */
    @java.lang.Override
    public boolean hasCurrentDatabase() {
      return catTypeCase_ == 1;
    }
    /**
     * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
     * @return The currentDatabase.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase getCurrentDatabase() {
      if (currentDatabaseBuilder_ == null) {
        if (catTypeCase_ == 1) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.getDefaultInstance();
      } else {
        if (catTypeCase_ == 1) {
          return currentDatabaseBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
     */
    public Builder setCurrentDatabase(org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase value) {
      if (currentDatabaseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        currentDatabaseBuilder_.setMessage(value);
      }
      catTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
     */
    public Builder setCurrentDatabase(
        org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.Builder builderForValue) {
      if (currentDatabaseBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        currentDatabaseBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
     */
    public Builder mergeCurrentDatabase(org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase value) {
      if (currentDatabaseBuilder_ == null) {
        if (catTypeCase_ == 1 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 1) {
          currentDatabaseBuilder_.mergeFrom(value);
        } else {
          currentDatabaseBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
     */
    public Builder clearCurrentDatabase() {
      if (currentDatabaseBuilder_ == null) {
        if (catTypeCase_ == 1) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 1) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        currentDatabaseBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.Builder getCurrentDatabaseBuilder() {
      return getCurrentDatabaseFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabaseOrBuilder getCurrentDatabaseOrBuilder() {
      if ((catTypeCase_ == 1) && (currentDatabaseBuilder_ != null)) {
        return currentDatabaseBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 1) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CurrentDatabase current_database = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase, org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.Builder, org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabaseOrBuilder> 
        getCurrentDatabaseFieldBuilder() {
      if (currentDatabaseBuilder_ == null) {
        if (!(catTypeCase_ == 1)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.getDefaultInstance();
        }
        currentDatabaseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase, org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase.Builder, org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabaseOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.CurrentDatabase) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 1;
      onChanged();;
      return currentDatabaseBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.Builder, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabaseOrBuilder> setCurrentDatabaseBuilder_;
    /**
     * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
     * @return Whether the setCurrentDatabase field is set.
     */
    @java.lang.Override
    public boolean hasSetCurrentDatabase() {
      return catTypeCase_ == 2;
    }
    /**
     * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
     * @return The setCurrentDatabase.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase getSetCurrentDatabase() {
      if (setCurrentDatabaseBuilder_ == null) {
        if (catTypeCase_ == 2) {
          return (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.getDefaultInstance();
      } else {
        if (catTypeCase_ == 2) {
          return setCurrentDatabaseBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
     */
    public Builder setSetCurrentDatabase(org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase value) {
      if (setCurrentDatabaseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        setCurrentDatabaseBuilder_.setMessage(value);
      }
      catTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
     */
    public Builder setSetCurrentDatabase(
        org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.Builder builderForValue) {
      if (setCurrentDatabaseBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        setCurrentDatabaseBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
     */
    public Builder mergeSetCurrentDatabase(org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase value) {
      if (setCurrentDatabaseBuilder_ == null) {
        if (catTypeCase_ == 2 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 2) {
          setCurrentDatabaseBuilder_.mergeFrom(value);
        } else {
          setCurrentDatabaseBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
     */
    public Builder clearSetCurrentDatabase() {
      if (setCurrentDatabaseBuilder_ == null) {
        if (catTypeCase_ == 2) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 2) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        setCurrentDatabaseBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.Builder getSetCurrentDatabaseBuilder() {
      return getSetCurrentDatabaseFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabaseOrBuilder getSetCurrentDatabaseOrBuilder() {
      if ((catTypeCase_ == 2) && (setCurrentDatabaseBuilder_ != null)) {
        return setCurrentDatabaseBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 2) {
          return (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SetCurrentDatabase set_current_database = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.Builder, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabaseOrBuilder> 
        getSetCurrentDatabaseFieldBuilder() {
      if (setCurrentDatabaseBuilder_ == null) {
        if (!(catTypeCase_ == 2)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.getDefaultInstance();
        }
        setCurrentDatabaseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase.Builder, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabaseOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentDatabase) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 2;
      onChanged();;
      return setCurrentDatabaseBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ListDatabases, org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListDatabasesOrBuilder> listDatabasesBuilder_;
    /**
     * <code>.spark.connect.ListDatabases list_databases = 3;</code>
     * @return Whether the listDatabases field is set.
     */
    @java.lang.Override
    public boolean hasListDatabases() {
      return catTypeCase_ == 3;
    }
    /**
     * <code>.spark.connect.ListDatabases list_databases = 3;</code>
     * @return The listDatabases.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ListDatabases getListDatabases() {
      if (listDatabasesBuilder_ == null) {
        if (catTypeCase_ == 3) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ListDatabases) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.getDefaultInstance();
      } else {
        if (catTypeCase_ == 3) {
          return listDatabasesBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ListDatabases list_databases = 3;</code>
     */
    public Builder setListDatabases(org.apache.kyuubi.engine.spark.connect.proto.ListDatabases value) {
      if (listDatabasesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        listDatabasesBuilder_.setMessage(value);
      }
      catTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.ListDatabases list_databases = 3;</code>
     */
    public Builder setListDatabases(
        org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.Builder builderForValue) {
      if (listDatabasesBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        listDatabasesBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.ListDatabases list_databases = 3;</code>
     */
    public Builder mergeListDatabases(org.apache.kyuubi.engine.spark.connect.proto.ListDatabases value) {
      if (listDatabasesBuilder_ == null) {
        if (catTypeCase_ == 3 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.ListDatabases) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 3) {
          listDatabasesBuilder_.mergeFrom(value);
        } else {
          listDatabasesBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.spark.connect.ListDatabases list_databases = 3;</code>
     */
    public Builder clearListDatabases() {
      if (listDatabasesBuilder_ == null) {
        if (catTypeCase_ == 3) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 3) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        listDatabasesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.ListDatabases list_databases = 3;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.Builder getListDatabasesBuilder() {
      return getListDatabasesFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.ListDatabases list_databases = 3;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ListDatabasesOrBuilder getListDatabasesOrBuilder() {
      if ((catTypeCase_ == 3) && (listDatabasesBuilder_ != null)) {
        return listDatabasesBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 3) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ListDatabases) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ListDatabases list_databases = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ListDatabases, org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListDatabasesOrBuilder> 
        getListDatabasesFieldBuilder() {
      if (listDatabasesBuilder_ == null) {
        if (!(catTypeCase_ == 3)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.getDefaultInstance();
        }
        listDatabasesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.ListDatabases, org.apache.kyuubi.engine.spark.connect.proto.ListDatabases.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListDatabasesOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.ListDatabases) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 3;
      onChanged();;
      return listDatabasesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ListTables, org.apache.kyuubi.engine.spark.connect.proto.ListTables.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListTablesOrBuilder> listTablesBuilder_;
    /**
     * <code>.spark.connect.ListTables list_tables = 4;</code>
     * @return Whether the listTables field is set.
     */
    @java.lang.Override
    public boolean hasListTables() {
      return catTypeCase_ == 4;
    }
    /**
     * <code>.spark.connect.ListTables list_tables = 4;</code>
     * @return The listTables.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ListTables getListTables() {
      if (listTablesBuilder_ == null) {
        if (catTypeCase_ == 4) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ListTables) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListTables.getDefaultInstance();
      } else {
        if (catTypeCase_ == 4) {
          return listTablesBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListTables.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ListTables list_tables = 4;</code>
     */
    public Builder setListTables(org.apache.kyuubi.engine.spark.connect.proto.ListTables value) {
      if (listTablesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        listTablesBuilder_.setMessage(value);
      }
      catTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.ListTables list_tables = 4;</code>
     */
    public Builder setListTables(
        org.apache.kyuubi.engine.spark.connect.proto.ListTables.Builder builderForValue) {
      if (listTablesBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        listTablesBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.ListTables list_tables = 4;</code>
     */
    public Builder mergeListTables(org.apache.kyuubi.engine.spark.connect.proto.ListTables value) {
      if (listTablesBuilder_ == null) {
        if (catTypeCase_ == 4 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.ListTables.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ListTables.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.ListTables) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 4) {
          listTablesBuilder_.mergeFrom(value);
        } else {
          listTablesBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.spark.connect.ListTables list_tables = 4;</code>
     */
    public Builder clearListTables() {
      if (listTablesBuilder_ == null) {
        if (catTypeCase_ == 4) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 4) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        listTablesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.ListTables list_tables = 4;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.ListTables.Builder getListTablesBuilder() {
      return getListTablesFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.ListTables list_tables = 4;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ListTablesOrBuilder getListTablesOrBuilder() {
      if ((catTypeCase_ == 4) && (listTablesBuilder_ != null)) {
        return listTablesBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 4) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ListTables) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListTables.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ListTables list_tables = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ListTables, org.apache.kyuubi.engine.spark.connect.proto.ListTables.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListTablesOrBuilder> 
        getListTablesFieldBuilder() {
      if (listTablesBuilder_ == null) {
        if (!(catTypeCase_ == 4)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ListTables.getDefaultInstance();
        }
        listTablesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.ListTables, org.apache.kyuubi.engine.spark.connect.proto.ListTables.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListTablesOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.ListTables) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 4;
      onChanged();;
      return listTablesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ListFunctions, org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListFunctionsOrBuilder> listFunctionsBuilder_;
    /**
     * <code>.spark.connect.ListFunctions list_functions = 5;</code>
     * @return Whether the listFunctions field is set.
     */
    @java.lang.Override
    public boolean hasListFunctions() {
      return catTypeCase_ == 5;
    }
    /**
     * <code>.spark.connect.ListFunctions list_functions = 5;</code>
     * @return The listFunctions.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ListFunctions getListFunctions() {
      if (listFunctionsBuilder_ == null) {
        if (catTypeCase_ == 5) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ListFunctions) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.getDefaultInstance();
      } else {
        if (catTypeCase_ == 5) {
          return listFunctionsBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ListFunctions list_functions = 5;</code>
     */
    public Builder setListFunctions(org.apache.kyuubi.engine.spark.connect.proto.ListFunctions value) {
      if (listFunctionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        listFunctionsBuilder_.setMessage(value);
      }
      catTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.ListFunctions list_functions = 5;</code>
     */
    public Builder setListFunctions(
        org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.Builder builderForValue) {
      if (listFunctionsBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        listFunctionsBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.ListFunctions list_functions = 5;</code>
     */
    public Builder mergeListFunctions(org.apache.kyuubi.engine.spark.connect.proto.ListFunctions value) {
      if (listFunctionsBuilder_ == null) {
        if (catTypeCase_ == 5 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.ListFunctions) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 5) {
          listFunctionsBuilder_.mergeFrom(value);
        } else {
          listFunctionsBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.spark.connect.ListFunctions list_functions = 5;</code>
     */
    public Builder clearListFunctions() {
      if (listFunctionsBuilder_ == null) {
        if (catTypeCase_ == 5) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 5) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        listFunctionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.ListFunctions list_functions = 5;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.Builder getListFunctionsBuilder() {
      return getListFunctionsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.ListFunctions list_functions = 5;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ListFunctionsOrBuilder getListFunctionsOrBuilder() {
      if ((catTypeCase_ == 5) && (listFunctionsBuilder_ != null)) {
        return listFunctionsBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 5) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ListFunctions) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ListFunctions list_functions = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ListFunctions, org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListFunctionsOrBuilder> 
        getListFunctionsFieldBuilder() {
      if (listFunctionsBuilder_ == null) {
        if (!(catTypeCase_ == 5)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.getDefaultInstance();
        }
        listFunctionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.ListFunctions, org.apache.kyuubi.engine.spark.connect.proto.ListFunctions.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListFunctionsOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.ListFunctions) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 5;
      onChanged();;
      return listFunctionsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ListColumns, org.apache.kyuubi.engine.spark.connect.proto.ListColumns.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListColumnsOrBuilder> listColumnsBuilder_;
    /**
     * <code>.spark.connect.ListColumns list_columns = 6;</code>
     * @return Whether the listColumns field is set.
     */
    @java.lang.Override
    public boolean hasListColumns() {
      return catTypeCase_ == 6;
    }
    /**
     * <code>.spark.connect.ListColumns list_columns = 6;</code>
     * @return The listColumns.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ListColumns getListColumns() {
      if (listColumnsBuilder_ == null) {
        if (catTypeCase_ == 6) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ListColumns) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListColumns.getDefaultInstance();
      } else {
        if (catTypeCase_ == 6) {
          return listColumnsBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListColumns.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ListColumns list_columns = 6;</code>
     */
    public Builder setListColumns(org.apache.kyuubi.engine.spark.connect.proto.ListColumns value) {
      if (listColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        listColumnsBuilder_.setMessage(value);
      }
      catTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.ListColumns list_columns = 6;</code>
     */
    public Builder setListColumns(
        org.apache.kyuubi.engine.spark.connect.proto.ListColumns.Builder builderForValue) {
      if (listColumnsBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        listColumnsBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.ListColumns list_columns = 6;</code>
     */
    public Builder mergeListColumns(org.apache.kyuubi.engine.spark.connect.proto.ListColumns value) {
      if (listColumnsBuilder_ == null) {
        if (catTypeCase_ == 6 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.ListColumns.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ListColumns.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.ListColumns) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 6) {
          listColumnsBuilder_.mergeFrom(value);
        } else {
          listColumnsBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.spark.connect.ListColumns list_columns = 6;</code>
     */
    public Builder clearListColumns() {
      if (listColumnsBuilder_ == null) {
        if (catTypeCase_ == 6) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 6) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        listColumnsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.ListColumns list_columns = 6;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.ListColumns.Builder getListColumnsBuilder() {
      return getListColumnsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.ListColumns list_columns = 6;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ListColumnsOrBuilder getListColumnsOrBuilder() {
      if ((catTypeCase_ == 6) && (listColumnsBuilder_ != null)) {
        return listColumnsBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 6) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ListColumns) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListColumns.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ListColumns list_columns = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ListColumns, org.apache.kyuubi.engine.spark.connect.proto.ListColumns.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListColumnsOrBuilder> 
        getListColumnsFieldBuilder() {
      if (listColumnsBuilder_ == null) {
        if (!(catTypeCase_ == 6)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ListColumns.getDefaultInstance();
        }
        listColumnsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.ListColumns, org.apache.kyuubi.engine.spark.connect.proto.ListColumns.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListColumnsOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.ListColumns) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 6;
      onChanged();;
      return listColumnsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.GetDatabase, org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetDatabaseOrBuilder> getDatabaseBuilder_;
    /**
     * <code>.spark.connect.GetDatabase get_database = 7;</code>
     * @return Whether the getDatabase field is set.
     */
    @java.lang.Override
    public boolean hasGetDatabase() {
      return catTypeCase_ == 7;
    }
    /**
     * <code>.spark.connect.GetDatabase get_database = 7;</code>
     * @return The getDatabase.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.GetDatabase getGetDatabase() {
      if (getDatabaseBuilder_ == null) {
        if (catTypeCase_ == 7) {
          return (org.apache.kyuubi.engine.spark.connect.proto.GetDatabase) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.getDefaultInstance();
      } else {
        if (catTypeCase_ == 7) {
          return getDatabaseBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.GetDatabase get_database = 7;</code>
     */
    public Builder setGetDatabase(org.apache.kyuubi.engine.spark.connect.proto.GetDatabase value) {
      if (getDatabaseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        getDatabaseBuilder_.setMessage(value);
      }
      catTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.GetDatabase get_database = 7;</code>
     */
    public Builder setGetDatabase(
        org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.Builder builderForValue) {
      if (getDatabaseBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        getDatabaseBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.GetDatabase get_database = 7;</code>
     */
    public Builder mergeGetDatabase(org.apache.kyuubi.engine.spark.connect.proto.GetDatabase value) {
      if (getDatabaseBuilder_ == null) {
        if (catTypeCase_ == 7 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.GetDatabase) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 7) {
          getDatabaseBuilder_.mergeFrom(value);
        } else {
          getDatabaseBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.spark.connect.GetDatabase get_database = 7;</code>
     */
    public Builder clearGetDatabase() {
      if (getDatabaseBuilder_ == null) {
        if (catTypeCase_ == 7) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 7) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        getDatabaseBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.GetDatabase get_database = 7;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.Builder getGetDatabaseBuilder() {
      return getGetDatabaseFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.GetDatabase get_database = 7;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.GetDatabaseOrBuilder getGetDatabaseOrBuilder() {
      if ((catTypeCase_ == 7) && (getDatabaseBuilder_ != null)) {
        return getDatabaseBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 7) {
          return (org.apache.kyuubi.engine.spark.connect.proto.GetDatabase) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.GetDatabase get_database = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.GetDatabase, org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetDatabaseOrBuilder> 
        getGetDatabaseFieldBuilder() {
      if (getDatabaseBuilder_ == null) {
        if (!(catTypeCase_ == 7)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.getDefaultInstance();
        }
        getDatabaseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.GetDatabase, org.apache.kyuubi.engine.spark.connect.proto.GetDatabase.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetDatabaseOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.GetDatabase) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 7;
      onChanged();;
      return getDatabaseBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.GetTable, org.apache.kyuubi.engine.spark.connect.proto.GetTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetTableOrBuilder> getTableBuilder_;
    /**
     * <code>.spark.connect.GetTable get_table = 8;</code>
     * @return Whether the getTable field is set.
     */
    @java.lang.Override
    public boolean hasGetTable() {
      return catTypeCase_ == 8;
    }
    /**
     * <code>.spark.connect.GetTable get_table = 8;</code>
     * @return The getTable.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.GetTable getGetTable() {
      if (getTableBuilder_ == null) {
        if (catTypeCase_ == 8) {
          return (org.apache.kyuubi.engine.spark.connect.proto.GetTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetTable.getDefaultInstance();
      } else {
        if (catTypeCase_ == 8) {
          return getTableBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.GetTable get_table = 8;</code>
     */
    public Builder setGetTable(org.apache.kyuubi.engine.spark.connect.proto.GetTable value) {
      if (getTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        getTableBuilder_.setMessage(value);
      }
      catTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.GetTable get_table = 8;</code>
     */
    public Builder setGetTable(
        org.apache.kyuubi.engine.spark.connect.proto.GetTable.Builder builderForValue) {
      if (getTableBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        getTableBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.GetTable get_table = 8;</code>
     */
    public Builder mergeGetTable(org.apache.kyuubi.engine.spark.connect.proto.GetTable value) {
      if (getTableBuilder_ == null) {
        if (catTypeCase_ == 8 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.GetTable.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.GetTable.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.GetTable) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 8) {
          getTableBuilder_.mergeFrom(value);
        } else {
          getTableBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.spark.connect.GetTable get_table = 8;</code>
     */
    public Builder clearGetTable() {
      if (getTableBuilder_ == null) {
        if (catTypeCase_ == 8) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 8) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        getTableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.GetTable get_table = 8;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.GetTable.Builder getGetTableBuilder() {
      return getGetTableFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.GetTable get_table = 8;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.GetTableOrBuilder getGetTableOrBuilder() {
      if ((catTypeCase_ == 8) && (getTableBuilder_ != null)) {
        return getTableBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 8) {
          return (org.apache.kyuubi.engine.spark.connect.proto.GetTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.GetTable get_table = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.GetTable, org.apache.kyuubi.engine.spark.connect.proto.GetTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetTableOrBuilder> 
        getGetTableFieldBuilder() {
      if (getTableBuilder_ == null) {
        if (!(catTypeCase_ == 8)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.GetTable.getDefaultInstance();
        }
        getTableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.GetTable, org.apache.kyuubi.engine.spark.connect.proto.GetTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetTableOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.GetTable) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 8;
      onChanged();;
      return getTableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.GetFunction, org.apache.kyuubi.engine.spark.connect.proto.GetFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetFunctionOrBuilder> getFunctionBuilder_;
    /**
     * <code>.spark.connect.GetFunction get_function = 9;</code>
     * @return Whether the getFunction field is set.
     */
    @java.lang.Override
    public boolean hasGetFunction() {
      return catTypeCase_ == 9;
    }
    /**
     * <code>.spark.connect.GetFunction get_function = 9;</code>
     * @return The getFunction.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.GetFunction getGetFunction() {
      if (getFunctionBuilder_ == null) {
        if (catTypeCase_ == 9) {
          return (org.apache.kyuubi.engine.spark.connect.proto.GetFunction) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetFunction.getDefaultInstance();
      } else {
        if (catTypeCase_ == 9) {
          return getFunctionBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.GetFunction get_function = 9;</code>
     */
    public Builder setGetFunction(org.apache.kyuubi.engine.spark.connect.proto.GetFunction value) {
      if (getFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        getFunctionBuilder_.setMessage(value);
      }
      catTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.GetFunction get_function = 9;</code>
     */
    public Builder setGetFunction(
        org.apache.kyuubi.engine.spark.connect.proto.GetFunction.Builder builderForValue) {
      if (getFunctionBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        getFunctionBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.GetFunction get_function = 9;</code>
     */
    public Builder mergeGetFunction(org.apache.kyuubi.engine.spark.connect.proto.GetFunction value) {
      if (getFunctionBuilder_ == null) {
        if (catTypeCase_ == 9 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.GetFunction.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.GetFunction.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.GetFunction) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 9) {
          getFunctionBuilder_.mergeFrom(value);
        } else {
          getFunctionBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.spark.connect.GetFunction get_function = 9;</code>
     */
    public Builder clearGetFunction() {
      if (getFunctionBuilder_ == null) {
        if (catTypeCase_ == 9) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 9) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        getFunctionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.GetFunction get_function = 9;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.GetFunction.Builder getGetFunctionBuilder() {
      return getGetFunctionFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.GetFunction get_function = 9;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.GetFunctionOrBuilder getGetFunctionOrBuilder() {
      if ((catTypeCase_ == 9) && (getFunctionBuilder_ != null)) {
        return getFunctionBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 9) {
          return (org.apache.kyuubi.engine.spark.connect.proto.GetFunction) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.GetFunction.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.GetFunction get_function = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.GetFunction, org.apache.kyuubi.engine.spark.connect.proto.GetFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetFunctionOrBuilder> 
        getGetFunctionFieldBuilder() {
      if (getFunctionBuilder_ == null) {
        if (!(catTypeCase_ == 9)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.GetFunction.getDefaultInstance();
        }
        getFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.GetFunction, org.apache.kyuubi.engine.spark.connect.proto.GetFunction.Builder, org.apache.kyuubi.engine.spark.connect.proto.GetFunctionOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.GetFunction) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 9;
      onChanged();;
      return getFunctionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists, org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.Builder, org.apache.kyuubi.engine.spark.connect.proto.DatabaseExistsOrBuilder> databaseExistsBuilder_;
    /**
     * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
     * @return Whether the databaseExists field is set.
     */
    @java.lang.Override
    public boolean hasDatabaseExists() {
      return catTypeCase_ == 10;
    }
    /**
     * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
     * @return The databaseExists.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists getDatabaseExists() {
      if (databaseExistsBuilder_ == null) {
        if (catTypeCase_ == 10) {
          return (org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.getDefaultInstance();
      } else {
        if (catTypeCase_ == 10) {
          return databaseExistsBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
     */
    public Builder setDatabaseExists(org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists value) {
      if (databaseExistsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        databaseExistsBuilder_.setMessage(value);
      }
      catTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
     */
    public Builder setDatabaseExists(
        org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.Builder builderForValue) {
      if (databaseExistsBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        databaseExistsBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
     */
    public Builder mergeDatabaseExists(org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists value) {
      if (databaseExistsBuilder_ == null) {
        if (catTypeCase_ == 10 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 10) {
          databaseExistsBuilder_.mergeFrom(value);
        } else {
          databaseExistsBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
     */
    public Builder clearDatabaseExists() {
      if (databaseExistsBuilder_ == null) {
        if (catTypeCase_ == 10) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 10) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        databaseExistsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.Builder getDatabaseExistsBuilder() {
      return getDatabaseExistsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.DatabaseExistsOrBuilder getDatabaseExistsOrBuilder() {
      if ((catTypeCase_ == 10) && (databaseExistsBuilder_ != null)) {
        return databaseExistsBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 10) {
          return (org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.DatabaseExists database_exists = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists, org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.Builder, org.apache.kyuubi.engine.spark.connect.proto.DatabaseExistsOrBuilder> 
        getDatabaseExistsFieldBuilder() {
      if (databaseExistsBuilder_ == null) {
        if (!(catTypeCase_ == 10)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.getDefaultInstance();
        }
        databaseExistsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists, org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists.Builder, org.apache.kyuubi.engine.spark.connect.proto.DatabaseExistsOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.DatabaseExists) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 10;
      onChanged();;
      return databaseExistsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.TableExists, org.apache.kyuubi.engine.spark.connect.proto.TableExists.Builder, org.apache.kyuubi.engine.spark.connect.proto.TableExistsOrBuilder> tableExistsBuilder_;
    /**
     * <code>.spark.connect.TableExists table_exists = 11;</code>
     * @return Whether the tableExists field is set.
     */
    @java.lang.Override
    public boolean hasTableExists() {
      return catTypeCase_ == 11;
    }
    /**
     * <code>.spark.connect.TableExists table_exists = 11;</code>
     * @return The tableExists.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.TableExists getTableExists() {
      if (tableExistsBuilder_ == null) {
        if (catTypeCase_ == 11) {
          return (org.apache.kyuubi.engine.spark.connect.proto.TableExists) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.TableExists.getDefaultInstance();
      } else {
        if (catTypeCase_ == 11) {
          return tableExistsBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.TableExists.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.TableExists table_exists = 11;</code>
     */
    public Builder setTableExists(org.apache.kyuubi.engine.spark.connect.proto.TableExists value) {
      if (tableExistsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        tableExistsBuilder_.setMessage(value);
      }
      catTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.spark.connect.TableExists table_exists = 11;</code>
     */
    public Builder setTableExists(
        org.apache.kyuubi.engine.spark.connect.proto.TableExists.Builder builderForValue) {
      if (tableExistsBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        tableExistsBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.spark.connect.TableExists table_exists = 11;</code>
     */
    public Builder mergeTableExists(org.apache.kyuubi.engine.spark.connect.proto.TableExists value) {
      if (tableExistsBuilder_ == null) {
        if (catTypeCase_ == 11 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.TableExists.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.TableExists.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.TableExists) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 11) {
          tableExistsBuilder_.mergeFrom(value);
        } else {
          tableExistsBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.spark.connect.TableExists table_exists = 11;</code>
     */
    public Builder clearTableExists() {
      if (tableExistsBuilder_ == null) {
        if (catTypeCase_ == 11) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 11) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        tableExistsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.TableExists table_exists = 11;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.TableExists.Builder getTableExistsBuilder() {
      return getTableExistsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.TableExists table_exists = 11;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.TableExistsOrBuilder getTableExistsOrBuilder() {
      if ((catTypeCase_ == 11) && (tableExistsBuilder_ != null)) {
        return tableExistsBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 11) {
          return (org.apache.kyuubi.engine.spark.connect.proto.TableExists) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.TableExists.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.TableExists table_exists = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.TableExists, org.apache.kyuubi.engine.spark.connect.proto.TableExists.Builder, org.apache.kyuubi.engine.spark.connect.proto.TableExistsOrBuilder> 
        getTableExistsFieldBuilder() {
      if (tableExistsBuilder_ == null) {
        if (!(catTypeCase_ == 11)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.TableExists.getDefaultInstance();
        }
        tableExistsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.TableExists, org.apache.kyuubi.engine.spark.connect.proto.TableExists.Builder, org.apache.kyuubi.engine.spark.connect.proto.TableExistsOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.TableExists) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 11;
      onChanged();;
      return tableExistsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.FunctionExists, org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.Builder, org.apache.kyuubi.engine.spark.connect.proto.FunctionExistsOrBuilder> functionExistsBuilder_;
    /**
     * <code>.spark.connect.FunctionExists function_exists = 12;</code>
     * @return Whether the functionExists field is set.
     */
    @java.lang.Override
    public boolean hasFunctionExists() {
      return catTypeCase_ == 12;
    }
    /**
     * <code>.spark.connect.FunctionExists function_exists = 12;</code>
     * @return The functionExists.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.FunctionExists getFunctionExists() {
      if (functionExistsBuilder_ == null) {
        if (catTypeCase_ == 12) {
          return (org.apache.kyuubi.engine.spark.connect.proto.FunctionExists) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.getDefaultInstance();
      } else {
        if (catTypeCase_ == 12) {
          return functionExistsBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.FunctionExists function_exists = 12;</code>
     */
    public Builder setFunctionExists(org.apache.kyuubi.engine.spark.connect.proto.FunctionExists value) {
      if (functionExistsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        functionExistsBuilder_.setMessage(value);
      }
      catTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.spark.connect.FunctionExists function_exists = 12;</code>
     */
    public Builder setFunctionExists(
        org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.Builder builderForValue) {
      if (functionExistsBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        functionExistsBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.spark.connect.FunctionExists function_exists = 12;</code>
     */
    public Builder mergeFunctionExists(org.apache.kyuubi.engine.spark.connect.proto.FunctionExists value) {
      if (functionExistsBuilder_ == null) {
        if (catTypeCase_ == 12 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.FunctionExists) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 12) {
          functionExistsBuilder_.mergeFrom(value);
        } else {
          functionExistsBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.spark.connect.FunctionExists function_exists = 12;</code>
     */
    public Builder clearFunctionExists() {
      if (functionExistsBuilder_ == null) {
        if (catTypeCase_ == 12) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 12) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        functionExistsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.FunctionExists function_exists = 12;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.Builder getFunctionExistsBuilder() {
      return getFunctionExistsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.FunctionExists function_exists = 12;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.FunctionExistsOrBuilder getFunctionExistsOrBuilder() {
      if ((catTypeCase_ == 12) && (functionExistsBuilder_ != null)) {
        return functionExistsBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 12) {
          return (org.apache.kyuubi.engine.spark.connect.proto.FunctionExists) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.FunctionExists function_exists = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.FunctionExists, org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.Builder, org.apache.kyuubi.engine.spark.connect.proto.FunctionExistsOrBuilder> 
        getFunctionExistsFieldBuilder() {
      if (functionExistsBuilder_ == null) {
        if (!(catTypeCase_ == 12)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.getDefaultInstance();
        }
        functionExistsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.FunctionExists, org.apache.kyuubi.engine.spark.connect.proto.FunctionExists.Builder, org.apache.kyuubi.engine.spark.connect.proto.FunctionExistsOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.FunctionExists) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 12;
      onChanged();;
      return functionExistsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable, org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTableOrBuilder> createExternalTableBuilder_;
    /**
     * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
     * @return Whether the createExternalTable field is set.
     */
    @java.lang.Override
    public boolean hasCreateExternalTable() {
      return catTypeCase_ == 13;
    }
    /**
     * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
     * @return The createExternalTable.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable getCreateExternalTable() {
      if (createExternalTableBuilder_ == null) {
        if (catTypeCase_ == 13) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.getDefaultInstance();
      } else {
        if (catTypeCase_ == 13) {
          return createExternalTableBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
     */
    public Builder setCreateExternalTable(org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable value) {
      if (createExternalTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        createExternalTableBuilder_.setMessage(value);
      }
      catTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
     */
    public Builder setCreateExternalTable(
        org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.Builder builderForValue) {
      if (createExternalTableBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        createExternalTableBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
     */
    public Builder mergeCreateExternalTable(org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable value) {
      if (createExternalTableBuilder_ == null) {
        if (catTypeCase_ == 13 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 13) {
          createExternalTableBuilder_.mergeFrom(value);
        } else {
          createExternalTableBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
     */
    public Builder clearCreateExternalTable() {
      if (createExternalTableBuilder_ == null) {
        if (catTypeCase_ == 13) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 13) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        createExternalTableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.Builder getCreateExternalTableBuilder() {
      return getCreateExternalTableFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTableOrBuilder getCreateExternalTableOrBuilder() {
      if ((catTypeCase_ == 13) && (createExternalTableBuilder_ != null)) {
        return createExternalTableBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 13) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CreateExternalTable create_external_table = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable, org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTableOrBuilder> 
        getCreateExternalTableFieldBuilder() {
      if (createExternalTableBuilder_ == null) {
        if (!(catTypeCase_ == 13)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.getDefaultInstance();
        }
        createExternalTableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable, org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTableOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.CreateExternalTable) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 13;
      onChanged();;
      return createExternalTableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CreateTable, org.apache.kyuubi.engine.spark.connect.proto.CreateTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.CreateTableOrBuilder> createTableBuilder_;
    /**
     * <code>.spark.connect.CreateTable create_table = 14;</code>
     * @return Whether the createTable field is set.
     */
    @java.lang.Override
    public boolean hasCreateTable() {
      return catTypeCase_ == 14;
    }
    /**
     * <code>.spark.connect.CreateTable create_table = 14;</code>
     * @return The createTable.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CreateTable getCreateTable() {
      if (createTableBuilder_ == null) {
        if (catTypeCase_ == 14) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CreateTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CreateTable.getDefaultInstance();
      } else {
        if (catTypeCase_ == 14) {
          return createTableBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CreateTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CreateTable create_table = 14;</code>
     */
    public Builder setCreateTable(org.apache.kyuubi.engine.spark.connect.proto.CreateTable value) {
      if (createTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        createTableBuilder_.setMessage(value);
      }
      catTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.spark.connect.CreateTable create_table = 14;</code>
     */
    public Builder setCreateTable(
        org.apache.kyuubi.engine.spark.connect.proto.CreateTable.Builder builderForValue) {
      if (createTableBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        createTableBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.spark.connect.CreateTable create_table = 14;</code>
     */
    public Builder mergeCreateTable(org.apache.kyuubi.engine.spark.connect.proto.CreateTable value) {
      if (createTableBuilder_ == null) {
        if (catTypeCase_ == 14 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.CreateTable.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.CreateTable.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.CreateTable) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 14) {
          createTableBuilder_.mergeFrom(value);
        } else {
          createTableBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.spark.connect.CreateTable create_table = 14;</code>
     */
    public Builder clearCreateTable() {
      if (createTableBuilder_ == null) {
        if (catTypeCase_ == 14) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 14) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        createTableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CreateTable create_table = 14;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.CreateTable.Builder getCreateTableBuilder() {
      return getCreateTableFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CreateTable create_table = 14;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CreateTableOrBuilder getCreateTableOrBuilder() {
      if ((catTypeCase_ == 14) && (createTableBuilder_ != null)) {
        return createTableBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 14) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CreateTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CreateTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CreateTable create_table = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CreateTable, org.apache.kyuubi.engine.spark.connect.proto.CreateTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.CreateTableOrBuilder> 
        getCreateTableFieldBuilder() {
      if (createTableBuilder_ == null) {
        if (!(catTypeCase_ == 14)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.CreateTable.getDefaultInstance();
        }
        createTableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.CreateTable, org.apache.kyuubi.engine.spark.connect.proto.CreateTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.CreateTableOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.CreateTable) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 14;
      onChanged();;
      return createTableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.DropTempView, org.apache.kyuubi.engine.spark.connect.proto.DropTempView.Builder, org.apache.kyuubi.engine.spark.connect.proto.DropTempViewOrBuilder> dropTempViewBuilder_;
    /**
     * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
     * @return Whether the dropTempView field is set.
     */
    @java.lang.Override
    public boolean hasDropTempView() {
      return catTypeCase_ == 15;
    }
    /**
     * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
     * @return The dropTempView.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.DropTempView getDropTempView() {
      if (dropTempViewBuilder_ == null) {
        if (catTypeCase_ == 15) {
          return (org.apache.kyuubi.engine.spark.connect.proto.DropTempView) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.DropTempView.getDefaultInstance();
      } else {
        if (catTypeCase_ == 15) {
          return dropTempViewBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.DropTempView.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
     */
    public Builder setDropTempView(org.apache.kyuubi.engine.spark.connect.proto.DropTempView value) {
      if (dropTempViewBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        dropTempViewBuilder_.setMessage(value);
      }
      catTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
     */
    public Builder setDropTempView(
        org.apache.kyuubi.engine.spark.connect.proto.DropTempView.Builder builderForValue) {
      if (dropTempViewBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        dropTempViewBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
     */
    public Builder mergeDropTempView(org.apache.kyuubi.engine.spark.connect.proto.DropTempView value) {
      if (dropTempViewBuilder_ == null) {
        if (catTypeCase_ == 15 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.DropTempView.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.DropTempView.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.DropTempView) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 15) {
          dropTempViewBuilder_.mergeFrom(value);
        } else {
          dropTempViewBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
     */
    public Builder clearDropTempView() {
      if (dropTempViewBuilder_ == null) {
        if (catTypeCase_ == 15) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 15) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        dropTempViewBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.DropTempView.Builder getDropTempViewBuilder() {
      return getDropTempViewFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.DropTempViewOrBuilder getDropTempViewOrBuilder() {
      if ((catTypeCase_ == 15) && (dropTempViewBuilder_ != null)) {
        return dropTempViewBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 15) {
          return (org.apache.kyuubi.engine.spark.connect.proto.DropTempView) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.DropTempView.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.DropTempView drop_temp_view = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.DropTempView, org.apache.kyuubi.engine.spark.connect.proto.DropTempView.Builder, org.apache.kyuubi.engine.spark.connect.proto.DropTempViewOrBuilder> 
        getDropTempViewFieldBuilder() {
      if (dropTempViewBuilder_ == null) {
        if (!(catTypeCase_ == 15)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.DropTempView.getDefaultInstance();
        }
        dropTempViewBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DropTempView, org.apache.kyuubi.engine.spark.connect.proto.DropTempView.Builder, org.apache.kyuubi.engine.spark.connect.proto.DropTempViewOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.DropTempView) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 15;
      onChanged();;
      return dropTempViewBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView, org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.Builder, org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempViewOrBuilder> dropGlobalTempViewBuilder_;
    /**
     * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
     * @return Whether the dropGlobalTempView field is set.
     */
    @java.lang.Override
    public boolean hasDropGlobalTempView() {
      return catTypeCase_ == 16;
    }
    /**
     * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
     * @return The dropGlobalTempView.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView getDropGlobalTempView() {
      if (dropGlobalTempViewBuilder_ == null) {
        if (catTypeCase_ == 16) {
          return (org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.getDefaultInstance();
      } else {
        if (catTypeCase_ == 16) {
          return dropGlobalTempViewBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
     */
    public Builder setDropGlobalTempView(org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView value) {
      if (dropGlobalTempViewBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        dropGlobalTempViewBuilder_.setMessage(value);
      }
      catTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
     */
    public Builder setDropGlobalTempView(
        org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.Builder builderForValue) {
      if (dropGlobalTempViewBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        dropGlobalTempViewBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
     */
    public Builder mergeDropGlobalTempView(org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView value) {
      if (dropGlobalTempViewBuilder_ == null) {
        if (catTypeCase_ == 16 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 16) {
          dropGlobalTempViewBuilder_.mergeFrom(value);
        } else {
          dropGlobalTempViewBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
     */
    public Builder clearDropGlobalTempView() {
      if (dropGlobalTempViewBuilder_ == null) {
        if (catTypeCase_ == 16) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 16) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        dropGlobalTempViewBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.Builder getDropGlobalTempViewBuilder() {
      return getDropGlobalTempViewFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempViewOrBuilder getDropGlobalTempViewOrBuilder() {
      if ((catTypeCase_ == 16) && (dropGlobalTempViewBuilder_ != null)) {
        return dropGlobalTempViewBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 16) {
          return (org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.DropGlobalTempView drop_global_temp_view = 16;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView, org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.Builder, org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempViewOrBuilder> 
        getDropGlobalTempViewFieldBuilder() {
      if (dropGlobalTempViewBuilder_ == null) {
        if (!(catTypeCase_ == 16)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.getDefaultInstance();
        }
        dropGlobalTempViewBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView, org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView.Builder, org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempViewOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.DropGlobalTempView) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 16;
      onChanged();;
      return dropGlobalTempViewBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions, org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.Builder, org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitionsOrBuilder> recoverPartitionsBuilder_;
    /**
     * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
     * @return Whether the recoverPartitions field is set.
     */
    @java.lang.Override
    public boolean hasRecoverPartitions() {
      return catTypeCase_ == 17;
    }
    /**
     * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
     * @return The recoverPartitions.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions getRecoverPartitions() {
      if (recoverPartitionsBuilder_ == null) {
        if (catTypeCase_ == 17) {
          return (org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.getDefaultInstance();
      } else {
        if (catTypeCase_ == 17) {
          return recoverPartitionsBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
     */
    public Builder setRecoverPartitions(org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions value) {
      if (recoverPartitionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        recoverPartitionsBuilder_.setMessage(value);
      }
      catTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
     */
    public Builder setRecoverPartitions(
        org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.Builder builderForValue) {
      if (recoverPartitionsBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        recoverPartitionsBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
     */
    public Builder mergeRecoverPartitions(org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions value) {
      if (recoverPartitionsBuilder_ == null) {
        if (catTypeCase_ == 17 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 17) {
          recoverPartitionsBuilder_.mergeFrom(value);
        } else {
          recoverPartitionsBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
     */
    public Builder clearRecoverPartitions() {
      if (recoverPartitionsBuilder_ == null) {
        if (catTypeCase_ == 17) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 17) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        recoverPartitionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.Builder getRecoverPartitionsBuilder() {
      return getRecoverPartitionsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitionsOrBuilder getRecoverPartitionsOrBuilder() {
      if ((catTypeCase_ == 17) && (recoverPartitionsBuilder_ != null)) {
        return recoverPartitionsBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 17) {
          return (org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.RecoverPartitions recover_partitions = 17;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions, org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.Builder, org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitionsOrBuilder> 
        getRecoverPartitionsFieldBuilder() {
      if (recoverPartitionsBuilder_ == null) {
        if (!(catTypeCase_ == 17)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.getDefaultInstance();
        }
        recoverPartitionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions, org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions.Builder, org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitionsOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.RecoverPartitions) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 17;
      onChanged();;
      return recoverPartitionsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.IsCached, org.apache.kyuubi.engine.spark.connect.proto.IsCached.Builder, org.apache.kyuubi.engine.spark.connect.proto.IsCachedOrBuilder> isCachedBuilder_;
    /**
     * <code>.spark.connect.IsCached is_cached = 18;</code>
     * @return Whether the isCached field is set.
     */
    @java.lang.Override
    public boolean hasIsCached() {
      return catTypeCase_ == 18;
    }
    /**
     * <code>.spark.connect.IsCached is_cached = 18;</code>
     * @return The isCached.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.IsCached getIsCached() {
      if (isCachedBuilder_ == null) {
        if (catTypeCase_ == 18) {
          return (org.apache.kyuubi.engine.spark.connect.proto.IsCached) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.IsCached.getDefaultInstance();
      } else {
        if (catTypeCase_ == 18) {
          return isCachedBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.IsCached.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.IsCached is_cached = 18;</code>
     */
    public Builder setIsCached(org.apache.kyuubi.engine.spark.connect.proto.IsCached value) {
      if (isCachedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        isCachedBuilder_.setMessage(value);
      }
      catTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.spark.connect.IsCached is_cached = 18;</code>
     */
    public Builder setIsCached(
        org.apache.kyuubi.engine.spark.connect.proto.IsCached.Builder builderForValue) {
      if (isCachedBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        isCachedBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.spark.connect.IsCached is_cached = 18;</code>
     */
    public Builder mergeIsCached(org.apache.kyuubi.engine.spark.connect.proto.IsCached value) {
      if (isCachedBuilder_ == null) {
        if (catTypeCase_ == 18 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.IsCached.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.IsCached.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.IsCached) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 18) {
          isCachedBuilder_.mergeFrom(value);
        } else {
          isCachedBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.spark.connect.IsCached is_cached = 18;</code>
     */
    public Builder clearIsCached() {
      if (isCachedBuilder_ == null) {
        if (catTypeCase_ == 18) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 18) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        isCachedBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.IsCached is_cached = 18;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.IsCached.Builder getIsCachedBuilder() {
      return getIsCachedFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.IsCached is_cached = 18;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.IsCachedOrBuilder getIsCachedOrBuilder() {
      if ((catTypeCase_ == 18) && (isCachedBuilder_ != null)) {
        return isCachedBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 18) {
          return (org.apache.kyuubi.engine.spark.connect.proto.IsCached) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.IsCached.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.IsCached is_cached = 18;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.IsCached, org.apache.kyuubi.engine.spark.connect.proto.IsCached.Builder, org.apache.kyuubi.engine.spark.connect.proto.IsCachedOrBuilder> 
        getIsCachedFieldBuilder() {
      if (isCachedBuilder_ == null) {
        if (!(catTypeCase_ == 18)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.IsCached.getDefaultInstance();
        }
        isCachedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.IsCached, org.apache.kyuubi.engine.spark.connect.proto.IsCached.Builder, org.apache.kyuubi.engine.spark.connect.proto.IsCachedOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.IsCached) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 18;
      onChanged();;
      return isCachedBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CacheTable, org.apache.kyuubi.engine.spark.connect.proto.CacheTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.CacheTableOrBuilder> cacheTableBuilder_;
    /**
     * <code>.spark.connect.CacheTable cache_table = 19;</code>
     * @return Whether the cacheTable field is set.
     */
    @java.lang.Override
    public boolean hasCacheTable() {
      return catTypeCase_ == 19;
    }
    /**
     * <code>.spark.connect.CacheTable cache_table = 19;</code>
     * @return The cacheTable.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CacheTable getCacheTable() {
      if (cacheTableBuilder_ == null) {
        if (catTypeCase_ == 19) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CacheTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CacheTable.getDefaultInstance();
      } else {
        if (catTypeCase_ == 19) {
          return cacheTableBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CacheTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CacheTable cache_table = 19;</code>
     */
    public Builder setCacheTable(org.apache.kyuubi.engine.spark.connect.proto.CacheTable value) {
      if (cacheTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        cacheTableBuilder_.setMessage(value);
      }
      catTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.spark.connect.CacheTable cache_table = 19;</code>
     */
    public Builder setCacheTable(
        org.apache.kyuubi.engine.spark.connect.proto.CacheTable.Builder builderForValue) {
      if (cacheTableBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        cacheTableBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.spark.connect.CacheTable cache_table = 19;</code>
     */
    public Builder mergeCacheTable(org.apache.kyuubi.engine.spark.connect.proto.CacheTable value) {
      if (cacheTableBuilder_ == null) {
        if (catTypeCase_ == 19 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.CacheTable.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.CacheTable.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.CacheTable) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 19) {
          cacheTableBuilder_.mergeFrom(value);
        } else {
          cacheTableBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.spark.connect.CacheTable cache_table = 19;</code>
     */
    public Builder clearCacheTable() {
      if (cacheTableBuilder_ == null) {
        if (catTypeCase_ == 19) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 19) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        cacheTableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CacheTable cache_table = 19;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.CacheTable.Builder getCacheTableBuilder() {
      return getCacheTableFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CacheTable cache_table = 19;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CacheTableOrBuilder getCacheTableOrBuilder() {
      if ((catTypeCase_ == 19) && (cacheTableBuilder_ != null)) {
        return cacheTableBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 19) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CacheTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CacheTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CacheTable cache_table = 19;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CacheTable, org.apache.kyuubi.engine.spark.connect.proto.CacheTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.CacheTableOrBuilder> 
        getCacheTableFieldBuilder() {
      if (cacheTableBuilder_ == null) {
        if (!(catTypeCase_ == 19)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.CacheTable.getDefaultInstance();
        }
        cacheTableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.CacheTable, org.apache.kyuubi.engine.spark.connect.proto.CacheTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.CacheTableOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.CacheTable) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 19;
      onChanged();;
      return cacheTableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.UncacheTable, org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.UncacheTableOrBuilder> uncacheTableBuilder_;
    /**
     * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
     * @return Whether the uncacheTable field is set.
     */
    @java.lang.Override
    public boolean hasUncacheTable() {
      return catTypeCase_ == 20;
    }
    /**
     * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
     * @return The uncacheTable.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.UncacheTable getUncacheTable() {
      if (uncacheTableBuilder_ == null) {
        if (catTypeCase_ == 20) {
          return (org.apache.kyuubi.engine.spark.connect.proto.UncacheTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.getDefaultInstance();
      } else {
        if (catTypeCase_ == 20) {
          return uncacheTableBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
     */
    public Builder setUncacheTable(org.apache.kyuubi.engine.spark.connect.proto.UncacheTable value) {
      if (uncacheTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        uncacheTableBuilder_.setMessage(value);
      }
      catTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
     */
    public Builder setUncacheTable(
        org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.Builder builderForValue) {
      if (uncacheTableBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        uncacheTableBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
     */
    public Builder mergeUncacheTable(org.apache.kyuubi.engine.spark.connect.proto.UncacheTable value) {
      if (uncacheTableBuilder_ == null) {
        if (catTypeCase_ == 20 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.UncacheTable) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 20) {
          uncacheTableBuilder_.mergeFrom(value);
        } else {
          uncacheTableBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
     */
    public Builder clearUncacheTable() {
      if (uncacheTableBuilder_ == null) {
        if (catTypeCase_ == 20) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 20) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        uncacheTableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.Builder getUncacheTableBuilder() {
      return getUncacheTableFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.UncacheTableOrBuilder getUncacheTableOrBuilder() {
      if ((catTypeCase_ == 20) && (uncacheTableBuilder_ != null)) {
        return uncacheTableBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 20) {
          return (org.apache.kyuubi.engine.spark.connect.proto.UncacheTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.UncacheTable uncache_table = 20;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.UncacheTable, org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.UncacheTableOrBuilder> 
        getUncacheTableFieldBuilder() {
      if (uncacheTableBuilder_ == null) {
        if (!(catTypeCase_ == 20)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.getDefaultInstance();
        }
        uncacheTableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.UncacheTable, org.apache.kyuubi.engine.spark.connect.proto.UncacheTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.UncacheTableOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.UncacheTable) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 20;
      onChanged();;
      return uncacheTableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ClearCache, org.apache.kyuubi.engine.spark.connect.proto.ClearCache.Builder, org.apache.kyuubi.engine.spark.connect.proto.ClearCacheOrBuilder> clearCacheBuilder_;
    /**
     * <code>.spark.connect.ClearCache clear_cache = 21;</code>
     * @return Whether the clearCache field is set.
     */
    @java.lang.Override
    public boolean hasClearCache() {
      return catTypeCase_ == 21;
    }
    /**
     * <code>.spark.connect.ClearCache clear_cache = 21;</code>
     * @return The clearCache.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ClearCache getClearCache() {
      if (clearCacheBuilder_ == null) {
        if (catTypeCase_ == 21) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ClearCache) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ClearCache.getDefaultInstance();
      } else {
        if (catTypeCase_ == 21) {
          return clearCacheBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ClearCache.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ClearCache clear_cache = 21;</code>
     */
    public Builder setClearCache(org.apache.kyuubi.engine.spark.connect.proto.ClearCache value) {
      if (clearCacheBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        clearCacheBuilder_.setMessage(value);
      }
      catTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.spark.connect.ClearCache clear_cache = 21;</code>
     */
    public Builder setClearCache(
        org.apache.kyuubi.engine.spark.connect.proto.ClearCache.Builder builderForValue) {
      if (clearCacheBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        clearCacheBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.spark.connect.ClearCache clear_cache = 21;</code>
     */
    public Builder mergeClearCache(org.apache.kyuubi.engine.spark.connect.proto.ClearCache value) {
      if (clearCacheBuilder_ == null) {
        if (catTypeCase_ == 21 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.ClearCache.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ClearCache.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.ClearCache) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 21) {
          clearCacheBuilder_.mergeFrom(value);
        } else {
          clearCacheBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.spark.connect.ClearCache clear_cache = 21;</code>
     */
    public Builder clearClearCache() {
      if (clearCacheBuilder_ == null) {
        if (catTypeCase_ == 21) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 21) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        clearCacheBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.ClearCache clear_cache = 21;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.ClearCache.Builder getClearCacheBuilder() {
      return getClearCacheFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.ClearCache clear_cache = 21;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ClearCacheOrBuilder getClearCacheOrBuilder() {
      if ((catTypeCase_ == 21) && (clearCacheBuilder_ != null)) {
        return clearCacheBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 21) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ClearCache) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ClearCache.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ClearCache clear_cache = 21;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ClearCache, org.apache.kyuubi.engine.spark.connect.proto.ClearCache.Builder, org.apache.kyuubi.engine.spark.connect.proto.ClearCacheOrBuilder> 
        getClearCacheFieldBuilder() {
      if (clearCacheBuilder_ == null) {
        if (!(catTypeCase_ == 21)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ClearCache.getDefaultInstance();
        }
        clearCacheBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.ClearCache, org.apache.kyuubi.engine.spark.connect.proto.ClearCache.Builder, org.apache.kyuubi.engine.spark.connect.proto.ClearCacheOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.ClearCache) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 21;
      onChanged();;
      return clearCacheBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.RefreshTable, org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.RefreshTableOrBuilder> refreshTableBuilder_;
    /**
     * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
     * @return Whether the refreshTable field is set.
     */
    @java.lang.Override
    public boolean hasRefreshTable() {
      return catTypeCase_ == 22;
    }
    /**
     * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
     * @return The refreshTable.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.RefreshTable getRefreshTable() {
      if (refreshTableBuilder_ == null) {
        if (catTypeCase_ == 22) {
          return (org.apache.kyuubi.engine.spark.connect.proto.RefreshTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.getDefaultInstance();
      } else {
        if (catTypeCase_ == 22) {
          return refreshTableBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
     */
    public Builder setRefreshTable(org.apache.kyuubi.engine.spark.connect.proto.RefreshTable value) {
      if (refreshTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        refreshTableBuilder_.setMessage(value);
      }
      catTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
     */
    public Builder setRefreshTable(
        org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.Builder builderForValue) {
      if (refreshTableBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        refreshTableBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
     */
    public Builder mergeRefreshTable(org.apache.kyuubi.engine.spark.connect.proto.RefreshTable value) {
      if (refreshTableBuilder_ == null) {
        if (catTypeCase_ == 22 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.RefreshTable) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 22) {
          refreshTableBuilder_.mergeFrom(value);
        } else {
          refreshTableBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
     */
    public Builder clearRefreshTable() {
      if (refreshTableBuilder_ == null) {
        if (catTypeCase_ == 22) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 22) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        refreshTableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.Builder getRefreshTableBuilder() {
      return getRefreshTableFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.RefreshTableOrBuilder getRefreshTableOrBuilder() {
      if ((catTypeCase_ == 22) && (refreshTableBuilder_ != null)) {
        return refreshTableBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 22) {
          return (org.apache.kyuubi.engine.spark.connect.proto.RefreshTable) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.RefreshTable refresh_table = 22;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.RefreshTable, org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.RefreshTableOrBuilder> 
        getRefreshTableFieldBuilder() {
      if (refreshTableBuilder_ == null) {
        if (!(catTypeCase_ == 22)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.getDefaultInstance();
        }
        refreshTableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.RefreshTable, org.apache.kyuubi.engine.spark.connect.proto.RefreshTable.Builder, org.apache.kyuubi.engine.spark.connect.proto.RefreshTableOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.RefreshTable) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 22;
      onChanged();;
      return refreshTableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath, org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.Builder, org.apache.kyuubi.engine.spark.connect.proto.RefreshByPathOrBuilder> refreshByPathBuilder_;
    /**
     * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
     * @return Whether the refreshByPath field is set.
     */
    @java.lang.Override
    public boolean hasRefreshByPath() {
      return catTypeCase_ == 23;
    }
    /**
     * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
     * @return The refreshByPath.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath getRefreshByPath() {
      if (refreshByPathBuilder_ == null) {
        if (catTypeCase_ == 23) {
          return (org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.getDefaultInstance();
      } else {
        if (catTypeCase_ == 23) {
          return refreshByPathBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
     */
    public Builder setRefreshByPath(org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath value) {
      if (refreshByPathBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        refreshByPathBuilder_.setMessage(value);
      }
      catTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
     */
    public Builder setRefreshByPath(
        org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.Builder builderForValue) {
      if (refreshByPathBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        refreshByPathBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
     */
    public Builder mergeRefreshByPath(org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath value) {
      if (refreshByPathBuilder_ == null) {
        if (catTypeCase_ == 23 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 23) {
          refreshByPathBuilder_.mergeFrom(value);
        } else {
          refreshByPathBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
     */
    public Builder clearRefreshByPath() {
      if (refreshByPathBuilder_ == null) {
        if (catTypeCase_ == 23) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 23) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        refreshByPathBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.Builder getRefreshByPathBuilder() {
      return getRefreshByPathFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.RefreshByPathOrBuilder getRefreshByPathOrBuilder() {
      if ((catTypeCase_ == 23) && (refreshByPathBuilder_ != null)) {
        return refreshByPathBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 23) {
          return (org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.RefreshByPath refresh_by_path = 23;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath, org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.Builder, org.apache.kyuubi.engine.spark.connect.proto.RefreshByPathOrBuilder> 
        getRefreshByPathFieldBuilder() {
      if (refreshByPathBuilder_ == null) {
        if (!(catTypeCase_ == 23)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.getDefaultInstance();
        }
        refreshByPathBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath, org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath.Builder, org.apache.kyuubi.engine.spark.connect.proto.RefreshByPathOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.RefreshByPath) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 23;
      onChanged();;
      return refreshByPathBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog, org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.Builder, org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalogOrBuilder> currentCatalogBuilder_;
    /**
     * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
     * @return Whether the currentCatalog field is set.
     */
    @java.lang.Override
    public boolean hasCurrentCatalog() {
      return catTypeCase_ == 24;
    }
    /**
     * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
     * @return The currentCatalog.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog getCurrentCatalog() {
      if (currentCatalogBuilder_ == null) {
        if (catTypeCase_ == 24) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.getDefaultInstance();
      } else {
        if (catTypeCase_ == 24) {
          return currentCatalogBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
     */
    public Builder setCurrentCatalog(org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog value) {
      if (currentCatalogBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        currentCatalogBuilder_.setMessage(value);
      }
      catTypeCase_ = 24;
      return this;
    }
    /**
     * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
     */
    public Builder setCurrentCatalog(
        org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.Builder builderForValue) {
      if (currentCatalogBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        currentCatalogBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 24;
      return this;
    }
    /**
     * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
     */
    public Builder mergeCurrentCatalog(org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog value) {
      if (currentCatalogBuilder_ == null) {
        if (catTypeCase_ == 24 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 24) {
          currentCatalogBuilder_.mergeFrom(value);
        } else {
          currentCatalogBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 24;
      return this;
    }
    /**
     * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
     */
    public Builder clearCurrentCatalog() {
      if (currentCatalogBuilder_ == null) {
        if (catTypeCase_ == 24) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 24) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        currentCatalogBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.Builder getCurrentCatalogBuilder() {
      return getCurrentCatalogFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalogOrBuilder getCurrentCatalogOrBuilder() {
      if ((catTypeCase_ == 24) && (currentCatalogBuilder_ != null)) {
        return currentCatalogBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 24) {
          return (org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.CurrentCatalog current_catalog = 24;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog, org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.Builder, org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalogOrBuilder> 
        getCurrentCatalogFieldBuilder() {
      if (currentCatalogBuilder_ == null) {
        if (!(catTypeCase_ == 24)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.getDefaultInstance();
        }
        currentCatalogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog, org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog.Builder, org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalogOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.CurrentCatalog) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 24;
      onChanged();;
      return currentCatalogBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.Builder, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalogOrBuilder> setCurrentCatalogBuilder_;
    /**
     * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
     * @return Whether the setCurrentCatalog field is set.
     */
    @java.lang.Override
    public boolean hasSetCurrentCatalog() {
      return catTypeCase_ == 25;
    }
    /**
     * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
     * @return The setCurrentCatalog.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog getSetCurrentCatalog() {
      if (setCurrentCatalogBuilder_ == null) {
        if (catTypeCase_ == 25) {
          return (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.getDefaultInstance();
      } else {
        if (catTypeCase_ == 25) {
          return setCurrentCatalogBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
     */
    public Builder setSetCurrentCatalog(org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog value) {
      if (setCurrentCatalogBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        setCurrentCatalogBuilder_.setMessage(value);
      }
      catTypeCase_ = 25;
      return this;
    }
    /**
     * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
     */
    public Builder setSetCurrentCatalog(
        org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.Builder builderForValue) {
      if (setCurrentCatalogBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        setCurrentCatalogBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 25;
      return this;
    }
    /**
     * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
     */
    public Builder mergeSetCurrentCatalog(org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog value) {
      if (setCurrentCatalogBuilder_ == null) {
        if (catTypeCase_ == 25 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 25) {
          setCurrentCatalogBuilder_.mergeFrom(value);
        } else {
          setCurrentCatalogBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 25;
      return this;
    }
    /**
     * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
     */
    public Builder clearSetCurrentCatalog() {
      if (setCurrentCatalogBuilder_ == null) {
        if (catTypeCase_ == 25) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 25) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        setCurrentCatalogBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.Builder getSetCurrentCatalogBuilder() {
      return getSetCurrentCatalogFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalogOrBuilder getSetCurrentCatalogOrBuilder() {
      if ((catTypeCase_ == 25) && (setCurrentCatalogBuilder_ != null)) {
        return setCurrentCatalogBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 25) {
          return (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.SetCurrentCatalog set_current_catalog = 25;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.Builder, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalogOrBuilder> 
        getSetCurrentCatalogFieldBuilder() {
      if (setCurrentCatalogBuilder_ == null) {
        if (!(catTypeCase_ == 25)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.getDefaultInstance();
        }
        setCurrentCatalogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog.Builder, org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalogOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.SetCurrentCatalog) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 25;
      onChanged();;
      return setCurrentCatalogBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs, org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListCatalogsOrBuilder> listCatalogsBuilder_;
    /**
     * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
     * @return Whether the listCatalogs field is set.
     */
    @java.lang.Override
    public boolean hasListCatalogs() {
      return catTypeCase_ == 26;
    }
    /**
     * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
     * @return The listCatalogs.
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs getListCatalogs() {
      if (listCatalogsBuilder_ == null) {
        if (catTypeCase_ == 26) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.getDefaultInstance();
      } else {
        if (catTypeCase_ == 26) {
          return listCatalogsBuilder_.getMessage();
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
     */
    public Builder setListCatalogs(org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs value) {
      if (listCatalogsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        catType_ = value;
        onChanged();
      } else {
        listCatalogsBuilder_.setMessage(value);
      }
      catTypeCase_ = 26;
      return this;
    }
    /**
     * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
     */
    public Builder setListCatalogs(
        org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.Builder builderForValue) {
      if (listCatalogsBuilder_ == null) {
        catType_ = builderForValue.build();
        onChanged();
      } else {
        listCatalogsBuilder_.setMessage(builderForValue.build());
      }
      catTypeCase_ = 26;
      return this;
    }
    /**
     * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
     */
    public Builder mergeListCatalogs(org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs value) {
      if (listCatalogsBuilder_ == null) {
        if (catTypeCase_ == 26 &&
            catType_ != org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.getDefaultInstance()) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.newBuilder((org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs) catType_)
              .mergeFrom(value).buildPartial();
        } else {
          catType_ = value;
        }
        onChanged();
      } else {
        if (catTypeCase_ == 26) {
          listCatalogsBuilder_.mergeFrom(value);
        } else {
          listCatalogsBuilder_.setMessage(value);
        }
      }
      catTypeCase_ = 26;
      return this;
    }
    /**
     * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
     */
    public Builder clearListCatalogs() {
      if (listCatalogsBuilder_ == null) {
        if (catTypeCase_ == 26) {
          catTypeCase_ = 0;
          catType_ = null;
          onChanged();
        }
      } else {
        if (catTypeCase_ == 26) {
          catTypeCase_ = 0;
          catType_ = null;
        }
        listCatalogsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
     */
    public org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.Builder getListCatalogsBuilder() {
      return getListCatalogsFieldBuilder().getBuilder();
    }
    /**
     * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
     */
    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.proto.ListCatalogsOrBuilder getListCatalogsOrBuilder() {
      if ((catTypeCase_ == 26) && (listCatalogsBuilder_ != null)) {
        return listCatalogsBuilder_.getMessageOrBuilder();
      } else {
        if (catTypeCase_ == 26) {
          return (org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs) catType_;
        }
        return org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.getDefaultInstance();
      }
    }
    /**
     * <code>.spark.connect.ListCatalogs list_catalogs = 26;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs, org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListCatalogsOrBuilder> 
        getListCatalogsFieldBuilder() {
      if (listCatalogsBuilder_ == null) {
        if (!(catTypeCase_ == 26)) {
          catType_ = org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.getDefaultInstance();
        }
        listCatalogsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs, org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs.Builder, org.apache.kyuubi.engine.spark.connect.proto.ListCatalogsOrBuilder>(
                (org.apache.kyuubi.engine.spark.connect.proto.ListCatalogs) catType_,
                getParentForChildren(),
                isClean());
        catType_ = null;
      }
      catTypeCase_ = 26;
      onChanged();;
      return listCatalogsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:spark.connect.Catalog)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.Catalog)
  private static final org.apache.kyuubi.engine.spark.connect.proto.Catalog DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.kyuubi.engine.spark.connect.proto.Catalog();
  }

  public static org.apache.kyuubi.engine.spark.connect.proto.Catalog getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Catalog>
      PARSER = new com.google.protobuf.AbstractParser<Catalog>() {
    @java.lang.Override
    public Catalog parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Catalog> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Catalog> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.proto.Catalog getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

