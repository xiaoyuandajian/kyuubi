// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/relations.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

public interface SQLOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:spark.connect.SQL)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * (Required) The SQL query.
   * </pre>
   *
   * <code>string query = 1;</code>
   *
   * @return The query.
   */
  java.lang.String getQuery();
  /**
   *
   *
   * <pre>
   * (Required) The SQL query.
   * </pre>
   *
   * <code>string query = 1;</code>
   *
   * @return The bytes for query.
   */
  com.google.protobuf.ByteString getQueryBytes();

  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to literal expressions.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  int getArgsCount();
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to literal expressions.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  boolean containsArgs(java.lang.String key);
  /** Use {@link #getArgsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<
          java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
      getArgs();
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to literal expressions.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  java.util.Map<
          java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
      getArgsMap();
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to literal expressions.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  /* nullable */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal getArgsOrDefault(
      java.lang.String key,
      /* nullable */
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal defaultValue);
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to literal expressions.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression.Literal&gt; args = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal getArgsOrThrow(
      java.lang.String key);

  /**
   *
   *
   * <pre>
   * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal>
      getPosArgsList();
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.Literal getPosArgs(int index);
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  int getPosArgsCount();
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  java.util.List<
          ? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.LiteralOrBuilder>
      getPosArgsOrBuilderList();
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression.Literal pos_args = 3 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression.LiteralOrBuilder getPosArgsOrBuilder(
      int index);

  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to expressions.
   * It cannot coexist with `pos_arguments`.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4;</code>
   */
  int getNamedArgumentsCount();
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to expressions.
   * It cannot coexist with `pos_arguments`.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4;</code>
   */
  boolean containsNamedArguments(java.lang.String key);
  /** Use {@link #getNamedArgumentsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      getNamedArguments();
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to expressions.
   * It cannot coexist with `pos_arguments`.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4;</code>
   */
  java.util.Map<java.lang.String, org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      getNamedArgumentsMap();
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to expressions.
   * It cannot coexist with `pos_arguments`.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4;</code>
   */

  /* nullable */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getNamedArgumentsOrDefault(
      java.lang.String key,
      /* nullable */
      org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression defaultValue);
  /**
   *
   *
   * <pre>
   * (Optional) A map of parameter names to expressions.
   * It cannot coexist with `pos_arguments`.
   * </pre>
   *
   * <code>map&lt;string, .spark.connect.Expression&gt; named_arguments = 4;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getNamedArgumentsOrThrow(
      java.lang.String key);

  /**
   *
   *
   * <pre>
   * (Optional) A sequence of expressions for positional parameters in the SQL query text.
   * It cannot coexist with `named_arguments`.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression pos_arguments = 5;</code>
   */
  java.util.List<org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression>
      getPosArgumentsList();
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of expressions for positional parameters in the SQL query text.
   * It cannot coexist with `named_arguments`.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression pos_arguments = 5;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.Expression getPosArguments(int index);
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of expressions for positional parameters in the SQL query text.
   * It cannot coexist with `named_arguments`.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression pos_arguments = 5;</code>
   */
  int getPosArgumentsCount();
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of expressions for positional parameters in the SQL query text.
   * It cannot coexist with `named_arguments`.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression pos_arguments = 5;</code>
   */
  java.util.List<? extends org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder>
      getPosArgumentsOrBuilderList();
  /**
   *
   *
   * <pre>
   * (Optional) A sequence of expressions for positional parameters in the SQL query text.
   * It cannot coexist with `named_arguments`.
   * </pre>
   *
   * <code>repeated .spark.connect.Expression pos_arguments = 5;</code>
   */
  org.apache.kyuubi.engine.spark.connect.grpc.proto.ExpressionOrBuilder getPosArgumentsOrBuilder(
      int index);
}
