// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyuubi/spark/connect/commands.proto

package org.apache.kyuubi.engine.spark.connect.grpc.proto;

/**
 *
 *
 * <pre>
 * A tuple that uniquely identifies an instance of streaming query run. It consists of `id` that
 * persists across the streaming runs and `run_id` that changes between each run of the
 * streaming query that resumes from the checkpoint.
 * </pre>
 *
 * Protobuf type {@code spark.connect.StreamingQueryInstanceId}
 */
public final class StreamingQueryInstanceId extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:spark.connect.StreamingQueryInstanceId)
    StreamingQueryInstanceIdOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use StreamingQueryInstanceId.newBuilder() to construct.
  private StreamingQueryInstanceId(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private StreamingQueryInstanceId() {
    id_ = "";
    runId_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new StreamingQueryInstanceId();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
        .internal_static_spark_connect_StreamingQueryInstanceId_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
        .internal_static_spark_connect_StreamingQueryInstanceId_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId.class,
            org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId.Builder
                .class);
  }

  public static final int ID_FIELD_NUMBER = 1;
  private volatile java.lang.Object id_;
  /**
   *
   *
   * <pre>
   * (Required) The unique id of this query that persists across restarts from checkpoint data.
   * That is, this id is generated when a query is started for the first time, and
   * will be the same every time it is restarted from checkpoint data.
   * </pre>
   *
   * <code>string id = 1;</code>
   *
   * @return The id.
   */
  @java.lang.Override
  public java.lang.String getId() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      id_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * (Required) The unique id of this query that persists across restarts from checkpoint data.
   * That is, this id is generated when a query is started for the first time, and
   * will be the same every time it is restarted from checkpoint data.
   * </pre>
   *
   * <code>string id = 1;</code>
   *
   * @return The bytes for id.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getIdBytes() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      id_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RUN_ID_FIELD_NUMBER = 2;
  private volatile java.lang.Object runId_;
  /**
   *
   *
   * <pre>
   * (Required) The unique id of this run of the query. That is, every start/restart of a query
   * will generate a unique run_id. Therefore, every time a query is restarted from
   * checkpoint, it will have the same `id` but different `run_id`s.
   * </pre>
   *
   * <code>string run_id = 2;</code>
   *
   * @return The runId.
   */
  @java.lang.Override
  public java.lang.String getRunId() {
    java.lang.Object ref = runId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      runId_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * (Required) The unique id of this run of the query. That is, every start/restart of a query
   * will generate a unique run_id. Therefore, every time a query is restarted from
   * checkpoint, it will have the same `id` but different `run_id`s.
   * </pre>
   *
   * <code>string run_id = 2;</code>
   *
   * @return The bytes for runId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getRunIdBytes() {
    java.lang.Object ref = runId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      runId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(runId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, runId_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(runId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, runId_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj
        instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId)) {
      return super.equals(obj);
    }
    org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId other =
        (org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId) obj;

    if (!getId().equals(other.getId())) return false;
    if (!getRunId().equals(other.getRunId())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId().hashCode();
    hash = (37 * hash) + RUN_ID_FIELD_NUMBER;
    hash = (53 * hash) + getRunId().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseFrom(java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseFrom(
          java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseFrom(com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseDelimitedFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * A tuple that uniquely identifies an instance of streaming query run. It consists of `id` that
   * persists across the streaming runs and `run_id` that changes between each run of the
   * streaming query that resumes from the checkpoint.
   * </pre>
   *
   * Protobuf type {@code spark.connect.StreamingQueryInstanceId}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:spark.connect.StreamingQueryInstanceId)
      org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceIdOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
          .internal_static_spark_connect_StreamingQueryInstanceId_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
          .internal_static_spark_connect_StreamingQueryInstanceId_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId.class,
              org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId.Builder
                  .class);
    }

    // Construct using
    // org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      id_ = "";

      runId_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.Commands
          .internal_static_spark_connect_StreamingQueryInstanceId_descriptor;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
        getDefaultInstanceForType() {
      return org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
          .getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId build() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId result =
          buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
        buildPartial() {
      org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId result =
          new org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId(this);
      result.id_ = id_;
      result.runId_ = runId_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other
          instanceof org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId) {
        return mergeFrom(
            (org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(
        org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId other) {
      if (other
          == org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
              .getDefaultInstance()) return this;
      if (!other.getId().isEmpty()) {
        id_ = other.id_;
        onChanged();
      }
      if (!other.getRunId().isEmpty()) {
        runId_ = other.runId_;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                id_ = input.readStringRequireUtf8();

                break;
              } // case 10
            case 18:
              {
                runId_ = input.readStringRequireUtf8();

                break;
              } // case 18
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private java.lang.Object id_ = "";
    /**
     *
     *
     * <pre>
     * (Required) The unique id of this query that persists across restarts from checkpoint data.
     * That is, this id is generated when a query is started for the first time, and
     * will be the same every time it is restarted from checkpoint data.
     * </pre>
     *
     * <code>string id = 1;</code>
     *
     * @return The id.
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) The unique id of this query that persists across restarts from checkpoint data.
     * That is, this id is generated when a query is started for the first time, and
     * will be the same every time it is restarted from checkpoint data.
     * </pre>
     *
     * <code>string id = 1;</code>
     *
     * @return The bytes for id.
     */
    public com.google.protobuf.ByteString getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) The unique id of this query that persists across restarts from checkpoint data.
     * That is, this id is generated when a query is started for the first time, and
     * will be the same every time it is restarted from checkpoint data.
     * </pre>
     *
     * <code>string id = 1;</code>
     *
     * @param value The id to set.
     * @return This builder for chaining.
     */
    public Builder setId(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      id_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The unique id of this query that persists across restarts from checkpoint data.
     * That is, this id is generated when a query is started for the first time, and
     * will be the same every time it is restarted from checkpoint data.
     * </pre>
     *
     * <code>string id = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearId() {

      id_ = getDefaultInstance().getId();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The unique id of this query that persists across restarts from checkpoint data.
     * That is, this id is generated when a query is started for the first time, and
     * will be the same every time it is restarted from checkpoint data.
     * </pre>
     *
     * <code>string id = 1;</code>
     *
     * @param value The bytes for id to set.
     * @return This builder for chaining.
     */
    public Builder setIdBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      id_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object runId_ = "";
    /**
     *
     *
     * <pre>
     * (Required) The unique id of this run of the query. That is, every start/restart of a query
     * will generate a unique run_id. Therefore, every time a query is restarted from
     * checkpoint, it will have the same `id` but different `run_id`s.
     * </pre>
     *
     * <code>string run_id = 2;</code>
     *
     * @return The runId.
     */
    public java.lang.String getRunId() {
      java.lang.Object ref = runId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        runId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) The unique id of this run of the query. That is, every start/restart of a query
     * will generate a unique run_id. Therefore, every time a query is restarted from
     * checkpoint, it will have the same `id` but different `run_id`s.
     * </pre>
     *
     * <code>string run_id = 2;</code>
     *
     * @return The bytes for runId.
     */
    public com.google.protobuf.ByteString getRunIdBytes() {
      java.lang.Object ref = runId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        runId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * (Required) The unique id of this run of the query. That is, every start/restart of a query
     * will generate a unique run_id. Therefore, every time a query is restarted from
     * checkpoint, it will have the same `id` but different `run_id`s.
     * </pre>
     *
     * <code>string run_id = 2;</code>
     *
     * @param value The runId to set.
     * @return This builder for chaining.
     */
    public Builder setRunId(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      runId_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The unique id of this run of the query. That is, every start/restart of a query
     * will generate a unique run_id. Therefore, every time a query is restarted from
     * checkpoint, it will have the same `id` but different `run_id`s.
     * </pre>
     *
     * <code>string run_id = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearRunId() {

      runId_ = getDefaultInstance().getRunId();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * (Required) The unique id of this run of the query. That is, every start/restart of a query
     * will generate a unique run_id. Therefore, every time a query is restarted from
     * checkpoint, it will have the same `id` but different `run_id`s.
     * </pre>
     *
     * <code>string run_id = 2;</code>
     *
     * @param value The bytes for runId to set.
     * @return This builder for chaining.
     */
    public Builder setRunIdBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      runId_ = value;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:spark.connect.StreamingQueryInstanceId)
  }

  // @@protoc_insertion_point(class_scope:spark.connect.StreamingQueryInstanceId)
  private static final org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE =
        new org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId();
  }

  public static org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StreamingQueryInstanceId> PARSER =
      new com.google.protobuf.AbstractParser<StreamingQueryInstanceId>() {
        @java.lang.Override
        public StreamingQueryInstanceId parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<StreamingQueryInstanceId> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StreamingQueryInstanceId> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.kyuubi.engine.spark.connect.grpc.proto.StreamingQueryInstanceId
      getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
